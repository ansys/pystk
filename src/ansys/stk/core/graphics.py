################################################################################
#          Copyright 2020-2020, Analytical Graphics, Inc.
################################################################################ 

__all__ = []

import typing

from ctypes   import byref, POINTER
from datetime import datetime
from enum     import IntEnum, IntFlag

try:
    from numpy import ndarray
except ModuleNotFoundError:
    pass
    
try:
    from pandas import DataFrame
except ModuleNotFoundError:
    pass

import agi.stk12.internal.comutil          as agcom
import agi.stk12.internal.coclassutil      as agcls
import agi.stk12.internal.marshall         as agmarshall
import agi.stk12.internal.dataanalysisutil as agdata
import agi.stk12.utilities.colors          as agcolor
from   agi.stk12.internal.comutil     import IUnknown, IDispatch, IPictureDisp, IAGFUNCTYPE, IEnumVARIANT
from   agi.stk12.internal.eventutil   import *
from   agi.stk12.utilities.exceptions import *


from agi.stk12.stkutil import *
from agi.stk12.vgt import *


def _raise_uninitialized_error(*args):
    raise STKRuntimeError("Valid STK object model classes are returned from STK methods and should not be created independently.")

class AgEStkGraphicsCylinderFill(IntFlag):
    """Cylinder faces that can be filled."""
    # Fill the cylinder's wall.
    eStkGraphicsCylinderFillWall = 1,
    # Fill the cylinder's bottom cap.
    eStkGraphicsCylinderFillBottomCap = 2,
    # Fill the cylinder's top cap.
    eStkGraphicsCylinderFillTopCap = 4,
    # Completely fill the cylinder, including its wall, bottom, and top cap.
    eStkGraphicsCylinderFillAll = 7

agcls.AgTypeNameMap["AgEStkGraphicsCylinderFill"] = AgEStkGraphicsCylinderFill
__all__.append("AgEStkGraphicsCylinderFill")

class AgEStkGraphicsWindingOrder(IntEnum):
    """Specifies the order for positions or front facing triangles. Winding order is important for triangulation and backface culling."""
    # Positions or triangles are defined in counter-clockwise order.
    eStkGraphicsWindingOrderCounterClockwise = 0,
    # Positions or triangles are defined in clockwise order.
    eStkGraphicsWindingOrderClockwise = 1,
    # The winding order is unknown and should be computed. For best performance, only use this value if you do not know the actual winding order.
    eStkGraphicsWindingOrderCompute = 2

agcls.AgTypeNameMap["AgEStkGraphicsWindingOrder"] = AgEStkGraphicsWindingOrder
__all__.append("AgEStkGraphicsWindingOrder")

class AgEStkGraphicsCameraSnapshotFileFormat(IntEnum):
    """When using camera snapshot or camera video recording to save a snapshot to a file, this specifies the file format."""
    # BMP file format
    eStkGraphicsCameraSnapshotFileFormatBmp = 0,
    # TIFF file format
    eStkGraphicsCameraSnapshotFileFormatTiff = 2,
    # JPEG file format
    eStkGraphicsCameraSnapshotFileFormatJpeg = 3,
    # PNG file format
    eStkGraphicsCameraSnapshotFileFormatPng = 4

agcls.AgTypeNameMap["AgEStkGraphicsCameraSnapshotFileFormat"] = AgEStkGraphicsCameraSnapshotFileFormat
__all__.append("AgEStkGraphicsCameraSnapshotFileFormat")

class AgEStkGraphicsCameraVideoFormat(IntEnum):
    """When using camera video recording to record a video, this specifies the file format."""
    # H.264 file format
    eStkGraphicsCameraVideoFormatH264 = 0,
    # Windows Media Video (WMV) file format
    eStkGraphicsCameraVideoFormatWMV = 1

agcls.AgTypeNameMap["AgEStkGraphicsCameraVideoFormat"] = AgEStkGraphicsCameraVideoFormat
__all__.append("AgEStkGraphicsCameraVideoFormat")

class AgEStkGraphicsConstrainedUpAxis(IntEnum):
    """When setting the camera'saxes, this defines which axis of the axes is up in screen space, where up is from the bottom to the top of the screen."""
    # The X axis is constrained.
    eStkGraphicsConstrainedUpAxisX = 0,
    # The Y axis is constrained.
    eStkGraphicsConstrainedUpAxisY = 1,
    # The Z axis is constrained.
    eStkGraphicsConstrainedUpAxisZ = 2,
    # The negative X axis is constrained.
    eStkGraphicsConstrainedUpAxisNegativeX = 3,
    # The negative Y axis is constrained.
    eStkGraphicsConstrainedUpAxisNegativeY = 4,
    # The negative Z axis is constrained.
    eStkGraphicsConstrainedUpAxisNegativeZ = 5,
    # No axis is contained.
    eStkGraphicsConstrainedUpAxisNone = 6

agcls.AgTypeNameMap["AgEStkGraphicsConstrainedUpAxis"] = AgEStkGraphicsConstrainedUpAxis
__all__.append("AgEStkGraphicsConstrainedUpAxis")

class AgEStkGraphicsGlobeOverlayRole(IntEnum):
    """The role of a globe overlay."""
    # The globe overlay is a base image.
    eStkGraphicsGlobeOverlayRoleBase = 0,
    # The globe overlay is a base image that is only displayed on the area of the central body that is not lit by the sun.
    eStkGraphicsGlobeOverlayRoleNight = 1,
    # The globe overlay is a base image that shows the glint of the sun on the central body.
    eStkGraphicsGlobeOverlayRoleSpecular = 2,
    # The globe overlay is a normal overlay without a special role.
    eStkGraphicsGlobeOverlayRoleNormal = 4,
    # The role of the globe overlay isn't set.
    eStkGraphicsGlobeOverlayRoleNone = 5

agcls.AgTypeNameMap["AgEStkGraphicsGlobeOverlayRole"] = AgEStkGraphicsGlobeOverlayRole
__all__.append("AgEStkGraphicsGlobeOverlayRole")

class AgEStkGraphicsIndicesOrderHint(IntEnum):
    """An optimization hint optionally provided to a primitive'sSetPartial method to enhance performance."""
    # The indices passed to SetPartial are not sorted. Therefore, the primitive may sort them to improve performance of writing its geometry to video memory.
    eStkGraphicsIndicesOrderHintNotSorted = 0,
    # The indices passed to SetPartial are sorted in ascending order. Therefore, the primitive does not need to sort them. It is recommended to only use SortedAscending if it is easy and efficient for you to provide the indices in ascending order...
    eStkGraphicsIndicesOrderHintSortedAscending = 1

agcls.AgTypeNameMap["AgEStkGraphicsIndicesOrderHint"] = AgEStkGraphicsIndicesOrderHint
__all__.append("AgEStkGraphicsIndicesOrderHint")

class AgEStkGraphicsMaintainAspectRatio(IntEnum):
    """Specifies whether the aspect ratio of a texture will be maintained during sizing of a screen overlay."""
    # The aspect ratio of the texture is not maintained during sizing of the screen overlay.
    eStkGraphicsMaintainAspectRatioNone = 0,
    # The aspect ratio of the texture is maintained based on the width property of the screen overlay. When used, the height property is ignored and the height is automatically calculated based on the aspect ratio of the texture and the overlay's width property.
    eStkGraphicsMaintainAspectRatioWidth = 1,
    # The aspect ratio of the texture is maintained based on the height property of the screen overlay. When used, the width property is ignored and the width is automatically calculated based on the aspect ratio of the texture and the overlay's height property.
    eStkGraphicsMaintainAspectRatioHeight = 2

agcls.AgTypeNameMap["AgEStkGraphicsMaintainAspectRatio"] = AgEStkGraphicsMaintainAspectRatio
__all__.append("AgEStkGraphicsMaintainAspectRatio")

class AgEStkGraphicsMapProjection(IntEnum):
    """The projection of the pixel data returned from a custom image globe overlay."""
    # Mercator projection
    eStkGraphicsMapProjectionMercator = 0,
    # Equidistant Cylindrical projection
    eStkGraphicsMapProjectionEquidistantCylindrical = 1

agcls.AgTypeNameMap["AgEStkGraphicsMapProjection"] = AgEStkGraphicsMapProjection
__all__.append("AgEStkGraphicsMapProjection")

class AgEStkGraphicsMarkerBatchRenderingMethod(IntEnum):
    """Rendering methods available for use by the marker batch primitive. Different methods may have different performance characteristics and require different video card support. When in doubt, use Automatic."""
    # Render the marker batch using a geometry shader. Requires <a href='http://www.opengl.org/'>OpenGL</a> 3.0 or 2.0 with the <a href='http://www.opengl.org/registry/specs/ARB/geometry_shader4.txt'>ARB_geometry_shader4</a> extension.
    eStkGraphicsMarkerBatchRenderingMethodGeometryShader = 0,
    # Render the marker batch using a vertex shader. Requires OpenGL 2.0 or 1.5 with the following <a href='http://www.opengl.org/registry/'>extensions</a>: <ul><li><a href='http://www.opengl.org/registry/specs/ARB/vertex_shader...
    eStkGraphicsMarkerBatchRenderingMethodVertexShader = 1,
    # Render the marker batch using an automatically selected method based on the capabilities of the video card.
    eStkGraphicsMarkerBatchRenderingMethodAutomatic = 2,
    # Render the marker batch using the fixed function pipeline. Generally, this is the slowest method but it supports all video cards.
    eStkGraphicsMarkerBatchRenderingMethodFixedFunction = 3

agcls.AgTypeNameMap["AgEStkGraphicsMarkerBatchRenderingMethod"] = AgEStkGraphicsMarkerBatchRenderingMethod
__all__.append("AgEStkGraphicsMarkerBatchRenderingMethod")

class AgEStkGraphicsMarkerBatchRenderPass(IntEnum):
    """The pass during which the marker batch is rendered."""
    # The marker batch contains all opaque textures and therefore should be rendered using the opaque pass.
    eStkGraphicsMarkerBatchRenderPassOpaque = 0,
    # The marker batch contains textures with translucency and therefore should be rendered using the translucent pass. For correct blending of overlapping textures, also consider using back to front.
    eStkGraphicsMarkerBatchRenderPassTranslucent = 1,
    # The marker batch render pass should be determined based on the marker batch's translucency. This includes the translucency set per marker when SetColors is used.
    eStkGraphicsMarkerBatchRenderPassBasedOnTranslucency = 2

agcls.AgTypeNameMap["AgEStkGraphicsMarkerBatchRenderPass"] = AgEStkGraphicsMarkerBatchRenderPass
__all__.append("AgEStkGraphicsMarkerBatchRenderPass")

class AgEStkGraphicsMarkerBatchSizeSource(IntEnum):
    """Determines which marker batch property is used to size each marker in a marker batch."""
    # The size of each marker is the same as the size of its texture. If the marker is not textured, the user defined size is used instead.
    eStkGraphicsMarkerBatchSizeSourceFromTexture = 0,
    # The size of each marker in the marker batch is user defined. Either all markers have the same size (size) or each marker has a user defined size (SetSizes).
    eStkGraphicsMarkerBatchSizeSourceUserDefined = 1

agcls.AgTypeNameMap["AgEStkGraphicsMarkerBatchSizeSource"] = AgEStkGraphicsMarkerBatchSizeSource
__all__.append("AgEStkGraphicsMarkerBatchSizeSource")

class AgEStkGraphicsMarkerBatchSortOrder(IntEnum):
    """The order in which markers in a marker batch are sorted before rendering."""
    # The markers are sorted in back to front order before rendering. For overlapping translucent markers, this enables correct blending results...
    eStkGraphicsMarkerBatchSortOrderBackToFront = 0,
    # The markers are sorted in front to back order before rendering. For overlapping opaque markers, this can enable the GPU to quickly eliminate markers that are hidden behind other markers...
    eStkGraphicsMarkerBatchSortOrderFrontToBack = 1,
    # The markers are sorted by texture. This minimizes costly texture changes during rendering and does not require resorting when the camera moves or a marker changes position.
    eStkGraphicsMarkerBatchSortOrderByTexture = 2

agcls.AgTypeNameMap["AgEStkGraphicsMarkerBatchSortOrder"] = AgEStkGraphicsMarkerBatchSortOrder
__all__.append("AgEStkGraphicsMarkerBatchSortOrder")

class AgEStkGraphicsMarkerBatchUnit(IntEnum):
    """The unit for marker sizes in a marker batch."""
    # The size of a marker is defined in pixels. As the camera zooms in and out the size of the marker doesn't change.
    eStkGraphicsMarkerBatchUnitPixels = 0,
    # The size of a marker is defined in meters.
    eStkGraphicsMarkerBatchUnitMeters = 1

agcls.AgTypeNameMap["AgEStkGraphicsMarkerBatchUnit"] = AgEStkGraphicsMarkerBatchUnit
__all__.append("AgEStkGraphicsMarkerBatchUnit")

class AgEStkGraphicsModelTransformationType(IntEnum):
    """Transformation types that define the way a model transformation changes the geometry of the model articulation it is associated with."""
    # Translates the geometry along the X axis.
    eStkGraphicsModelTransformationTypeTranslateX = 0,
    # Translates the geometry along the Y axis.
    eStkGraphicsModelTransformationTypeTranslateY = 1,
    # Translates the geometry along the Z axis.
    eStkGraphicsModelTransformationTypeTranslateZ = 2,
    # Rotates the geometry about the X axis.
    eStkGraphicsModelTransformationTypeRotateX = 3,
    # Rotates the geometry about the Y axis.
    eStkGraphicsModelTransformationTypeRotateY = 4,
    # Rotates the geometry about the Z axis.
    eStkGraphicsModelTransformationTypeRotateZ = 5,
    # Scales the geometry along the X axis.
    eStkGraphicsModelTransformationTypeScaleX = 6,
    # Scales the geometry along the Y axis.
    eStkGraphicsModelTransformationTypeScaleY = 7,
    # Scales the geometry along the Z axis.
    eStkGraphicsModelTransformationTypeScaleZ = 8,
    # Scales the geometry uniformly along the X, Y, and Z axes.
    eStkGraphicsModelTransformationTypeScaleUniform = 9,
    # Translates the texture associated with the geometry along the X axis.
    eStkGraphicsModelTransformationTypeTextureTranslateX = 10,
    # Translates the texture associated with the geometry along the Y axis.
    eStkGraphicsModelTransformationTypeTextureTranslateY = 11,
    # Translates the texture associated with the geometry along the Z axis.
    eStkGraphicsModelTransformationTypeTextureTranslateZ = 12,
    # Rotates the texture associated with the geometry about the X axis.
    eStkGraphicsModelTransformationTypeTextureRotateX = 13,
    # Rotates the texture associated with the geometry about the Y axis.
    eStkGraphicsModelTransformationTypeTextureRotateY = 14,
    # Rotates the texture associated with the geometry about the Z axis.
    eStkGraphicsModelTransformationTypeTextureRotateZ = 15,
    # Scales the texture associated with the geometry along the X axis.
    eStkGraphicsModelTransformationTypeTextureScaleX = 16,
    # Scales the texture associated with the geometry along the Y axis.
    eStkGraphicsModelTransformationTypeTextureScaleY = 17,
    # Scales the texture associated with the geometry along the Z axis.
    eStkGraphicsModelTransformationTypeTextureScaleZ = 18,
    # Scales the texture associated with the geometry uniformly along the X, Y, and Z axes.
    eStkGraphicsModelTransformationTypeTextureScaleUniform = 19,
    # Translates the red band of color associated with the geometry.
    eStkGraphicsModelTransformationTypeTranslateRed = 20,
    # Translates the green band of color associated with the geometry.
    eStkGraphicsModelTransformationTypeTranslateGreen = 21,
    # Translates the blue band of color associated with the geometry.
    eStkGraphicsModelTransformationTypeTranslateBlue = 22

agcls.AgTypeNameMap["AgEStkGraphicsModelTransformationType"] = AgEStkGraphicsModelTransformationType
__all__.append("AgEStkGraphicsModelTransformationType")

class AgEStkGraphicsOrigin(IntEnum):
    """Vertical and horizontal origin."""
    # The object's origin is its bottom, left corner.
    eStkGraphicsOriginBottomLeft = 0,
    # The object's origin is its bottom, center point.
    eStkGraphicsOriginBottomCenter = 1,
    # The object's origin is its bottom, right corner.
    eStkGraphicsOriginBottomRight = 2,
    # The object's origin is its center, left point.
    eStkGraphicsOriginCenterLeft = 3,
    # The object's origin is its center.
    eStkGraphicsOriginCenter = 4,
    # The object's origin is its center, right point.
    eStkGraphicsOriginCenterRight = 5,
    # The object's origin is its top, left corner.
    eStkGraphicsOriginTopLeft = 6,
    # The object's origin is its top, center point.
    eStkGraphicsOriginTopCenter = 7,
    # The object's origin is its top, right corner.
    eStkGraphicsOriginTopRight = 8

agcls.AgTypeNameMap["AgEStkGraphicsOrigin"] = AgEStkGraphicsOrigin
__all__.append("AgEStkGraphicsOrigin")

class AgEStkGraphicsPathPrimitiveRemoveLocation(IntEnum):
    """Represents the location of a point to be removed."""
    # Remove from the front of the line.
    eStkGraphicsRemoveLocationFront = 0,
    # Remove from the back of the line.
    eStkGraphicsRemoveLocationBack = 1

agcls.AgTypeNameMap["AgEStkGraphicsPathPrimitiveRemoveLocation"] = AgEStkGraphicsPathPrimitiveRemoveLocation
__all__.append("AgEStkGraphicsPathPrimitiveRemoveLocation")

class AgEStkGraphicsPrimitivesSortOrder(IntEnum):
    """The order in which primitives are sorted before rendering."""
    # Primitives are sorted by their internal state before rendering. This provides good performance but can lead to blending artifacts with translucent primitives along the same line of sight.
    eStkGraphicsPrimitivesSortOrderByState = 0,
    # Primitives are sorted in back to front order before rendering. For translucent primitives, this enables correct blending results. This may not perform as well as PrimitivesSortOrderByState since the CPU has to sort the primitives before rendering.
    eStkGraphicsPrimitivesSortOrderBackToFront = 1

agcls.AgTypeNameMap["AgEStkGraphicsPrimitivesSortOrder"] = AgEStkGraphicsPrimitivesSortOrder
__all__.append("AgEStkGraphicsPrimitivesSortOrder")

class AgEStkGraphicsRefreshRate(IntEnum):
    """The rate at which animation frames will occur."""
    # The animation will occur as fast as possible. The maximum frame rate is the refresh rate of the display or is the maximum that video card is capable of if the video card's vertical sync is off.
    eStkGraphicsRefreshRateFastest = 0,
    # The animation will target a specified frame rate.
    eStkGraphicsRefreshRateTargetedFramesPerSecond = 1

agcls.AgTypeNameMap["AgEStkGraphicsRefreshRate"] = AgEStkGraphicsRefreshRate
__all__.append("AgEStkGraphicsRefreshRate")

class AgEStkGraphicsRenderPass(IntFlag):
    """Describes when a primitive will be rendered. Some primitives need to be rendered during or at a certain time. For example, translucent primitives need to be rendered after opaque primitives to allow proper blending..."""
    # Render during the opaque rendering pass.
    eStkGraphicsRenderPassOpaque = 1,
    # Render during the translucent rendering pass.
    eStkGraphicsRenderPassTranslucent = 2,
    # Render before the central body is rendered.
    eStkGraphicsRenderPassCentralBodyClipped = 4,
    # Rendered in an ordered composite before all other primitives and before the central body is rendered.
    eStkGraphicsRenderPassOrderedCompositeCentralBodyClipped = 8,
    # Rendered in an ordered composite before all primitives but after the central body is rendered.
    eStkGraphicsRenderPassOrderedComposite = 16,
    # Render after the terrain is rendered.
    eStkGraphicsRenderPassTerrain = 32

agcls.AgTypeNameMap["AgEStkGraphicsRenderPass"] = AgEStkGraphicsRenderPass
__all__.append("AgEStkGraphicsRenderPass")

class AgEStkGraphicsRenderPassHint(IntEnum):
    """An optimization hint optionally provided to a primitive'sSet method to enhance performance when per-position colors are used."""
    # The collection of colors contains only opaque colors. This implies that each color's alpha component is 255.
    eStkGraphicsRenderPassHintOpaque = 0,
    # The collection of colors contains translucent colors. This implies that at least one color has an alpha component that is not 255.
    eStkGraphicsRenderPassHintTranslucent = 1,
    # It is unknown if the collection of colors contains opaque or translucent colors.
    eStkGraphicsRenderPassHintUnknown = 2

agcls.AgTypeNameMap["AgEStkGraphicsRenderPassHint"] = AgEStkGraphicsRenderPassHint
__all__.append("AgEStkGraphicsRenderPassHint")

class AgEStkGraphicsScreenOverlayOrigin(IntEnum):
    """Specifies the origin of a screen overlay, as well as the direction of the horizontal and vertical axes. The origin specifies both the origin in the parent overlay's coordinate system and the origin within the overlay itself that is positioned."""
    # When the X and Y position are both set to 0, this value places the bottom, left corner of the overlay in its parent's bottom, left corner. Increasing X values move the overlay to the right and increasing Y values move it up.
    eStkGraphicsScreenOverlayOriginBottomLeft = 0,
    # When the X and Y position are both set to 0, this value places the bottom edge of the overlay at its parent's bottom edge and the center of the overlay is horizontally centered within its parent...
    eStkGraphicsScreenOverlayOriginBottomCenter = 1,
    # When the X and Y position are both set to 0, this value places the bottom, right corner of the overlay in its parent's bottom, right corner. Increasing X values move the overlay to the left and increasing Y values move it up.
    eStkGraphicsScreenOverlayOriginBottomRight = 2,
    # When the X and Y position are both set to 0, this value places the left edge of the overlay at its parent's left edge and the center of the overlay is vertically centered within its parent...
    eStkGraphicsScreenOverlayOriginCenterLeft = 3,
    # When the X and Y position are both set to 0, this value places the center of the overlay at its parent's center. Increasing X values move the overlay to the right and increasing Y values move it up.
    eStkGraphicsScreenOverlayOriginCenter = 4,
    # When the X and Y position are both set to 0, this value places the right edge of the overlay at its parent's right edge and the center of the overlay is vertically centered within its parent...
    eStkGraphicsScreenOverlayOriginCenterRight = 5,
    # When the X and Y position are both set to 0, this value places the top, left corner of the overlay in its parent's top, left corner. Increasing X values move the overlay to the right and increasing Y values move it down.
    eStkGraphicsScreenOverlayOriginTopLeft = 6,
    # When the X and Y position are both set to 0, this value places the top edge of the overlay at its parent's top edge and the center of the overlay is horizontally centered within its parent...
    eStkGraphicsScreenOverlayOriginTopCenter = 7,
    # When the X and Y position are both set to 0, this value places the top, right corner of the overlay in its parent's top, right corner. Increasing X values move the overlay to the left and increasing Y values move it down.
    eStkGraphicsScreenOverlayOriginTopRight = 8

agcls.AgTypeNameMap["AgEStkGraphicsScreenOverlayOrigin"] = AgEStkGraphicsScreenOverlayOrigin
__all__.append("AgEStkGraphicsScreenOverlayOrigin")

class AgEStkGraphicsScreenOverlayPinningOrigin(IntEnum):
    """Specifies the origin of the pinning position of the screen overlay, as well as the direction of the horizontal and vertical axes for that pinning position. The pinning origin specifies the origin of the pinning position in the overlay's coordinate system."""
    # When the X and Y pinning position are both set to 0, this value places the pinning position in the overlay's bottom, left corner. Increasing X values move the pinning position to the right and increasing Y values move it up.
    eStkGraphicsScreenOverlayPinningOriginBottomLeft = 0,
    # When the X and Y pinning position are both set to 0, this value places the pinning position at its overlay's bottom edge and the pinning position is horizontally centered within its overlay...
    eStkGraphicsScreenOverlayPinningOriginBottomCenter = 1,
    # When the X and Y pinning position are both set to 0, this value places the pinning position in its overlay's bottom, right corner. Increasing X values move the pinning position to the left and increasing Y values move it up.
    eStkGraphicsScreenOverlayPinningOriginBottomRight = 2,
    # When the X and Y pinning position are both set to 0, this value places the pinning position at its overlay's left edge and the pinning position is vertically centered within its overlay...
    eStkGraphicsScreenOverlayPinningOriginCenterLeft = 3,
    # When the X and Y pinning position are both set to 0, this value places the pinning position at its overlay's center. Increasing X values move the pinning position to the right and increasing Y values move it up.
    eStkGraphicsScreenOverlayPinningOriginCenter = 4,
    # When the X and Y pinning pinning position are both set to 0, this value places the pinning position at its overlay's right edge and the pinning position is vertically centered within its overlay...
    eStkGraphicsScreenOverlayPinningOriginCenterRight = 5,
    # When the X and Y pinning position are both set to 0, this value places the pinning position in its overlay's top, left corner. Increasing X values move the pinning position to the right and increasing Y values move it down.
    eStkGraphicsScreenOverlayPinningOriginTopLeft = 6,
    # When the X and Y pinning position are both set to 0, this value places the pinning position at its overlays's top edge and the pinning position is horizontally centered within its overlay...
    eStkGraphicsScreenOverlayPinningOriginTopCenter = 7,
    # When the X and Y pinning position are both set to 0, this value places the pinning position in its overlay's top, right corner. Increasing X values move the pinning position to the left and increasing Y values move it down.
    eStkGraphicsScreenOverlayPinningOriginTopRight = 8,
    # The pinning origin is automatically set to the origin of the overlay. For instance, if the origin of the overlay is ScreenOverlayOrigin.BottomLeft, the pinning origin will also be equivalent to ScreenOverlayPinningOrigin.BottomLeft.
    eStkGraphicsScreenOverlayPinningOriginAutomatic = 9

agcls.AgTypeNameMap["AgEStkGraphicsScreenOverlayPinningOrigin"] = AgEStkGraphicsScreenOverlayPinningOrigin
__all__.append("AgEStkGraphicsScreenOverlayPinningOrigin")

class AgEStkGraphicsScreenOverlayUnit(IntEnum):
    """A unit specifying how a screen overlay is sized and positioned relative to its parent."""
    # The value is specified in pixels.
    eStkGraphicsScreenOverlayUnitPixels = 0,
    # The value is specified as a fraction of the overlay's parent, where 0.0 is 0% and 1.0 is 100%.
    eStkGraphicsScreenOverlayUnitFraction = 1

agcls.AgTypeNameMap["AgEStkGraphicsScreenOverlayUnit"] = AgEStkGraphicsScreenOverlayUnit
__all__.append("AgEStkGraphicsScreenOverlayUnit")

class AgEStkGraphicsSurfaceMeshRenderingMethod(IntEnum):
    """Rendering methods available for use by the surface mesh primitive. Different methods may have different performance characteristics and require different video card support. When in doubt, use Automatic."""
    # Render the surface mesh using a geometry shader. Requires <a href='http://www.opengl.org/'>OpenGL</a> 3.0 or 2.0 with the <a href='http://www.opengl.org/registry/specs/ARB/geometry_shader4.txt'>ARB_geometry_shader4</a> extension.
    eStkGraphicsSurfaceMeshRenderingMethodGeometryShader = 0,
    # Render the surface mesh using a vertex shader. Requires OpenGL 2.0 or 1.5 with the following <a href='http://www.opengl.org/registry/'>extensions</a>: <ul><li><a href='http://www.opengl.org/registry/specs/ARB/vertex_shader...
    eStkGraphicsSurfaceMeshRenderingMethodVertexShader = 1,
    # Render the surface mesh using an automatically selected method based on the capabilities of the video card.
    eStkGraphicsSurfaceMeshRenderingMethodAutomatic = 2

agcls.AgTypeNameMap["AgEStkGraphicsSurfaceMeshRenderingMethod"] = AgEStkGraphicsSurfaceMeshRenderingMethod
__all__.append("AgEStkGraphicsSurfaceMeshRenderingMethod")

class AgEStkGraphicsVisibility(IntEnum):
    """Result of a visibility test, such as testing if a sphere intersects a frustum."""
    # The object is not visible.
    eStkGraphicsVisibilityNone = 0,
    # The object is partially visible.
    eStkGraphicsVisibilityPartial = 1,
    # The object is completely visible.
    eStkGraphicsVisibilityAll = 2

agcls.AgTypeNameMap["AgEStkGraphicsVisibility"] = AgEStkGraphicsVisibility
__all__.append("AgEStkGraphicsVisibility")

class AgEStkGraphicsAntiAliasing(IntEnum):
    """The multisample anti-aliasing (MSAA) options for Scenes. As the level of anti-aliasing increases, performance will generally decrease, but the quality of the anti-aliasing will improve."""
    # No anti-aliasing
    eStkGraphicsAntiAliasingOff = 0,
    # Fast Approximate Anti aliasing
    eStkGraphicsAntiAliasingFXAA = 1,
    # Anti-aliasing at 2x
    eStkGraphicsAntiAliasingTwoX = 2,
    # Anti-aliasing at 4x
    eStkGraphicsAntiAliasingFourX = 4,
    # Anti-aliasing at 8x
    eStkGraphicsAntiAliasingEightX = 8,
    # Anti-aliasing at 16x
    eStkGraphicsAntiAliasingSixteenX = 16,
    # Anti-aliasing at 32x
    eStkGraphicsAntiAliasingThirtyTwoX = 32,
    # Anti-aliasing at 64x
    eStkGraphicsAntiAliasingSixtyFourX = 64

agcls.AgTypeNameMap["AgEStkGraphicsAntiAliasing"] = AgEStkGraphicsAntiAliasing
__all__.append("AgEStkGraphicsAntiAliasing")

class AgEStkGraphicsBinaryLogicOperation(IntEnum):
    """Binary logic operations that can be used by composite display condition."""
    # Logically and together display conditions in the composite.
    eStkGraphicsBinaryLogicOperationAnd = 0,
    # Logically or together display conditions in the composite.
    eStkGraphicsBinaryLogicOperationOr = 1

agcls.AgTypeNameMap["AgEStkGraphicsBinaryLogicOperation"] = AgEStkGraphicsBinaryLogicOperation
__all__.append("AgEStkGraphicsBinaryLogicOperation")

class AgEStkGraphicsBlurMethod(IntEnum):
    """The method used to blur or smooth a raster."""
    # Provides smoothing and noise reduction through mean filtering.
    eStkGraphicsBlurMethodMean = 0,
    # Provides basic blurring.
    eStkGraphicsBlurMethodBasic = 1

agcls.AgTypeNameMap["AgEStkGraphicsBlurMethod"] = AgEStkGraphicsBlurMethod
__all__.append("AgEStkGraphicsBlurMethod")

class AgEStkGraphicsEdgeDetectMethod(IntEnum):
    """The method used to detect edges in a raster."""
    # Detects vertical edges.
    eStkGraphicsEdgeDetectMethodVertical = 0,
    # Detects horizontal edges.
    eStkGraphicsEdgeDetectMethodHorizontal = 1,
    # Detects left diagonal edges.
    eStkGraphicsEdgeDetectMethodLeftDiagonal = 2,
    # Detects right diagonal edges.
    eStkGraphicsEdgeDetectMethodRightDiagonal = 3,
    # Detects edges using the Laplacian method.
    eStkGraphicsEdgeDetectMethodLaplacian = 4,
    # Detects edges using the Prewitt-Laplacian method.
    eStkGraphicsEdgeDetectMethodPrewittLaplacian = 5,
    # Detects vertical edges using the Sobel method.
    eStkGraphicsEdgeDetectMethodSobelVertical = 6,
    # Detects horizontal edges using the Sobel method.
    eStkGraphicsEdgeDetectMethodSobelHorizontal = 7

agcls.AgTypeNameMap["AgEStkGraphicsEdgeDetectMethod"] = AgEStkGraphicsEdgeDetectMethod
__all__.append("AgEStkGraphicsEdgeDetectMethod")

class AgEStkGraphicsFlipAxis(IntEnum):
    """The axis on which a raster will be flipped."""
    # The horizontal axis.
    eStkGraphicsFlipAxisHorizontal = 0,
    # The vertical axis.
    eStkGraphicsFlipAxisVertical = 1

agcls.AgTypeNameMap["AgEStkGraphicsFlipAxis"] = AgEStkGraphicsFlipAxis
__all__.append("AgEStkGraphicsFlipAxis")

class AgEStkGraphicsGradientDetectMethod(IntEnum):
    """The method used to detect gradients in a raster. Gradient detection is commonly referred to as embossing."""
    # Detects east gradients.
    eStkGraphicsGradientDetectMethodEast = 0,
    # Detects north gradients.
    eStkGraphicsGradientDetectMethodNorth = 1,
    # Detects west gradients.
    eStkGraphicsGradientDetectMethodWest = 2,
    # Detects south gradients.
    eStkGraphicsGradientDetectMethodSouth = 3,
    # Detects north east gradients.
    eStkGraphicsGradientDetectMethodNorthEast = 4,
    # Detects north west gradients.
    eStkGraphicsGradientDetectMethodNorthWest = 5,
    # Detects south east gradients.
    eStkGraphicsGradientDetectMethodSouthEast = 6,
    # Detects south west gradients.
    eStkGraphicsGradientDetectMethodSouthWest = 7

agcls.AgTypeNameMap["AgEStkGraphicsGradientDetectMethod"] = AgEStkGraphicsGradientDetectMethod
__all__.append("AgEStkGraphicsGradientDetectMethod")

class AgEStkGraphicsJpeg2000CompressionProfile(IntEnum):
    """Defines the profile used when encoding a JPEG 2000 file."""
    # This is the default profile, which is recommended for those unfamiliar with the others.
    eStkGraphicsJpeg2000CompressionProfileDefault = 0,
    # This profile is designed for U.S. and NATO military applications.
    eStkGraphicsJpeg2000CompressionProfileNITF_BIIF_NPJE = 1,
    # This profile is designed for U.S. and NATO military applications. Based on NPJE, the profile is used for image exploitation, and improves image read times for lower resolutions in large images as compared to NPJE.
    eStkGraphicsJpeg2000CompressionProfileNITF_BIIF_EPJE = 2

agcls.AgTypeNameMap["AgEStkGraphicsJpeg2000CompressionProfile"] = AgEStkGraphicsJpeg2000CompressionProfile
__all__.append("AgEStkGraphicsJpeg2000CompressionProfile")

class AgEStkGraphicsRasterBand(IntEnum):
    """Common band types that may be contained within a raster dataset. Each band can be thought of as a set of values, which are most commonly associated with colors when the raster represents an image..."""
    # A band containing red values.
    eStkGraphicsRasterBandRed = 0,
    # A band containing green values.
    eStkGraphicsRasterBandGreen = 1,
    # A band containing blue values.
    eStkGraphicsRasterBandBlue = 2,
    # A band containing alpha values.
    eStkGraphicsRasterBandAlpha = 3,
    # A band containing luminance values.
    eStkGraphicsRasterBandLuminance = 4

agcls.AgTypeNameMap["AgEStkGraphicsRasterBand"] = AgEStkGraphicsRasterBand
__all__.append("AgEStkGraphicsRasterBand")

class AgEStkGraphicsRasterFormat(IntEnum):
    """Common raster band layouts that may be contained within a raster dataset. Each pixel of the raster will contain the bands defined by the layout in the specified order. A typical color raster image will have an rgbraster format."""
    # The format of the raster is a single band consisting of red values.
    eStkGraphicsRasterFormatRed = 0,
    # The format of the raster is a single band consisting of green values.
    eStkGraphicsRasterFormatGreen = 1,
    # The format of the raster is a single band consisting of blue values.
    eStkGraphicsRasterFormatBlue = 2,
    # The format of the raster is a single band consisting of alpha values.
    eStkGraphicsRasterFormatAlpha = 3,
    # The format of the raster is three bands consisting of red, green, and blue values.
    eStkGraphicsRasterFormatRgb = 4,
    # The format of the raster is three bands consisting of blue, green, and red values.
    eStkGraphicsRasterFormatBgr = 5,
    # The format of the raster is four bands consisting of red, green, blue, and alpha values.
    eStkGraphicsRasterFormatRgba = 6,
    # The format of the raster is four bands consisting of blue, green, red, and alpha values.
    eStkGraphicsRasterFormatBgra = 7,
    # The format of the raster is a single band consisting of luminance values.
    eStkGraphicsRasterFormatLuminance = 8,
    # The format of the raster is two bands consisting of luminance and alpha values.
    eStkGraphicsRasterFormatLuminanceAlpha = 9

agcls.AgTypeNameMap["AgEStkGraphicsRasterFormat"] = AgEStkGraphicsRasterFormat
__all__.append("AgEStkGraphicsRasterFormat")

class AgEStkGraphicsRasterOrientation(IntEnum):
    """The vertical orientation of the raster."""
    # The raster has a top to bottom orientation.
    eStkGraphicsRasterOrientationTopToBottom = 0,
    # The raster has a bottom to top orientation.
    eStkGraphicsRasterOrientationBottomToTop = 1

agcls.AgTypeNameMap["AgEStkGraphicsRasterOrientation"] = AgEStkGraphicsRasterOrientation
__all__.append("AgEStkGraphicsRasterOrientation")

class AgEStkGraphicsRasterType(IntEnum):
    """The type of data contained within each band of a raster dataset."""
    # Each value contained within a band can be represented with an unsigned byte.
    eStkGraphicsRasterTypeUnsignedByte = 0,
    # Each value contained within a band can be represented with a byte.
    eStkGraphicsRasterTypeByte = 1,
    # Each value contained within a band can be represented with an unsigned short.
    eStkGraphicsRasterTypeUnsignedShort = 2,
    # Each value contained within a band can be represented with a short.
    eStkGraphicsRasterTypeShort = 3,
    # Each value contained within a band can be represented with an unsigned int.
    eStkGraphicsRasterTypeUnsignedInt = 4,
    # Each value contained within a band can be represented with an int.
    eStkGraphicsRasterTypeInt = 5,
    # Each value contained within a band can be represented with a float.
    eStkGraphicsRasterTypeFloat = 6,
    # Each value contained within a band can be represented with a double.
    eStkGraphicsRasterTypeDouble = 7

agcls.AgTypeNameMap["AgEStkGraphicsRasterType"] = AgEStkGraphicsRasterType
__all__.append("AgEStkGraphicsRasterType")

class AgEStkGraphicsSharpenMethod(IntEnum):
    """The method used to sharpen a raster."""
    # Provides sharpening through mean removal.
    eStkGraphicsSharpenMethodMeanRemoval = 0,
    # Provides basic sharpening.
    eStkGraphicsSharpenMethodBasic = 1

agcls.AgTypeNameMap["AgEStkGraphicsSharpenMethod"] = AgEStkGraphicsSharpenMethod
__all__.append("AgEStkGraphicsSharpenMethod")

class AgEStkGraphicsVideoPlayback(IntEnum):
    """Specifies how the video stream will playback. When the playback is set to real time, the video will playback in real time..."""
    # The video will playback in realtime.
    eStkGraphicsVideoPlaybackRealTime = 0,
    # The video will playback in coincidence with the scene manager time within the interval defined by interval start time and interval end time.
    eStkGraphicsVideoPlaybackTimeInterval = 1

agcls.AgTypeNameMap["AgEStkGraphicsVideoPlayback"] = AgEStkGraphicsVideoPlayback
__all__.append("AgEStkGraphicsVideoPlayback")

class AgEStkGraphicsKmlNetworkLinkRefreshMode(IntEnum):
    """Defines the options available for a KmlNetworkLink's RefreshMode property."""
    # Refresh when the document is loaded and whenever the Link parameters change (the default).
    eStkGraphicsKmlNetworkLinkRefreshModeOnChange = 0,
    # Refresh the network link at the duration specified by refresh interval.
    eStkGraphicsKmlNetworkLinkRefreshModeOnInterval = 1,
    # Refresh the network link when the expiration time is reached.
    eStkGraphicsKmlNetworkLinkRefreshModeOnExpire = 2

agcls.AgTypeNameMap["AgEStkGraphicsKmlNetworkLinkRefreshMode"] = AgEStkGraphicsKmlNetworkLinkRefreshMode
__all__.append("AgEStkGraphicsKmlNetworkLinkRefreshMode")

class AgEStkGraphicsKmlNetworkLinkViewRefreshMode(IntEnum):
    """Defines the options available for a KmlNetworkLink's ViewRefreshMode property."""
    # Do not refresh the network link when the camera's view changes.
    eStkGraphicsKmlNetworkLinkViewRefreshModeNever = 0,
    # Only refresh the network link when it is explicitly refreshed by calling the refresh method.
    eStkGraphicsKmlNetworkLinkViewRefreshModeOnRequest = 1,
    # Refresh the network link after camera view movement stops for the duration specified by view refresh time.
    eStkGraphicsKmlNetworkLinkViewRefreshModeOnStop = 2,
    # Refreshes the network link when the region associated with this link becomes active.
    eStkGraphicsKmlNetworkLinkViewRefreshModeOnRegion = 3

agcls.AgTypeNameMap["AgEStkGraphicsKmlNetworkLinkViewRefreshMode"] = AgEStkGraphicsKmlNetworkLinkViewRefreshMode
__all__.append("AgEStkGraphicsKmlNetworkLinkViewRefreshMode")

class AgEStkGraphicsModelUpAxis(IntEnum):
    """When setting the camera'saxes, this defines which axis of the axes is up in screen space, where up is from the bottom to the top of the screen."""
    # The positive X axis.
    eStkGraphicsModelUpAxisX = 0,
    # The positive Y axis.
    eStkGraphicsModelUpAxisY = 1,
    # The positive Z axis.
    eStkGraphicsModelUpAxisZ = 2,
    # The negative X axis.
    eStkGraphicsModelUpAxisNegativeX = 3,
    # The negative Y axis.
    eStkGraphicsModelUpAxisNegativeY = 4,
    # The negative Z axis.
    eStkGraphicsModelUpAxisNegativeZ = 5

agcls.AgTypeNameMap["AgEStkGraphicsModelUpAxis"] = AgEStkGraphicsModelUpAxis
__all__.append("AgEStkGraphicsModelUpAxis")

class AgEStkGraphicsOutlineAppearance(IntEnum):
    """Possible appearances of an outline. Front lines are lines on front facing geometry and back lines are lines on back facing geometry."""
    # Both the front and back lines are displayed.
    eStkGraphicsFrontAndBackLines = 0,
    # Only the front lines are displayed. This can be used to declutter the outline.
    eStkGraphicsFrontLinesOnly = 1,
    # Both the front and back lines are displayed. The back lines are displayed using a different color, translucency, and width. This is used to declutter the outline but still provide a visual cue for the back facing geometry.
    eStkGraphicsStylizeBackLines = 2

agcls.AgTypeNameMap["AgEStkGraphicsOutlineAppearance"] = AgEStkGraphicsOutlineAppearance
__all__.append("AgEStkGraphicsOutlineAppearance")

class AgEStkGraphicsPolylineType(IntEnum):
    """Describes how to interpret positions defining a polyline."""
    # Every two positions define a line segment. Line segments are not required to be connected to each other.
    eStkGraphicsPolylineTypeLines = 0,
    # After the first position, each additional position defines a line segment from the previous position to the current position.
    eStkGraphicsPolylineTypeLineStrip = 1,
    # Lines are drawn as points.
    eStkGraphicsPolylineTypePoints = 2

agcls.AgTypeNameMap["AgEStkGraphicsPolylineType"] = AgEStkGraphicsPolylineType
__all__.append("AgEStkGraphicsPolylineType")

class AgEStkGraphicsCullFace(IntEnum):
    """Identifies whether front- and/or back-facing triangles are culled."""
    # Front-facing triangles are culled.
    eStkGraphicsECullFaceFront = 0,
    # Back-facing triangles are culled.
    eStkGraphicsECullFaceBack = 1,
    # Both front- and back-facing triangles are culled. Therefore, no triangles are rendered.
    eStkGraphicsECullFaceFrontAndBack = 2,
    # No triangles are culled.
    eStkGraphicsECullFaceNeither = 3

agcls.AgTypeNameMap["AgEStkGraphicsCullFace"] = AgEStkGraphicsCullFace
__all__.append("AgEStkGraphicsCullFace")

class AgEStkGraphicsInternalTextureFormat(IntEnum):
    """The format of individual texels in a texture."""
    # Each texel is an 4-bit alpha component.
    eStkGraphicsInternalTextureFormatAlpha4 = 0,
    # Each texel is an 8-bit alpha component.
    eStkGraphicsInternalTextureFormatAlpha8 = 1,
    # Each texel is an 12-bit alpha component.
    eStkGraphicsInternalTextureFormatAlpha12 = 2,
    # Each texel is an 16-bit alpha component.
    eStkGraphicsInternalTextureFormatAlpha16 = 3,
    # Each texel contains 3-bit red and green components and 2-bit blue component.
    eStkGraphicsInternalTextureFormatR3G3B2 = 4,
    # Each texel contains 4-bit red, green, and blue components.
    eStkGraphicsInternalTextureFormatRgb4 = 5,
    # Each texel contains 5-bit red, green, and blue components.
    eStkGraphicsInternalTextureFormatRgb5 = 6,
    # Each texel contains 8-bit red, green, and blue components.
    eStkGraphicsInternalTextureFormatRgb8 = 7,
    # Each texel contains 10-bit red, green, and blue components.
    eStkGraphicsInternalTextureFormatRgb10 = 8,
    # Each texel contains 12-bit red, green, and blue components.
    eStkGraphicsInternalTextureFormatRgb12 = 9,
    # Each texel contains 16-bit red, green, and blue components.
    eStkGraphicsInternalTextureFormatRgb16 = 10,
    # Each texel contains 16-bit red, green, and blue floating point components.
    eStkGraphicsInternalTextureFormatRgb16F = 11,
    # Each texel contains 32-bit red, green, and blue floating point components.
    eStkGraphicsInternalTextureFormatRgb32F = 12,
    # Each texel contains 2-bit red, green, blue, and alpha components.
    eStkGraphicsInternalTextureFormatRgba2 = 13,
    # Each texel contains 4-bit red, green, blue, and alpha components.
    eStkGraphicsInternalTextureFormatRgba4 = 14,
    # Each texel contains 5-bit red, green, blue components and 1-bit alpha component.
    eStkGraphicsInternalTextureFormatRgb5A1 = 15,
    # Each texel contains 8-bit red, green, blue, and alpha components.
    eStkGraphicsInternalTextureFormatRgba8 = 16,
    # Each texel contains 10-bit red, green, blue components and 2-bit alpha component.
    eStkGraphicsInternalTextureFormatRgb10A2 = 17,
    # Each texel contains 12-bit red, green, blue, and alpha components.
    eStkGraphicsInternalTextureFormatRgba12 = 18,
    # Each texel contains 16-bit red, green, blue, and alpha components.
    eStkGraphicsInternalTextureFormatRgba16 = 19,
    # Each texel contains 16-bit red, green, blue, and alpha floating point components.
    eStkGraphicsInternalTextureFormatRgba16F = 20,
    # Each texel contains 32-bit red, green, blue, and alpha floating point components.
    eStkGraphicsInternalTextureFormatRgba32F = 21,
    # Each texel is an 4-bit luminance, e.g. intensity, component.
    eStkGraphicsInternalTextureFormatLuminance4 = 22,
    # Each texel is an 8-bit luminance, e.g. intensity, component.
    eStkGraphicsInternalTextureFormatLuminance8 = 23,
    # Each texel is an 12-bit luminance, e.g. intensity, component.
    eStkGraphicsInternalTextureFormatLuminance12 = 24,
    # Each texel is an 16-bit luminance, e.g. intensity, component.
    eStkGraphicsInternalTextureFormatLuminance16 = 25,
    # Each texel is an 16-bit luminance, e.g. intensity, floating point component.
    eStkGraphicsInternalTextureFormatLuminance16F = 26,
    # Each texel is an 32-bit luminance, e.g. intensity, floating point component.
    eStkGraphicsInternalTextureFormatLuminance32F = 27,
    # Each texel contains an 4-bit luminance and 4-bit alpha component.
    eStkGraphicsInternalTextureFormatLuminance4Alpha4 = 28,
    # Each texel contains an 6-bit luminance and 2-bit alpha component.
    eStkGraphicsInternalTextureFormatLuminance6Alpha2 = 29,
    # Each texel contains an 8-bit luminance and 8-bit alpha component.
    eStkGraphicsInternalTextureFormatLuminance8Alpha8 = 30,
    # Each texel contains an 12-bit luminance and 4-bit alpha component.
    eStkGraphicsInternalTextureFormatLuminance12Alpha4 = 31,
    # Each texel contains an 12-bit luminance and 12-bit alpha component.
    eStkGraphicsInternalTextureFormatLuminance12Alpha12 = 32,
    # Each texel contains an 16-bit luminance and 16-bit alpha component.
    eStkGraphicsInternalTextureFormatLuminance16Alpha16 = 33,
    # Each texel contains an 16-bit luminance and 16-bit alpha floating point component.
    eStkGraphicsInternalTextureFormatLuminance16Alpha16F = 34,
    # Each texel contains an 32-bit luminance and 32-bit alpha floating point component.
    eStkGraphicsInternalTextureFormatLuminance32Alpha32F = 35

agcls.AgTypeNameMap["AgEStkGraphicsInternalTextureFormat"] = AgEStkGraphicsInternalTextureFormat
__all__.append("AgEStkGraphicsInternalTextureFormat")

class AgEStkGraphicsMagnificationFilter(IntEnum):
    """The filter used when the pixel being textured maps to an area less than or equal to one texel."""
    # Use the texel that is closest to the center of the pixel being textured. This usually faster than Linear but can produce images with sharper edges.
    eStkGraphicsMagnificationFilterNearest = 0,
    # Use the weighted average of the four texels that are closest to the center of the pixel being textured.
    eStkGraphicsMagnificationFilterLinear = 1

agcls.AgTypeNameMap["AgEStkGraphicsMagnificationFilter"] = AgEStkGraphicsMagnificationFilter
__all__.append("AgEStkGraphicsMagnificationFilter")

class AgEStkGraphicsMinificationFilter(IntEnum):
    """The filter used when the pixel being textured maps to an area greater than one texel."""
    # Use the texel that is closest to the center of the pixel being textured.
    eStkGraphicsMinificationFilterNearest = 0,
    # Use the weighted average of the four (for 2D textures, two for 1D textures) texels that are closest to the center of the pixel being textured.
    eStkGraphicsMinificationFilterLinear = 1,
    # Use the mipmap that most closely matches the size of the pixel being textured. Then use the texel from that mipmap that is closest to the center of the pixel being textured.
    eStkGraphicsMinificationFilterNearestMipMapNearest = 2,
    # Use the mipmap that most closely matches the size of the pixel being textured. Then use the weighted average of the four (for 2D textures, two for 1D textures) texels from that mipmap that are closest to the center of the pixel being textured.
    eStkGraphicsMinificationFilterLinearMipMapNearest = 3,
    # Use the two mipmaps that most closely match the size of the pixel being textured. Determine the texel that is closest to the center of the pixel being textured in each mipmap. The final texture value is a weighted average of these two texels.
    eStkGraphicsMinificationFilterNearestMipMapLinear = 4,
    # Use the two mipmaps that most closely match the size of the pixel being textured. Determine the weighted average of the four (for 2D textures, two for 1D textures) texels that are closest to the center of the pixel being textured in each mipmap...
    eStkGraphicsMinificationFilterLinearMipMapLinear = 5

agcls.AgTypeNameMap["AgEStkGraphicsMinificationFilter"] = AgEStkGraphicsMinificationFilter
__all__.append("AgEStkGraphicsMinificationFilter")

class AgEStkGraphicsRendererShadeModel(IntEnum):
    """Identifies which shade model to use. The primitive can be drawn with a single color or multiple colors."""
    # Flat shading renders the primitive with one color across all of the vertices.
    eStkGraphicsRendererShadeModelFlat = 0,
    # Gouraud shading renders the primitive by interpolating the color between the vertices.
    eStkGraphicsRendererShadeModelGouraud = 1

agcls.AgTypeNameMap["AgEStkGraphicsRendererShadeModel"] = AgEStkGraphicsRendererShadeModel
__all__.append("AgEStkGraphicsRendererShadeModel")

class AgEStkGraphicsTextureWrap(IntEnum):
    """Determine how to handle textures coordinates that fall outside of the range [0, 1]."""
    # Clamp the texture coordinate to the range [0, 1].
    eStkGraphicsTextureWrapClamp = 0,
    # Clamp the texture coordinate to the range [-1/2N, 1 + 1/2N], where N is the size the texture in the direction of clamping.
    eStkGraphicsTextureWrapClampToBorder = 1,
    # Clamp the texture coordinate to the range [1/2N, 1 - 1/2N], where N is the size the texture in the direction of clamping.
    eStkGraphicsTextureWrapClampToEdge = 2,
    # If the integer part of the texture coordinate is even, use the fractional part of the texture coordinate. Otherwise, use one minus the fractional part of the texture coordinate.
    eStkGraphicsTextureWrapMirroredRepeat = 3,
    # Ignore the integer part of the texture coordinate.
    eStkGraphicsTextureWrapRepeat = 4

agcls.AgTypeNameMap["AgEStkGraphicsTextureWrap"] = AgEStkGraphicsTextureWrap
__all__.append("AgEStkGraphicsTextureWrap")

class AgEStkGraphicsSetHint(IntEnum):
    """An optimization hint optionally provided to primitives to enhance performance for static or dynamic primitives. See the Set Hint Performance Overview for selecting an appropriate value."""
    # Rendering is optimized for static geometry. The primitive's vertices are not going to be updated with Set() or SetPartial() calls. Calls to SetPartial() will fail. Calls to Set() are allowed but may not be as efficient as SetHintFrequent.
    eStkGraphicsSetHintInfrequent = 0,
    # Rendering is optimized for dynamic geometry. The primitive's vertices are expected to be updated with SetPartial() - some or all of the vertices will change but the number of vertices will not.
    eStkGraphicsSetHintPartial = 1,
    # Rendering is optimized for streaming geometry. The primitive's vertices are expected to be updated with Set() - all the vertices will change and/or the number of vertices will change. Calls to SetPartial() will fail.
    eStkGraphicsSetHintFrequent = 2

agcls.AgTypeNameMap["AgEStkGraphicsSetHint"] = AgEStkGraphicsSetHint
__all__.append("AgEStkGraphicsSetHint")

class AgEStkGraphicsStereoProjectionMode(IntEnum):
    """The stereoscopic projection mode used for the left and right eye scenes."""
    # Parallel projection. Parallel projection will ignore any projection distance that has been set and instead use a parallel projection for each eye. In parallel mode all objects will appear to go into the screen...
    eStkGraphicsStereoProjectionParallel = 0,
    # Fixed distance projection. Objects at the fixed distance will appear to have no depth. Objects further than the distance will appear to go into the screen. Objects nearer than the distance will appear to pop out of the screen.
    eStkGraphicsStereoProjectionFixedDistance = 1,
    # Automatic distance projection. Automatic distance projection will ignore any projection distance that has been set and instead automatically calculates the projection distance based on the distance between the camera and the center of the scene.
    eStkGraphicsStereoProjectionAutomatic = 2

agcls.AgTypeNameMap["AgEStkGraphicsStereoProjectionMode"] = AgEStkGraphicsStereoProjectionMode
__all__.append("AgEStkGraphicsStereoProjectionMode")

class AgEStkGraphicsStereoscopicDisplayMode(IntEnum):
    """The stereoscopic display mode. To use a particular stereoscopic display mode, ensure that your system supports the feature and that it is enabled."""
    # No stereoscopic
    eStkGraphicsStereoscopicDisplayModeOff = 0,
    # OpenGL Quad-buffer stereoscopic
    eStkGraphicsStereoscopicDisplayModeQuadBuffer = 1,
    # Anaglyph or two-color stereoscopic
    eStkGraphicsStereoscopicDisplayModeAnaglyph = 2,
    # Left eye view of the stereoscopic scene
    eStkGraphicsStereoscopicDisplayModeLeftEye = 3,
    # Right eye view of the stereoscopic scene
    eStkGraphicsStereoscopicDisplayModeRightEye = 4,
    # Side-by-side stereoscopic. Left and right eye views are rendered next to each other in the same window.
    eStkGraphicsStereoscopicDisplayModeSideBySide = 5

agcls.AgTypeNameMap["AgEStkGraphicsStereoscopicDisplayMode"] = AgEStkGraphicsStereoscopicDisplayMode
__all__.append("AgEStkGraphicsStereoscopicDisplayMode")

class AgEStkGraphicsFontStyle(IntEnum):
    """Font styles."""
    # Regular font.
    eStkGraphicsFontStyleRegular = 0x0,
    # Bold font.
    eStkGraphicsFontStyleBold = 0x1,
    # Italic font.
    eStkGraphicsFontStyleItalic = 0x2,
    # Underlined font.
    eStkGraphicsFontStyleUnderline = 0x4,
    # Strike-out style.
    eStkGraphicsFontStyleStrikeout = 0x8

agcls.AgTypeNameMap["AgEStkGraphicsFontStyle"] = AgEStkGraphicsFontStyle
__all__.append("AgEStkGraphicsFontStyle")


class IAgStkGraphicsPathPoint(object):
    """A path point used with the Path Primitive."""
    _uuid = "{9107fca2-51b8-4347-9391-9ee6c6b792e3}"
    _num_methods = 12
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetPosition"] = _raise_uninitialized_error
        self.__dict__["_SetPosition"] = _raise_uninitialized_error
        self.__dict__["_GetDate"] = _raise_uninitialized_error
        self.__dict__["_GetColor"] = _raise_uninitialized_error
        self.__dict__["_SetColor"] = _raise_uninitialized_error
        self.__dict__["_GetTranslucency"] = _raise_uninitialized_error
        self.__dict__["_SetTranslucency"] = _raise_uninitialized_error
        self.__dict__["_GetOutlineColor"] = _raise_uninitialized_error
        self.__dict__["_SetOutlineColor"] = _raise_uninitialized_error
        self.__dict__["_GetOutlineTranslucency"] = _raise_uninitialized_error
        self.__dict__["_SetOutlineTranslucency"] = _raise_uninitialized_error
        self.__dict__["_GetIsTranslucent"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsPathPoint._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsPathPoint from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsPathPoint = agcom.GUID(IAgStkGraphicsPathPoint._uuid)
        vtable_offset_local = IAgStkGraphicsPathPoint._vtable_offset - 1
        self.__dict__["_GetPosition"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPathPoint, vtable_offset_local+1, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetPosition"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPathPoint, vtable_offset_local+2, agcom.SAFEARRAY)
        self.__dict__["_GetDate"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPathPoint, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_GetColor"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPathPoint, vtable_offset_local+4, POINTER(agcom.OLE_COLOR))
        self.__dict__["_SetColor"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPathPoint, vtable_offset_local+5, agcom.OLE_COLOR)
        self.__dict__["_GetTranslucency"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPathPoint, vtable_offset_local+6, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTranslucency"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPathPoint, vtable_offset_local+7, agcom.DOUBLE)
        self.__dict__["_GetOutlineColor"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPathPoint, vtable_offset_local+8, POINTER(agcom.OLE_COLOR))
        self.__dict__["_SetOutlineColor"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPathPoint, vtable_offset_local+9, agcom.OLE_COLOR)
        self.__dict__["_GetOutlineTranslucency"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPathPoint, vtable_offset_local+10, POINTER(agcom.DOUBLE))
        self.__dict__["_SetOutlineTranslucency"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPathPoint, vtable_offset_local+11, agcom.DOUBLE)
        self.__dict__["_GetIsTranslucent"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPathPoint, vtable_offset_local+12, POINTER(agcom.VARIANT_BOOL))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsPathPoint.__dict__ and type(IAgStkGraphicsPathPoint.__dict__[attrname]) == property:
            return IAgStkGraphicsPathPoint.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsPathPoint.")
    
    @property
    def Position(self) -> list:
        """A path point position as a one-dimensional array of three elements corresponding to (X,Y,Z) cartesian coordinates."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPosition"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @Position.setter
    def Position(self, position:list) -> None:
        with agmarshall.SAFEARRAY_arg(position) as arg_position:
            agcls.evaluate_hresult(self.__dict__["_SetPosition"](arg_position.COM_val))

    @property
    def Date(self) -> "IAgDate":
        """A date/time of the path point."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDate"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Color(self) -> agcolor.Color:
        """The path point color."""
        with agmarshall.OLE_COLOR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetColor"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Color.setter
    def Color(self, color:agcolor.Color) -> None:
        with agmarshall.OLE_COLOR_arg(color) as arg_color:
            agcls.evaluate_hresult(self.__dict__["_SetColor"](arg_color.COM_val))

    @property
    def Translucency(self) -> float:
        """The path point translucency."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTranslucency"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Translucency.setter
    def Translucency(self, translucency:float) -> None:
        with agmarshall.DOUBLE_arg(translucency) as arg_translucency:
            agcls.evaluate_hresult(self.__dict__["_SetTranslucency"](arg_translucency.COM_val))

    @property
    def OutlineColor(self) -> agcolor.Color:
        """The path point outline color."""
        with agmarshall.OLE_COLOR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetOutlineColor"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @OutlineColor.setter
    def OutlineColor(self, outlineColor:agcolor.Color) -> None:
        with agmarshall.OLE_COLOR_arg(outlineColor) as arg_outlineColor:
            agcls.evaluate_hresult(self.__dict__["_SetOutlineColor"](arg_outlineColor.COM_val))

    @property
    def OutlineTranslucency(self) -> float:
        """The path point outline translucency."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetOutlineTranslucency"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @OutlineTranslucency.setter
    def OutlineTranslucency(self, outlineTranslucency:float) -> None:
        with agmarshall.DOUBLE_arg(outlineTranslucency) as arg_outlineTranslucency:
            agcls.evaluate_hresult(self.__dict__["_SetOutlineTranslucency"](arg_outlineTranslucency.COM_val))

    @property
    def IsTranslucent(self) -> bool:
        """Whether the path point is translucent."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetIsTranslucent"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{9107fca2-51b8-4347-9391-9ee6c6b792e3}", IAgStkGraphicsPathPoint)
agcls.AgTypeNameMap["IAgStkGraphicsPathPoint"] = IAgStkGraphicsPathPoint
__all__.append("IAgStkGraphicsPathPoint")

class IAgStkGraphicsPathPointFactory(object):
    """Creates Path Primitive's path points."""
    _uuid = "{efb486c4-09f0-4918-b051-7776acd13f66}"
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithDate"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithDateAndPosition"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithDatePositionAndColor"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithDatePositionColorAndTranslucency"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsPathPointFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsPathPointFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsPathPointFactory = agcom.GUID(IAgStkGraphicsPathPointFactory._uuid)
        vtable_offset_local = IAgStkGraphicsPathPointFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPathPointFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithDate"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPathPointFactory, vtable_offset_local+2, agcom.PVOID, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithDateAndPosition"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPathPointFactory, vtable_offset_local+3, agcom.PVOID, POINTER(agcom.SAFEARRAY), POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithDatePositionAndColor"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPathPointFactory, vtable_offset_local+4, agcom.PVOID, POINTER(agcom.SAFEARRAY), agcom.OLE_COLOR, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithDatePositionColorAndTranslucency"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPathPointFactory, vtable_offset_local+5, agcom.PVOID, POINTER(agcom.SAFEARRAY), agcom.OLE_COLOR, agcom.DOUBLE, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsPathPointFactory.__dict__ and type(IAgStkGraphicsPathPointFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsPathPointFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsPathPointFactory.")
    
    def Initialize(self) -> "IAgStkGraphicsPathPoint":
        """Initializes a new path point."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithDate(self, pathPointDate:"IAgDate") -> "IAgStkGraphicsPathPoint":
        """Initializes a new path point with the given date."""
        with agmarshall.AgInterface_in_arg(pathPointDate, IAgDate) as arg_pathPointDate, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithDate"](arg_pathPointDate.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithDateAndPosition(self, pathPointDate:"IAgDate", position:list) -> "IAgStkGraphicsPathPoint":
        """Initializes a new path point with the given date and position."""
        with agmarshall.AgInterface_in_arg(pathPointDate, IAgDate) as arg_pathPointDate, \
             agmarshall.SAFEARRAY_arg(position) as arg_position, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithDateAndPosition"](arg_pathPointDate.COM_val, byref(arg_position.COM_val), byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithDatePositionAndColor(self, pathPointDate:"IAgDate", position:list, color:agcolor.Color) -> "IAgStkGraphicsPathPoint":
        """Initializes a new path point with the given date, position and color."""
        with agmarshall.AgInterface_in_arg(pathPointDate, IAgDate) as arg_pathPointDate, \
             agmarshall.SAFEARRAY_arg(position) as arg_position, \
             agmarshall.OLE_COLOR_arg(color) as arg_color, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithDatePositionAndColor"](arg_pathPointDate.COM_val, byref(arg_position.COM_val), arg_color.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithDatePositionColorAndTranslucency(self, pathPointDate:"IAgDate", position:list, color:agcolor.Color, translucency:float) -> "IAgStkGraphicsPathPoint":
        """Initializes a new path point with the given date, position, color and translucency."""
        with agmarshall.AgInterface_in_arg(pathPointDate, IAgDate) as arg_pathPointDate, \
             agmarshall.SAFEARRAY_arg(position) as arg_position, \
             agmarshall.OLE_COLOR_arg(color) as arg_color, \
             agmarshall.DOUBLE_arg(translucency) as arg_translucency, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithDatePositionColorAndTranslucency"](arg_pathPointDate.COM_val, byref(arg_position.COM_val), arg_color.COM_val, arg_translucency.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{efb486c4-09f0-4918-b051-7776acd13f66}", IAgStkGraphicsPathPointFactory)
agcls.AgTypeNameMap["IAgStkGraphicsPathPointFactory"] = IAgStkGraphicsPathPointFactory
__all__.append("IAgStkGraphicsPathPointFactory")

class IAgStkGraphicsBoundingSphere(object):
    """A sphere that encapsulates an object."""
    _uuid = "{68e2776e-6e9a-449a-8146-99e67cf8d16c}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCenter"] = _raise_uninitialized_error
        self.__dict__["_GetRadius"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsBoundingSphere._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsBoundingSphere from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsBoundingSphere = agcom.GUID(IAgStkGraphicsBoundingSphere._uuid)
        vtable_offset_local = IAgStkGraphicsBoundingSphere._vtable_offset - 1
        self.__dict__["_GetCenter"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsBoundingSphere, vtable_offset_local+1, POINTER(agcom.SAFEARRAY))
        self.__dict__["_GetRadius"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsBoundingSphere, vtable_offset_local+2, POINTER(agcom.DOUBLE))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsBoundingSphere.__dict__ and type(IAgStkGraphicsBoundingSphere.__dict__[attrname]) == property:
            return IAgStkGraphicsBoundingSphere.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsBoundingSphere.")
    
    @property
    def Center(self) -> list:
        """A center of the bounding sphere. The center point is specified as one-dimensional array with three elements corresponding to (X,Y,Z) cartesian coordinates."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCenter"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Radius(self) -> float:
        """A radius of the bounding sphere."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetRadius"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{68e2776e-6e9a-449a-8146-99e67cf8d16c}", IAgStkGraphicsBoundingSphere)
agcls.AgTypeNameMap["IAgStkGraphicsBoundingSphere"] = IAgStkGraphicsBoundingSphere
__all__.append("IAgStkGraphicsBoundingSphere")

class IAgStkGraphicsBoundingSphereFactory(object):
    """Creates instances of the bounding sphere type."""
    _uuid = "{fdde5510-3231-4c01-9c23-8485643e47ff}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_GetMaximumRadiusBoundingSphere"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsBoundingSphereFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsBoundingSphereFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsBoundingSphereFactory = agcom.GUID(IAgStkGraphicsBoundingSphereFactory._uuid)
        vtable_offset_local = IAgStkGraphicsBoundingSphereFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsBoundingSphereFactory, vtable_offset_local+1, POINTER(agcom.SAFEARRAY), agcom.DOUBLE, POINTER(agcom.PVOID))
        self.__dict__["_GetMaximumRadiusBoundingSphere"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsBoundingSphereFactory, vtable_offset_local+2, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsBoundingSphereFactory.__dict__ and type(IAgStkGraphicsBoundingSphereFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsBoundingSphereFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsBoundingSphereFactory.")
    
    def Initialize(self, center:list, radius:float) -> "IAgStkGraphicsBoundingSphere":
        """Create instances of BoundingSphere."""
        with agmarshall.SAFEARRAY_arg(center) as arg_center, \
             agmarshall.DOUBLE_arg(radius) as arg_radius, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_center.COM_val), arg_radius.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def MaximumRadiusBoundingSphere(self) -> "IAgStkGraphicsBoundingSphere":
        """Gets the bounding sphere of maximum possible radius."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaximumRadiusBoundingSphere"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{fdde5510-3231-4c01-9c23-8485643e47ff}", IAgStkGraphicsBoundingSphereFactory)
agcls.AgTypeNameMap["IAgStkGraphicsBoundingSphereFactory"] = IAgStkGraphicsBoundingSphereFactory
__all__.append("IAgStkGraphicsBoundingSphereFactory")

class IAgStkGraphicsTextureFilter2D(object):
    """A texture filter."""
    _uuid = "{c71ed80c-abbc-4ce5-bf56-a21ea03c4593}"
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetMinificationFilter"] = _raise_uninitialized_error
        self.__dict__["_GetMagnificationFilter"] = _raise_uninitialized_error
        self.__dict__["_GetWrapS"] = _raise_uninitialized_error
        self.__dict__["_GetWrapT"] = _raise_uninitialized_error
        self.__dict__["_GetNearestClampToEdge"] = _raise_uninitialized_error
        self.__dict__["_GetNearestRepeat"] = _raise_uninitialized_error
        self.__dict__["_GetLinearClampToEdge"] = _raise_uninitialized_error
        self.__dict__["_GetLinearRepeat"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsTextureFilter2D._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsTextureFilter2D from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsTextureFilter2D = agcom.GUID(IAgStkGraphicsTextureFilter2D._uuid)
        vtable_offset_local = IAgStkGraphicsTextureFilter2D._vtable_offset - 1
        self.__dict__["_GetMinificationFilter"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextureFilter2D, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_GetMagnificationFilter"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextureFilter2D, vtable_offset_local+2, POINTER(agcom.LONG))
        self.__dict__["_GetWrapS"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextureFilter2D, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_GetWrapT"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextureFilter2D, vtable_offset_local+4, POINTER(agcom.LONG))
        self.__dict__["_GetNearestClampToEdge"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextureFilter2D, vtable_offset_local+5, POINTER(agcom.PVOID))
        self.__dict__["_GetNearestRepeat"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextureFilter2D, vtable_offset_local+6, POINTER(agcom.PVOID))
        self.__dict__["_GetLinearClampToEdge"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextureFilter2D, vtable_offset_local+7, POINTER(agcom.PVOID))
        self.__dict__["_GetLinearRepeat"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextureFilter2D, vtable_offset_local+8, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsTextureFilter2D.__dict__ and type(IAgStkGraphicsTextureFilter2D.__dict__[attrname]) == property:
            return IAgStkGraphicsTextureFilter2D.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsTextureFilter2D.")
    
    @property
    def MinificationFilter(self) -> "AgEStkGraphicsMinificationFilter":
        """Gets the minification filter used when the pixel being textured maps to an area less than or equal to one texel."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsMinificationFilter) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinificationFilter"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def MagnificationFilter(self) -> "AgEStkGraphicsMagnificationFilter":
        """Gets the magnification filter used when the pixel being textured maps to an area greater than one texel."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsMagnificationFilter) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMagnificationFilter"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def WrapS(self) -> "AgEStkGraphicsTextureWrap":
        """Gets the texture wrap for the s direction."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsTextureWrap) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetWrapS"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def WrapT(self) -> "AgEStkGraphicsTextureWrap":
        """Gets the texture wrap for the t direction."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsTextureWrap) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetWrapT"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def NearestClampToEdge(self) -> "IAgStkGraphicsTextureFilter2D":
        """Gets a texture filter with the following properties: MinificationFilter: Nearest, MagnificationFilter: Nearest, WrapS: ClampToEdge, WrapT: ClampToEdge"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetNearestClampToEdge"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def NearestRepeat(self) -> "IAgStkGraphicsTextureFilter2D":
        """Gets a texture filter with the following properties: MinificationFilter: Nearest, MagnificationFilter: Nearest, WrapS: Repeat, WrapT: Repeat"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetNearestRepeat"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def LinearClampToEdge(self) -> "IAgStkGraphicsTextureFilter2D":
        """Gets a texture filter with the following properties: MinificationFilter: Linear, MagnificationFilter: Linear, WrapS: ClampToEdge, WrapT: ClampToEdge"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetLinearClampToEdge"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def LinearRepeat(self) -> "IAgStkGraphicsTextureFilter2D":
        """Gets a texture filter with the following properties: MinificationFilter: Linear, MagnificationFilter: Linear, WrapS: Repeat, WrapT: Repeat"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetLinearRepeat"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{c71ed80c-abbc-4ce5-bf56-a21ea03c4593}", IAgStkGraphicsTextureFilter2D)
agcls.AgTypeNameMap["IAgStkGraphicsTextureFilter2D"] = IAgStkGraphicsTextureFilter2D
__all__.append("IAgStkGraphicsTextureFilter2D")

class IAgStkGraphicsTextureFilter2DFactory(object):
    """Creates texture filters."""
    _uuid = "{8e616d0f-4cf9-4dfd-b7fd-1295dd9131e5}"
    _num_methods = 7
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetNearestClampToEdge"] = _raise_uninitialized_error
        self.__dict__["_GetNearestRepeat"] = _raise_uninitialized_error
        self.__dict__["_GetLinearClampToEdge"] = _raise_uninitialized_error
        self.__dict__["_GetLinearRepeat"] = _raise_uninitialized_error
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithTextureWrap"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithMinificationAndMagnification"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsTextureFilter2DFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsTextureFilter2DFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsTextureFilter2DFactory = agcom.GUID(IAgStkGraphicsTextureFilter2DFactory._uuid)
        vtable_offset_local = IAgStkGraphicsTextureFilter2DFactory._vtable_offset - 1
        self.__dict__["_GetNearestClampToEdge"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextureFilter2DFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetNearestRepeat"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextureFilter2DFactory, vtable_offset_local+2, POINTER(agcom.PVOID))
        self.__dict__["_GetLinearClampToEdge"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextureFilter2DFactory, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_GetLinearRepeat"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextureFilter2DFactory, vtable_offset_local+4, POINTER(agcom.PVOID))
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextureFilter2DFactory, vtable_offset_local+5, agcom.LONG, agcom.LONG, agcom.LONG, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithTextureWrap"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextureFilter2DFactory, vtable_offset_local+6, agcom.LONG, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithMinificationAndMagnification"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextureFilter2DFactory, vtable_offset_local+7, agcom.LONG, agcom.LONG, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsTextureFilter2DFactory.__dict__ and type(IAgStkGraphicsTextureFilter2DFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsTextureFilter2DFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsTextureFilter2DFactory.")
    
    @property
    def NearestClampToEdge(self) -> "IAgStkGraphicsTextureFilter2D":
        """Gets a texture filter with the following properties: MinificationFilter: Nearest, MagnificationFilter: Nearest, WrapS: ClampToEdge, WrapT: ClampToEdge"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetNearestClampToEdge"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def NearestRepeat(self) -> "IAgStkGraphicsTextureFilter2D":
        """Gets a texture filter with the following properties: MinificationFilter: Nearest, MagnificationFilter: Nearest, WrapS: Repeat, WrapT: Repeat"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetNearestRepeat"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def LinearClampToEdge(self) -> "IAgStkGraphicsTextureFilter2D":
        """Gets a texture filter with the following properties: MinificationFilter: Linear, MagnificationFilter: Linear, WrapS: ClampToEdge, WrapT: ClampToEdge"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetLinearClampToEdge"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def LinearRepeat(self) -> "IAgStkGraphicsTextureFilter2D":
        """Gets a texture filter with the following properties: MinificationFilter: Linear, MagnificationFilter: Linear, WrapS: Repeat, WrapT: Repeat"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetLinearRepeat"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def Initialize(self, minificationFilter:"AgEStkGraphicsMinificationFilter", magnificationFilter:"AgEStkGraphicsMagnificationFilter", wrapS:"AgEStkGraphicsTextureWrap", wrapT:"AgEStkGraphicsTextureWrap") -> "IAgStkGraphicsTextureFilter2D":
        """Creates a texture filter using the specified minification/magnification options and texture wrap."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsMinificationFilter, minificationFilter) as arg_minificationFilter, \
             agmarshall.AgEnum_arg(AgEStkGraphicsMagnificationFilter, magnificationFilter) as arg_magnificationFilter, \
             agmarshall.AgEnum_arg(AgEStkGraphicsTextureWrap, wrapS) as arg_wrapS, \
             agmarshall.AgEnum_arg(AgEStkGraphicsTextureWrap, wrapT) as arg_wrapT, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](arg_minificationFilter.COM_val, arg_magnificationFilter.COM_val, arg_wrapS.COM_val, arg_wrapT.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithTextureWrap(self, wrapS:"AgEStkGraphicsTextureWrap", wrapT:"AgEStkGraphicsTextureWrap") -> "IAgStkGraphicsTextureFilter2D":
        """Creates a texture filter using the specified texture wrap."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsTextureWrap, wrapS) as arg_wrapS, \
             agmarshall.AgEnum_arg(AgEStkGraphicsTextureWrap, wrapT) as arg_wrapT, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithTextureWrap"](arg_wrapS.COM_val, arg_wrapT.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithMinificationAndMagnification(self, minificationFilter:"AgEStkGraphicsMinificationFilter", magnificationFilter:"AgEStkGraphicsMagnificationFilter") -> "IAgStkGraphicsTextureFilter2D":
        """Creates a texture filter using the specified minification/magnification options."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsMinificationFilter, minificationFilter) as arg_minificationFilter, \
             agmarshall.AgEnum_arg(AgEStkGraphicsMagnificationFilter, magnificationFilter) as arg_magnificationFilter, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithMinificationAndMagnification"](arg_minificationFilter.COM_val, arg_magnificationFilter.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{8e616d0f-4cf9-4dfd-b7fd-1295dd9131e5}", IAgStkGraphicsTextureFilter2DFactory)
agcls.AgTypeNameMap["IAgStkGraphicsTextureFilter2DFactory"] = IAgStkGraphicsTextureFilter2DFactory
__all__.append("IAgStkGraphicsTextureFilter2DFactory")

class IAgStkGraphicsRendererTexture2D(object):
    """A 2D Texture. A texture represents an image that is ready for use by objects such as primitives and overlays. Textures typically reside in video memory."""
    _uuid = "{b207af7e-f2b5-4b2f-89f6-1fc3721102b3}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetTemplate"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsRendererTexture2D._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsRendererTexture2D from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsRendererTexture2D = agcom.GUID(IAgStkGraphicsRendererTexture2D._uuid)
        vtable_offset_local = IAgStkGraphicsRendererTexture2D._vtable_offset - 1
        self.__dict__["_GetTemplate"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsRendererTexture2D, vtable_offset_local+1, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsRendererTexture2D.__dict__ and type(IAgStkGraphicsRendererTexture2D.__dict__[attrname]) == property:
            return IAgStkGraphicsRendererTexture2D.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsRendererTexture2D.")
    
    @property
    def Template(self) -> "IAgStkGraphicsRendererTextureTemplate2D":
        """Gets a template from which the texture was created."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTemplate"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{b207af7e-f2b5-4b2f-89f6-1fc3721102b3}", IAgStkGraphicsRendererTexture2D)
agcls.AgTypeNameMap["IAgStkGraphicsRendererTexture2D"] = IAgStkGraphicsRendererTexture2D
__all__.append("IAgStkGraphicsRendererTexture2D")

class IAgStkGraphicsRendererTextureTemplate2D(object):
    """Template object containing attributes required to create a 2D texture."""
    _uuid = "{46fbfc4c-29b8-49c7-beb7-77bc5d836f10}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetInternalFormat"] = _raise_uninitialized_error
        self.__dict__["_GetWidth"] = _raise_uninitialized_error
        self.__dict__["_GetHeight"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsRendererTextureTemplate2D._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsRendererTextureTemplate2D from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsRendererTextureTemplate2D = agcom.GUID(IAgStkGraphicsRendererTextureTemplate2D._uuid)
        vtable_offset_local = IAgStkGraphicsRendererTextureTemplate2D._vtable_offset - 1
        self.__dict__["_GetInternalFormat"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsRendererTextureTemplate2D, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_GetWidth"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsRendererTextureTemplate2D, vtable_offset_local+2, POINTER(agcom.INT))
        self.__dict__["_GetHeight"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsRendererTextureTemplate2D, vtable_offset_local+3, POINTER(agcom.INT))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsRendererTextureTemplate2D.__dict__ and type(IAgStkGraphicsRendererTextureTemplate2D.__dict__[attrname]) == property:
            return IAgStkGraphicsRendererTextureTemplate2D.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsRendererTextureTemplate2D.")
    
    @property
    def InternalFormat(self) -> "AgEStkGraphicsInternalTextureFormat":
        """Gets an internal format of the texture."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsInternalTextureFormat) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetInternalFormat"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Width(self) -> int:
        """Gets a width of the texture in texels."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetWidth"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Height(self) -> int:
        """Gets a height of the texture in texels."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetHeight"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{46fbfc4c-29b8-49c7-beb7-77bc5d836f10}", IAgStkGraphicsRendererTextureTemplate2D)
agcls.AgTypeNameMap["IAgStkGraphicsRendererTextureTemplate2D"] = IAgStkGraphicsRendererTextureTemplate2D
__all__.append("IAgStkGraphicsRendererTextureTemplate2D")

class IAgStkGraphicsPathPointCollection(object):
    """A collection of path points."""
    _uuid = "{9214e199-6476-4ef1-a741-13362718bdd5}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        self.__dict__["_Item"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsPathPointCollection._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsPathPointCollection from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsPathPointCollection = agcom.GUID(IAgStkGraphicsPathPointCollection._uuid)
        vtable_offset_local = IAgStkGraphicsPathPointCollection._vtable_offset - 1
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPathPointCollection, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_Item"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPathPointCollection, vtable_offset_local+2, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPathPointCollection, vtable_offset_local+3, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsPathPointCollection.__dict__ and type(IAgStkGraphicsPathPointCollection.__dict__[attrname]) == property:
            return IAgStkGraphicsPathPointCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsPathPointCollection.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> "IAgStkGraphicsPathPoint":
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    
    @property
    def Count(self) -> int:
        """A total number of elements in the collection."""
        with agmarshall.LONG_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def Item(self, index:int) -> "IAgStkGraphicsPathPoint":
        """Returns a path point at the specified position in the collection."""
        with agmarshall.LONG_arg(index) as arg_index, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Item"](arg_index.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        with agmarshall.IEnumVARIANT_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{9214e199-6476-4ef1-a741-13362718bdd5}", IAgStkGraphicsPathPointCollection)
agcls.AgTypeNameMap["IAgStkGraphicsPathPointCollection"] = IAgStkGraphicsPathPointCollection
__all__.append("IAgStkGraphicsPathPointCollection")

class IAgStkGraphicsObjectCollection(object):
    """A collection of objects."""
    _uuid = "{feb3a8c8-dc5b-4246-a8ec-1d6154b4cf68}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        self.__dict__["_Item"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsObjectCollection._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsObjectCollection from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsObjectCollection = agcom.GUID(IAgStkGraphicsObjectCollection._uuid)
        vtable_offset_local = IAgStkGraphicsObjectCollection._vtable_offset - 1
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsObjectCollection, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_Item"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsObjectCollection, vtable_offset_local+2, agcom.LONG, POINTER(agcom.VARIANT))
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsObjectCollection, vtable_offset_local+3, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsObjectCollection.__dict__ and type(IAgStkGraphicsObjectCollection.__dict__[attrname]) == property:
            return IAgStkGraphicsObjectCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsObjectCollection.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> typing.Any:
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    
    @property
    def Count(self) -> int:
        """A total number of elements in the collection."""
        with agmarshall.LONG_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def Item(self, index:int) -> typing.Any:
        """An item in the collection at the specified index."""
        with agmarshall.LONG_arg(index) as arg_index, \
             agmarshall.VARIANT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_Item"](arg_index.COM_val, byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        with agmarshall.IEnumVARIANT_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{feb3a8c8-dc5b-4246-a8ec-1d6154b4cf68}", IAgStkGraphicsObjectCollection)
agcls.AgTypeNameMap["IAgStkGraphicsObjectCollection"] = IAgStkGraphicsObjectCollection
__all__.append("IAgStkGraphicsObjectCollection")

class IAgStkGraphicsSceneCollection(object):
    """A collection of scenes."""
    _uuid = "{aac03f9e-8c23-4a8d-ad88-455deb232f0b}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        self.__dict__["_Item"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsSceneCollection._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsSceneCollection from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsSceneCollection = agcom.GUID(IAgStkGraphicsSceneCollection._uuid)
        vtable_offset_local = IAgStkGraphicsSceneCollection._vtable_offset - 1
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSceneCollection, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_Item"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSceneCollection, vtable_offset_local+2, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSceneCollection, vtable_offset_local+3, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsSceneCollection.__dict__ and type(IAgStkGraphicsSceneCollection.__dict__[attrname]) == property:
            return IAgStkGraphicsSceneCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsSceneCollection.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> "IAgStkGraphicsScene":
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    
    @property
    def Count(self) -> int:
        """Total number of scenes in the collection."""
        with agmarshall.LONG_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def Item(self, index:int) -> "IAgStkGraphicsScene":
        """A scene in the collection at a specified index."""
        with agmarshall.LONG_arg(index) as arg_index, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Item"](arg_index.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        with agmarshall.IEnumVARIANT_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{aac03f9e-8c23-4a8d-ad88-455deb232f0b}", IAgStkGraphicsSceneCollection)
agcls.AgTypeNameMap["IAgStkGraphicsSceneCollection"] = IAgStkGraphicsSceneCollection
__all__.append("IAgStkGraphicsSceneCollection")

class IAgStkGraphicsScreenOverlayContainer(object):
    """The interface for screen overlays that contain a collection of other overlays. This interface is implemented by ScreenOverlayManager and ScreenOverlay."""
    _uuid = "{5e57d9b7-f014-46d7-8b6d-b38d47e7ce41}"
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetOverlays"] = _raise_uninitialized_error
        self.__dict__["_GetPadding"] = _raise_uninitialized_error
        self.__dict__["_SetPadding"] = _raise_uninitialized_error
        self.__dict__["_GetDisplay"] = _raise_uninitialized_error
        self.__dict__["_SetDisplay"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsScreenOverlayContainer._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsScreenOverlayContainer from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsScreenOverlayContainer = agcom.GUID(IAgStkGraphicsScreenOverlayContainer._uuid)
        vtable_offset_local = IAgStkGraphicsScreenOverlayContainer._vtable_offset - 1
        self.__dict__["_GetOverlays"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsScreenOverlayContainer, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetPadding"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsScreenOverlayContainer, vtable_offset_local+2, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetPadding"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsScreenOverlayContainer, vtable_offset_local+3, agcom.SAFEARRAY)
        self.__dict__["_GetDisplay"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsScreenOverlayContainer, vtable_offset_local+4, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetDisplay"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsScreenOverlayContainer, vtable_offset_local+5, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsScreenOverlayContainer.__dict__ and type(IAgStkGraphicsScreenOverlayContainer.__dict__[attrname]) == property:
            return IAgStkGraphicsScreenOverlayContainer.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsScreenOverlayContainer.")
    
    @property
    def Overlays(self) -> "IAgStkGraphicsScreenOverlayCollection":
        """Gets the collection of overlays that are contained within this overlay."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetOverlays"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Padding(self) -> list:
        """Gets or sets the padding surrounding the overlays that are contained within this overlay. The array contains the components of the padding arranged in the order left, top, right, bottom."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPadding"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @Padding.setter
    def Padding(self, padding:list) -> None:
        with agmarshall.SAFEARRAY_arg(padding) as arg_padding:
            agcls.evaluate_hresult(self.__dict__["_SetPadding"](arg_padding.COM_val))

    @property
    def Display(self) -> bool:
        """Gets or sets if this overlay and the collection of overlays that are contained within this overlay should be rendered."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDisplay"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Display.setter
    def Display(self, display:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(display) as arg_display:
            agcls.evaluate_hresult(self.__dict__["_SetDisplay"](arg_display.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{5e57d9b7-f014-46d7-8b6d-b38d47e7ce41}", IAgStkGraphicsScreenOverlayContainer)
agcls.AgTypeNameMap["IAgStkGraphicsScreenOverlayContainer"] = IAgStkGraphicsScreenOverlayContainer
__all__.append("IAgStkGraphicsScreenOverlayContainer")

class IAgStkGraphicsScreenOverlayPickResultCollection(object):
    """A collection of pick results."""
    _uuid = "{6c1f8d2c-1b38-482c-b935-b174003284bb}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        self.__dict__["_Item"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsScreenOverlayPickResultCollection._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsScreenOverlayPickResultCollection from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsScreenOverlayPickResultCollection = agcom.GUID(IAgStkGraphicsScreenOverlayPickResultCollection._uuid)
        vtable_offset_local = IAgStkGraphicsScreenOverlayPickResultCollection._vtable_offset - 1
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsScreenOverlayPickResultCollection, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_Item"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsScreenOverlayPickResultCollection, vtable_offset_local+2, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsScreenOverlayPickResultCollection, vtable_offset_local+3, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsScreenOverlayPickResultCollection.__dict__ and type(IAgStkGraphicsScreenOverlayPickResultCollection.__dict__[attrname]) == property:
            return IAgStkGraphicsScreenOverlayPickResultCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsScreenOverlayPickResultCollection.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> "IAgStkGraphicsScreenOverlayPickResult":
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    
    @property
    def Count(self) -> int:
        """A total number of elements in the collection."""
        with agmarshall.LONG_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def Item(self, index:int) -> "IAgStkGraphicsScreenOverlayPickResult":
        """Get an element at the specified position in the collection."""
        with agmarshall.LONG_arg(index) as arg_index, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Item"](arg_index.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        with agmarshall.IEnumVARIANT_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{6c1f8d2c-1b38-482c-b935-b174003284bb}", IAgStkGraphicsScreenOverlayPickResultCollection)
agcls.AgTypeNameMap["IAgStkGraphicsScreenOverlayPickResultCollection"] = IAgStkGraphicsScreenOverlayPickResultCollection
__all__.append("IAgStkGraphicsScreenOverlayPickResultCollection")

class IAgStkGraphicsGlobeImageOverlayAddCompleteEventArgs(object):
    """The event is raised when the globe image overlay is displayed for the first time after being added using AddAsync."""
    _uuid = "{bbe097c9-d64c-4474-ba9a-fb47c76388ba}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetOverlay"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsGlobeImageOverlayAddCompleteEventArgs._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsGlobeImageOverlayAddCompleteEventArgs from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsGlobeImageOverlayAddCompleteEventArgs = agcom.GUID(IAgStkGraphicsGlobeImageOverlayAddCompleteEventArgs._uuid)
        vtable_offset_local = IAgStkGraphicsGlobeImageOverlayAddCompleteEventArgs._vtable_offset - 1
        self.__dict__["_GetOverlay"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsGlobeImageOverlayAddCompleteEventArgs, vtable_offset_local+1, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsGlobeImageOverlayAddCompleteEventArgs.__dict__ and type(IAgStkGraphicsGlobeImageOverlayAddCompleteEventArgs.__dict__[attrname]) == property:
            return IAgStkGraphicsGlobeImageOverlayAddCompleteEventArgs.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsGlobeImageOverlayAddCompleteEventArgs.")
    
    @property
    def Overlay(self) -> "IAgStkGraphicsGlobeImageOverlay":
        """The overlay object that was added earlier using AddAsync."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetOverlay"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{bbe097c9-d64c-4474-ba9a-fb47c76388ba}", IAgStkGraphicsGlobeImageOverlayAddCompleteEventArgs)
agcls.AgTypeNameMap["IAgStkGraphicsGlobeImageOverlayAddCompleteEventArgs"] = IAgStkGraphicsGlobeImageOverlayAddCompleteEventArgs
__all__.append("IAgStkGraphicsGlobeImageOverlayAddCompleteEventArgs")

class IAgStkGraphicsTerrainOverlayAddCompleteEventArgs(object):
    """The event is raised when the terrain overlay is displayed for the first time after having been added using AddAsync."""
    _uuid = "{76a70982-21b5-427f-9db1-c0b92950b516}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetOverlay"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsTerrainOverlayAddCompleteEventArgs._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsTerrainOverlayAddCompleteEventArgs from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsTerrainOverlayAddCompleteEventArgs = agcom.GUID(IAgStkGraphicsTerrainOverlayAddCompleteEventArgs._uuid)
        vtable_offset_local = IAgStkGraphicsTerrainOverlayAddCompleteEventArgs._vtable_offset - 1
        self.__dict__["_GetOverlay"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTerrainOverlayAddCompleteEventArgs, vtable_offset_local+1, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsTerrainOverlayAddCompleteEventArgs.__dict__ and type(IAgStkGraphicsTerrainOverlayAddCompleteEventArgs.__dict__[attrname]) == property:
            return IAgStkGraphicsTerrainOverlayAddCompleteEventArgs.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsTerrainOverlayAddCompleteEventArgs.")
    
    @property
    def Overlay(self) -> "IAgStkGraphicsTerrainOverlay":
        """The terrain overlay being displayed for the first time."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetOverlay"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{76a70982-21b5-427f-9db1-c0b92950b516}", IAgStkGraphicsTerrainOverlayAddCompleteEventArgs)
agcls.AgTypeNameMap["IAgStkGraphicsTerrainOverlayAddCompleteEventArgs"] = IAgStkGraphicsTerrainOverlayAddCompleteEventArgs
__all__.append("IAgStkGraphicsTerrainOverlayAddCompleteEventArgs")

class IAgStkGraphicsPickResultCollection(object):
    """A collection of picked objects."""
    _uuid = "{2d29d5b1-b160-49ad-8f58-cef696bc952a}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        self.__dict__["_Item"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsPickResultCollection._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsPickResultCollection from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsPickResultCollection = agcom.GUID(IAgStkGraphicsPickResultCollection._uuid)
        vtable_offset_local = IAgStkGraphicsPickResultCollection._vtable_offset - 1
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPickResultCollection, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_Item"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPickResultCollection, vtable_offset_local+2, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPickResultCollection, vtable_offset_local+3, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsPickResultCollection.__dict__ and type(IAgStkGraphicsPickResultCollection.__dict__[attrname]) == property:
            return IAgStkGraphicsPickResultCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsPickResultCollection.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> "IAgStkGraphicsPickResult":
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    
    @property
    def Count(self) -> int:
        """A total number of elements in the collection."""
        with agmarshall.LONG_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def Item(self, index:int) -> "IAgStkGraphicsPickResult":
        """Returns a picked object at the specified position in the collection."""
        with agmarshall.LONG_arg(index) as arg_index, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Item"](arg_index.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        with agmarshall.IEnumVARIANT_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{2d29d5b1-b160-49ad-8f58-cef696bc952a}", IAgStkGraphicsPickResultCollection)
agcls.AgTypeNameMap["IAgStkGraphicsPickResultCollection"] = IAgStkGraphicsPickResultCollection
__all__.append("IAgStkGraphicsPickResultCollection")

class IAgStkGraphicsRenderingEventArgs(object):
    """The event is raised when the scene is rendered."""
    _uuid = "{7c1eea22-fad1-437e-9282-f9202cd103bd}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetTime"] = _raise_uninitialized_error
        self.__dict__["_GetTimeInEpSecs"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsRenderingEventArgs._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsRenderingEventArgs from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsRenderingEventArgs = agcom.GUID(IAgStkGraphicsRenderingEventArgs._uuid)
        vtable_offset_local = IAgStkGraphicsRenderingEventArgs._vtable_offset - 1
        self.__dict__["_GetTime"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsRenderingEventArgs, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetTimeInEpSecs"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsRenderingEventArgs, vtable_offset_local+2, POINTER(agcom.DOUBLE))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsRenderingEventArgs.__dict__ and type(IAgStkGraphicsRenderingEventArgs.__dict__[attrname]) == property:
            return IAgStkGraphicsRenderingEventArgs.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsRenderingEventArgs.")
    
    @property
    def Time(self) -> "IAgDate":
        """The time of the rendering event."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTime"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def TimeInEpSecs(self) -> float:
        """The time of the rendering event (in STK's scenario epoch units)."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTimeInEpSecs"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{7c1eea22-fad1-437e-9282-f9202cd103bd}", IAgStkGraphicsRenderingEventArgs)
agcls.AgTypeNameMap["IAgStkGraphicsRenderingEventArgs"] = IAgStkGraphicsRenderingEventArgs
__all__.append("IAgStkGraphicsRenderingEventArgs")

class IAgStkGraphicsBatchPrimitiveIndex(object):
    """Represents an individual item index that is associated with a batch primitive. Provides the Index of the individual item and the Primitive that contains that index..."""
    _uuid = "{15dae589-33b5-4629-a50f-485a49546ddf}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetIndex"] = _raise_uninitialized_error
        self.__dict__["_GetPrimitive"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsBatchPrimitiveIndex._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsBatchPrimitiveIndex from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsBatchPrimitiveIndex = agcom.GUID(IAgStkGraphicsBatchPrimitiveIndex._uuid)
        vtable_offset_local = IAgStkGraphicsBatchPrimitiveIndex._vtable_offset - 1
        self.__dict__["_GetIndex"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsBatchPrimitiveIndex, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_GetPrimitive"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsBatchPrimitiveIndex, vtable_offset_local+2, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsBatchPrimitiveIndex.__dict__ and type(IAgStkGraphicsBatchPrimitiveIndex.__dict__[attrname]) == property:
            return IAgStkGraphicsBatchPrimitiveIndex.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsBatchPrimitiveIndex.")
    
    @property
    def Index(self) -> int:
        """The index of the item contained by the Primitive."""
        with agmarshall.LONG_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetIndex"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Primitive(self) -> "IAgStkGraphicsPrimitive":
        """The Primitive that contains the item at the Index specified."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPrimitive"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{15dae589-33b5-4629-a50f-485a49546ddf}", IAgStkGraphicsBatchPrimitiveIndex)
agcls.AgTypeNameMap["IAgStkGraphicsBatchPrimitiveIndex"] = IAgStkGraphicsBatchPrimitiveIndex
__all__.append("IAgStkGraphicsBatchPrimitiveIndex")

class IAgStkGraphicsKmlDocumentCollection(object):
    """A collection of KML documents."""
    _uuid = "{8f385d51-5b9c-4f8d-8340-1e8f49b51a6a}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        self.__dict__["_Item"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsKmlDocumentCollection._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsKmlDocumentCollection from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsKmlDocumentCollection = agcom.GUID(IAgStkGraphicsKmlDocumentCollection._uuid)
        vtable_offset_local = IAgStkGraphicsKmlDocumentCollection._vtable_offset - 1
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsKmlDocumentCollection, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_Item"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsKmlDocumentCollection, vtable_offset_local+2, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsKmlDocumentCollection, vtable_offset_local+3, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsKmlDocumentCollection.__dict__ and type(IAgStkGraphicsKmlDocumentCollection.__dict__[attrname]) == property:
            return IAgStkGraphicsKmlDocumentCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsKmlDocumentCollection.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> "IAgStkGraphicsKmlDocument":
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    
    @property
    def Count(self) -> int:
        """A total number of elements in the collection."""
        with agmarshall.LONG_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def Item(self, index:int) -> "IAgStkGraphicsKmlDocument":
        """Get an element at the specified position in the collection."""
        with agmarshall.LONG_arg(index) as arg_index, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Item"](arg_index.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        with agmarshall.IEnumVARIANT_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{8f385d51-5b9c-4f8d-8340-1e8f49b51a6a}", IAgStkGraphicsKmlDocumentCollection)
agcls.AgTypeNameMap["IAgStkGraphicsKmlDocumentCollection"] = IAgStkGraphicsKmlDocumentCollection
__all__.append("IAgStkGraphicsKmlDocumentCollection")

class IAgStkGraphicsKmlFeatureCollection(object):
    """A collection of KML features."""
    _uuid = "{e4f1dff5-fbb1-4951-bfc0-abfeec89acc8}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        self.__dict__["_Item"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsKmlFeatureCollection._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsKmlFeatureCollection from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsKmlFeatureCollection = agcom.GUID(IAgStkGraphicsKmlFeatureCollection._uuid)
        vtable_offset_local = IAgStkGraphicsKmlFeatureCollection._vtable_offset - 1
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsKmlFeatureCollection, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_Item"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsKmlFeatureCollection, vtable_offset_local+2, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsKmlFeatureCollection, vtable_offset_local+3, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsKmlFeatureCollection.__dict__ and type(IAgStkGraphicsKmlFeatureCollection.__dict__[attrname]) == property:
            return IAgStkGraphicsKmlFeatureCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsKmlFeatureCollection.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> "IAgStkGraphicsKmlFeature":
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    
    @property
    def Count(self) -> int:
        """A total number of elements in the collection."""
        with agmarshall.LONG_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def Item(self, index:int) -> "IAgStkGraphicsKmlFeature":
        """Get an element at the specified position in the collection."""
        with agmarshall.LONG_arg(index) as arg_index, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Item"](arg_index.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        with agmarshall.IEnumVARIANT_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{e4f1dff5-fbb1-4951-bfc0-abfeec89acc8}", IAgStkGraphicsKmlFeatureCollection)
agcls.AgTypeNameMap["IAgStkGraphicsKmlFeatureCollection"] = IAgStkGraphicsKmlFeatureCollection
__all__.append("IAgStkGraphicsKmlFeatureCollection")

class IAgStkGraphicsKmlDocumentLoadedEventArgs(object):
    """The event is raised when a KML document has been loaded."""
    _uuid = "{60d78883-928f-45f2-ab60-0becb167af3d}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetDocument"] = _raise_uninitialized_error
        self.__dict__["_GetException"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsKmlDocumentLoadedEventArgs._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsKmlDocumentLoadedEventArgs from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsKmlDocumentLoadedEventArgs = agcom.GUID(IAgStkGraphicsKmlDocumentLoadedEventArgs._uuid)
        vtable_offset_local = IAgStkGraphicsKmlDocumentLoadedEventArgs._vtable_offset - 1
        self.__dict__["_GetDocument"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsKmlDocumentLoadedEventArgs, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetException"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsKmlDocumentLoadedEventArgs, vtable_offset_local+2, POINTER(agcom.BSTR))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsKmlDocumentLoadedEventArgs.__dict__ and type(IAgStkGraphicsKmlDocumentLoadedEventArgs.__dict__[attrname]) == property:
            return IAgStkGraphicsKmlDocumentLoadedEventArgs.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsKmlDocumentLoadedEventArgs.")
    
    @property
    def Document(self) -> "IAgStkGraphicsKmlDocument":
        """Gets the KML document associated with the load event."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDocument"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Exception(self) -> str:
        """Returns an error message, if an error occurred while loading the KML; otherwise an empty string."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetException"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{60d78883-928f-45f2-ab60-0becb167af3d}", IAgStkGraphicsKmlDocumentLoadedEventArgs)
agcls.AgTypeNameMap["IAgStkGraphicsKmlDocumentLoadedEventArgs"] = IAgStkGraphicsKmlDocumentLoadedEventArgs
__all__.append("IAgStkGraphicsKmlDocumentLoadedEventArgs")

class IAgStkGraphicsFactoryAndInitializers(object):
    """Methods and properties are used to initialize new primitives, display conditions, screen overlays, textures and many other types; compute and retrieve triangulator results and access global properties (what's known as static properties, static methods a..."""
    _uuid = "{5ccf1ef3-48a0-4b22-9fcf-c32eae3f8d69}"
    _num_methods = 82
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetBoxTriangulator"] = _raise_uninitialized_error
        self.__dict__["_GetCylinderTriangulator"] = _raise_uninitialized_error
        self.__dict__["_GetEllipsoidTriangulator"] = _raise_uninitialized_error
        self.__dict__["_GetExtrudedPolylineTriangulator"] = _raise_uninitialized_error
        self.__dict__["_GetSurfaceExtentTriangulator"] = _raise_uninitialized_error
        self.__dict__["_GetSurfacePolygonTriangulator"] = _raise_uninitialized_error
        self.__dict__["_GetSurfaceShapes"] = _raise_uninitialized_error
        self.__dict__["_GetAGIProcessedImageGlobeOverlay"] = _raise_uninitialized_error
        self.__dict__["_GetAGIProcessedTerrainOverlay"] = _raise_uninitialized_error
        self.__dict__["_GetAGIRoamImageGlobeOverlay"] = _raise_uninitialized_error
        self.__dict__["_GetCustomImageGlobeOverlayPluginActivator"] = _raise_uninitialized_error
        self.__dict__["_GetGeospatialImageGlobeOverlay"] = _raise_uninitialized_error
        self.__dict__["_GetProjectedRasterOverlay"] = _raise_uninitialized_error
        self.__dict__["_GetProjection"] = _raise_uninitialized_error
        self.__dict__["_GetAltitudeDisplayCondition"] = _raise_uninitialized_error
        self.__dict__["_GetCompositeDisplayCondition"] = _raise_uninitialized_error
        self.__dict__["_GetCompositePrimitive"] = _raise_uninitialized_error
        self.__dict__["_GetConstantDisplayCondition"] = _raise_uninitialized_error
        self.__dict__["_GetDistanceDisplayCondition"] = _raise_uninitialized_error
        self.__dict__["_GetDistanceToGlobeOverlayDisplayCondition"] = _raise_uninitialized_error
        self.__dict__["_GetDistanceToPositionDisplayCondition"] = _raise_uninitialized_error
        self.__dict__["_GetDistanceToPrimitiveDisplayCondition"] = _raise_uninitialized_error
        self.__dict__["_GetDurationPathPrimitiveUpdatePolicy"] = _raise_uninitialized_error
        self.__dict__["_GetGlobeImageOverlay"] = _raise_uninitialized_error
        self.__dict__["_GetGraphicsFont"] = _raise_uninitialized_error
        self.__dict__["_GetGreatArcInterpolator"] = _raise_uninitialized_error
        self.__dict__["_GetAlphaFromLuminanceFilter"] = _raise_uninitialized_error
        self.__dict__["_GetAlphaFromPixelFilter"] = _raise_uninitialized_error
        self.__dict__["_GetAlphaFromRasterFilter"] = _raise_uninitialized_error
        self.__dict__["_GetBandExtractFilter"] = _raise_uninitialized_error
        self.__dict__["_GetBandOrderFilter"] = _raise_uninitialized_error
        self.__dict__["_GetBlurFilter"] = _raise_uninitialized_error
        self.__dict__["_GetBrightnessFilter"] = _raise_uninitialized_error
        self.__dict__["_GetColorToLuminanceFilter"] = _raise_uninitialized_error
        self.__dict__["_GetContrastFilter"] = _raise_uninitialized_error
        self.__dict__["_GetConvolutionFilter"] = _raise_uninitialized_error
        self.__dict__["_GetEdgeDetectFilter"] = _raise_uninitialized_error
        self.__dict__["_GetFilteringRasterStream"] = _raise_uninitialized_error
        self.__dict__["_GetFlipFilter"] = _raise_uninitialized_error
        self.__dict__["_GetGammaCorrectionFilter"] = _raise_uninitialized_error
        self.__dict__["_GetGaussianBlurFilter"] = _raise_uninitialized_error
        self.__dict__["_GetGradientDetectFilter"] = _raise_uninitialized_error
        self.__dict__["_GetJpeg2000Writer"] = _raise_uninitialized_error
        self.__dict__["_GetLevelsFilter"] = _raise_uninitialized_error
        self.__dict__["_GetProjectionRasterStreamPluginActivator"] = _raise_uninitialized_error
        self.__dict__["_GetRaster"] = _raise_uninitialized_error
        self.__dict__["_GetRasterAttributes"] = _raise_uninitialized_error
        self.__dict__["_GetRotateFilter"] = _raise_uninitialized_error
        self.__dict__["_GetSequenceFilter"] = _raise_uninitialized_error
        self.__dict__["_GetSharpenFilter"] = _raise_uninitialized_error
        self.__dict__["_GetVideoStream"] = _raise_uninitialized_error
        self.__dict__["_GetMarkerBatchPrimitive"] = _raise_uninitialized_error
        self.__dict__["_GetMarkerBatchPrimitiveOptionalParameters"] = _raise_uninitialized_error
        self.__dict__["_GetMaximumCountPathPrimitiveUpdatePolicy"] = _raise_uninitialized_error
        self.__dict__["_GetModelPrimitive"] = _raise_uninitialized_error
        self.__dict__["_GetPathPrimitive"] = _raise_uninitialized_error
        self.__dict__["_GetPixelSizeDisplayCondition"] = _raise_uninitialized_error
        self.__dict__["_GetPointBatchPrimitive"] = _raise_uninitialized_error
        self.__dict__["_GetPolylinePrimitive"] = _raise_uninitialized_error
        self.__dict__["_GetRasterImageGlobeOverlay"] = _raise_uninitialized_error
        self.__dict__["_GetRhumbLineInterpolator"] = _raise_uninitialized_error
        self.__dict__["_GetSceneDisplayCondition"] = _raise_uninitialized_error
        self.__dict__["_GetSceneManager"] = _raise_uninitialized_error
        self.__dict__["_GetScreenOverlay"] = _raise_uninitialized_error
        self.__dict__["_GetSolidPrimitive"] = _raise_uninitialized_error
        self.__dict__["_GetSurfaceMeshPrimitive"] = _raise_uninitialized_error
        self.__dict__["_GetTerrainOverlay"] = _raise_uninitialized_error
        self.__dict__["_GetTextBatchPrimitive"] = _raise_uninitialized_error
        self.__dict__["_GetTextBatchPrimitiveOptionalParameters"] = _raise_uninitialized_error
        self.__dict__["_GetTextureMatrix"] = _raise_uninitialized_error
        self.__dict__["_GetTextureScreenOverlay"] = _raise_uninitialized_error
        self.__dict__["_GetTimeIntervalDisplayCondition"] = _raise_uninitialized_error
        self.__dict__["_GetTriangleMeshPrimitive"] = _raise_uninitialized_error
        self.__dict__["_GetTriangleMeshPrimitiveOptionalParameters"] = _raise_uninitialized_error
        self.__dict__["_GetTextureFilter2D"] = _raise_uninitialized_error
        self.__dict__["_GetBoundingSphere"] = _raise_uninitialized_error
        self.__dict__["_GetPathPoint"] = _raise_uninitialized_error
        self.__dict__["_GetTextOverlay"] = _raise_uninitialized_error
        self.__dict__["_GetAGICustomTerrainOverlay"] = _raise_uninitialized_error
        self.__dict__["_GetAxesPrimitive"] = _raise_uninitialized_error
        self.__dict__["_GetVectorPrimitive"] = _raise_uninitialized_error
        self.__dict__["_GetPolylinePrimitiveOptionalParameters"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsFactoryAndInitializers._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsFactoryAndInitializers from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsFactoryAndInitializers = agcom.GUID(IAgStkGraphicsFactoryAndInitializers._uuid)
        vtable_offset_local = IAgStkGraphicsFactoryAndInitializers._vtable_offset - 1
        self.__dict__["_GetBoxTriangulator"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetCylinderTriangulator"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+2, POINTER(agcom.PVOID))
        self.__dict__["_GetEllipsoidTriangulator"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_GetExtrudedPolylineTriangulator"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+4, POINTER(agcom.PVOID))
        self.__dict__["_GetSurfaceExtentTriangulator"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+5, POINTER(agcom.PVOID))
        self.__dict__["_GetSurfacePolygonTriangulator"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+6, POINTER(agcom.PVOID))
        self.__dict__["_GetSurfaceShapes"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+7, POINTER(agcom.PVOID))
        self.__dict__["_GetAGIProcessedImageGlobeOverlay"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+8, POINTER(agcom.PVOID))
        self.__dict__["_GetAGIProcessedTerrainOverlay"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+9, POINTER(agcom.PVOID))
        self.__dict__["_GetAGIRoamImageGlobeOverlay"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+10, POINTER(agcom.PVOID))
        self.__dict__["_GetCustomImageGlobeOverlayPluginActivator"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+11, POINTER(agcom.PVOID))
        self.__dict__["_GetGeospatialImageGlobeOverlay"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+12, POINTER(agcom.PVOID))
        self.__dict__["_GetProjectedRasterOverlay"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+13, POINTER(agcom.PVOID))
        self.__dict__["_GetProjection"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+14, POINTER(agcom.PVOID))
        self.__dict__["_GetAltitudeDisplayCondition"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+15, POINTER(agcom.PVOID))
        self.__dict__["_GetCompositeDisplayCondition"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+16, POINTER(agcom.PVOID))
        self.__dict__["_GetCompositePrimitive"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+17, POINTER(agcom.PVOID))
        self.__dict__["_GetConstantDisplayCondition"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+18, POINTER(agcom.PVOID))
        self.__dict__["_GetDistanceDisplayCondition"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+19, POINTER(agcom.PVOID))
        self.__dict__["_GetDistanceToGlobeOverlayDisplayCondition"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+20, POINTER(agcom.PVOID))
        self.__dict__["_GetDistanceToPositionDisplayCondition"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+21, POINTER(agcom.PVOID))
        self.__dict__["_GetDistanceToPrimitiveDisplayCondition"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+22, POINTER(agcom.PVOID))
        self.__dict__["_GetDurationPathPrimitiveUpdatePolicy"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+23, POINTER(agcom.PVOID))
        self.__dict__["_GetGlobeImageOverlay"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+24, POINTER(agcom.PVOID))
        self.__dict__["_GetGraphicsFont"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+25, POINTER(agcom.PVOID))
        self.__dict__["_GetGreatArcInterpolator"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+26, POINTER(agcom.PVOID))
        self.__dict__["_GetAlphaFromLuminanceFilter"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+27, POINTER(agcom.PVOID))
        self.__dict__["_GetAlphaFromPixelFilter"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+28, POINTER(agcom.PVOID))
        self.__dict__["_GetAlphaFromRasterFilter"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+29, POINTER(agcom.PVOID))
        self.__dict__["_GetBandExtractFilter"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+30, POINTER(agcom.PVOID))
        self.__dict__["_GetBandOrderFilter"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+31, POINTER(agcom.PVOID))
        self.__dict__["_GetBlurFilter"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+32, POINTER(agcom.PVOID))
        self.__dict__["_GetBrightnessFilter"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+33, POINTER(agcom.PVOID))
        self.__dict__["_GetColorToLuminanceFilter"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+34, POINTER(agcom.PVOID))
        self.__dict__["_GetContrastFilter"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+35, POINTER(agcom.PVOID))
        self.__dict__["_GetConvolutionFilter"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+36, POINTER(agcom.PVOID))
        self.__dict__["_GetEdgeDetectFilter"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+37, POINTER(agcom.PVOID))
        self.__dict__["_GetFilteringRasterStream"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+38, POINTER(agcom.PVOID))
        self.__dict__["_GetFlipFilter"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+39, POINTER(agcom.PVOID))
        self.__dict__["_GetGammaCorrectionFilter"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+40, POINTER(agcom.PVOID))
        self.__dict__["_GetGaussianBlurFilter"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+41, POINTER(agcom.PVOID))
        self.__dict__["_GetGradientDetectFilter"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+42, POINTER(agcom.PVOID))
        self.__dict__["_GetJpeg2000Writer"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+43, POINTER(agcom.PVOID))
        self.__dict__["_GetLevelsFilter"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+44, POINTER(agcom.PVOID))
        self.__dict__["_GetProjectionRasterStreamPluginActivator"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+45, POINTER(agcom.PVOID))
        self.__dict__["_GetRaster"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+46, POINTER(agcom.PVOID))
        self.__dict__["_GetRasterAttributes"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+47, POINTER(agcom.PVOID))
        self.__dict__["_GetRotateFilter"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+48, POINTER(agcom.PVOID))
        self.__dict__["_GetSequenceFilter"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+49, POINTER(agcom.PVOID))
        self.__dict__["_GetSharpenFilter"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+50, POINTER(agcom.PVOID))
        self.__dict__["_GetVideoStream"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+51, POINTER(agcom.PVOID))
        self.__dict__["_GetMarkerBatchPrimitive"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+52, POINTER(agcom.PVOID))
        self.__dict__["_GetMarkerBatchPrimitiveOptionalParameters"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+53, POINTER(agcom.PVOID))
        self.__dict__["_GetMaximumCountPathPrimitiveUpdatePolicy"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+54, POINTER(agcom.PVOID))
        self.__dict__["_GetModelPrimitive"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+55, POINTER(agcom.PVOID))
        self.__dict__["_GetPathPrimitive"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+56, POINTER(agcom.PVOID))
        self.__dict__["_GetPixelSizeDisplayCondition"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+57, POINTER(agcom.PVOID))
        self.__dict__["_GetPointBatchPrimitive"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+58, POINTER(agcom.PVOID))
        self.__dict__["_GetPolylinePrimitive"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+59, POINTER(agcom.PVOID))
        self.__dict__["_GetRasterImageGlobeOverlay"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+60, POINTER(agcom.PVOID))
        self.__dict__["_GetRhumbLineInterpolator"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+61, POINTER(agcom.PVOID))
        self.__dict__["_GetSceneDisplayCondition"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+62, POINTER(agcom.PVOID))
        self.__dict__["_GetSceneManager"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+63, POINTER(agcom.PVOID))
        self.__dict__["_GetScreenOverlay"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+64, POINTER(agcom.PVOID))
        self.__dict__["_GetSolidPrimitive"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+65, POINTER(agcom.PVOID))
        self.__dict__["_GetSurfaceMeshPrimitive"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+66, POINTER(agcom.PVOID))
        self.__dict__["_GetTerrainOverlay"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+67, POINTER(agcom.PVOID))
        self.__dict__["_GetTextBatchPrimitive"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+68, POINTER(agcom.PVOID))
        self.__dict__["_GetTextBatchPrimitiveOptionalParameters"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+69, POINTER(agcom.PVOID))
        self.__dict__["_GetTextureMatrix"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+70, POINTER(agcom.PVOID))
        self.__dict__["_GetTextureScreenOverlay"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+71, POINTER(agcom.PVOID))
        self.__dict__["_GetTimeIntervalDisplayCondition"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+72, POINTER(agcom.PVOID))
        self.__dict__["_GetTriangleMeshPrimitive"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+73, POINTER(agcom.PVOID))
        self.__dict__["_GetTriangleMeshPrimitiveOptionalParameters"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+74, POINTER(agcom.PVOID))
        self.__dict__["_GetTextureFilter2D"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+75, POINTER(agcom.PVOID))
        self.__dict__["_GetBoundingSphere"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+76, POINTER(agcom.PVOID))
        self.__dict__["_GetPathPoint"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+77, POINTER(agcom.PVOID))
        self.__dict__["_GetTextOverlay"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+78, POINTER(agcom.PVOID))
        self.__dict__["_GetAGICustomTerrainOverlay"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+79, POINTER(agcom.PVOID))
        self.__dict__["_GetAxesPrimitive"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+80, POINTER(agcom.PVOID))
        self.__dict__["_GetVectorPrimitive"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+81, POINTER(agcom.PVOID))
        self.__dict__["_GetPolylinePrimitiveOptionalParameters"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFactoryAndInitializers, vtable_offset_local+82, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsFactoryAndInitializers.__dict__ and type(IAgStkGraphicsFactoryAndInitializers.__dict__[attrname]) == property:
            return IAgStkGraphicsFactoryAndInitializers.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsFactoryAndInitializers.")
    
    @property
    def BoxTriangulator(self) -> "IAgStkGraphicsBoxTriangulatorInitializer":
        """Access global methods and properties of BoxTriangulator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBoxTriangulator"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def CylinderTriangulator(self) -> "IAgStkGraphicsCylinderTriangulatorInitializer":
        """Access global methods and properties of CylinderTriangulator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCylinderTriangulator"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def EllipsoidTriangulator(self) -> "IAgStkGraphicsEllipsoidTriangulatorInitializer":
        """Access global methods and properties of EllipsoidTriangulator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetEllipsoidTriangulator"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def ExtrudedPolylineTriangulator(self) -> "IAgStkGraphicsExtrudedPolylineTriangulatorInitializer":
        """Access global methods and properties of ExtrudedPolylineTriangulator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetExtrudedPolylineTriangulator"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def SurfaceExtentTriangulator(self) -> "IAgStkGraphicsSurfaceExtentTriangulatorInitializer":
        """Access global methods and properties of SurfaceExtentTriangulator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSurfaceExtentTriangulator"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def SurfacePolygonTriangulator(self) -> "IAgStkGraphicsSurfacePolygonTriangulatorInitializer":
        """Access global methods and properties of SurfacePolygonTriangulator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSurfacePolygonTriangulator"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def SurfaceShapes(self) -> "IAgStkGraphicsSurfaceShapesInitializer":
        """Access global methods and properties of SurfaceShapes (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSurfaceShapes"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def AGIProcessedImageGlobeOverlay(self) -> "IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory":
        """Access global methods and properties of AGIProcessedImageGlobeOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAGIProcessedImageGlobeOverlay"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def AGIProcessedTerrainOverlay(self) -> "IAgStkGraphicsAGIProcessedTerrainOverlayFactory":
        """Access global methods and properties of AGIProcessedTerrainOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAGIProcessedTerrainOverlay"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def AGIRoamImageGlobeOverlay(self) -> "IAgStkGraphicsAGIRoamImageGlobeOverlayFactory":
        """Access global methods and properties of AGIRoamImageGlobeOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAGIRoamImageGlobeOverlay"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def CustomImageGlobeOverlayPluginActivator(self) -> "IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory":
        """Access global methods and properties of CustomImageGlobeOverlayPluginActivator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCustomImageGlobeOverlayPluginActivator"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def GeospatialImageGlobeOverlay(self) -> "IAgStkGraphicsGeospatialImageGlobeOverlayFactory":
        """Access global methods and properties of GeospatialImageGlobeOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetGeospatialImageGlobeOverlay"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def ProjectedRasterOverlay(self) -> "IAgStkGraphicsProjectedRasterOverlayFactory":
        """Access global methods and properties of ProjectedRasterOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetProjectedRasterOverlay"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Projection(self) -> "IAgStkGraphicsProjectionFactory":
        """Access global methods and properties of Projection (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetProjection"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def AltitudeDisplayCondition(self) -> "IAgStkGraphicsAltitudeDisplayConditionFactory":
        """Access global methods and properties of AltitudeDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitudeDisplayCondition"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def CompositeDisplayCondition(self) -> "IAgStkGraphicsCompositeDisplayConditionFactory":
        """Access global methods and properties of CompositeDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCompositeDisplayCondition"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def CompositePrimitive(self) -> "IAgStkGraphicsCompositePrimitiveFactory":
        """Access global methods and properties of CompositePrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCompositePrimitive"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def ConstantDisplayCondition(self) -> "IAgStkGraphicsConstantDisplayConditionFactory":
        """Access global methods and properties of ConstantDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetConstantDisplayCondition"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def DistanceDisplayCondition(self) -> "IAgStkGraphicsDistanceDisplayConditionFactory":
        """Access global methods and properties of DistanceDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDistanceDisplayCondition"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def DistanceToGlobeOverlayDisplayCondition(self) -> "IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory":
        """Access global methods and properties of DistanceToGlobeOverlayDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDistanceToGlobeOverlayDisplayCondition"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def DistanceToPositionDisplayCondition(self) -> "IAgStkGraphicsDistanceToPositionDisplayConditionFactory":
        """Access global methods and properties of DistanceToPositionDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDistanceToPositionDisplayCondition"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def DistanceToPrimitiveDisplayCondition(self) -> "IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory":
        """Access global methods and properties of DistanceToPrimitiveDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDistanceToPrimitiveDisplayCondition"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def DurationPathPrimitiveUpdatePolicy(self) -> "IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory":
        """Access global methods and properties of DurationPathPrimitiveUpdatePolicy (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDurationPathPrimitiveUpdatePolicy"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def GlobeImageOverlay(self) -> "IAgStkGraphicsGlobeImageOverlayInitializer":
        """Access global methods and properties of GlobeImageOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetGlobeImageOverlay"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def GraphicsFont(self) -> "IAgStkGraphicsGraphicsFontFactory":
        """Access global methods and properties of GraphicsFont (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetGraphicsFont"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def GreatArcInterpolator(self) -> "IAgStkGraphicsGreatArcInterpolatorFactory":
        """Access global methods and properties of GreatArcInterpolator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetGreatArcInterpolator"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def AlphaFromLuminanceFilter(self) -> "IAgStkGraphicsAlphaFromLuminanceFilterFactory":
        """Access global methods and properties of AlphaFromLuminanceFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAlphaFromLuminanceFilter"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def AlphaFromPixelFilter(self) -> "IAgStkGraphicsAlphaFromPixelFilterFactory":
        """Access global methods and properties of AlphaFromPixelFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAlphaFromPixelFilter"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def AlphaFromRasterFilter(self) -> "IAgStkGraphicsAlphaFromRasterFilterFactory":
        """Access global methods and properties of AlphaFromRasterFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAlphaFromRasterFilter"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def BandExtractFilter(self) -> "IAgStkGraphicsBandExtractFilterFactory":
        """Access global methods and properties of BandExtractFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBandExtractFilter"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def BandOrderFilter(self) -> "IAgStkGraphicsBandOrderFilterFactory":
        """Access global methods and properties of BandOrderFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBandOrderFilter"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def BlurFilter(self) -> "IAgStkGraphicsBlurFilterFactory":
        """Access global methods and properties of BlurFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBlurFilter"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def BrightnessFilter(self) -> "IAgStkGraphicsBrightnessFilterFactory":
        """Access global methods and properties of BrightnessFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBrightnessFilter"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def ColorToLuminanceFilter(self) -> "IAgStkGraphicsColorToLuminanceFilterFactory":
        """Access global methods and properties of ColorToLuminanceFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetColorToLuminanceFilter"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def ContrastFilter(self) -> "IAgStkGraphicsContrastFilterFactory":
        """Access global methods and properties of ContrastFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetContrastFilter"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def ConvolutionFilter(self) -> "IAgStkGraphicsConvolutionFilterFactory":
        """Access global methods and properties of ConvolutionFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetConvolutionFilter"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def EdgeDetectFilter(self) -> "IAgStkGraphicsEdgeDetectFilterFactory":
        """Access global methods and properties of EdgeDetectFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetEdgeDetectFilter"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def FilteringRasterStream(self) -> "IAgStkGraphicsFilteringRasterStreamFactory":
        """Access global methods and properties of FilteringRasterStream (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetFilteringRasterStream"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def FlipFilter(self) -> "IAgStkGraphicsFlipFilterFactory":
        """Access global methods and properties of FlipFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetFlipFilter"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def GammaCorrectionFilter(self) -> "IAgStkGraphicsGammaCorrectionFilterFactory":
        """Access global methods and properties of GammaCorrectionFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetGammaCorrectionFilter"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def GaussianBlurFilter(self) -> "IAgStkGraphicsGaussianBlurFilterFactory":
        """Access global methods and properties of GaussianBlurFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetGaussianBlurFilter"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def GradientDetectFilter(self) -> "IAgStkGraphicsGradientDetectFilterFactory":
        """Access global methods and properties of GradientDetectFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetGradientDetectFilter"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Jpeg2000Writer(self) -> "IAgStkGraphicsJpeg2000WriterInitializer":
        """Access global methods and properties of Jpeg2000Writer (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetJpeg2000Writer"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def LevelsFilter(self) -> "IAgStkGraphicsLevelsFilterFactory":
        """Access global methods and properties of LevelsFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetLevelsFilter"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def ProjectionRasterStreamPluginActivator(self) -> "IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory":
        """Access global methods and properties of ProjectionRasterStreamPluginActivator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetProjectionRasterStreamPluginActivator"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Raster(self) -> "IAgStkGraphicsRasterFactory":
        """Access global methods and properties of Raster (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetRaster"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def RasterAttributes(self) -> "IAgStkGraphicsRasterAttributesFactory":
        """Access global methods and properties of RasterAttributes (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetRasterAttributes"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def RotateFilter(self) -> "IAgStkGraphicsRotateFilterFactory":
        """Access global methods and properties of RotateFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetRotateFilter"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def SequenceFilter(self) -> "IAgStkGraphicsSequenceFilterFactory":
        """Access global methods and properties of SequenceFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSequenceFilter"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def SharpenFilter(self) -> "IAgStkGraphicsSharpenFilterFactory":
        """Access global methods and properties of SharpenFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSharpenFilter"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def VideoStream(self) -> "IAgStkGraphicsVideoStreamFactory":
        """Access global methods and properties of VideoStream (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetVideoStream"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def MarkerBatchPrimitive(self) -> "IAgStkGraphicsMarkerBatchPrimitiveFactory":
        """Access global methods and properties of MarkerBatchPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMarkerBatchPrimitive"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def MarkerBatchPrimitiveOptionalParameters(self) -> "IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory":
        """Access global methods and properties of MarkerBatchPrimitiveOptionalParameters (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMarkerBatchPrimitiveOptionalParameters"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def MaximumCountPathPrimitiveUpdatePolicy(self) -> "IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory":
        """Access global methods and properties of MaximumCountPathPrimitiveUpdatePolicy (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaximumCountPathPrimitiveUpdatePolicy"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def ModelPrimitive(self) -> "IAgStkGraphicsModelPrimitiveFactory":
        """Access global methods and properties of ModelPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetModelPrimitive"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def PathPrimitive(self) -> "IAgStkGraphicsPathPrimitiveFactory":
        """Access global methods and properties of PathPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPathPrimitive"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def PixelSizeDisplayCondition(self) -> "IAgStkGraphicsPixelSizeDisplayConditionFactory":
        """Access global methods and properties of PixelSizeDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPixelSizeDisplayCondition"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def PointBatchPrimitive(self) -> "IAgStkGraphicsPointBatchPrimitiveFactory":
        """Access global methods and properties of PointBatchPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPointBatchPrimitive"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def PolylinePrimitive(self) -> "IAgStkGraphicsPolylinePrimitiveFactory":
        """Access global methods and properties of PolylinePrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPolylinePrimitive"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def RasterImageGlobeOverlay(self) -> "IAgStkGraphicsRasterImageGlobeOverlayFactory":
        """Access global methods and properties of RasterImageGlobeOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetRasterImageGlobeOverlay"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def RhumbLineInterpolator(self) -> "IAgStkGraphicsRhumbLineInterpolatorFactory":
        """Access global methods and properties of RhumbLineInterpolator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetRhumbLineInterpolator"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def SceneDisplayCondition(self) -> "IAgStkGraphicsSceneDisplayConditionFactory":
        """Access global methods and properties of SceneDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSceneDisplayCondition"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def SceneManager(self) -> "IAgStkGraphicsSceneManagerInitializer":
        """Access global methods and properties of SceneManager (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSceneManager"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def ScreenOverlay(self) -> "IAgStkGraphicsScreenOverlayFactory":
        """Access global methods and properties of ScreenOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetScreenOverlay"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def SolidPrimitive(self) -> "IAgStkGraphicsSolidPrimitiveFactory":
        """Access global methods and properties of SolidPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSolidPrimitive"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def SurfaceMeshPrimitive(self) -> "IAgStkGraphicsSurfaceMeshPrimitiveFactory":
        """Access global methods and properties of SurfaceMeshPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSurfaceMeshPrimitive"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def TerrainOverlay(self) -> "IAgStkGraphicsTerrainOverlayInitializer":
        """Access global methods and properties of TerrainOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTerrainOverlay"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def TextBatchPrimitive(self) -> "IAgStkGraphicsTextBatchPrimitiveFactory":
        """Access global methods and properties of TextBatchPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTextBatchPrimitive"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def TextBatchPrimitiveOptionalParameters(self) -> "IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory":
        """Access global methods and properties of TextBatchPrimitiveOptionalParameters (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTextBatchPrimitiveOptionalParameters"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def TextureMatrix(self) -> "IAgStkGraphicsTextureMatrixFactory":
        """Access global methods and properties of TextureMatrix (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTextureMatrix"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def TextureScreenOverlay(self) -> "IAgStkGraphicsTextureScreenOverlayFactory":
        """Access global methods and properties of TextureScreenOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTextureScreenOverlay"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def TimeIntervalDisplayCondition(self) -> "IAgStkGraphicsTimeIntervalDisplayConditionFactory":
        """Access global methods and properties of TimeIntervalDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTimeIntervalDisplayCondition"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def TriangleMeshPrimitive(self) -> "IAgStkGraphicsTriangleMeshPrimitiveFactory":
        """Access global methods and properties of TriangleMeshPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTriangleMeshPrimitive"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def TriangleMeshPrimitiveOptionalParameters(self) -> "IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory":
        """Access global methods and properties of TriangleMeshPrimitiveOptionalParameters (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTriangleMeshPrimitiveOptionalParameters"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def TextureFilter2D(self) -> "IAgStkGraphicsTextureFilter2DFactory":
        """Factory creates texture filters."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTextureFilter2D"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def BoundingSphere(self) -> "IAgStkGraphicsBoundingSphereFactory":
        """Factory creates bounding spheres."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBoundingSphere"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def PathPoint(self) -> "IAgStkGraphicsPathPointFactory":
        """Factory creates path points."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPathPoint"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def TextOverlay(self) -> "IAgStkGraphicsTextOverlayFactory":
        """Access global methods and properties of TextOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTextOverlay"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def AGICustomTerrainOverlay(self) -> "IAgStkGraphicsAGICustomTerrainOverlayFactory":
        """Access global methods and properties of AGICustomTerrainOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAGICustomTerrainOverlay"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def AxesPrimitive(self) -> "IAgStkGraphicsAxesPrimitiveFactory":
        """Access global methods and properties of AxesPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAxesPrimitive"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def VectorPrimitive(self) -> "IAgStkGraphicsVectorPrimitiveFactory":
        """Access global methods and properties of VectorPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetVectorPrimitive"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def PolylinePrimitiveOptionalParameters(self) -> "IAgStkGraphicsPolylinePrimitiveOptionalParametersFactory":
        """Access global methods and properties of PolylinePrimitiveOptionalParameters (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPolylinePrimitiveOptionalParameters"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{5ccf1ef3-48a0-4b22-9fcf-c32eae3f8d69}", IAgStkGraphicsFactoryAndInitializers)
agcls.AgTypeNameMap["IAgStkGraphicsFactoryAndInitializers"] = IAgStkGraphicsFactoryAndInitializers
__all__.append("IAgStkGraphicsFactoryAndInitializers")

class IAgStkGraphicsExtrudedPolylineTriangulatorResult(object):
    """The result from extruded polyline triangulation: a triangle mesh defined using an indexed triangle list with top and bottom boundary positions. The mesh is commonly visualized with the triangle mesh primitive or surface mesh primitive..."""
    _uuid = "{5d94d077-0a56-4d83-ac90-369344533684}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetTopBoundaryPositions"] = _raise_uninitialized_error
        self.__dict__["_GetBottomBoundaryPositions"] = _raise_uninitialized_error
        self.__dict__["_GetBoundaryPositionsWindingOrder"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsExtrudedPolylineTriangulatorResult._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsExtrudedPolylineTriangulatorResult from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsExtrudedPolylineTriangulatorResult = agcom.GUID(IAgStkGraphicsExtrudedPolylineTriangulatorResult._uuid)
        vtable_offset_local = IAgStkGraphicsExtrudedPolylineTriangulatorResult._vtable_offset - 1
        self.__dict__["_GetTopBoundaryPositions"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsExtrudedPolylineTriangulatorResult, vtable_offset_local+1, POINTER(agcom.SAFEARRAY))
        self.__dict__["_GetBottomBoundaryPositions"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsExtrudedPolylineTriangulatorResult, vtable_offset_local+2, POINTER(agcom.SAFEARRAY))
        self.__dict__["_GetBoundaryPositionsWindingOrder"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsExtrudedPolylineTriangulatorResult, vtable_offset_local+3, POINTER(agcom.LONG))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsExtrudedPolylineTriangulatorResult.__dict__ and type(IAgStkGraphicsExtrudedPolylineTriangulatorResult.__dict__[attrname]) == property:
            return IAgStkGraphicsExtrudedPolylineTriangulatorResult.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsExtrudedPolylineTriangulatorResult.")
    
    @property
    def TopBoundaryPositions(self) -> list:
        """Gets the boundary positions along the top of the extrusion. Three array elements (in the order x, y, z) constitute one position."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTopBoundaryPositions"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def BottomBoundaryPositions(self) -> list:
        """Gets the boundary positions along the bottom of the extrusion. Three array elements (in the order x, y, z) constitute one position."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBottomBoundaryPositions"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def BoundaryPositionsWindingOrder(self) -> "AgEStkGraphicsWindingOrder":
        """Gets the winding order of top boundary positions and bottom boundary positions."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsWindingOrder) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBoundaryPositionsWindingOrder"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{5d94d077-0a56-4d83-ac90-369344533684}", IAgStkGraphicsExtrudedPolylineTriangulatorResult)
agcls.AgTypeNameMap["IAgStkGraphicsExtrudedPolylineTriangulatorResult"] = IAgStkGraphicsExtrudedPolylineTriangulatorResult
__all__.append("IAgStkGraphicsExtrudedPolylineTriangulatorResult")

class IAgStkGraphicsSolidTriangulatorResult(object):
    """The result from a triangulation of a solid: a triangle mesh defined using an indexed triangle list and positions outlining the solid. It is recommended to visualize the solid using a solid primitive..."""
    _uuid = "{a7ba0673-f944-4dc6-a450-5cb62915cb7b}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetOutlineIndices"] = _raise_uninitialized_error
        self.__dict__["_GetOutlinePositions"] = _raise_uninitialized_error
        self.__dict__["_GetOutlinePolylineType"] = _raise_uninitialized_error
        self.__dict__["_GetClosed"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsSolidTriangulatorResult._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsSolidTriangulatorResult from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsSolidTriangulatorResult = agcom.GUID(IAgStkGraphicsSolidTriangulatorResult._uuid)
        vtable_offset_local = IAgStkGraphicsSolidTriangulatorResult._vtable_offset - 1
        self.__dict__["_GetOutlineIndices"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSolidTriangulatorResult, vtable_offset_local+1, POINTER(agcom.SAFEARRAY))
        self.__dict__["_GetOutlinePositions"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSolidTriangulatorResult, vtable_offset_local+2, POINTER(agcom.SAFEARRAY))
        self.__dict__["_GetOutlinePolylineType"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSolidTriangulatorResult, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_GetClosed"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSolidTriangulatorResult, vtable_offset_local+4, POINTER(agcom.VARIANT_BOOL))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsSolidTriangulatorResult.__dict__ and type(IAgStkGraphicsSolidTriangulatorResult.__dict__[attrname]) == property:
            return IAgStkGraphicsSolidTriangulatorResult.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsSolidTriangulatorResult.")
    
    @property
    def OutlineIndices(self) -> list:
        """Gets indices into positions that define the positions outlining the solid. The indices returned consider the three components of a position (x, y, and z) as a single array element..."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetOutlineIndices"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def OutlinePositions(self) -> list:
        """Gets the positions outlining the solid. Three array elements (in the order x, y, z) constitute one position."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetOutlinePositions"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def OutlinePolylineType(self) -> "AgEStkGraphicsPolylineType":
        """Gets the polyline type of outline indices and outline positions."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsPolylineType) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetOutlinePolylineType"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Closed(self) -> bool:
        """Gets whether the solid is closed. For example, a box with six faces is closed. If one face is removed, the box is open."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetClosed"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{a7ba0673-f944-4dc6-a450-5cb62915cb7b}", IAgStkGraphicsSolidTriangulatorResult)
agcls.AgTypeNameMap["IAgStkGraphicsSolidTriangulatorResult"] = IAgStkGraphicsSolidTriangulatorResult
__all__.append("IAgStkGraphicsSolidTriangulatorResult")

class IAgStkGraphicsSurfaceShapesResult(object):
    """Represents the boundary positions of a shape on the surface computed from by a surface shapes method."""
    _uuid = "{0efd15db-d9f7-4e1f-925b-ade0b0a22a21}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetPositions"] = _raise_uninitialized_error
        self.__dict__["_GetPositionsWindingOrder"] = _raise_uninitialized_error
        self.__dict__["_GetPolylineType"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsSurfaceShapesResult._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsSurfaceShapesResult from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsSurfaceShapesResult = agcom.GUID(IAgStkGraphicsSurfaceShapesResult._uuid)
        vtable_offset_local = IAgStkGraphicsSurfaceShapesResult._vtable_offset - 1
        self.__dict__["_GetPositions"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSurfaceShapesResult, vtable_offset_local+1, POINTER(agcom.SAFEARRAY))
        self.__dict__["_GetPositionsWindingOrder"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSurfaceShapesResult, vtable_offset_local+2, POINTER(agcom.LONG))
        self.__dict__["_GetPolylineType"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSurfaceShapesResult, vtable_offset_local+3, POINTER(agcom.LONG))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsSurfaceShapesResult.__dict__ and type(IAgStkGraphicsSurfaceShapesResult.__dict__[attrname]) == property:
            return IAgStkGraphicsSurfaceShapesResult.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsSurfaceShapesResult.")
    
    @property
    def Positions(self) -> list:
        """Gets the positions of the computed shape. Three array elements (in the order x, y, z) constitute one position."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPositions"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def PositionsWindingOrder(self) -> "AgEStkGraphicsWindingOrder":
        """Gets the winding order of positions."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsWindingOrder) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPositionsWindingOrder"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def PolylineType(self) -> "AgEStkGraphicsPolylineType":
        """Gets the polyline type of positions."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsPolylineType) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPolylineType"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{0efd15db-d9f7-4e1f-925b-ade0b0a22a21}", IAgStkGraphicsSurfaceShapesResult)
agcls.AgTypeNameMap["IAgStkGraphicsSurfaceShapesResult"] = IAgStkGraphicsSurfaceShapesResult
__all__.append("IAgStkGraphicsSurfaceShapesResult")

class IAgStkGraphicsSurfaceTriangulatorResult(object):
    """The result from a triangulation on the surface of a central body: a triangle mesh defined using an indexed triangle list and boundary positions surrounding the mesh..."""
    _uuid = "{27cedd3e-86cd-4d18-862f-eeb0e6de62aa}"
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetGranularity"] = _raise_uninitialized_error
        self.__dict__["_GetBoundaryIndices"] = _raise_uninitialized_error
        self.__dict__["_GetBoundaryPositions"] = _raise_uninitialized_error
        self.__dict__["_GetBoundaryPositionsWindingOrder"] = _raise_uninitialized_error
        self.__dict__["_GetBoundaryPolylineType"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsSurfaceTriangulatorResult._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsSurfaceTriangulatorResult from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsSurfaceTriangulatorResult = agcom.GUID(IAgStkGraphicsSurfaceTriangulatorResult._uuid)
        vtable_offset_local = IAgStkGraphicsSurfaceTriangulatorResult._vtable_offset - 1
        self.__dict__["_GetGranularity"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSurfaceTriangulatorResult, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_GetBoundaryIndices"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSurfaceTriangulatorResult, vtable_offset_local+2, POINTER(agcom.SAFEARRAY))
        self.__dict__["_GetBoundaryPositions"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSurfaceTriangulatorResult, vtable_offset_local+3, POINTER(agcom.SAFEARRAY))
        self.__dict__["_GetBoundaryPositionsWindingOrder"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSurfaceTriangulatorResult, vtable_offset_local+4, POINTER(agcom.LONG))
        self.__dict__["_GetBoundaryPolylineType"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSurfaceTriangulatorResult, vtable_offset_local+5, POINTER(agcom.LONG))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsSurfaceTriangulatorResult.__dict__ and type(IAgStkGraphicsSurfaceTriangulatorResult.__dict__[attrname]) == property:
            return IAgStkGraphicsSurfaceTriangulatorResult.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsSurfaceTriangulatorResult.")
    
    @property
    def Granularity(self) -> float:
        """Gets the granularity used when the triangulation was computed. Lower granularities are more precise but create more triangles."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetGranularity"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def BoundaryIndices(self) -> list:
        """Gets indices into positions that define the boundary positions that surround the mesh. The indices returned consider the three components of a position (x, y, and z) as a single array element..."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBoundaryIndices"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def BoundaryPositions(self) -> list:
        """Gets the boundary positions that surround the mesh. Three array elements (in the order x, y, z) constitute one position."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBoundaryPositions"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def BoundaryPositionsWindingOrder(self) -> "AgEStkGraphicsWindingOrder":
        """Gets the winding order of boundary positions."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsWindingOrder) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBoundaryPositionsWindingOrder"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def BoundaryPolylineType(self) -> "AgEStkGraphicsPolylineType":
        """Gets the polyline type of boundary positions."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsPolylineType) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBoundaryPolylineType"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{27cedd3e-86cd-4d18-862f-eeb0e6de62aa}", IAgStkGraphicsSurfaceTriangulatorResult)
agcls.AgTypeNameMap["IAgStkGraphicsSurfaceTriangulatorResult"] = IAgStkGraphicsSurfaceTriangulatorResult
__all__.append("IAgStkGraphicsSurfaceTriangulatorResult")

class IAgStkGraphicsTriangulatorResult(object):
    """The result from triangulation: a triangle mesh defined using an indexed triangle list. This is commonly visualized with the triangle mesh primitive or surface mesh primitive."""
    _uuid = "{9dece859-d370-4674-8ffa-8caa98e60632}"
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetPositions"] = _raise_uninitialized_error
        self.__dict__["_GetNormals"] = _raise_uninitialized_error
        self.__dict__["_GetIndices"] = _raise_uninitialized_error
        self.__dict__["_GetTriangleWindingOrder"] = _raise_uninitialized_error
        self.__dict__["_GetBoundingSphere"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsTriangulatorResult._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsTriangulatorResult from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsTriangulatorResult = agcom.GUID(IAgStkGraphicsTriangulatorResult._uuid)
        vtable_offset_local = IAgStkGraphicsTriangulatorResult._vtable_offset - 1
        self.__dict__["_GetPositions"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTriangulatorResult, vtable_offset_local+1, POINTER(agcom.SAFEARRAY))
        self.__dict__["_GetNormals"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTriangulatorResult, vtable_offset_local+2, POINTER(agcom.SAFEARRAY))
        self.__dict__["_GetIndices"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTriangulatorResult, vtable_offset_local+3, POINTER(agcom.SAFEARRAY))
        self.__dict__["_GetTriangleWindingOrder"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTriangulatorResult, vtable_offset_local+4, POINTER(agcom.LONG))
        self.__dict__["_GetBoundingSphere"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTriangulatorResult, vtable_offset_local+5, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsTriangulatorResult.__dict__ and type(IAgStkGraphicsTriangulatorResult.__dict__[attrname]) == property:
            return IAgStkGraphicsTriangulatorResult.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsTriangulatorResult.")
    
    @property
    def Positions(self) -> list:
        """Gets the positions of the mesh. Three array elements (in the order x, y, z) constitute one position."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPositions"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Normals(self) -> list:
        """Gets the normals of the mesh. Every position in positions has corresponding normal. Normals are commonly used for lighting. Three array elements (in the order x, y, z) constitute one normal."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetNormals"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Indices(self) -> list:
        """Gets indices into positions and normals. Every 3 indices represent 1 triangle. The indices returned consider the three components of a position or normal (x, y, and z) as a single array element..."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetIndices"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def TriangleWindingOrder(self) -> "AgEStkGraphicsWindingOrder":
        """Gets the orientation of front-facing triangles in the mesh."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsWindingOrder) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTriangleWindingOrder"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def BoundingSphere(self) -> "IAgStkGraphicsBoundingSphere":
        """Gets the bounding sphere that encompasses the mesh."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBoundingSphere"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{9dece859-d370-4674-8ffa-8caa98e60632}", IAgStkGraphicsTriangulatorResult)
agcls.AgTypeNameMap["IAgStkGraphicsTriangulatorResult"] = IAgStkGraphicsTriangulatorResult
__all__.append("IAgStkGraphicsTriangulatorResult")

class IAgStkGraphicsAGICustomTerrainOverlay(object):
    """A terrain overlay for handling AGI Cesium Terrain."""
    _uuid = "{59ef8436-aeec-4e60-8e3d-920e0f11feba}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsAGICustomTerrainOverlay._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsAGICustomTerrainOverlay from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsAGICustomTerrainOverlay = agcom.GUID(IAgStkGraphicsAGICustomTerrainOverlay._uuid)
        vtable_offset_local = IAgStkGraphicsAGICustomTerrainOverlay._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsAGICustomTerrainOverlay.__dict__ and type(IAgStkGraphicsAGICustomTerrainOverlay.__dict__[attrname]) == property:
            return IAgStkGraphicsAGICustomTerrainOverlay.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsAGICustomTerrainOverlay.")
    

agcls.AgClassCatalog.add_catalog_entry("{59ef8436-aeec-4e60-8e3d-920e0f11feba}", IAgStkGraphicsAGICustomTerrainOverlay)
agcls.AgTypeNameMap["IAgStkGraphicsAGICustomTerrainOverlay"] = IAgStkGraphicsAGICustomTerrainOverlay
__all__.append("IAgStkGraphicsAGICustomTerrainOverlay")

class IAgStkGraphicsAGIProcessedImageGlobeOverlay(object):
    """A globe image overlay for handling AGI Processed Image (PDTTX) files."""
    _uuid = "{5c2d7cca-54f6-4b27-93d6-58bddac0befe}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsAGIProcessedImageGlobeOverlay._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsAGIProcessedImageGlobeOverlay from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsAGIProcessedImageGlobeOverlay = agcom.GUID(IAgStkGraphicsAGIProcessedImageGlobeOverlay._uuid)
        vtable_offset_local = IAgStkGraphicsAGIProcessedImageGlobeOverlay._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsAGIProcessedImageGlobeOverlay.__dict__ and type(IAgStkGraphicsAGIProcessedImageGlobeOverlay.__dict__[attrname]) == property:
            return IAgStkGraphicsAGIProcessedImageGlobeOverlay.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsAGIProcessedImageGlobeOverlay.")
    

agcls.AgClassCatalog.add_catalog_entry("{5c2d7cca-54f6-4b27-93d6-58bddac0befe}", IAgStkGraphicsAGIProcessedImageGlobeOverlay)
agcls.AgTypeNameMap["IAgStkGraphicsAGIProcessedImageGlobeOverlay"] = IAgStkGraphicsAGIProcessedImageGlobeOverlay
__all__.append("IAgStkGraphicsAGIProcessedImageGlobeOverlay")

class IAgStkGraphicsAGIProcessedTerrainOverlay(object):
    """A terrain overlay for handling AGI Processed Terrain (PDTT) files."""
    _uuid = "{093a5b12-abdd-4029-adc5-2cbab7e4216d}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsAGIProcessedTerrainOverlay._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsAGIProcessedTerrainOverlay from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsAGIProcessedTerrainOverlay = agcom.GUID(IAgStkGraphicsAGIProcessedTerrainOverlay._uuid)
        vtable_offset_local = IAgStkGraphicsAGIProcessedTerrainOverlay._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsAGIProcessedTerrainOverlay.__dict__ and type(IAgStkGraphicsAGIProcessedTerrainOverlay.__dict__[attrname]) == property:
            return IAgStkGraphicsAGIProcessedTerrainOverlay.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsAGIProcessedTerrainOverlay.")
    

agcls.AgClassCatalog.add_catalog_entry("{093a5b12-abdd-4029-adc5-2cbab7e4216d}", IAgStkGraphicsAGIProcessedTerrainOverlay)
agcls.AgTypeNameMap["IAgStkGraphicsAGIProcessedTerrainOverlay"] = IAgStkGraphicsAGIProcessedTerrainOverlay
__all__.append("IAgStkGraphicsAGIProcessedTerrainOverlay")

class IAgStkGraphicsAGIRoamImageGlobeOverlay(object):
    """A globe image overlay for handling ROAM (TXM/TXB) files."""
    _uuid = "{d76d82b7-7a13-452d-b661-1d416fae732e}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsAGIRoamImageGlobeOverlay._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsAGIRoamImageGlobeOverlay from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsAGIRoamImageGlobeOverlay = agcom.GUID(IAgStkGraphicsAGIRoamImageGlobeOverlay._uuid)
        vtable_offset_local = IAgStkGraphicsAGIRoamImageGlobeOverlay._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsAGIRoamImageGlobeOverlay.__dict__ and type(IAgStkGraphicsAGIRoamImageGlobeOverlay.__dict__[attrname]) == property:
            return IAgStkGraphicsAGIRoamImageGlobeOverlay.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsAGIRoamImageGlobeOverlay.")
    

agcls.AgClassCatalog.add_catalog_entry("{d76d82b7-7a13-452d-b661-1d416fae732e}", IAgStkGraphicsAGIRoamImageGlobeOverlay)
agcls.AgTypeNameMap["IAgStkGraphicsAGIRoamImageGlobeOverlay"] = IAgStkGraphicsAGIRoamImageGlobeOverlay
__all__.append("IAgStkGraphicsAGIRoamImageGlobeOverlay")

class IAgStkGraphicsCameraSnapshot(object):
    """Takes snapshots of the 3D window."""
    _uuid = "{6b6a8d90-ff4d-49b2-9fb4-5bf459818cd1}"
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_SaveToFile"] = _raise_uninitialized_error
        self.__dict__["_SaveToFileWithWidthAndDPI"] = _raise_uninitialized_error
        self.__dict__["_SaveToClipboard"] = _raise_uninitialized_error
        self.__dict__["_SaveToRaster"] = _raise_uninitialized_error
        self.__dict__["_SaveToTexture"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsCameraSnapshot._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsCameraSnapshot from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsCameraSnapshot = agcom.GUID(IAgStkGraphicsCameraSnapshot._uuid)
        vtable_offset_local = IAgStkGraphicsCameraSnapshot._vtable_offset - 1
        self.__dict__["_SaveToFile"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCameraSnapshot, vtable_offset_local+1, agcom.BSTR, agcom.LONG)
        self.__dict__["_SaveToFileWithWidthAndDPI"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCameraSnapshot, vtable_offset_local+2, agcom.BSTR, agcom.LONG, agcom.DOUBLE, agcom.DOUBLE)
        self.__dict__["_SaveToClipboard"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCameraSnapshot, vtable_offset_local+3, )
        self.__dict__["_SaveToRaster"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCameraSnapshot, vtable_offset_local+4, POINTER(agcom.PVOID))
        self.__dict__["_SaveToTexture"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCameraSnapshot, vtable_offset_local+5, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsCameraSnapshot.__dict__ and type(IAgStkGraphicsCameraSnapshot.__dict__[attrname]) == property:
            return IAgStkGraphicsCameraSnapshot.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsCameraSnapshot.")
    
    def SaveToFile(self, filename:str, cameraSnapshotFormat:"AgEStkGraphicsCameraSnapshotFileFormat") -> None:
        """Saves a snapshot of the 3D window to the filename with the specified format."""
        with agmarshall.BSTR_arg(filename) as arg_filename, \
             agmarshall.AgEnum_arg(AgEStkGraphicsCameraSnapshotFileFormat, cameraSnapshotFormat) as arg_cameraSnapshotFormat:
            agcls.evaluate_hresult(self.__dict__["_SaveToFile"](arg_filename.COM_val, arg_cameraSnapshotFormat.COM_val))

    def SaveToFileWithWidthAndDPI(self, filename:str, cameraSnapshotFormat:"AgEStkGraphicsCameraSnapshotFileFormat", widthInInches:float, dotsPerInch:float) -> None:
        """Saves a snapshot of the 3D window to the filename with the specified format at high resolution..."""
        with agmarshall.BSTR_arg(filename) as arg_filename, \
             agmarshall.AgEnum_arg(AgEStkGraphicsCameraSnapshotFileFormat, cameraSnapshotFormat) as arg_cameraSnapshotFormat, \
             agmarshall.DOUBLE_arg(widthInInches) as arg_widthInInches, \
             agmarshall.DOUBLE_arg(dotsPerInch) as arg_dotsPerInch:
            agcls.evaluate_hresult(self.__dict__["_SaveToFileWithWidthAndDPI"](arg_filename.COM_val, arg_cameraSnapshotFormat.COM_val, arg_widthInInches.COM_val, arg_dotsPerInch.COM_val))

    def SaveToClipboard(self) -> None:
        """Saves a single frame of the 3D window to the clipboard."""
        agcls.evaluate_hresult(self.__dict__["_SaveToClipboard"]())

    def SaveToRaster(self) -> "IAgStkGraphicsRaster":
        """Saves a snapshot of the 3D window to a raster."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_SaveToRaster"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def SaveToTexture(self) -> "IAgStkGraphicsRendererTexture2D":
        """Saves a snapshot of the 3D window to a texture 2d."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_SaveToTexture"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{6b6a8d90-ff4d-49b2-9fb4-5bf459818cd1}", IAgStkGraphicsCameraSnapshot)
agcls.AgTypeNameMap["IAgStkGraphicsCameraSnapshot"] = IAgStkGraphicsCameraSnapshot
__all__.append("IAgStkGraphicsCameraSnapshot")

class IAgStkGraphicsCameraVideoRecording(object):
    """Records the 3D window to either a movie file or to consecutively ordered image files each time the scene is rendered."""
    _uuid = "{f519ee7a-e452-451a-839d-0eda6cf69c0a}"
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetIsRecording"] = _raise_uninitialized_error
        self.__dict__["_StartRecording"] = _raise_uninitialized_error
        self.__dict__["_StartRecordingFrameStack"] = _raise_uninitialized_error
        self.__dict__["_StopRecording"] = _raise_uninitialized_error
        self.__dict__["_StartRecordingVideo"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsCameraVideoRecording._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsCameraVideoRecording from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsCameraVideoRecording = agcom.GUID(IAgStkGraphicsCameraVideoRecording._uuid)
        vtable_offset_local = IAgStkGraphicsCameraVideoRecording._vtable_offset - 1
        self.__dict__["_GetIsRecording"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCameraVideoRecording, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_StartRecording"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCameraVideoRecording, vtable_offset_local+2, agcom.BSTR, agcom.INT, agcom.INT)
        self.__dict__["_StartRecordingFrameStack"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCameraVideoRecording, vtable_offset_local+3, agcom.BSTR, agcom.BSTR, agcom.LONG, agcom.INT, agcom.INT)
        self.__dict__["_StopRecording"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCameraVideoRecording, vtable_offset_local+4, )
        self.__dict__["_StartRecordingVideo"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCameraVideoRecording, vtable_offset_local+5, agcom.BSTR, agcom.BSTR, agcom.LONG, agcom.INT, agcom.INT)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsCameraVideoRecording.__dict__ and type(IAgStkGraphicsCameraVideoRecording.__dict__[attrname]) == property:
            return IAgStkGraphicsCameraVideoRecording.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsCameraVideoRecording.")
    
    @property
    def IsRecording(self) -> bool:
        """Gets if recording is occurring or not."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetIsRecording"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def StartRecording(self, wmvFilename:str, videoBitRate:int, videoFrameRate:int) -> None:
        """This method is deprecated. Use StartRecordingVideo instead. Starts recording a file in the WMV format at the specified bit and frame rate."""
        with agmarshall.BSTR_arg(wmvFilename) as arg_wmvFilename, \
             agmarshall.INT_arg(videoBitRate) as arg_videoBitRate, \
             agmarshall.INT_arg(videoFrameRate) as arg_videoFrameRate:
            agcls.evaluate_hresult(self.__dict__["_StartRecording"](arg_wmvFilename.COM_val, arg_videoBitRate.COM_val, arg_videoFrameRate.COM_val))

    def StartRecordingFrameStack(self, fileDirectory:str, filePrefix:str, cameraSnapshotFileFormat:"AgEStkGraphicsCameraSnapshotFileFormat", startingFrameNumber:int, numberOfFrameDigits:int) -> None:
        """Starts recording a frame stack. Each frame is saved as a separate image file. The filename of each frame is defined by a prefix followed by a frame number."""
        with agmarshall.BSTR_arg(fileDirectory) as arg_fileDirectory, \
             agmarshall.BSTR_arg(filePrefix) as arg_filePrefix, \
             agmarshall.AgEnum_arg(AgEStkGraphicsCameraSnapshotFileFormat, cameraSnapshotFileFormat) as arg_cameraSnapshotFileFormat, \
             agmarshall.INT_arg(startingFrameNumber) as arg_startingFrameNumber, \
             agmarshall.INT_arg(numberOfFrameDigits) as arg_numberOfFrameDigits:
            agcls.evaluate_hresult(self.__dict__["_StartRecordingFrameStack"](arg_fileDirectory.COM_val, arg_filePrefix.COM_val, arg_cameraSnapshotFileFormat.COM_val, arg_startingFrameNumber.COM_val, arg_numberOfFrameDigits.COM_val))

    def StopRecording(self) -> None:
        """Stops recording."""
        agcls.evaluate_hresult(self.__dict__["_StopRecording"]())

    def StartRecordingVideo(self, fileDirectory:str, filePrefix:str, videoFormat:"AgEStkGraphicsCameraVideoFormat", videoBitRate:int, videoFrameRate:int) -> None:
        """Starts recording a video file at the specified bit and frame rate."""
        with agmarshall.BSTR_arg(fileDirectory) as arg_fileDirectory, \
             agmarshall.BSTR_arg(filePrefix) as arg_filePrefix, \
             agmarshall.AgEnum_arg(AgEStkGraphicsCameraVideoFormat, videoFormat) as arg_videoFormat, \
             agmarshall.INT_arg(videoBitRate) as arg_videoBitRate, \
             agmarshall.INT_arg(videoFrameRate) as arg_videoFrameRate:
            agcls.evaluate_hresult(self.__dict__["_StartRecordingVideo"](arg_fileDirectory.COM_val, arg_filePrefix.COM_val, arg_videoFormat.COM_val, arg_videoBitRate.COM_val, arg_videoFrameRate.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{f519ee7a-e452-451a-839d-0eda6cf69c0a}", IAgStkGraphicsCameraVideoRecording)
agcls.AgTypeNameMap["IAgStkGraphicsCameraVideoRecording"] = IAgStkGraphicsCameraVideoRecording
__all__.append("IAgStkGraphicsCameraVideoRecording")

class IAgStkGraphicsCentralBodyGraphicsIndexer(object):
    """An indexer into the central body graphics for a particular central body, which provides graphical properties such as showing or hiding the central body in the scene, and working with terrain and imagery for the specified central body."""
    _uuid = "{fc4eafc1-217c-4a1b-9640-4a678d84813a}"
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetEarth"] = _raise_uninitialized_error
        self.__dict__["_GetMoon"] = _raise_uninitialized_error
        self.__dict__["_GetSun"] = _raise_uninitialized_error
        self.__dict__["_Item"] = _raise_uninitialized_error
        self.__dict__["_GetByName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsCentralBodyGraphicsIndexer._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsCentralBodyGraphicsIndexer from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsCentralBodyGraphicsIndexer = agcom.GUID(IAgStkGraphicsCentralBodyGraphicsIndexer._uuid)
        vtable_offset_local = IAgStkGraphicsCentralBodyGraphicsIndexer._vtable_offset - 1
        self.__dict__["_GetEarth"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCentralBodyGraphicsIndexer, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetMoon"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCentralBodyGraphicsIndexer, vtable_offset_local+2, POINTER(agcom.PVOID))
        self.__dict__["_GetSun"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCentralBodyGraphicsIndexer, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_Item"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCentralBodyGraphicsIndexer, vtable_offset_local+4, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_GetByName"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCentralBodyGraphicsIndexer, vtable_offset_local+5, agcom.BSTR, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsCentralBodyGraphicsIndexer.__dict__ and type(IAgStkGraphicsCentralBodyGraphicsIndexer.__dict__[attrname]) == property:
            return IAgStkGraphicsCentralBodyGraphicsIndexer.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsCentralBodyGraphicsIndexer.")
    
    @property
    def Earth(self) -> "IAgStkGraphicsCentralBodyGraphics":
        """Gets the central body graphics for the planet Earth. This is equivalent to passing a central body equal to an instance of earth central body to the indexer."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetEarth"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Moon(self) -> "IAgStkGraphicsCentralBodyGraphics":
        """Gets the central body graphics for the Moon."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMoon"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Sun(self) -> "IAgStkGraphicsCentralBodyGraphics":
        """Gets the central body graphics for the Sun."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSun"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def Item(self, centralBody:str) -> "IAgStkGraphicsCentralBodyGraphics":
        """Gets the central body graphics for the specified central body."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Item"](arg_centralBody.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def GetByName(self, name:str) -> "IAgStkGraphicsCentralBodyGraphics":
        """Returns the central body graphics for the central body with the given name."""
        with agmarshall.BSTR_arg(name) as arg_name, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetByName"](arg_name.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{fc4eafc1-217c-4a1b-9640-4a678d84813a}", IAgStkGraphicsCentralBodyGraphicsIndexer)
agcls.AgTypeNameMap["IAgStkGraphicsCentralBodyGraphicsIndexer"] = IAgStkGraphicsCentralBodyGraphicsIndexer
__all__.append("IAgStkGraphicsCentralBodyGraphicsIndexer")

class IAgStkGraphicsCustomImageGlobeOverlay(object):
    """A globe image overlay that allows for a user defined image to be specified."""
    _uuid = "{f8086ed2-4b18-4d6d-a39f-1ab5801cf886}"
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetIsTranslucent"] = _raise_uninitialized_error
        self.__dict__["_GetMaximumMetersPerPixel"] = _raise_uninitialized_error
        self.__dict__["_GetProjection"] = _raise_uninitialized_error
        self.__dict__["_StartUp"] = _raise_uninitialized_error
        self.__dict__["_ShutDown"] = _raise_uninitialized_error
        self.__dict__["_ClearCache"] = _raise_uninitialized_error
        self.__dict__["_Reload"] = _raise_uninitialized_error
        self.__dict__["_Read"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsCustomImageGlobeOverlay._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsCustomImageGlobeOverlay from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsCustomImageGlobeOverlay = agcom.GUID(IAgStkGraphicsCustomImageGlobeOverlay._uuid)
        vtable_offset_local = IAgStkGraphicsCustomImageGlobeOverlay._vtable_offset - 1
        self.__dict__["_GetIsTranslucent"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCustomImageGlobeOverlay, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetMaximumMetersPerPixel"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCustomImageGlobeOverlay, vtable_offset_local+2, POINTER(agcom.DOUBLE))
        self.__dict__["_GetProjection"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCustomImageGlobeOverlay, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_StartUp"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCustomImageGlobeOverlay, vtable_offset_local+4, agcom.PVOID)
        self.__dict__["_ShutDown"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCustomImageGlobeOverlay, vtable_offset_local+5, agcom.PVOID)
        self.__dict__["_ClearCache"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCustomImageGlobeOverlay, vtable_offset_local+6, )
        self.__dict__["_Reload"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCustomImageGlobeOverlay, vtable_offset_local+7, )
        self.__dict__["_Read"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCustomImageGlobeOverlay, vtable_offset_local+8, POINTER(agcom.SAFEARRAY), agcom.VARIANT, POINTER(agcom.PVOID), POINTER(agcom.VARIANT_BOOL))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsCustomImageGlobeOverlay.__dict__ and type(IAgStkGraphicsCustomImageGlobeOverlay.__dict__[attrname]) == property:
            return IAgStkGraphicsCustomImageGlobeOverlay.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsCustomImageGlobeOverlay.")
    
    @property
    def IsTranslucent(self) -> bool:
        """Gets whether the overlay contains translucent imagery."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetIsTranslucent"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def MaximumMetersPerPixel(self) -> float:
        """Gets the maximum resolution of the inlay in meters per pixel."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaximumMetersPerPixel"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Projection(self) -> "AgEStkGraphicsMapProjection":
        """Gets the map projection. Valid values are mercator and equidistant cylindrical."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsMapProjection) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetProjection"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def StartUp(self, scene:"IAgStkGraphicsScene") -> None:
        """Called automatically when imagery is being added to the globe."""
        with agmarshall.AgInterface_in_arg(scene, IAgStkGraphicsScene) as arg_scene:
            agcls.evaluate_hresult(self.__dict__["_StartUp"](arg_scene.COM_val))

    def ShutDown(self, scene:"IAgStkGraphicsScene") -> None:
        """Called automatically when imagery is being removed from the globe."""
        with agmarshall.AgInterface_in_arg(scene, IAgStkGraphicsScene) as arg_scene:
            agcls.evaluate_hresult(self.__dict__["_ShutDown"](arg_scene.COM_val))

    def ClearCache(self) -> None:
        """Clears the image data cache associated with this instance. This is equivalent to deleting and re-adding the overlay."""
        agcls.evaluate_hresult(self.__dict__["_ClearCache"]())

    def Reload(self) -> None:
        """Reloads the image data associated with this instance. Preserves the current image data until new image data replaces it."""
        agcls.evaluate_hresult(self.__dict__["_Reload"]())

    def Read(self, extent:list, userTileData:typing.Any, image:IPictureDisp) -> bool:
        """Reads a tile from the specified extent, scales it to and stores the result in image."""
        with agmarshall.SAFEARRAY_arg(extent) as arg_extent, \
             agmarshall.VARIANT_arg(userTileData) as arg_userTileData, \
             agmarshall.PVOID_arg(image) as arg_image, \
             agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_Read"](byref(arg_extent.COM_val), arg_userTileData.COM_val, byref(arg_image.COM_val), byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{f8086ed2-4b18-4d6d-a39f-1ab5801cf886}", IAgStkGraphicsCustomImageGlobeOverlay)
agcls.AgTypeNameMap["IAgStkGraphicsCustomImageGlobeOverlay"] = IAgStkGraphicsCustomImageGlobeOverlay
__all__.append("IAgStkGraphicsCustomImageGlobeOverlay")

class IAgStkGraphicsCustomImageGlobeOverlayPluginActivator(object):
    """The Activator class provides methods to load COM plugins that implement custom image globe overlays. For more information about custom image globe overlays, see the STK Programming Interface."""
    _uuid = "{efb59b20-9f79-4043-a3bd-6cd1a3395738}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_CreateFromDisplayName"] = _raise_uninitialized_error
        self.__dict__["_GetAvailableDisplayNames"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsCustomImageGlobeOverlayPluginActivator._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsCustomImageGlobeOverlayPluginActivator from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsCustomImageGlobeOverlayPluginActivator = agcom.GUID(IAgStkGraphicsCustomImageGlobeOverlayPluginActivator._uuid)
        vtable_offset_local = IAgStkGraphicsCustomImageGlobeOverlayPluginActivator._vtable_offset - 1
        self.__dict__["_CreateFromDisplayName"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCustomImageGlobeOverlayPluginActivator, vtable_offset_local+1, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_GetAvailableDisplayNames"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCustomImageGlobeOverlayPluginActivator, vtable_offset_local+2, POINTER(agcom.SAFEARRAY))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsCustomImageGlobeOverlayPluginActivator.__dict__ and type(IAgStkGraphicsCustomImageGlobeOverlayPluginActivator.__dict__[attrname]) == property:
            return IAgStkGraphicsCustomImageGlobeOverlayPluginActivator.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsCustomImageGlobeOverlayPluginActivator.")
    
    def CreateFromDisplayName(self, displayName:str) -> "IAgStkGraphicsCustomImageGlobeOverlayPluginProxy":
        """Loads a custom image globe overlay COM plugin associated with the specified display name and returns a proxy object that allows accessing the custom image globe overlays implemented by the plugin."""
        with agmarshall.BSTR_arg(displayName) as arg_displayName, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_CreateFromDisplayName"](arg_displayName.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def GetAvailableDisplayNames(self) -> list:
        """Gets a list of available custom image globe overlay Display Names (Programmatic Identifiers)."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAvailableDisplayNames"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{efb59b20-9f79-4043-a3bd-6cd1a3395738}", IAgStkGraphicsCustomImageGlobeOverlayPluginActivator)
agcls.AgTypeNameMap["IAgStkGraphicsCustomImageGlobeOverlayPluginActivator"] = IAgStkGraphicsCustomImageGlobeOverlayPluginActivator
__all__.append("IAgStkGraphicsCustomImageGlobeOverlayPluginActivator")

class IAgStkGraphicsCustomImageGlobeOverlayPluginProxy(object):
    """A proxy class provides access to a custom image globe overlay implemented by a plugin. Proxies are instantiated using custom image globe overlay plugin activator."""
    _uuid = "{197fbafd-0f9c-44d9-b2d0-14c8b30f312e}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCustomImageGlobeOverlay"] = _raise_uninitialized_error
        self.__dict__["_GetIsCustomImageGlobeOverlaySupported"] = _raise_uninitialized_error
        self.__dict__["_GetRealPluginObject"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsCustomImageGlobeOverlayPluginProxy._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsCustomImageGlobeOverlayPluginProxy from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsCustomImageGlobeOverlayPluginProxy = agcom.GUID(IAgStkGraphicsCustomImageGlobeOverlayPluginProxy._uuid)
        vtable_offset_local = IAgStkGraphicsCustomImageGlobeOverlayPluginProxy._vtable_offset - 1
        self.__dict__["_GetCustomImageGlobeOverlay"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCustomImageGlobeOverlayPluginProxy, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetIsCustomImageGlobeOverlaySupported"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCustomImageGlobeOverlayPluginProxy, vtable_offset_local+2, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetRealPluginObject"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCustomImageGlobeOverlayPluginProxy, vtable_offset_local+3, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsCustomImageGlobeOverlayPluginProxy.__dict__ and type(IAgStkGraphicsCustomImageGlobeOverlayPluginProxy.__dict__[attrname]) == property:
            return IAgStkGraphicsCustomImageGlobeOverlayPluginProxy.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsCustomImageGlobeOverlayPluginProxy.")
    
    @property
    def CustomImageGlobeOverlay(self) -> "IAgStkGraphicsCustomImageGlobeOverlay":
        """Returns a custom image globe overlay."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCustomImageGlobeOverlay"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def IsCustomImageGlobeOverlaySupported(self) -> bool:
        """Returns true if custom image globe overlays are supported."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetIsCustomImageGlobeOverlaySupported"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def RealPluginObject(self) -> typing.Any:
        """Returns a pointer to plugin object's IUnknown interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetRealPluginObject"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{197fbafd-0f9c-44d9-b2d0-14c8b30f312e}", IAgStkGraphicsCustomImageGlobeOverlayPluginProxy)
agcls.AgTypeNameMap["IAgStkGraphicsCustomImageGlobeOverlayPluginProxy"] = IAgStkGraphicsCustomImageGlobeOverlayPluginProxy
__all__.append("IAgStkGraphicsCustomImageGlobeOverlayPluginProxy")

class IAgStkGraphicsGeospatialImageGlobeOverlay(object):
    """A globe image overlay for handling <a href='http://www.jpeg.org/jpeg2000/'>JPEG 2000</a> (.jp2), ECW (.ecw), ECWP, and MrSid (.sid) image formats in the WGS84 geographic projection."""
    _uuid = "{fd42a5ba-5049-4c58-bf40-61ca5943dccf}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetUseTransparentColor"] = _raise_uninitialized_error
        self.__dict__["_SetUseTransparentColor"] = _raise_uninitialized_error
        self.__dict__["_GetTransparentColor"] = _raise_uninitialized_error
        self.__dict__["_SetTransparentColor"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsGeospatialImageGlobeOverlay._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsGeospatialImageGlobeOverlay from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsGeospatialImageGlobeOverlay = agcom.GUID(IAgStkGraphicsGeospatialImageGlobeOverlay._uuid)
        vtable_offset_local = IAgStkGraphicsGeospatialImageGlobeOverlay._vtable_offset - 1
        self.__dict__["_GetUseTransparentColor"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsGeospatialImageGlobeOverlay, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseTransparentColor"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsGeospatialImageGlobeOverlay, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetTransparentColor"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsGeospatialImageGlobeOverlay, vtable_offset_local+3, POINTER(agcom.OLE_COLOR))
        self.__dict__["_SetTransparentColor"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsGeospatialImageGlobeOverlay, vtable_offset_local+4, agcom.OLE_COLOR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsGeospatialImageGlobeOverlay.__dict__ and type(IAgStkGraphicsGeospatialImageGlobeOverlay.__dict__[attrname]) == property:
            return IAgStkGraphicsGeospatialImageGlobeOverlay.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsGeospatialImageGlobeOverlay.")
    
    @property
    def UseTransparentColor(self) -> bool:
        """Gets or sets whether transparent color should be used."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseTransparentColor"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @UseTransparentColor.setter
    def UseTransparentColor(self, useTransparentColor:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(useTransparentColor) as arg_useTransparentColor:
            agcls.evaluate_hresult(self.__dict__["_SetUseTransparentColor"](arg_useTransparentColor.COM_val))

    @property
    def TransparentColor(self) -> agcolor.Color:
        """Gets or sets the color that will become transparent."""
        with agmarshall.OLE_COLOR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTransparentColor"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @TransparentColor.setter
    def TransparentColor(self, transparentColor:agcolor.Color) -> None:
        with agmarshall.OLE_COLOR_arg(transparentColor) as arg_transparentColor:
            agcls.evaluate_hresult(self.__dict__["_SetTransparentColor"](arg_transparentColor.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{fd42a5ba-5049-4c58-bf40-61ca5943dccf}", IAgStkGraphicsGeospatialImageGlobeOverlay)
agcls.AgTypeNameMap["IAgStkGraphicsGeospatialImageGlobeOverlay"] = IAgStkGraphicsGeospatialImageGlobeOverlay
__all__.append("IAgStkGraphicsGeospatialImageGlobeOverlay")

class IAgStkGraphicsGlobeOverlay(object):
    """The base class of all terrain overlay and globe image overlay objects."""
    _uuid = "{983949c2-68a3-46ee-9670-f174091286ad}"
    _num_methods = 7
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCentralBody"] = _raise_uninitialized_error
        self.__dict__["_GetExtent"] = _raise_uninitialized_error
        self.__dict__["_GetRole"] = _raise_uninitialized_error
        self.__dict__["_GetUriAsString"] = _raise_uninitialized_error
        self.__dict__["_GetIsValid"] = _raise_uninitialized_error
        self.__dict__["_GetDisplayCondition"] = _raise_uninitialized_error
        self.__dict__["_SetDisplayCondition"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsGlobeOverlay._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsGlobeOverlay from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsGlobeOverlay = agcom.GUID(IAgStkGraphicsGlobeOverlay._uuid)
        vtable_offset_local = IAgStkGraphicsGlobeOverlay._vtable_offset - 1
        self.__dict__["_GetCentralBody"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsGlobeOverlay, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_GetExtent"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsGlobeOverlay, vtable_offset_local+2, POINTER(agcom.SAFEARRAY))
        self.__dict__["_GetRole"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsGlobeOverlay, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_GetUriAsString"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsGlobeOverlay, vtable_offset_local+4, POINTER(agcom.BSTR))
        self.__dict__["_GetIsValid"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsGlobeOverlay, vtable_offset_local+5, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetDisplayCondition"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsGlobeOverlay, vtable_offset_local+6, POINTER(agcom.PVOID))
        self.__dict__["_SetDisplayCondition"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsGlobeOverlay, vtable_offset_local+7, agcom.PVOID)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsGlobeOverlay.__dict__ and type(IAgStkGraphicsGlobeOverlay.__dict__[attrname]) == property:
            return IAgStkGraphicsGlobeOverlay.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsGlobeOverlay.")
    
    @property
    def CentralBody(self) -> str:
        """Gets the central body that the globe overlay is displayed on. It will return <see langword='null' /> if the globe overlay hasn't been added to a central body."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBody"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Extent(self) -> list:
        """Gets the cartographic extent that represents the area covered by the globe overlay. The array elements are arranged in the order west longitude, south latitude, east longitude, north latitude."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetExtent"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Role(self) -> "AgEStkGraphicsGlobeOverlayRole":
        """Gets the globe overlay role of the globe overlay."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsGlobeOverlayRole) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetRole"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def UriAsString(self) -> str:
        """Gets the absolute URI specifying the location of the globe overlay."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetUriAsString"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def IsValid(self) -> bool:
        """Gets whether or not the overlay is valid. It can be invalid because of a missing file, corrupt file, unlicensed file, or a file on the incorrect central body."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetIsValid"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def DisplayCondition(self) -> "IAgStkGraphicsDisplayCondition":
        """Gets or sets the display condition that controls whether or not the globe overlay is displayed."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDisplayCondition"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @DisplayCondition.setter
    def DisplayCondition(self, displayCondition:"IAgStkGraphicsDisplayCondition") -> None:
        with agmarshall.AgInterface_in_arg(displayCondition, IAgStkGraphicsDisplayCondition) as arg_displayCondition:
            agcls.evaluate_hresult(self.__dict__["_SetDisplayCondition"](arg_displayCondition.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{983949c2-68a3-46ee-9670-f174091286ad}", IAgStkGraphicsGlobeOverlay)
agcls.AgTypeNameMap["IAgStkGraphicsGlobeOverlay"] = IAgStkGraphicsGlobeOverlay
__all__.append("IAgStkGraphicsGlobeOverlay")

class IAgStkGraphicsGlobeOverlaySettings(object):
    """Settings used by globe overlay objects. These setting affect all scenes."""
    _uuid = "{2864d6df-bbe2-42b7-9838-27d1f5ff5be6}"
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetTerrainCacheSize"] = _raise_uninitialized_error
        self.__dict__["_SetTerrainCacheSize"] = _raise_uninitialized_error
        self.__dict__["_GetImageryCacheSize"] = _raise_uninitialized_error
        self.__dict__["_SetImageryCacheSize"] = _raise_uninitialized_error
        self.__dict__["_GetPreloadTerrainAndImagery"] = _raise_uninitialized_error
        self.__dict__["_SetPreloadTerrainAndImagery"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsGlobeOverlaySettings._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsGlobeOverlaySettings from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsGlobeOverlaySettings = agcom.GUID(IAgStkGraphicsGlobeOverlaySettings._uuid)
        vtable_offset_local = IAgStkGraphicsGlobeOverlaySettings._vtable_offset - 1
        self.__dict__["_GetTerrainCacheSize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsGlobeOverlaySettings, vtable_offset_local+1, POINTER(agcom.INT))
        self.__dict__["_SetTerrainCacheSize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsGlobeOverlaySettings, vtable_offset_local+2, agcom.INT)
        self.__dict__["_GetImageryCacheSize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsGlobeOverlaySettings, vtable_offset_local+3, POINTER(agcom.INT))
        self.__dict__["_SetImageryCacheSize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsGlobeOverlaySettings, vtable_offset_local+4, agcom.INT)
        self.__dict__["_GetPreloadTerrainAndImagery"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsGlobeOverlaySettings, vtable_offset_local+5, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetPreloadTerrainAndImagery"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsGlobeOverlaySettings, vtable_offset_local+6, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsGlobeOverlaySettings.__dict__ and type(IAgStkGraphicsGlobeOverlaySettings.__dict__[attrname]) == property:
            return IAgStkGraphicsGlobeOverlaySettings.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsGlobeOverlaySettings.")
    
    @property
    def TerrainCacheSize(self) -> int:
        """Gets or sets the size of the terrain cache in megabytes. It is not recommended to go above 128 megabytes. Large cache sizes can slow down rendering since so much imagery will be rendered."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTerrainCacheSize"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @TerrainCacheSize.setter
    def TerrainCacheSize(self, terrainCacheSize:int) -> None:
        with agmarshall.INT_arg(terrainCacheSize) as arg_terrainCacheSize:
            agcls.evaluate_hresult(self.__dict__["_SetTerrainCacheSize"](arg_terrainCacheSize.COM_val))

    @property
    def ImageryCacheSize(self) -> int:
        """Gets or sets the size of the imagery cache in megabytes. It is not recommended to go above 128 megabytes. Large cache sizes can slow down rendering since so much imagery will be rendered."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetImageryCacheSize"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @ImageryCacheSize.setter
    def ImageryCacheSize(self, imageryCacheSize:int) -> None:
        with agmarshall.INT_arg(imageryCacheSize) as arg_imageryCacheSize:
            agcls.evaluate_hresult(self.__dict__["_SetImageryCacheSize"](arg_imageryCacheSize.COM_val))

    @property
    def PreloadTerrainAndImagery(self) -> bool:
        """Gets or sets whether terrain and imagery are preloaded. When set to true, terrain and imagery are preloaded to get the best visual quality; when set to false, they are not preloaded..."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPreloadTerrainAndImagery"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @PreloadTerrainAndImagery.setter
    def PreloadTerrainAndImagery(self, preloadTerrainAndImagery:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(preloadTerrainAndImagery) as arg_preloadTerrainAndImagery:
            agcls.evaluate_hresult(self.__dict__["_SetPreloadTerrainAndImagery"](arg_preloadTerrainAndImagery.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{2864d6df-bbe2-42b7-9838-27d1f5ff5be6}", IAgStkGraphicsGlobeOverlaySettings)
agcls.AgTypeNameMap["IAgStkGraphicsGlobeOverlaySettings"] = IAgStkGraphicsGlobeOverlaySettings
__all__.append("IAgStkGraphicsGlobeOverlaySettings")

class IAgStkGraphicsLighting(object):
    """Lighting in the 3D scene."""
    _uuid = "{683cd020-54fc-48af-b7e4-0dbe06c9bf12}"
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetEnabled"] = _raise_uninitialized_error
        self.__dict__["_SetEnabled"] = _raise_uninitialized_error
        self.__dict__["_GetAmbientIntensity"] = _raise_uninitialized_error
        self.__dict__["_SetAmbientIntensity"] = _raise_uninitialized_error
        self.__dict__["_GetDiffuseIntensity"] = _raise_uninitialized_error
        self.__dict__["_SetDiffuseIntensity"] = _raise_uninitialized_error
        self.__dict__["_GetNightLightsIntensity"] = _raise_uninitialized_error
        self.__dict__["_SetNightLightsIntensity"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsLighting._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsLighting from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsLighting = agcom.GUID(IAgStkGraphicsLighting._uuid)
        vtable_offset_local = IAgStkGraphicsLighting._vtable_offset - 1
        self.__dict__["_GetEnabled"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsLighting, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetEnabled"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsLighting, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetAmbientIntensity"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsLighting, vtable_offset_local+3, POINTER(agcom.FLOAT))
        self.__dict__["_SetAmbientIntensity"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsLighting, vtable_offset_local+4, agcom.FLOAT)
        self.__dict__["_GetDiffuseIntensity"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsLighting, vtable_offset_local+5, POINTER(agcom.FLOAT))
        self.__dict__["_SetDiffuseIntensity"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsLighting, vtable_offset_local+6, agcom.FLOAT)
        self.__dict__["_GetNightLightsIntensity"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsLighting, vtable_offset_local+7, POINTER(agcom.FLOAT))
        self.__dict__["_SetNightLightsIntensity"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsLighting, vtable_offset_local+8, agcom.FLOAT)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsLighting.__dict__ and type(IAgStkGraphicsLighting.__dict__[attrname]) == property:
            return IAgStkGraphicsLighting.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsLighting.")
    
    @property
    def Enabled(self) -> bool:
        """Gets or sets whether or not lighting is enabled."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnabled"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Enabled.setter
    def Enabled(self, enabled:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(enabled) as arg_enabled:
            agcls.evaluate_hresult(self.__dict__["_SetEnabled"](arg_enabled.COM_val))

    @property
    def AmbientIntensity(self) -> float:
        """Gets or sets the ambient intensity throughout the scene."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAmbientIntensity"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @AmbientIntensity.setter
    def AmbientIntensity(self, ambientIntensity:float) -> None:
        with agmarshall.FLOAT_arg(ambientIntensity) as arg_ambientIntensity:
            agcls.evaluate_hresult(self.__dict__["_SetAmbientIntensity"](arg_ambientIntensity.COM_val))

    @property
    def DiffuseIntensity(self) -> float:
        """Gets or sets the diffuse intensity from the sun."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDiffuseIntensity"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @DiffuseIntensity.setter
    def DiffuseIntensity(self, diffuseIntensity:float) -> None:
        with agmarshall.FLOAT_arg(diffuseIntensity) as arg_diffuseIntensity:
            agcls.evaluate_hresult(self.__dict__["_SetDiffuseIntensity"](arg_diffuseIntensity.COM_val))

    @property
    def NightLightsIntensity(self) -> float:
        """Gets or sets the overall brightness for the night light's image overlay, night overlay."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetNightLightsIntensity"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @NightLightsIntensity.setter
    def NightLightsIntensity(self, nightLightsIntensity:float) -> None:
        with agmarshall.FLOAT_arg(nightLightsIntensity) as arg_nightLightsIntensity:
            agcls.evaluate_hresult(self.__dict__["_SetNightLightsIntensity"](arg_nightLightsIntensity.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{683cd020-54fc-48af-b7e4-0dbe06c9bf12}", IAgStkGraphicsLighting)
agcls.AgTypeNameMap["IAgStkGraphicsLighting"] = IAgStkGraphicsLighting
__all__.append("IAgStkGraphicsLighting")

class IAgStkGraphicsPathPrimitiveUpdatePolicy(object):
    """A class that encapsulates the update logic for a path primitive. Derived classes must implement the Update method."""
    _uuid = "{71fe898e-dabb-4501-9c80-dcb1cde9c16b}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Update"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsPathPrimitiveUpdatePolicy._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsPathPrimitiveUpdatePolicy from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsPathPrimitiveUpdatePolicy = agcom.GUID(IAgStkGraphicsPathPrimitiveUpdatePolicy._uuid)
        vtable_offset_local = IAgStkGraphicsPathPrimitiveUpdatePolicy._vtable_offset - 1
        self.__dict__["_Update"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPathPrimitiveUpdatePolicy, vtable_offset_local+1, agcom.PVOID, agcom.PVOID)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsPathPrimitiveUpdatePolicy.__dict__ and type(IAgStkGraphicsPathPrimitiveUpdatePolicy.__dict__[attrname]) == property:
            return IAgStkGraphicsPathPrimitiveUpdatePolicy.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsPathPrimitiveUpdatePolicy.")
    
    def Update(self, pathPrimitive:"IAgStkGraphicsPathPrimitive", date:"IAgDate") -> None:
        """Updates the pathPrimitive at the specified date."""
        with agmarshall.AgInterface_in_arg(pathPrimitive, IAgStkGraphicsPathPrimitive) as arg_pathPrimitive, \
             agmarshall.AgInterface_in_arg(date, IAgDate) as arg_date:
            agcls.evaluate_hresult(self.__dict__["_Update"](arg_pathPrimitive.COM_val, arg_date.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{71fe898e-dabb-4501-9c80-dcb1cde9c16b}", IAgStkGraphicsPathPrimitiveUpdatePolicy)
agcls.AgTypeNameMap["IAgStkGraphicsPathPrimitiveUpdatePolicy"] = IAgStkGraphicsPathPrimitiveUpdatePolicy
__all__.append("IAgStkGraphicsPathPrimitiveUpdatePolicy")

class IAgStkGraphicsProjectedRasterOverlay(object):
    """A globe image overlay which projects a raster onto the terrain or surface of the central body. You can also enable projection onto models by setting projected raster model projection to true for a Scene..."""
    _uuid = "{7cb212ed-4ef5-43c7-bbc3-f2ebd4dfd143}"
    _num_methods = 36
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetRaster"] = _raise_uninitialized_error
        self.__dict__["_SetRaster"] = _raise_uninitialized_error
        self.__dict__["_GetProjection"] = _raise_uninitialized_error
        self.__dict__["_SetProjection"] = _raise_uninitialized_error
        self.__dict__["_GetShowShadows"] = _raise_uninitialized_error
        self.__dict__["_SetShowShadows"] = _raise_uninitialized_error
        self.__dict__["_GetShowFrustum"] = _raise_uninitialized_error
        self.__dict__["_SetShowFrustum"] = _raise_uninitialized_error
        self.__dict__["_GetShowFarPlane"] = _raise_uninitialized_error
        self.__dict__["_SetShowFarPlane"] = _raise_uninitialized_error
        self.__dict__["_GetColor"] = _raise_uninitialized_error
        self.__dict__["_SetColor"] = _raise_uninitialized_error
        self.__dict__["_GetFrustumColor"] = _raise_uninitialized_error
        self.__dict__["_SetFrustumColor"] = _raise_uninitialized_error
        self.__dict__["_GetFarPlaneColor"] = _raise_uninitialized_error
        self.__dict__["_SetFarPlaneColor"] = _raise_uninitialized_error
        self.__dict__["_GetShadowColor"] = _raise_uninitialized_error
        self.__dict__["_SetShadowColor"] = _raise_uninitialized_error
        self.__dict__["_GetBorderColor"] = _raise_uninitialized_error
        self.__dict__["_SetBorderColor"] = _raise_uninitialized_error
        self.__dict__["_GetBorderWidth"] = _raise_uninitialized_error
        self.__dict__["_SetBorderWidth"] = _raise_uninitialized_error
        self.__dict__["_GetFrustumTranslucency"] = _raise_uninitialized_error
        self.__dict__["_SetFrustumTranslucency"] = _raise_uninitialized_error
        self.__dict__["_GetFarPlaneTranslucency"] = _raise_uninitialized_error
        self.__dict__["_SetFarPlaneTranslucency"] = _raise_uninitialized_error
        self.__dict__["_GetShadowTranslucency"] = _raise_uninitialized_error
        self.__dict__["_SetShadowTranslucency"] = _raise_uninitialized_error
        self.__dict__["_GetBorderTranslucency"] = _raise_uninitialized_error
        self.__dict__["_SetBorderTranslucency"] = _raise_uninitialized_error
        self.__dict__["_GetUseTransparentColor"] = _raise_uninitialized_error
        self.__dict__["_SetUseTransparentColor"] = _raise_uninitialized_error
        self.__dict__["_GetTransparentColor"] = _raise_uninitialized_error
        self.__dict__["_SetTransparentColor"] = _raise_uninitialized_error
        self.__dict__["_GetDirections"] = _raise_uninitialized_error
        self.__dict__["_GetSupported"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsProjectedRasterOverlay._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsProjectedRasterOverlay from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsProjectedRasterOverlay = agcom.GUID(IAgStkGraphicsProjectedRasterOverlay._uuid)
        vtable_offset_local = IAgStkGraphicsProjectedRasterOverlay._vtable_offset - 1
        self.__dict__["_GetRaster"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsProjectedRasterOverlay, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_SetRaster"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsProjectedRasterOverlay, vtable_offset_local+2, agcom.PVOID)
        self.__dict__["_GetProjection"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsProjectedRasterOverlay, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_SetProjection"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsProjectedRasterOverlay, vtable_offset_local+4, agcom.PVOID)
        self.__dict__["_GetShowShadows"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsProjectedRasterOverlay, vtable_offset_local+5, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetShowShadows"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsProjectedRasterOverlay, vtable_offset_local+6, agcom.VARIANT_BOOL)
        self.__dict__["_GetShowFrustum"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsProjectedRasterOverlay, vtable_offset_local+7, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetShowFrustum"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsProjectedRasterOverlay, vtable_offset_local+8, agcom.VARIANT_BOOL)
        self.__dict__["_GetShowFarPlane"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsProjectedRasterOverlay, vtable_offset_local+9, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetShowFarPlane"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsProjectedRasterOverlay, vtable_offset_local+10, agcom.VARIANT_BOOL)
        self.__dict__["_GetColor"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsProjectedRasterOverlay, vtable_offset_local+11, POINTER(agcom.OLE_COLOR))
        self.__dict__["_SetColor"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsProjectedRasterOverlay, vtable_offset_local+12, agcom.OLE_COLOR)
        self.__dict__["_GetFrustumColor"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsProjectedRasterOverlay, vtable_offset_local+13, POINTER(agcom.OLE_COLOR))
        self.__dict__["_SetFrustumColor"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsProjectedRasterOverlay, vtable_offset_local+14, agcom.OLE_COLOR)
        self.__dict__["_GetFarPlaneColor"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsProjectedRasterOverlay, vtable_offset_local+15, POINTER(agcom.OLE_COLOR))
        self.__dict__["_SetFarPlaneColor"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsProjectedRasterOverlay, vtable_offset_local+16, agcom.OLE_COLOR)
        self.__dict__["_GetShadowColor"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsProjectedRasterOverlay, vtable_offset_local+17, POINTER(agcom.OLE_COLOR))
        self.__dict__["_SetShadowColor"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsProjectedRasterOverlay, vtable_offset_local+18, agcom.OLE_COLOR)
        self.__dict__["_GetBorderColor"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsProjectedRasterOverlay, vtable_offset_local+19, POINTER(agcom.OLE_COLOR))
        self.__dict__["_SetBorderColor"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsProjectedRasterOverlay, vtable_offset_local+20, agcom.OLE_COLOR)
        self.__dict__["_GetBorderWidth"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsProjectedRasterOverlay, vtable_offset_local+21, POINTER(agcom.FLOAT))
        self.__dict__["_SetBorderWidth"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsProjectedRasterOverlay, vtable_offset_local+22, agcom.FLOAT)
        self.__dict__["_GetFrustumTranslucency"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsProjectedRasterOverlay, vtable_offset_local+23, POINTER(agcom.FLOAT))
        self.__dict__["_SetFrustumTranslucency"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsProjectedRasterOverlay, vtable_offset_local+24, agcom.FLOAT)
        self.__dict__["_GetFarPlaneTranslucency"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsProjectedRasterOverlay, vtable_offset_local+25, POINTER(agcom.FLOAT))
        self.__dict__["_SetFarPlaneTranslucency"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsProjectedRasterOverlay, vtable_offset_local+26, agcom.FLOAT)
        self.__dict__["_GetShadowTranslucency"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsProjectedRasterOverlay, vtable_offset_local+27, POINTER(agcom.FLOAT))
        self.__dict__["_SetShadowTranslucency"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsProjectedRasterOverlay, vtable_offset_local+28, agcom.FLOAT)
        self.__dict__["_GetBorderTranslucency"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsProjectedRasterOverlay, vtable_offset_local+29, POINTER(agcom.FLOAT))
        self.__dict__["_SetBorderTranslucency"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsProjectedRasterOverlay, vtable_offset_local+30, agcom.FLOAT)
        self.__dict__["_GetUseTransparentColor"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsProjectedRasterOverlay, vtable_offset_local+31, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseTransparentColor"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsProjectedRasterOverlay, vtable_offset_local+32, agcom.VARIANT_BOOL)
        self.__dict__["_GetTransparentColor"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsProjectedRasterOverlay, vtable_offset_local+33, POINTER(agcom.OLE_COLOR))
        self.__dict__["_SetTransparentColor"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsProjectedRasterOverlay, vtable_offset_local+34, agcom.OLE_COLOR)
        self.__dict__["_GetDirections"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsProjectedRasterOverlay, vtable_offset_local+35, POINTER(agcom.SAFEARRAY))
        self.__dict__["_GetSupported"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsProjectedRasterOverlay, vtable_offset_local+36, POINTER(agcom.VARIANT_BOOL))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsProjectedRasterOverlay.__dict__ and type(IAgStkGraphicsProjectedRasterOverlay.__dict__[attrname]) == property:
            return IAgStkGraphicsProjectedRasterOverlay.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsProjectedRasterOverlay.")
    
    @property
    def Raster(self) -> "IAgStkGraphicsRaster":
        """Gets or sets the raster that is projected."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetRaster"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @Raster.setter
    def Raster(self, raster:"IAgStkGraphicsRaster") -> None:
        with agmarshall.AgInterface_in_arg(raster, IAgStkGraphicsRaster) as arg_raster:
            agcls.evaluate_hresult(self.__dict__["_SetRaster"](arg_raster.COM_val))

    @property
    def Projection(self) -> "IAgStkGraphicsProjection":
        """Gets or sets the projection that projects the raster."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetProjection"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @Projection.setter
    def Projection(self, projection:"IAgStkGraphicsProjection") -> None:
        with agmarshall.AgInterface_in_arg(projection, IAgStkGraphicsProjection) as arg_projection:
            agcls.evaluate_hresult(self.__dict__["_SetProjection"](arg_projection.COM_val))

    @property
    def ShowShadows(self) -> bool:
        """Gets or sets whether to show shadows or not. When set to true, the raster will only be projected onto parts of the terrain visible from the projection's position. When false, the raster will project onto any terrain inside the projection's view frustum..."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetShowShadows"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @ShowShadows.setter
    def ShowShadows(self, showShadows:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(showShadows) as arg_showShadows:
            agcls.evaluate_hresult(self.__dict__["_SetShowShadows"](arg_showShadows.COM_val))

    @property
    def ShowFrustum(self) -> bool:
        """Gets or sets whether to show the frustum of the projection."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetShowFrustum"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @ShowFrustum.setter
    def ShowFrustum(self, showFrustum:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(showFrustum) as arg_showFrustum:
            agcls.evaluate_hresult(self.__dict__["_SetShowFrustum"](arg_showFrustum.COM_val))

    @property
    def ShowFarPlane(self) -> bool:
        """Gets or sets whether to show the far plane of the projection. If this is set to true, you will see the projected raster even when it does not intersect terrain."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetShowFarPlane"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @ShowFarPlane.setter
    def ShowFarPlane(self, showFarPlane:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(showFarPlane) as arg_showFarPlane:
            agcls.evaluate_hresult(self.__dict__["_SetShowFarPlane"](arg_showFarPlane.COM_val))

    @property
    def Color(self) -> agcolor.Color:
        """Gets or sets the color of the projected raster."""
        with agmarshall.OLE_COLOR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetColor"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Color.setter
    def Color(self, color:agcolor.Color) -> None:
        with agmarshall.OLE_COLOR_arg(color) as arg_color:
            agcls.evaluate_hresult(self.__dict__["_SetColor"](arg_color.COM_val))

    @property
    def FrustumColor(self) -> agcolor.Color:
        """Gets or sets the color of the projection's frustum."""
        with agmarshall.OLE_COLOR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetFrustumColor"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @FrustumColor.setter
    def FrustumColor(self, frustumColor:agcolor.Color) -> None:
        with agmarshall.OLE_COLOR_arg(frustumColor) as arg_frustumColor:
            agcls.evaluate_hresult(self.__dict__["_SetFrustumColor"](arg_frustumColor.COM_val))

    @property
    def FarPlaneColor(self) -> agcolor.Color:
        """Gets or sets the color of the projection's far plane."""
        with agmarshall.OLE_COLOR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetFarPlaneColor"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @FarPlaneColor.setter
    def FarPlaneColor(self, farPlaneColor:agcolor.Color) -> None:
        with agmarshall.OLE_COLOR_arg(farPlaneColor) as arg_farPlaneColor:
            agcls.evaluate_hresult(self.__dict__["_SetFarPlaneColor"](arg_farPlaneColor.COM_val))

    @property
    def ShadowColor(self) -> agcolor.Color:
        """Gets or sets the color of the projection's shadow."""
        with agmarshall.OLE_COLOR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetShadowColor"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @ShadowColor.setter
    def ShadowColor(self, shadowColor:agcolor.Color) -> None:
        with agmarshall.OLE_COLOR_arg(shadowColor) as arg_shadowColor:
            agcls.evaluate_hresult(self.__dict__["_SetShadowColor"](arg_shadowColor.COM_val))

    @property
    def BorderColor(self) -> agcolor.Color:
        """Gets or sets the color of the projection's border."""
        with agmarshall.OLE_COLOR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBorderColor"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @BorderColor.setter
    def BorderColor(self, borderColor:agcolor.Color) -> None:
        with agmarshall.OLE_COLOR_arg(borderColor) as arg_borderColor:
            agcls.evaluate_hresult(self.__dict__["_SetBorderColor"](arg_borderColor.COM_val))

    @property
    def BorderWidth(self) -> float:
        """Gets or sets the width of the projection's border."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBorderWidth"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @BorderWidth.setter
    def BorderWidth(self, borderWidth:float) -> None:
        with agmarshall.FLOAT_arg(borderWidth) as arg_borderWidth:
            agcls.evaluate_hresult(self.__dict__["_SetBorderWidth"](arg_borderWidth.COM_val))

    @property
    def FrustumTranslucency(self) -> float:
        """Gets or sets the translucency of the projection's frustum."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetFrustumTranslucency"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @FrustumTranslucency.setter
    def FrustumTranslucency(self, frustumTranslucency:float) -> None:
        with agmarshall.FLOAT_arg(frustumTranslucency) as arg_frustumTranslucency:
            agcls.evaluate_hresult(self.__dict__["_SetFrustumTranslucency"](arg_frustumTranslucency.COM_val))

    @property
    def FarPlaneTranslucency(self) -> float:
        """Gets or sets the translucency of the projection's far plane."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetFarPlaneTranslucency"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @FarPlaneTranslucency.setter
    def FarPlaneTranslucency(self, farPlaneTranslucency:float) -> None:
        with agmarshall.FLOAT_arg(farPlaneTranslucency) as arg_farPlaneTranslucency:
            agcls.evaluate_hresult(self.__dict__["_SetFarPlaneTranslucency"](arg_farPlaneTranslucency.COM_val))

    @property
    def ShadowTranslucency(self) -> float:
        """Gets or sets the translucency of the projection's shadow."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetShadowTranslucency"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @ShadowTranslucency.setter
    def ShadowTranslucency(self, shadowTranslucency:float) -> None:
        with agmarshall.FLOAT_arg(shadowTranslucency) as arg_shadowTranslucency:
            agcls.evaluate_hresult(self.__dict__["_SetShadowTranslucency"](arg_shadowTranslucency.COM_val))

    @property
    def BorderTranslucency(self) -> float:
        """Gets or sets the translucency of the projection's border."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBorderTranslucency"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @BorderTranslucency.setter
    def BorderTranslucency(self, borderTranslucency:float) -> None:
        with agmarshall.FLOAT_arg(borderTranslucency) as arg_borderTranslucency:
            agcls.evaluate_hresult(self.__dict__["_SetBorderTranslucency"](arg_borderTranslucency.COM_val))

    @property
    def UseTransparentColor(self) -> bool:
        """Gets or sets whether transparent color should be used."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseTransparentColor"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @UseTransparentColor.setter
    def UseTransparentColor(self, useTransparentColor:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(useTransparentColor) as arg_useTransparentColor:
            agcls.evaluate_hresult(self.__dict__["_SetUseTransparentColor"](arg_useTransparentColor.COM_val))

    @property
    def TransparentColor(self) -> agcolor.Color:
        """Gets or sets the color that will become transparent."""
        with agmarshall.OLE_COLOR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTransparentColor"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @TransparentColor.setter
    def TransparentColor(self, transparentColor:agcolor.Color) -> None:
        with agmarshall.OLE_COLOR_arg(transparentColor) as arg_transparentColor:
            agcls.evaluate_hresult(self.__dict__["_SetTransparentColor"](arg_transparentColor.COM_val))

    @property
    def Directions(self) -> list:
        """Gets the direction vectors in the central body's fixed reference frame that define the projection's frustum..."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDirections"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Supported(self) -> bool:
        """Gets whether or not the video card supports the projected raster overlay."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSupported"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{7cb212ed-4ef5-43c7-bbc3-f2ebd4dfd143}", IAgStkGraphicsProjectedRasterOverlay)
agcls.AgTypeNameMap["IAgStkGraphicsProjectedRasterOverlay"] = IAgStkGraphicsProjectedRasterOverlay
__all__.append("IAgStkGraphicsProjectedRasterOverlay")

class IAgStkGraphicsProjection(object):
    """A projection represents a simplified camera with a position, orientation, and field of view horizontal and field of view vertical..."""
    _uuid = "{152e3a02-23b0-4dc8-a7e5-9ee19619bcab}"
    _num_methods = 12
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetPosition"] = _raise_uninitialized_error
        self.__dict__["_SetPosition"] = _raise_uninitialized_error
        self.__dict__["_GetOrientation"] = _raise_uninitialized_error
        self.__dict__["_SetOrientation"] = _raise_uninitialized_error
        self.__dict__["_GetFieldOfViewHorizontal"] = _raise_uninitialized_error
        self.__dict__["_SetFieldOfViewHorizontal"] = _raise_uninitialized_error
        self.__dict__["_GetFieldOfViewVertical"] = _raise_uninitialized_error
        self.__dict__["_SetFieldOfViewVertical"] = _raise_uninitialized_error
        self.__dict__["_GetNearPlane"] = _raise_uninitialized_error
        self.__dict__["_SetNearPlane"] = _raise_uninitialized_error
        self.__dict__["_GetFarPlane"] = _raise_uninitialized_error
        self.__dict__["_SetFarPlane"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsProjection._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsProjection from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsProjection = agcom.GUID(IAgStkGraphicsProjection._uuid)
        vtable_offset_local = IAgStkGraphicsProjection._vtable_offset - 1
        self.__dict__["_GetPosition"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsProjection, vtable_offset_local+1, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetPosition"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsProjection, vtable_offset_local+2, agcom.SAFEARRAY)
        self.__dict__["_GetOrientation"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsProjection, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_SetOrientation"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsProjection, vtable_offset_local+4, agcom.PVOID)
        self.__dict__["_GetFieldOfViewHorizontal"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsProjection, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetFieldOfViewHorizontal"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsProjection, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetFieldOfViewVertical"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsProjection, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetFieldOfViewVertical"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsProjection, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetNearPlane"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsProjection, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetNearPlane"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsProjection, vtable_offset_local+10, agcom.DOUBLE)
        self.__dict__["_GetFarPlane"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsProjection, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_SetFarPlane"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsProjection, vtable_offset_local+12, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsProjection.__dict__ and type(IAgStkGraphicsProjection.__dict__[attrname]) == property:
            return IAgStkGraphicsProjection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsProjection.")
    
    @property
    def Position(self) -> list:
        """Gets or sets the cartesian defining the position of the projection in the central body's fixed reference frame. The array contains the components of the position arranged in the order x, y, z."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPosition"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @Position.setter
    def Position(self, position:list) -> None:
        with agmarshall.SAFEARRAY_arg(position) as arg_position:
            agcls.evaluate_hresult(self.__dict__["_SetPosition"](arg_position.COM_val))

    @property
    def Orientation(self) -> "IAgOrientation":
        """Gets or sets the unit quaternion defining the orientation of the projection in the central body's fixed reference frame."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetOrientation"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @Orientation.setter
    def Orientation(self, orientation:"IAgOrientation") -> None:
        with agmarshall.AgInterface_in_arg(orientation, IAgOrientation) as arg_orientation:
            agcls.evaluate_hresult(self.__dict__["_SetOrientation"](arg_orientation.COM_val))

    @property
    def FieldOfViewHorizontal(self) -> float:
        """Gets or sets the horizontal field of view associated with the projection."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetFieldOfViewHorizontal"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @FieldOfViewHorizontal.setter
    def FieldOfViewHorizontal(self, fieldOfViewHorizontal:float) -> None:
        with agmarshall.DOUBLE_arg(fieldOfViewHorizontal) as arg_fieldOfViewHorizontal:
            agcls.evaluate_hresult(self.__dict__["_SetFieldOfViewHorizontal"](arg_fieldOfViewHorizontal.COM_val))

    @property
    def FieldOfViewVertical(self) -> float:
        """Gets or sets the vertical field of view associated with the projection."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetFieldOfViewVertical"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @FieldOfViewVertical.setter
    def FieldOfViewVertical(self, fieldOfViewVertical:float) -> None:
        with agmarshall.DOUBLE_arg(fieldOfViewVertical) as arg_fieldOfViewVertical:
            agcls.evaluate_hresult(self.__dict__["_SetFieldOfViewVertical"](arg_fieldOfViewVertical.COM_val))

    @property
    def NearPlane(self) -> float:
        """Gets or sets the near plane associated with the projection."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetNearPlane"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @NearPlane.setter
    def NearPlane(self, nearPlane:float) -> None:
        with agmarshall.DOUBLE_arg(nearPlane) as arg_nearPlane:
            agcls.evaluate_hresult(self.__dict__["_SetNearPlane"](arg_nearPlane.COM_val))

    @property
    def FarPlane(self) -> float:
        """Gets or sets the far plane associated with the projection."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetFarPlane"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @FarPlane.setter
    def FarPlane(self, farPlane:float) -> None:
        with agmarshall.DOUBLE_arg(farPlane) as arg_farPlane:
            agcls.evaluate_hresult(self.__dict__["_SetFarPlane"](arg_farPlane.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{152e3a02-23b0-4dc8-a7e5-9ee19619bcab}", IAgStkGraphicsProjection)
agcls.AgTypeNameMap["IAgStkGraphicsProjection"] = IAgStkGraphicsProjection
__all__.append("IAgStkGraphicsProjection")

class IAgStkGraphicsProjectionStream(object):
    """A projection that is updated dynamically at the specified update delta. The class can be used to stream projection data to projection clients, like projected raster overlay..."""
    _uuid = "{7af66bcf-c123-47b2-ac63-168bbdedec66}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetUpdateDelta"] = _raise_uninitialized_error
        self.__dict__["_SetUpdateDelta"] = _raise_uninitialized_error
        self.__dict__["_Update"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsProjectionStream._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsProjectionStream from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsProjectionStream = agcom.GUID(IAgStkGraphicsProjectionStream._uuid)
        vtable_offset_local = IAgStkGraphicsProjectionStream._vtable_offset - 1
        self.__dict__["_GetUpdateDelta"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsProjectionStream, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetUpdateDelta"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsProjectionStream, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_Update"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsProjectionStream, vtable_offset_local+3, agcom.PVOID, agcom.PVOID, POINTER(agcom.VARIANT_BOOL))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsProjectionStream.__dict__ and type(IAgStkGraphicsProjectionStream.__dict__[attrname]) == property:
            return IAgStkGraphicsProjectionStream.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsProjectionStream.")
    
    @property
    def UpdateDelta(self) -> float:
        """Gets or sets the update delta of the projection stream in seconds. The update delta defines the interval at which the Update method will be called..."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetUpdateDelta"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @UpdateDelta.setter
    def UpdateDelta(self, updateDelta:float) -> None:
        with agmarshall.DOUBLE_arg(updateDelta) as arg_updateDelta:
            agcls.evaluate_hresult(self.__dict__["_SetUpdateDelta"](arg_updateDelta.COM_val))

    def Update(self, time:"IAgDate", nextTime:"IAgDate") -> bool:
        """When overridden in a derived class, updates the projection data associated with the projection stream at the specified time. When the Update method is called, the projection stream contains the current projection data..."""
        with agmarshall.AgInterface_in_arg(time, IAgDate) as arg_time, \
             agmarshall.AgInterface_in_arg(nextTime, IAgDate) as arg_nextTime, \
             agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_Update"](arg_time.COM_val, arg_nextTime.COM_val, byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{7af66bcf-c123-47b2-ac63-168bbdedec66}", IAgStkGraphicsProjectionStream)
agcls.AgTypeNameMap["IAgStkGraphicsProjectionStream"] = IAgStkGraphicsProjectionStream
__all__.append("IAgStkGraphicsProjectionStream")

class IAgStkGraphicsSceneGlobeOverlaySettings(object):
    """Settings used by globe overlay objects. These settings only affect the scene."""
    _uuid = "{6f2961c3-3fbe-4d5c-849b-d17be044dd71}"
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAntiAliasImagery"] = _raise_uninitialized_error
        self.__dict__["_SetAntiAliasImagery"] = _raise_uninitialized_error
        self.__dict__["_GetTerrainMeshPixelError"] = _raise_uninitialized_error
        self.__dict__["_SetTerrainMeshPixelError"] = _raise_uninitialized_error
        self.__dict__["_GetImageryPixelError"] = _raise_uninitialized_error
        self.__dict__["_SetImageryPixelError"] = _raise_uninitialized_error
        self.__dict__["_GetProjectedRasterModelProjection"] = _raise_uninitialized_error
        self.__dict__["_SetProjectedRasterModelProjection"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsSceneGlobeOverlaySettings._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsSceneGlobeOverlaySettings from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsSceneGlobeOverlaySettings = agcom.GUID(IAgStkGraphicsSceneGlobeOverlaySettings._uuid)
        vtable_offset_local = IAgStkGraphicsSceneGlobeOverlaySettings._vtable_offset - 1
        self.__dict__["_GetAntiAliasImagery"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSceneGlobeOverlaySettings, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetAntiAliasImagery"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSceneGlobeOverlaySettings, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetTerrainMeshPixelError"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSceneGlobeOverlaySettings, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTerrainMeshPixelError"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSceneGlobeOverlaySettings, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetImageryPixelError"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSceneGlobeOverlaySettings, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetImageryPixelError"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSceneGlobeOverlaySettings, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetProjectedRasterModelProjection"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSceneGlobeOverlaySettings, vtable_offset_local+7, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetProjectedRasterModelProjection"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSceneGlobeOverlaySettings, vtable_offset_local+8, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsSceneGlobeOverlaySettings.__dict__ and type(IAgStkGraphicsSceneGlobeOverlaySettings.__dict__[attrname]) == property:
            return IAgStkGraphicsSceneGlobeOverlaySettings.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsSceneGlobeOverlaySettings.")
    
    @property
    def AntiAliasImagery(self) -> bool:
        """Gets or sets a value indicating whether or not imagery is anti-aliased."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAntiAliasImagery"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @AntiAliasImagery.setter
    def AntiAliasImagery(self, antiAliasImagery:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(antiAliasImagery) as arg_antiAliasImagery:
            agcls.evaluate_hresult(self.__dict__["_SetAntiAliasImagery"](arg_antiAliasImagery.COM_val))

    @property
    def TerrainMeshPixelError(self) -> float:
        """Gets or sets the pixel error for terrain meshes. This is the number of pixels that the rendered terrain is different from the actual terrain data. The default is 2.0 pixels."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTerrainMeshPixelError"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @TerrainMeshPixelError.setter
    def TerrainMeshPixelError(self, terrainMeshPixelError:float) -> None:
        with agmarshall.DOUBLE_arg(terrainMeshPixelError) as arg_terrainMeshPixelError:
            agcls.evaluate_hresult(self.__dict__["_SetTerrainMeshPixelError"](arg_terrainMeshPixelError.COM_val))

    @property
    def ImageryPixelError(self) -> float:
        """Gets or sets the pixel error for imagery. This is the number of pixels that the rendered imagery is different from the actual imagery data. The default is 1.0 pixel."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetImageryPixelError"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @ImageryPixelError.setter
    def ImageryPixelError(self, imageryPixelError:float) -> None:
        with agmarshall.DOUBLE_arg(imageryPixelError) as arg_imageryPixelError:
            agcls.evaluate_hresult(self.__dict__["_SetImageryPixelError"](arg_imageryPixelError.COM_val))

    @property
    def ProjectedRasterModelProjection(self) -> bool:
        """Gets or sets whether projected raster globe overlays will also project onto models."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetProjectedRasterModelProjection"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @ProjectedRasterModelProjection.setter
    def ProjectedRasterModelProjection(self, projectedRasterModelProjection:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(projectedRasterModelProjection) as arg_projectedRasterModelProjection:
            agcls.evaluate_hresult(self.__dict__["_SetProjectedRasterModelProjection"](arg_projectedRasterModelProjection.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{6f2961c3-3fbe-4d5c-849b-d17be044dd71}", IAgStkGraphicsSceneGlobeOverlaySettings)
agcls.AgTypeNameMap["IAgStkGraphicsSceneGlobeOverlaySettings"] = IAgStkGraphicsSceneGlobeOverlaySettings
__all__.append("IAgStkGraphicsSceneGlobeOverlaySettings")

class IAgStkGraphicsScreenOverlayCollectionBase(object):
    """The common base class for collections of overlays held by screen overlay and by screen overlay manager."""
    _uuid = "{49ea6365-0b8d-4fc5-ad52-c1d16ac7568d}"
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        self.__dict__["_GetIsReadOnly"] = _raise_uninitialized_error
        self.__dict__["_Item"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        self.__dict__["_Contains"] = _raise_uninitialized_error
        self.__dict__["_Remove"] = _raise_uninitialized_error
        self.__dict__["_Clear"] = _raise_uninitialized_error
        self.__dict__["_Add"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsScreenOverlayCollectionBase._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsScreenOverlayCollectionBase from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsScreenOverlayCollectionBase = agcom.GUID(IAgStkGraphicsScreenOverlayCollectionBase._uuid)
        vtable_offset_local = IAgStkGraphicsScreenOverlayCollectionBase._vtable_offset - 1
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsScreenOverlayCollectionBase, vtable_offset_local+1, POINTER(agcom.INT))
        self.__dict__["_GetIsReadOnly"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsScreenOverlayCollectionBase, vtable_offset_local+2, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_Item"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsScreenOverlayCollectionBase, vtable_offset_local+3, agcom.INT, POINTER(agcom.PVOID))
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsScreenOverlayCollectionBase, vtable_offset_local+4, POINTER(agcom.PVOID))
        self.__dict__["_Contains"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsScreenOverlayCollectionBase, vtable_offset_local+5, agcom.PVOID, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_Remove"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsScreenOverlayCollectionBase, vtable_offset_local+6, agcom.PVOID, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_Clear"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsScreenOverlayCollectionBase, vtable_offset_local+7, )
        self.__dict__["_Add"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsScreenOverlayCollectionBase, vtable_offset_local+8, agcom.PVOID)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsScreenOverlayCollectionBase.__dict__ and type(IAgStkGraphicsScreenOverlayCollectionBase.__dict__[attrname]) == property:
            return IAgStkGraphicsScreenOverlayCollectionBase.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsScreenOverlayCollectionBase.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> "IAgStkGraphicsScreenOverlay":
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    
    @property
    def Count(self) -> int:
        """Gets the number of screen overlays in the collection."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def IsReadOnly(self) -> bool:
        """Gets a value indicating whether the collection is read-only."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetIsReadOnly"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def Item(self, index:int) -> "IAgStkGraphicsScreenOverlay":
        """Gets the overlay at the specified index."""
        with agmarshall.INT_arg(index) as arg_index, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Item"](arg_index.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        """Returns an enumerator that iterates through the collection."""
        with agmarshall.IEnumVARIANT_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def Contains(self, item:"IAgStkGraphicsScreenOverlay") -> bool:
        """Determines whether the collection contains a specific overlay."""
        with agmarshall.AgInterface_in_arg(item, IAgStkGraphicsScreenOverlay) as arg_item, \
             agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_Contains"](arg_item.COM_val, byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def Remove(self, item:"IAgStkGraphicsScreenOverlay") -> bool:
        """Removes the first occurrence of a specific overlay from the collection."""
        with agmarshall.AgInterface_in_arg(item, IAgStkGraphicsScreenOverlay) as arg_item, \
             agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_Remove"](arg_item.COM_val, byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def Clear(self) -> None:
        """Removes all overlays from the collection."""
        agcls.evaluate_hresult(self.__dict__["_Clear"]())

    def Add(self, item:"IAgStkGraphicsScreenOverlay") -> None:
        """Adds an overlay to the collection."""
        with agmarshall.AgInterface_in_arg(item, IAgStkGraphicsScreenOverlay) as arg_item:
            agcls.evaluate_hresult(self.__dict__["_Add"](arg_item.COM_val))

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{49ea6365-0b8d-4fc5-ad52-c1d16ac7568d}", IAgStkGraphicsScreenOverlayCollectionBase)
agcls.AgTypeNameMap["IAgStkGraphicsScreenOverlayCollectionBase"] = IAgStkGraphicsScreenOverlayCollectionBase
__all__.append("IAgStkGraphicsScreenOverlayCollectionBase")

class IAgStkGraphicsTexture2DFactory(object):
    """A factory for creating texture 2d objects from various sources."""
    _uuid = "{455fd9a8-e787-4459-a613-e3367dce25b8}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_LoadFromStringUri"] = _raise_uninitialized_error
        self.__dict__["_FromRaster"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsTexture2DFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsTexture2DFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsTexture2DFactory = agcom.GUID(IAgStkGraphicsTexture2DFactory._uuid)
        vtable_offset_local = IAgStkGraphicsTexture2DFactory._vtable_offset - 1
        self.__dict__["_LoadFromStringUri"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTexture2DFactory, vtable_offset_local+1, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_FromRaster"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTexture2DFactory, vtable_offset_local+2, agcom.PVOID, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsTexture2DFactory.__dict__ and type(IAgStkGraphicsTexture2DFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsTexture2DFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsTexture2DFactory.")
    
    def LoadFromStringUri(self, uri:str) -> "IAgStkGraphicsRendererTexture2D":
        """Creates a new texture from a Uri, which can be a file, HTTP, HTTPS, or FTP source. See raster for a list of supported raster formats."""
        with agmarshall.BSTR_arg(uri) as arg_uri, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_LoadFromStringUri"](arg_uri.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def FromRaster(self, raster:"IAgStkGraphicsRaster") -> "IAgStkGraphicsRendererTexture2D":
        """Creates a new texture from a raster."""
        with agmarshall.AgInterface_in_arg(raster, IAgStkGraphicsRaster) as arg_raster, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_FromRaster"](arg_raster.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{455fd9a8-e787-4459-a613-e3367dce25b8}", IAgStkGraphicsTexture2DFactory)
agcls.AgTypeNameMap["IAgStkGraphicsTexture2DFactory"] = IAgStkGraphicsTexture2DFactory
__all__.append("IAgStkGraphicsTexture2DFactory")

class IAgStkGraphicsVisualEffects(object):
    """Controls various post processing effects that can be applied to the scene."""
    _uuid = "{a1b830ed-9742-4903-9773-1edbc40f0deb}"
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetLensFlareEnabled"] = _raise_uninitialized_error
        self.__dict__["_SetLensFlareEnabled"] = _raise_uninitialized_error
        self.__dict__["_GetVignetteEnabled"] = _raise_uninitialized_error
        self.__dict__["_SetVignetteEnabled"] = _raise_uninitialized_error
        self.__dict__["_GetVignetteStrength"] = _raise_uninitialized_error
        self.__dict__["_SetVignetteStrength"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsVisualEffects._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsVisualEffects from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsVisualEffects = agcom.GUID(IAgStkGraphicsVisualEffects._uuid)
        vtable_offset_local = IAgStkGraphicsVisualEffects._vtable_offset - 1
        self.__dict__["_GetLensFlareEnabled"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVisualEffects, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetLensFlareEnabled"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVisualEffects, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetVignetteEnabled"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVisualEffects, vtable_offset_local+3, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetVignetteEnabled"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVisualEffects, vtable_offset_local+4, agcom.VARIANT_BOOL)
        self.__dict__["_GetVignetteStrength"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVisualEffects, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetVignetteStrength"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVisualEffects, vtable_offset_local+6, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsVisualEffects.__dict__ and type(IAgStkGraphicsVisualEffects.__dict__[attrname]) == property:
            return IAgStkGraphicsVisualEffects.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsVisualEffects.")
    
    @property
    def LensFlareEnabled(self) -> bool:
        """Gets or sets whether or not the lens flare effect is enabled"""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetLensFlareEnabled"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @LensFlareEnabled.setter
    def LensFlareEnabled(self, lensFlareEnabled:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(lensFlareEnabled) as arg_lensFlareEnabled:
            agcls.evaluate_hresult(self.__dict__["_SetLensFlareEnabled"](arg_lensFlareEnabled.COM_val))

    @property
    def VignetteEnabled(self) -> bool:
        """Gets or sets whether or not the vignette effect is enabled. This simulates light being blocked by the lens hood, resulting in a slight darkening at the perimeter of the 3D Window."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetVignetteEnabled"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @VignetteEnabled.setter
    def VignetteEnabled(self, vignetteEnabled:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(vignetteEnabled) as arg_vignetteEnabled:
            agcls.evaluate_hresult(self.__dict__["_SetVignetteEnabled"](arg_vignetteEnabled.COM_val))

    @property
    def VignetteStrength(self) -> float:
        """Sets the strength of the vignette effect, values between [0.001 and 5.0], with larger values resulting in more pronounced darkening around the perimeter of the 3D window."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetVignetteStrength"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @VignetteStrength.setter
    def VignetteStrength(self, vignetteStrength:float) -> None:
        with agmarshall.DOUBLE_arg(vignetteStrength) as arg_vignetteStrength:
            agcls.evaluate_hresult(self.__dict__["_SetVignetteStrength"](arg_vignetteStrength.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{a1b830ed-9742-4903-9773-1edbc40f0deb}", IAgStkGraphicsVisualEffects)
agcls.AgTypeNameMap["IAgStkGraphicsVisualEffects"] = IAgStkGraphicsVisualEffects
__all__.append("IAgStkGraphicsVisualEffects")

class IAgStkGraphicsAltitudeDisplayCondition(object):
    """Defines an inclusive altitude interval that determines when an object is rendered based on the camera's altitude relative to a central body."""
    _uuid = "{a6225aa6-608d-4ad8-b5f6-2afdd29b96f9}"
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetMinimumAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetMinimumAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetMaximumAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetMaximumAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetCentralBody"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBody"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsAltitudeDisplayCondition._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsAltitudeDisplayCondition from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsAltitudeDisplayCondition = agcom.GUID(IAgStkGraphicsAltitudeDisplayCondition._uuid)
        vtable_offset_local = IAgStkGraphicsAltitudeDisplayCondition._vtable_offset - 1
        self.__dict__["_GetMinimumAltitude"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsAltitudeDisplayCondition, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMinimumAltitude"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsAltitudeDisplayCondition, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetMaximumAltitude"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsAltitudeDisplayCondition, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaximumAltitude"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsAltitudeDisplayCondition, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetCentralBody"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsAltitudeDisplayCondition, vtable_offset_local+5, POINTER(agcom.BSTR))
        self.__dict__["_SetCentralBody"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsAltitudeDisplayCondition, vtable_offset_local+6, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsAltitudeDisplayCondition.__dict__ and type(IAgStkGraphicsAltitudeDisplayCondition.__dict__[attrname]) == property:
            return IAgStkGraphicsAltitudeDisplayCondition.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsAltitudeDisplayCondition.")
    
    @property
    def MinimumAltitude(self) -> float:
        """Gets or sets the minimum altitude of the inclusive altitude interval. Use Double.MinValue to ignore checking the minimum altitude."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinimumAltitude"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @MinimumAltitude.setter
    def MinimumAltitude(self, minimumAltitude:float) -> None:
        with agmarshall.DOUBLE_arg(minimumAltitude) as arg_minimumAltitude:
            agcls.evaluate_hresult(self.__dict__["_SetMinimumAltitude"](arg_minimumAltitude.COM_val))

    @property
    def MaximumAltitude(self) -> float:
        """Gets or sets the maximum altitude of the inclusive altitude interval. Use Double.MaxValue to ignore checking the maximum altitude."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaximumAltitude"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @MaximumAltitude.setter
    def MaximumAltitude(self, maximumAltitude:float) -> None:
        with agmarshall.DOUBLE_arg(maximumAltitude) as arg_maximumAltitude:
            agcls.evaluate_hresult(self.__dict__["_SetMaximumAltitude"](arg_maximumAltitude.COM_val))

    @property
    def CentralBody(self) -> str:
        """Gets or sets the central body to which the altitude is relative."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBody"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @CentralBody.setter
    def CentralBody(self, centralBody:str) -> None:
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBody"](arg_centralBody.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{a6225aa6-608d-4ad8-b5f6-2afdd29b96f9}", IAgStkGraphicsAltitudeDisplayCondition)
agcls.AgTypeNameMap["IAgStkGraphicsAltitudeDisplayCondition"] = IAgStkGraphicsAltitudeDisplayCondition
__all__.append("IAgStkGraphicsAltitudeDisplayCondition")

class IAgStkGraphicsAxesPrimitive(object):
    """Renders an axes in the 3D scene."""
    _uuid = "{8892fb91-4aa2-4663-9307-68a737163045}"
    _num_methods = 22
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetLighting"] = _raise_uninitialized_error
        self.__dict__["_SetLighting"] = _raise_uninitialized_error
        self.__dict__["_GetLabel"] = _raise_uninitialized_error
        self.__dict__["_SetLabel"] = _raise_uninitialized_error
        self.__dict__["_GetDisplayLabel"] = _raise_uninitialized_error
        self.__dict__["_SetDisplayLabel"] = _raise_uninitialized_error
        self.__dict__["_GetDisplayTrace"] = _raise_uninitialized_error
        self.__dict__["_SetDisplayTrace"] = _raise_uninitialized_error
        self.__dict__["_GetDisplaySweep"] = _raise_uninitialized_error
        self.__dict__["_SetDisplaySweep"] = _raise_uninitialized_error
        self.__dict__["_GetDisplayLines"] = _raise_uninitialized_error
        self.__dict__["_SetDisplayLines"] = _raise_uninitialized_error
        self.__dict__["_GetPersistenceWidth"] = _raise_uninitialized_error
        self.__dict__["_SetPersistenceWidth"] = _raise_uninitialized_error
        self.__dict__["_GetFadePersistence"] = _raise_uninitialized_error
        self.__dict__["_SetFadePersistence"] = _raise_uninitialized_error
        self.__dict__["_GetPersistenceDuration"] = _raise_uninitialized_error
        self.__dict__["_SetPersistenceDuration"] = _raise_uninitialized_error
        self.__dict__["_GetLength"] = _raise_uninitialized_error
        self.__dict__["_SetLength"] = _raise_uninitialized_error
        self.__dict__["_GetWidth"] = _raise_uninitialized_error
        self.__dict__["_SetWidth"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsAxesPrimitive._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsAxesPrimitive from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsAxesPrimitive = agcom.GUID(IAgStkGraphicsAxesPrimitive._uuid)
        vtable_offset_local = IAgStkGraphicsAxesPrimitive._vtable_offset - 1
        self.__dict__["_GetLighting"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsAxesPrimitive, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetLighting"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsAxesPrimitive, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetLabel"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsAxesPrimitive, vtable_offset_local+3, POINTER(agcom.BSTR))
        self.__dict__["_SetLabel"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsAxesPrimitive, vtable_offset_local+4, agcom.BSTR)
        self.__dict__["_GetDisplayLabel"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsAxesPrimitive, vtable_offset_local+5, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetDisplayLabel"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsAxesPrimitive, vtable_offset_local+6, agcom.VARIANT_BOOL)
        self.__dict__["_GetDisplayTrace"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsAxesPrimitive, vtable_offset_local+7, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetDisplayTrace"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsAxesPrimitive, vtable_offset_local+8, agcom.VARIANT_BOOL)
        self.__dict__["_GetDisplaySweep"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsAxesPrimitive, vtable_offset_local+9, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetDisplaySweep"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsAxesPrimitive, vtable_offset_local+10, agcom.VARIANT_BOOL)
        self.__dict__["_GetDisplayLines"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsAxesPrimitive, vtable_offset_local+11, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetDisplayLines"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsAxesPrimitive, vtable_offset_local+12, agcom.VARIANT_BOOL)
        self.__dict__["_GetPersistenceWidth"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsAxesPrimitive, vtable_offset_local+13, POINTER(agcom.DOUBLE))
        self.__dict__["_SetPersistenceWidth"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsAxesPrimitive, vtable_offset_local+14, agcom.DOUBLE)
        self.__dict__["_GetFadePersistence"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsAxesPrimitive, vtable_offset_local+15, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetFadePersistence"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsAxesPrimitive, vtable_offset_local+16, agcom.VARIANT_BOOL)
        self.__dict__["_GetPersistenceDuration"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsAxesPrimitive, vtable_offset_local+17, POINTER(agcom.DOUBLE))
        self.__dict__["_SetPersistenceDuration"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsAxesPrimitive, vtable_offset_local+18, agcom.DOUBLE)
        self.__dict__["_GetLength"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsAxesPrimitive, vtable_offset_local+19, POINTER(agcom.DOUBLE))
        self.__dict__["_SetLength"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsAxesPrimitive, vtable_offset_local+20, agcom.DOUBLE)
        self.__dict__["_GetWidth"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsAxesPrimitive, vtable_offset_local+21, POINTER(agcom.DOUBLE))
        self.__dict__["_SetWidth"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsAxesPrimitive, vtable_offset_local+22, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsAxesPrimitive.__dict__ and type(IAgStkGraphicsAxesPrimitive.__dict__[attrname]) == property:
            return IAgStkGraphicsAxesPrimitive.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsAxesPrimitive.")
    
    @property
    def Lighting(self) -> bool:
        """Gets or Sets whether the primitive is lit."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetLighting"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Lighting.setter
    def Lighting(self, lighting:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(lighting) as arg_lighting:
            agcls.evaluate_hresult(self.__dict__["_SetLighting"](arg_lighting.COM_val))

    @property
    def Label(self) -> str:
        """Gets or Sets the axes label."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetLabel"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Label.setter
    def Label(self, label:str) -> None:
        with agmarshall.BSTR_arg(label) as arg_label:
            agcls.evaluate_hresult(self.__dict__["_SetLabel"](arg_label.COM_val))

    @property
    def DisplayLabel(self) -> bool:
        """Gets or Sets whether the axes' label is displayed."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDisplayLabel"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @DisplayLabel.setter
    def DisplayLabel(self, displayLabel:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(displayLabel) as arg_displayLabel:
            agcls.evaluate_hresult(self.__dict__["_SetDisplayLabel"](arg_displayLabel.COM_val))

    @property
    def DisplayTrace(self) -> bool:
        """Gets or Sets whether the persistence trace (points) is displayed."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDisplayTrace"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @DisplayTrace.setter
    def DisplayTrace(self, displayTrace:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(displayTrace) as arg_displayTrace:
            agcls.evaluate_hresult(self.__dict__["_SetDisplayTrace"](arg_displayTrace.COM_val))

    @property
    def DisplaySweep(self) -> bool:
        """Gets or Sets whether the persistence sweep (triangles) is displayed."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDisplaySweep"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @DisplaySweep.setter
    def DisplaySweep(self, displaySweep:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(displaySweep) as arg_displaySweep:
            agcls.evaluate_hresult(self.__dict__["_SetDisplaySweep"](arg_displaySweep.COM_val))

    @property
    def DisplayLines(self) -> bool:
        """Gets or Sets whether persistence lines are displayed."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDisplayLines"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @DisplayLines.setter
    def DisplayLines(self, displayLines:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(displayLines) as arg_displayLines:
            agcls.evaluate_hresult(self.__dict__["_SetDisplayLines"](arg_displayLines.COM_val))

    @property
    def PersistenceWidth(self) -> float:
        """Gets or Sets persistence point/line width."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPersistenceWidth"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @PersistenceWidth.setter
    def PersistenceWidth(self, persistenceWidth:float) -> None:
        with agmarshall.DOUBLE_arg(persistenceWidth) as arg_persistenceWidth:
            agcls.evaluate_hresult(self.__dict__["_SetPersistenceWidth"](arg_persistenceWidth.COM_val))

    @property
    def FadePersistence(self) -> bool:
        """Gets or Sets whether the persistence path should fade over time."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetFadePersistence"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @FadePersistence.setter
    def FadePersistence(self, fadePersistence:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(fadePersistence) as arg_fadePersistence:
            agcls.evaluate_hresult(self.__dict__["_SetFadePersistence"](arg_fadePersistence.COM_val))

    @property
    def PersistenceDuration(self) -> float:
        """Gets or Sets the maximum length (in seconds) of the persistence path."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPersistenceDuration"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @PersistenceDuration.setter
    def PersistenceDuration(self, persistenceDuration:float) -> None:
        with agmarshall.DOUBLE_arg(persistenceDuration) as arg_persistenceDuration:
            agcls.evaluate_hresult(self.__dict__["_SetPersistenceDuration"](arg_persistenceDuration.COM_val))

    @property
    def Length(self) -> float:
        """Gets or Sets the axes' source-to-arrow-tip length."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetLength"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Length.setter
    def Length(self, length:float) -> None:
        with agmarshall.DOUBLE_arg(length) as arg_length:
            agcls.evaluate_hresult(self.__dict__["_SetLength"](arg_length.COM_val))

    @property
    def Width(self) -> float:
        """Gets or Sets the width in pixels. As the camera distances changes from this primitive, the geometry will autoscale to maintain this thickness."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetWidth"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Width.setter
    def Width(self, width:float) -> None:
        with agmarshall.DOUBLE_arg(width) as arg_width:
            agcls.evaluate_hresult(self.__dict__["_SetWidth"](arg_width.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{8892fb91-4aa2-4663-9307-68a737163045}", IAgStkGraphicsAxesPrimitive)
agcls.AgTypeNameMap["IAgStkGraphicsAxesPrimitive"] = IAgStkGraphicsAxesPrimitive
__all__.append("IAgStkGraphicsAxesPrimitive")

class IAgStkGraphicsCamera(object):
    """Implemented by the scene camera. Contains operations to manipulate the camera position, view direction and orientation in the scene."""
    _uuid = "{c9a35fc4-8868-4b28-8622-13cfa470c315}"
    _num_methods = 50
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetPosition"] = _raise_uninitialized_error
        self.__dict__["_SetPosition"] = _raise_uninitialized_error
        self.__dict__["_GetReferencePoint"] = _raise_uninitialized_error
        self.__dict__["_SetReferencePoint"] = _raise_uninitialized_error
        self.__dict__["_GetDirection"] = _raise_uninitialized_error
        self.__dict__["_SetDirection"] = _raise_uninitialized_error
        self.__dict__["_GetUpVector"] = _raise_uninitialized_error
        self.__dict__["_SetUpVector"] = _raise_uninitialized_error
        self.__dict__["_GetDistance"] = _raise_uninitialized_error
        self.__dict__["_SetDistance"] = _raise_uninitialized_error
        self.__dict__["_GetAxes"] = _raise_uninitialized_error
        self.__dict__["_SetAxes"] = _raise_uninitialized_error
        self.__dict__["_GetConstrainedUpAxis"] = _raise_uninitialized_error
        self.__dict__["_SetConstrainedUpAxis"] = _raise_uninitialized_error
        self.__dict__["_GetAllowRotationOverConstrainedUpAxis"] = _raise_uninitialized_error
        self.__dict__["_SetAllowRotationOverConstrainedUpAxis"] = _raise_uninitialized_error
        self.__dict__["_GetLockViewDirection"] = _raise_uninitialized_error
        self.__dict__["_SetLockViewDirection"] = _raise_uninitialized_error
        self.__dict__["_GetFieldOfView"] = _raise_uninitialized_error
        self.__dict__["_SetFieldOfView"] = _raise_uninitialized_error
        self.__dict__["_GetHorizontalFieldOfView"] = _raise_uninitialized_error
        self.__dict__["_GetVerticalFieldOfView"] = _raise_uninitialized_error
        self.__dict__["_GetNearPlane"] = _raise_uninitialized_error
        self.__dict__["_SetNearPlane"] = _raise_uninitialized_error
        self.__dict__["_GetFarPlane"] = _raise_uninitialized_error
        self.__dict__["_SetFarPlane"] = _raise_uninitialized_error
        self.__dict__["_GetFarNearPlaneRatio"] = _raise_uninitialized_error
        self.__dict__["_SetFarNearPlaneRatio"] = _raise_uninitialized_error
        self.__dict__["_GetDistancePerRadius"] = _raise_uninitialized_error
        self.__dict__["_GetSnapshot"] = _raise_uninitialized_error
        self.__dict__["_GetVideoRecording"] = _raise_uninitialized_error
        self.__dict__["_GetPixelSizePerDistance"] = _raise_uninitialized_error
        self.__dict__["_GetPositionReferenceFrame"] = _raise_uninitialized_error
        self.__dict__["_GetReferencePointReferenceFrame"] = _raise_uninitialized_error
        self.__dict__["_VisibilityTest"] = _raise_uninitialized_error
        self.__dict__["_CartographicToWindow"] = _raise_uninitialized_error
        self.__dict__["_TryCartographicToWindow"] = _raise_uninitialized_error
        self.__dict__["_WindowToCartographic"] = _raise_uninitialized_error
        self.__dict__["_TryWindowToCartographic"] = _raise_uninitialized_error
        self.__dict__["_ViewCentralBody"] = _raise_uninitialized_error
        self.__dict__["_ViewExtent"] = _raise_uninitialized_error
        self.__dict__["_ViewRectangularExtent"] = _raise_uninitialized_error
        self.__dict__["_ViewWithUpAxis"] = _raise_uninitialized_error
        self.__dict__["_View"] = _raise_uninitialized_error
        self.__dict__["_ViewDirectionWithUpAxis"] = _raise_uninitialized_error
        self.__dict__["_ViewDirection"] = _raise_uninitialized_error
        self.__dict__["_ViewOffsetWithUpAxis"] = _raise_uninitialized_error
        self.__dict__["_ViewOffset"] = _raise_uninitialized_error
        self.__dict__["_ViewOffsetDirectionWithUpAxis"] = _raise_uninitialized_error
        self.__dict__["_ViewOffsetDirection"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsCamera._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsCamera from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsCamera = agcom.GUID(IAgStkGraphicsCamera._uuid)
        vtable_offset_local = IAgStkGraphicsCamera._vtable_offset - 1
        self.__dict__["_GetPosition"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCamera, vtable_offset_local+1, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetPosition"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCamera, vtable_offset_local+2, agcom.SAFEARRAY)
        self.__dict__["_GetReferencePoint"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCamera, vtable_offset_local+3, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetReferencePoint"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCamera, vtable_offset_local+4, agcom.SAFEARRAY)
        self.__dict__["_GetDirection"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCamera, vtable_offset_local+5, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetDirection"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCamera, vtable_offset_local+6, agcom.SAFEARRAY)
        self.__dict__["_GetUpVector"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCamera, vtable_offset_local+7, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetUpVector"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCamera, vtable_offset_local+8, agcom.SAFEARRAY)
        self.__dict__["_GetDistance"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCamera, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDistance"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCamera, vtable_offset_local+10, agcom.DOUBLE)
        self.__dict__["_GetAxes"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCamera, vtable_offset_local+11, POINTER(agcom.PVOID))
        self.__dict__["_SetAxes"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCamera, vtable_offset_local+12, agcom.PVOID)
        self.__dict__["_GetConstrainedUpAxis"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCamera, vtable_offset_local+13, POINTER(agcom.LONG))
        self.__dict__["_SetConstrainedUpAxis"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCamera, vtable_offset_local+14, agcom.LONG)
        self.__dict__["_GetAllowRotationOverConstrainedUpAxis"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCamera, vtable_offset_local+15, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetAllowRotationOverConstrainedUpAxis"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCamera, vtable_offset_local+16, agcom.VARIANT_BOOL)
        self.__dict__["_GetLockViewDirection"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCamera, vtable_offset_local+17, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetLockViewDirection"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCamera, vtable_offset_local+18, agcom.VARIANT_BOOL)
        self.__dict__["_GetFieldOfView"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCamera, vtable_offset_local+19, POINTER(agcom.DOUBLE))
        self.__dict__["_SetFieldOfView"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCamera, vtable_offset_local+20, agcom.DOUBLE)
        self.__dict__["_GetHorizontalFieldOfView"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCamera, vtable_offset_local+21, POINTER(agcom.DOUBLE))
        self.__dict__["_GetVerticalFieldOfView"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCamera, vtable_offset_local+22, POINTER(agcom.DOUBLE))
        self.__dict__["_GetNearPlane"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCamera, vtable_offset_local+23, POINTER(agcom.DOUBLE))
        self.__dict__["_SetNearPlane"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCamera, vtable_offset_local+24, agcom.DOUBLE)
        self.__dict__["_GetFarPlane"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCamera, vtable_offset_local+25, POINTER(agcom.DOUBLE))
        self.__dict__["_SetFarPlane"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCamera, vtable_offset_local+26, agcom.DOUBLE)
        self.__dict__["_GetFarNearPlaneRatio"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCamera, vtable_offset_local+27, POINTER(agcom.DOUBLE))
        self.__dict__["_SetFarNearPlaneRatio"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCamera, vtable_offset_local+28, agcom.DOUBLE)
        self.__dict__["_GetDistancePerRadius"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCamera, vtable_offset_local+29, POINTER(agcom.DOUBLE))
        self.__dict__["_GetSnapshot"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCamera, vtable_offset_local+30, POINTER(agcom.PVOID))
        self.__dict__["_GetVideoRecording"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCamera, vtable_offset_local+31, POINTER(agcom.PVOID))
        self.__dict__["_GetPixelSizePerDistance"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCamera, vtable_offset_local+32, POINTER(agcom.DOUBLE))
        self.__dict__["_GetPositionReferenceFrame"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCamera, vtable_offset_local+33, POINTER(agcom.PVOID))
        self.__dict__["_GetReferencePointReferenceFrame"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCamera, vtable_offset_local+34, POINTER(agcom.PVOID))
        self.__dict__["_VisibilityTest"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCamera, vtable_offset_local+35, agcom.PVOID, agcom.PVOID, POINTER(agcom.LONG))
        self.__dict__["_CartographicToWindow"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCamera, vtable_offset_local+36, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY))
        self.__dict__["_TryCartographicToWindow"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCamera, vtable_offset_local+37, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY))
        self.__dict__["_WindowToCartographic"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCamera, vtable_offset_local+38, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY))
        self.__dict__["_TryWindowToCartographic"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCamera, vtable_offset_local+39, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY))
        self.__dict__["_ViewCentralBody"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCamera, vtable_offset_local+40, agcom.BSTR, agcom.PVOID)
        self.__dict__["_ViewExtent"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCamera, vtable_offset_local+41, agcom.BSTR, POINTER(agcom.SAFEARRAY))
        self.__dict__["_ViewRectangularExtent"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCamera, vtable_offset_local+42, agcom.BSTR, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE)
        self.__dict__["_ViewWithUpAxis"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCamera, vtable_offset_local+43, agcom.PVOID, agcom.PVOID, agcom.PVOID, POINTER(agcom.SAFEARRAY))
        self.__dict__["_View"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCamera, vtable_offset_local+44, agcom.PVOID, agcom.PVOID, agcom.PVOID)
        self.__dict__["_ViewDirectionWithUpAxis"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCamera, vtable_offset_local+45, agcom.PVOID, agcom.PVOID, agcom.PVOID, POINTER(agcom.SAFEARRAY))
        self.__dict__["_ViewDirection"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCamera, vtable_offset_local+46, agcom.PVOID, agcom.PVOID, agcom.PVOID)
        self.__dict__["_ViewOffsetWithUpAxis"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCamera, vtable_offset_local+47, agcom.PVOID, agcom.PVOID, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY))
        self.__dict__["_ViewOffset"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCamera, vtable_offset_local+48, agcom.PVOID, agcom.PVOID, POINTER(agcom.SAFEARRAY))
        self.__dict__["_ViewOffsetDirectionWithUpAxis"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCamera, vtable_offset_local+49, agcom.PVOID, agcom.PVOID, agcom.PVOID, POINTER(agcom.SAFEARRAY))
        self.__dict__["_ViewOffsetDirection"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCamera, vtable_offset_local+50, agcom.PVOID, agcom.PVOID, agcom.PVOID)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsCamera.__dict__ and type(IAgStkGraphicsCamera.__dict__[attrname]) == property:
            return IAgStkGraphicsCamera.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsCamera.")
    
    @property
    def Position(self) -> list:
        """Gets or sets the position of the camera. The array contains the components of the position arranged in the order x, y, z."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPosition"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @Position.setter
    def Position(self, position:list) -> None:
        with agmarshall.SAFEARRAY_arg(position) as arg_position:
            agcls.evaluate_hresult(self.__dict__["_SetPosition"](arg_position.COM_val))

    @property
    def ReferencePoint(self) -> list:
        """Gets or sets the reference point of the camera. The array contains the components of the reference point arranged in the order x, y, z."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetReferencePoint"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @ReferencePoint.setter
    def ReferencePoint(self, referencePoint:list) -> None:
        with agmarshall.SAFEARRAY_arg(referencePoint) as arg_referencePoint:
            agcls.evaluate_hresult(self.__dict__["_SetReferencePoint"](arg_referencePoint.COM_val))

    @property
    def Direction(self) -> list:
        """Gets or sets the direction of the camera in axes. The array contains the components of the direction arranged in the order x, y, z."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDirection"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @Direction.setter
    def Direction(self, direction:list) -> None:
        with agmarshall.SAFEARRAY_arg(direction) as arg_direction:
            agcls.evaluate_hresult(self.__dict__["_SetDirection"](arg_direction.COM_val))

    @property
    def UpVector(self) -> list:
        """Gets or sets the up direction of the camera in axes. The array contains the components of the direction arranged in the order x, y, z."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetUpVector"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @UpVector.setter
    def UpVector(self, upVector:list) -> None:
        with agmarshall.SAFEARRAY_arg(upVector) as arg_upVector:
            agcls.evaluate_hresult(self.__dict__["_SetUpVector"](arg_upVector.COM_val))

    @property
    def Distance(self) -> float:
        """Gets or sets the distance the camera position is from the reference point."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDistance"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Distance.setter
    def Distance(self, distance:float) -> None:
        with agmarshall.DOUBLE_arg(distance) as arg_distance:
            agcls.evaluate_hresult(self.__dict__["_SetDistance"](arg_distance.COM_val))

    @property
    def Axes(self) -> "IAgCrdnAxes":
        """Gets or sets camera's axes of rotation."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAxes"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @Axes.setter
    def Axes(self, axes:"IAgCrdnAxes") -> None:
        with agmarshall.AgInterface_in_arg(axes, IAgCrdnAxes) as arg_axes:
            agcls.evaluate_hresult(self.__dict__["_SetAxes"](arg_axes.COM_val))

    @property
    def ConstrainedUpAxis(self) -> "AgEStkGraphicsConstrainedUpAxis":
        """Gets or sets the axis to constrain the up vector to."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsConstrainedUpAxis) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetConstrainedUpAxis"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @ConstrainedUpAxis.setter
    def ConstrainedUpAxis(self, constrainedUpAxis:"AgEStkGraphicsConstrainedUpAxis") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsConstrainedUpAxis, constrainedUpAxis) as arg_constrainedUpAxis:
            agcls.evaluate_hresult(self.__dict__["_SetConstrainedUpAxis"](arg_constrainedUpAxis.COM_val))

    @property
    def AllowRotationOverConstrainedUpAxis(self) -> bool:
        """Gets or sets whether the camera can rotate over the constrained up axis. For example, if true the camera would be able to flip over the North Pole and view the globe upside down."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAllowRotationOverConstrainedUpAxis"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @AllowRotationOverConstrainedUpAxis.setter
    def AllowRotationOverConstrainedUpAxis(self, allowRotationOverConstrainedUpAxis:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(allowRotationOverConstrainedUpAxis) as arg_allowRotationOverConstrainedUpAxis:
            agcls.evaluate_hresult(self.__dict__["_SetAllowRotationOverConstrainedUpAxis"](arg_allowRotationOverConstrainedUpAxis.COM_val))

    @property
    def LockViewDirection(self) -> bool:
        """Gets or sets whether the camera's direction is locked."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetLockViewDirection"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @LockViewDirection.setter
    def LockViewDirection(self, lockViewDirection:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(lockViewDirection) as arg_lockViewDirection:
            agcls.evaluate_hresult(self.__dict__["_SetLockViewDirection"](arg_lockViewDirection.COM_val))

    @property
    def FieldOfView(self) -> float:
        """Gets or sets field of view. The field of view is applied to the larger of the window dimensions. For example, if the window width was 640 and the height was 480, the field of view applies to the horizontal..."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetFieldOfView"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @FieldOfView.setter
    def FieldOfView(self, fieldOfView:float) -> None:
        with agmarshall.DOUBLE_arg(fieldOfView) as arg_fieldOfView:
            agcls.evaluate_hresult(self.__dict__["_SetFieldOfView"](arg_fieldOfView.COM_val))

    @property
    def HorizontalFieldOfView(self) -> float:
        """Gets the horizontal field of view."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetHorizontalFieldOfView"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def VerticalFieldOfView(self) -> float:
        """Gets the vertical field of view."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetVerticalFieldOfView"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def NearPlane(self) -> float:
        """Gets or sets the distance from the camera to the near plane."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetNearPlane"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @NearPlane.setter
    def NearPlane(self, nearPlane:float) -> None:
        with agmarshall.DOUBLE_arg(nearPlane) as arg_nearPlane:
            agcls.evaluate_hresult(self.__dict__["_SetNearPlane"](arg_nearPlane.COM_val))

    @property
    def FarPlane(self) -> float:
        """Gets or sets the distance from the camera to the far plane."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetFarPlane"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @FarPlane.setter
    def FarPlane(self, farPlane:float) -> None:
        with agmarshall.DOUBLE_arg(farPlane) as arg_farPlane:
            agcls.evaluate_hresult(self.__dict__["_SetFarPlane"](arg_farPlane.COM_val))

    @property
    def FarNearPlaneRatio(self) -> float:
        """Gets or sets the value that is used to compute subdivisions of the viewing frustum. A large value will be faster but lose z-value precision. A small value will have better precision but perform slower..."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetFarNearPlaneRatio"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @FarNearPlaneRatio.setter
    def FarNearPlaneRatio(self, farNearPlaneRatio:float) -> None:
        with agmarshall.DOUBLE_arg(farNearPlaneRatio) as arg_farNearPlaneRatio:
            agcls.evaluate_hresult(self.__dict__["_SetFarNearPlaneRatio"](arg_farNearPlaneRatio.COM_val))

    @property
    def DistancePerRadius(self) -> float:
        """Returns the distance that the Camera's Position should be from the ReferencePoint in order to ensure that a sphere with a 1 meter radius centered at the ReferencePoint fits entirely in the view frustum."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDistancePerRadius"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Snapshot(self) -> "IAgStkGraphicsCameraSnapshot":
        """Gets the camera snapshot settings."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSnapshot"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def VideoRecording(self) -> "IAgStkGraphicsCameraVideoRecording":
        """Gets the camera video recorder."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetVideoRecording"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def PixelSizePerDistance(self) -> float:
        """Gets the approximate number of meters covered by a pixel that is 1 meter away from the camera. This is commonly multiplied by the distance from the camera to an object to compute the approximate number of meters covered by a pixel of the object."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPixelSizePerDistance"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def PositionReferenceFrame(self) -> "IAgCrdnSystem":
        """Gets the reference frame that the position is returned in. This reference frame is composed of the camera's from point and the axes."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPositionReferenceFrame"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def ReferencePointReferenceFrame(self) -> "IAgCrdnSystem":
        """Gets the reference frame that the reference point is returned in. This reference frame is composed of the camera's to point and the axes."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetReferencePointReferenceFrame"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def VisibilityTest(self, referenceFrame:"IAgCrdnSystem", sphere:"IAgStkGraphicsBoundingSphere") -> "AgEStkGraphicsVisibility":
        """Gets the visibility of a sphere against the view frustum and any occluding central bodies."""
        with agmarshall.AgInterface_in_arg(referenceFrame, IAgCrdnSystem) as arg_referenceFrame, \
             agmarshall.AgInterface_in_arg(sphere, IAgStkGraphicsBoundingSphere) as arg_sphere, \
             agmarshall.AgEnum_arg(AgEStkGraphicsVisibility) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_VisibilityTest"](arg_referenceFrame.COM_val, arg_sphere.COM_val, byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def CartographicToWindow(self, centralBody:str, position:list) -> list:
        """Converts a cartographic position to a pixel coordinate relative to the globe control. This method can throw an exception. Returns an array containing the pixel coordinate (in the order x, y) of the cartographic position relative to the globe control..."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(position) as arg_position, \
             agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_CartographicToWindow"](arg_centralBody.COM_val, byref(arg_position.COM_val), byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def TryCartographicToWindow(self, centralBody:str, position:list) -> list:
        """Converts a cartographic position to a pixel coordinate relative to the globe control. This method does not throw an exception."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(position) as arg_position, \
             agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_TryCartographicToWindow"](arg_centralBody.COM_val, byref(arg_position.COM_val), byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def WindowToCartographic(self, centralBody:str, position:list) -> list:
        """Converts a pixel coordinate relative to the globe control to a cartographic position. For speed, terrain is not considered; if the pixel coordinate does not intersect the ellipsoid, an exception is thrown. Returns the cartographic position..."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(position) as arg_position, \
             agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_WindowToCartographic"](arg_centralBody.COM_val, byref(arg_position.COM_val), byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def TryWindowToCartographic(self, centralBody:str, position:list) -> list:
        """Converts a pixel coordinate relative to the globe control to a cartographic position. For speed, terrain is not considered. This method does not throw an exception."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(position) as arg_position, \
             agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_TryWindowToCartographic"](arg_centralBody.COM_val, byref(arg_position.COM_val), byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def ViewCentralBody(self, centralBody:str, axes:"IAgCrdnAxes") -> None:
        """Zoom to a central body and use the specified axes for rotation. The reference point is set to the center of the central body and the camera's position is set so the entire central body is visible."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.AgInterface_in_arg(axes, IAgCrdnAxes) as arg_axes:
            agcls.evaluate_hresult(self.__dict__["_ViewCentralBody"](arg_centralBody.COM_val, arg_axes.COM_val))

    def ViewExtent(self, centralBody:str, extent:list) -> None:
        """Zooms to a cartographic extent on the centralBody. The camera will be looking straight down at the extent, with the up vector pointing toward local north. The axes is set to an east-north-up axes at the center of extent."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(extent) as arg_extent:
            agcls.evaluate_hresult(self.__dict__["_ViewExtent"](arg_centralBody.COM_val, byref(arg_extent.COM_val)))

    def ViewRectangularExtent(self, centralBody:str, west:float, south:float, east:float, north:float) -> None:
        """Zooms to a rectangular extent composed of west, south, east, north on the centralBody. The camera will be looking straight down at the extent, with the up vector pointing toward local north..."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.DOUBLE_arg(west) as arg_west, \
             agmarshall.DOUBLE_arg(south) as arg_south, \
             agmarshall.DOUBLE_arg(east) as arg_east, \
             agmarshall.DOUBLE_arg(north) as arg_north:
            agcls.evaluate_hresult(self.__dict__["_ViewRectangularExtent"](arg_centralBody.COM_val, arg_west.COM_val, arg_south.COM_val, arg_east.COM_val, arg_north.COM_val))

    def ViewWithUpAxis(self, axes:"IAgCrdnAxes", cameraPosition:"IAgCrdnPoint", referencePoint:"IAgCrdnPoint", upAxis:list) -> None:
        """Views from a point to a point. Sets the camera's position and the reference point the camera is looking at."""
        with agmarshall.AgInterface_in_arg(axes, IAgCrdnAxes) as arg_axes, \
             agmarshall.AgInterface_in_arg(cameraPosition, IAgCrdnPoint) as arg_cameraPosition, \
             agmarshall.AgInterface_in_arg(referencePoint, IAgCrdnPoint) as arg_referencePoint, \
             agmarshall.SAFEARRAY_arg(upAxis) as arg_upAxis:
            agcls.evaluate_hresult(self.__dict__["_ViewWithUpAxis"](arg_axes.COM_val, arg_cameraPosition.COM_val, arg_referencePoint.COM_val, byref(arg_upAxis.COM_val)))

    def View(self, axes:"IAgCrdnAxes", cameraPosition:"IAgCrdnPoint", referencePoint:"IAgCrdnPoint") -> None:
        """Views from a point to a point. Sets the camera's position and the reference point the camera is looking at."""
        with agmarshall.AgInterface_in_arg(axes, IAgCrdnAxes) as arg_axes, \
             agmarshall.AgInterface_in_arg(cameraPosition, IAgCrdnPoint) as arg_cameraPosition, \
             agmarshall.AgInterface_in_arg(referencePoint, IAgCrdnPoint) as arg_referencePoint:
            agcls.evaluate_hresult(self.__dict__["_View"](arg_axes.COM_val, arg_cameraPosition.COM_val, arg_referencePoint.COM_val))

    def ViewDirectionWithUpAxis(self, axes:"IAgCrdnAxes", cameraPosition:"IAgCrdnPoint", direction:"IAgCrdnVector", upAxis:list) -> None:
        """Views from a point to a direction. Sets the camera's position and the direction vector indicating where the camera is looking."""
        with agmarshall.AgInterface_in_arg(axes, IAgCrdnAxes) as arg_axes, \
             agmarshall.AgInterface_in_arg(cameraPosition, IAgCrdnPoint) as arg_cameraPosition, \
             agmarshall.AgInterface_in_arg(direction, IAgCrdnVector) as arg_direction, \
             agmarshall.SAFEARRAY_arg(upAxis) as arg_upAxis:
            agcls.evaluate_hresult(self.__dict__["_ViewDirectionWithUpAxis"](arg_axes.COM_val, arg_cameraPosition.COM_val, arg_direction.COM_val, byref(arg_upAxis.COM_val)))

    def ViewDirection(self, axes:"IAgCrdnAxes", cameraPosition:"IAgCrdnPoint", direction:"IAgCrdnVector") -> None:
        """Views from a point to a direction. Sets the camera's position and the direction vector indicating where the camera is looking."""
        with agmarshall.AgInterface_in_arg(axes, IAgCrdnAxes) as arg_axes, \
             agmarshall.AgInterface_in_arg(cameraPosition, IAgCrdnPoint) as arg_cameraPosition, \
             agmarshall.AgInterface_in_arg(direction, IAgCrdnVector) as arg_direction:
            agcls.evaluate_hresult(self.__dict__["_ViewDirection"](arg_axes.COM_val, arg_cameraPosition.COM_val, arg_direction.COM_val))

    def ViewOffsetWithUpAxis(self, axes:"IAgCrdnAxes", referencePoint:"IAgCrdnPoint", offset:list, upAxis:list) -> None:
        """Sets the camera's reference point - the point the camera is looking at. The camera's position is the reference point translated by the offset."""
        with agmarshall.AgInterface_in_arg(axes, IAgCrdnAxes) as arg_axes, \
             agmarshall.AgInterface_in_arg(referencePoint, IAgCrdnPoint) as arg_referencePoint, \
             agmarshall.SAFEARRAY_arg(offset) as arg_offset, \
             agmarshall.SAFEARRAY_arg(upAxis) as arg_upAxis:
            agcls.evaluate_hresult(self.__dict__["_ViewOffsetWithUpAxis"](arg_axes.COM_val, arg_referencePoint.COM_val, byref(arg_offset.COM_val), byref(arg_upAxis.COM_val)))

    def ViewOffset(self, axes:"IAgCrdnAxes", referencePoint:"IAgCrdnPoint", offset:list) -> None:
        """Sets the camera's reference point - the point the camera is looking at. The camera's position is the reference point translated by the offset."""
        with agmarshall.AgInterface_in_arg(axes, IAgCrdnAxes) as arg_axes, \
             agmarshall.AgInterface_in_arg(referencePoint, IAgCrdnPoint) as arg_referencePoint, \
             agmarshall.SAFEARRAY_arg(offset) as arg_offset:
            agcls.evaluate_hresult(self.__dict__["_ViewOffset"](arg_axes.COM_val, arg_referencePoint.COM_val, byref(arg_offset.COM_val)))

    def ViewOffsetDirectionWithUpAxis(self, axes:"IAgCrdnAxes", referencePoint:"IAgCrdnPoint", direction:"IAgCrdnVector", upAxis:list) -> None:
        """Sets the camera's reference point - the point the camera is looking at. The camera's position is the reference point translated by the direction vector."""
        with agmarshall.AgInterface_in_arg(axes, IAgCrdnAxes) as arg_axes, \
             agmarshall.AgInterface_in_arg(referencePoint, IAgCrdnPoint) as arg_referencePoint, \
             agmarshall.AgInterface_in_arg(direction, IAgCrdnVector) as arg_direction, \
             agmarshall.SAFEARRAY_arg(upAxis) as arg_upAxis:
            agcls.evaluate_hresult(self.__dict__["_ViewOffsetDirectionWithUpAxis"](arg_axes.COM_val, arg_referencePoint.COM_val, arg_direction.COM_val, byref(arg_upAxis.COM_val)))

    def ViewOffsetDirection(self, axes:"IAgCrdnAxes", referencePoint:"IAgCrdnPoint", direction:"IAgCrdnVector") -> None:
        """Sets the camera's reference point - the point the camera is looking at. The camera's position is the reference point translated by the direction vector."""
        with agmarshall.AgInterface_in_arg(axes, IAgCrdnAxes) as arg_axes, \
             agmarshall.AgInterface_in_arg(referencePoint, IAgCrdnPoint) as arg_referencePoint, \
             agmarshall.AgInterface_in_arg(direction, IAgCrdnVector) as arg_direction:
            agcls.evaluate_hresult(self.__dict__["_ViewOffsetDirection"](arg_axes.COM_val, arg_referencePoint.COM_val, arg_direction.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{c9a35fc4-8868-4b28-8622-13cfa470c315}", IAgStkGraphicsCamera)
agcls.AgTypeNameMap["IAgStkGraphicsCamera"] = IAgStkGraphicsCamera
__all__.append("IAgStkGraphicsCamera")

class IAgStkGraphicsCentralBodyGraphics(object):
    """The graphical properties associated with a particular central body. Changing the central body graphics will affect how the associated central body is rendered in a scene. For instance, to show or hide the central body, use the show property..."""
    _uuid = "{27f5d32b-5adf-4fc7-a8b8-83ada5ebc0ca}"
    _num_methods = 23
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetColor"] = _raise_uninitialized_error
        self.__dict__["_SetColor"] = _raise_uninitialized_error
        self.__dict__["_GetSpecularColor"] = _raise_uninitialized_error
        self.__dict__["_SetSpecularColor"] = _raise_uninitialized_error
        self.__dict__["_GetShininess"] = _raise_uninitialized_error
        self.__dict__["_SetShininess"] = _raise_uninitialized_error
        self.__dict__["_GetShowImagery"] = _raise_uninitialized_error
        self.__dict__["_SetShowImagery"] = _raise_uninitialized_error
        self.__dict__["_GetShow"] = _raise_uninitialized_error
        self.__dict__["_SetShow"] = _raise_uninitialized_error
        self.__dict__["_GetShowLabel"] = _raise_uninitialized_error
        self.__dict__["_SetShowLabel"] = _raise_uninitialized_error
        self.__dict__["_GetAltitudeOffset"] = _raise_uninitialized_error
        self.__dict__["_SetAltitudeOffset"] = _raise_uninitialized_error
        self.__dict__["_GetBaseOverlay"] = _raise_uninitialized_error
        self.__dict__["_SetBaseOverlay"] = _raise_uninitialized_error
        self.__dict__["_GetNightOverlay"] = _raise_uninitialized_error
        self.__dict__["_SetNightOverlay"] = _raise_uninitialized_error
        self.__dict__["_GetSpecularOverlay"] = _raise_uninitialized_error
        self.__dict__["_SetSpecularOverlay"] = _raise_uninitialized_error
        self.__dict__["_GetTerrain"] = _raise_uninitialized_error
        self.__dict__["_GetImagery"] = _raise_uninitialized_error
        self.__dict__["_GetKml"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsCentralBodyGraphics._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsCentralBodyGraphics from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsCentralBodyGraphics = agcom.GUID(IAgStkGraphicsCentralBodyGraphics._uuid)
        vtable_offset_local = IAgStkGraphicsCentralBodyGraphics._vtable_offset - 1
        self.__dict__["_GetColor"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCentralBodyGraphics, vtable_offset_local+1, POINTER(agcom.OLE_COLOR))
        self.__dict__["_SetColor"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCentralBodyGraphics, vtable_offset_local+2, agcom.OLE_COLOR)
        self.__dict__["_GetSpecularColor"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCentralBodyGraphics, vtable_offset_local+3, POINTER(agcom.OLE_COLOR))
        self.__dict__["_SetSpecularColor"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCentralBodyGraphics, vtable_offset_local+4, agcom.OLE_COLOR)
        self.__dict__["_GetShininess"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCentralBodyGraphics, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetShininess"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCentralBodyGraphics, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetShowImagery"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCentralBodyGraphics, vtable_offset_local+7, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetShowImagery"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCentralBodyGraphics, vtable_offset_local+8, agcom.VARIANT_BOOL)
        self.__dict__["_GetShow"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCentralBodyGraphics, vtable_offset_local+9, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetShow"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCentralBodyGraphics, vtable_offset_local+10, agcom.VARIANT_BOOL)
        self.__dict__["_GetShowLabel"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCentralBodyGraphics, vtable_offset_local+11, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetShowLabel"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCentralBodyGraphics, vtable_offset_local+12, agcom.VARIANT_BOOL)
        self.__dict__["_GetAltitudeOffset"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCentralBodyGraphics, vtable_offset_local+13, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAltitudeOffset"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCentralBodyGraphics, vtable_offset_local+14, agcom.DOUBLE)
        self.__dict__["_GetBaseOverlay"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCentralBodyGraphics, vtable_offset_local+15, POINTER(agcom.PVOID))
        self.__dict__["_SetBaseOverlay"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCentralBodyGraphics, vtable_offset_local+16, agcom.PVOID)
        self.__dict__["_GetNightOverlay"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCentralBodyGraphics, vtable_offset_local+17, POINTER(agcom.PVOID))
        self.__dict__["_SetNightOverlay"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCentralBodyGraphics, vtable_offset_local+18, agcom.PVOID)
        self.__dict__["_GetSpecularOverlay"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCentralBodyGraphics, vtable_offset_local+19, POINTER(agcom.PVOID))
        self.__dict__["_SetSpecularOverlay"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCentralBodyGraphics, vtable_offset_local+20, agcom.PVOID)
        self.__dict__["_GetTerrain"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCentralBodyGraphics, vtable_offset_local+21, POINTER(agcom.PVOID))
        self.__dict__["_GetImagery"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCentralBodyGraphics, vtable_offset_local+22, POINTER(agcom.PVOID))
        self.__dict__["_GetKml"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCentralBodyGraphics, vtable_offset_local+23, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsCentralBodyGraphics.__dict__ and type(IAgStkGraphicsCentralBodyGraphics.__dict__[attrname]) == property:
            return IAgStkGraphicsCentralBodyGraphics.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsCentralBodyGraphics.")
    
    @property
    def Color(self) -> agcolor.Color:
        """Gets or sets the color of the central body in the scene."""
        with agmarshall.OLE_COLOR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetColor"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Color.setter
    def Color(self, color:agcolor.Color) -> None:
        with agmarshall.OLE_COLOR_arg(color) as arg_color:
            agcls.evaluate_hresult(self.__dict__["_SetColor"](arg_color.COM_val))

    @property
    def SpecularColor(self) -> agcolor.Color:
        """Gets or sets the specular color of the central body in the scene. The specular color is associated with the specular overlay."""
        with agmarshall.OLE_COLOR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSpecularColor"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @SpecularColor.setter
    def SpecularColor(self, specularColor:agcolor.Color) -> None:
        with agmarshall.OLE_COLOR_arg(specularColor) as arg_specularColor:
            agcls.evaluate_hresult(self.__dict__["_SetSpecularColor"](arg_specularColor.COM_val))

    @property
    def Shininess(self) -> float:
        """Gets or sets the shininess of the central body in the scene. The shininess affects the size and brightness of specular reflection associated with the specular overlay."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetShininess"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Shininess.setter
    def Shininess(self, shininess:float) -> None:
        with agmarshall.DOUBLE_arg(shininess) as arg_shininess:
            agcls.evaluate_hresult(self.__dict__["_SetShininess"](arg_shininess.COM_val))

    @property
    def ShowImagery(self) -> bool:
        """Gets or sets whether the imagery for central body in the scene is shown or hidden."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetShowImagery"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @ShowImagery.setter
    def ShowImagery(self, showImagery:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(showImagery) as arg_showImagery:
            agcls.evaluate_hresult(self.__dict__["_SetShowImagery"](arg_showImagery.COM_val))

    @property
    def Show(self) -> bool:
        """Gets or sets whether the central body is shown or hidden in the scene. This only affects the central body itself, not the primitives that are associated with it."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetShow"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Show.setter
    def Show(self, show:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(show) as arg_show:
            agcls.evaluate_hresult(self.__dict__["_SetShow"](arg_show.COM_val))

    @property
    def ShowLabel(self) -> bool:
        """Gets or sets whether a label with the name of the central body should be rendered in the scene when the camera is at certain distance away from the central body."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetShowLabel"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @ShowLabel.setter
    def ShowLabel(self, showLabel:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(showLabel) as arg_showLabel:
            agcls.evaluate_hresult(self.__dict__["_SetShowLabel"](arg_showLabel.COM_val))

    @property
    def AltitudeOffset(self) -> float:
        """Gets or sets the altitude that all terrain and imagery will be offset from the surface of the central body in the scene."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitudeOffset"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @AltitudeOffset.setter
    def AltitudeOffset(self, altitudeOffset:float) -> None:
        with agmarshall.DOUBLE_arg(altitudeOffset) as arg_altitudeOffset:
            agcls.evaluate_hresult(self.__dict__["_SetAltitudeOffset"](arg_altitudeOffset.COM_val))

    @property
    def BaseOverlay(self) -> "IAgStkGraphicsGlobeImageOverlay":
        """Gets or sets the base globe image overlay associated with the central body in the scene. The base overlay is always rendered before any other imagery..."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBaseOverlay"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @BaseOverlay.setter
    def BaseOverlay(self, baseOverlay:"IAgStkGraphicsGlobeImageOverlay") -> None:
        with agmarshall.AgInterface_in_arg(baseOverlay, IAgStkGraphicsGlobeImageOverlay) as arg_baseOverlay:
            agcls.evaluate_hresult(self.__dict__["_SetBaseOverlay"](arg_baseOverlay.COM_val))

    @property
    def NightOverlay(self) -> "IAgStkGraphicsGlobeImageOverlay":
        """Gets or sets the night globe image overlay associated with the central body in the scene. The night overlay is displayed only on parts of the central body that are not in sun light..."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetNightOverlay"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @NightOverlay.setter
    def NightOverlay(self, nightOverlay:"IAgStkGraphicsGlobeImageOverlay") -> None:
        with agmarshall.AgInterface_in_arg(nightOverlay, IAgStkGraphicsGlobeImageOverlay) as arg_nightOverlay:
            agcls.evaluate_hresult(self.__dict__["_SetNightOverlay"](arg_nightOverlay.COM_val))

    @property
    def SpecularOverlay(self) -> "IAgStkGraphicsGlobeImageOverlay":
        """Gets or sets the specular globe image overlay associated with the central body in the scene. The specular overlay is displayed only in the specular highlight of the central body."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSpecularOverlay"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @SpecularOverlay.setter
    def SpecularOverlay(self, specularOverlay:"IAgStkGraphicsGlobeImageOverlay") -> None:
        with agmarshall.AgInterface_in_arg(specularOverlay, IAgStkGraphicsGlobeImageOverlay) as arg_specularOverlay:
            agcls.evaluate_hresult(self.__dict__["_SetSpecularOverlay"](arg_specularOverlay.COM_val))

    @property
    def Terrain(self) -> "IAgStkGraphicsTerrainCollection":
        """Gets the collection of terrain overlay associated with the central body in the scene."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTerrain"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Imagery(self) -> "IAgStkGraphicsImageCollection":
        """Gets the collection of imagery associated with the central body in the scene."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetImagery"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Kml(self) -> "IAgStkGraphicsKmlGraphics":
        """Gets the kml graphics associated with the central body in the scene."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetKml"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{27f5d32b-5adf-4fc7-a8b8-83ada5ebc0ca}", IAgStkGraphicsCentralBodyGraphics)
agcls.AgTypeNameMap["IAgStkGraphicsCentralBodyGraphics"] = IAgStkGraphicsCentralBodyGraphics
__all__.append("IAgStkGraphicsCentralBodyGraphics")

class IAgStkGraphicsClouds(object):
    """Load, show and hide clouds in the scene."""
    _uuid = "{0f5265b8-2d96-440a-9b86-522d90bf2bc3}"
    _num_methods = 9
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetShow"] = _raise_uninitialized_error
        self.__dict__["_SetShow"] = _raise_uninitialized_error
        self.__dict__["_GetCloudsUri"] = _raise_uninitialized_error
        self.__dict__["_SetCloudsUri"] = _raise_uninitialized_error
        self.__dict__["_GetRoundness"] = _raise_uninitialized_error
        self.__dict__["_SetRoundness"] = _raise_uninitialized_error
        self.__dict__["_GetAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetIsValid"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsClouds._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsClouds from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsClouds = agcom.GUID(IAgStkGraphicsClouds._uuid)
        vtable_offset_local = IAgStkGraphicsClouds._vtable_offset - 1
        self.__dict__["_GetShow"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsClouds, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetShow"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsClouds, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetCloudsUri"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsClouds, vtable_offset_local+3, POINTER(agcom.BSTR))
        self.__dict__["_SetCloudsUri"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsClouds, vtable_offset_local+4, agcom.BSTR)
        self.__dict__["_GetRoundness"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsClouds, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetRoundness"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsClouds, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetAltitude"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsClouds, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAltitude"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsClouds, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetIsValid"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsClouds, vtable_offset_local+9, POINTER(agcom.VARIANT_BOOL))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsClouds.__dict__ and type(IAgStkGraphicsClouds.__dict__[attrname]) == property:
            return IAgStkGraphicsClouds.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsClouds.")
    
    @property
    def Show(self) -> bool:
        """Gets or sets whether clouds are rendered."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetShow"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Show.setter
    def Show(self, show:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(show) as arg_show:
            agcls.evaluate_hresult(self.__dict__["_SetShow"](arg_show.COM_val))

    @property
    def CloudsUri(self) -> str:
        """The URI of the clouds index file. A cloud index file is an ascii file that contains a time-ordered list of images that display over the globe."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCloudsUri"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @CloudsUri.setter
    def CloudsUri(self, cloudsUri:str) -> None:
        with agmarshall.BSTR_arg(cloudsUri) as arg_cloudsUri:
            agcls.evaluate_hresult(self.__dict__["_SetCloudsUri"](arg_cloudsUri.COM_val))

    @property
    def Roundness(self) -> float:
        """The roundness of the clouds."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetRoundness"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Roundness.setter
    def Roundness(self, roundness:float) -> None:
        with agmarshall.DOUBLE_arg(roundness) as arg_roundness:
            agcls.evaluate_hresult(self.__dict__["_SetRoundness"](arg_roundness.COM_val))

    @property
    def Altitude(self) -> float:
        """The altitude of the clouds."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitude"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Altitude.setter
    def Altitude(self, altitude:float) -> None:
        with agmarshall.DOUBLE_arg(altitude) as arg_altitude:
            agcls.evaluate_hresult(self.__dict__["_SetAltitude"](arg_altitude.COM_val))

    @property
    def IsValid(self) -> bool:
        """Returns whether or not the clouds file is valid."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetIsValid"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{0f5265b8-2d96-440a-9b86-522d90bf2bc3}", IAgStkGraphicsClouds)
agcls.AgTypeNameMap["IAgStkGraphicsClouds"] = IAgStkGraphicsClouds
__all__.append("IAgStkGraphicsClouds")

class IAgStkGraphicsCompositeDisplayCondition(object):
    """A composite of display conditions combined using a binary logic operation. For example, several time interval display condition objects can be added to a composite..."""
    _uuid = "{afe0e66f-0fc5-46ad-801f-22670cfe99a9}"
    _num_methods = 18
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        self.__dict__["_GetCapacity"] = _raise_uninitialized_error
        self.__dict__["_GetLogicOperation"] = _raise_uninitialized_error
        self.__dict__["_SetLogicOperation"] = _raise_uninitialized_error
        self.__dict__["_Item"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        self.__dict__["_Reserve"] = _raise_uninitialized_error
        self.__dict__["_AddWithNegate"] = _raise_uninitialized_error
        self.__dict__["_Add"] = _raise_uninitialized_error
        self.__dict__["_InsertWithNegate"] = _raise_uninitialized_error
        self.__dict__["_Insert"] = _raise_uninitialized_error
        self.__dict__["_Remove"] = _raise_uninitialized_error
        self.__dict__["_RemoveAt"] = _raise_uninitialized_error
        self.__dict__["_Clear"] = _raise_uninitialized_error
        self.__dict__["_GetNegate"] = _raise_uninitialized_error
        self.__dict__["_SetNegate"] = _raise_uninitialized_error
        self.__dict__["_GetNegateAt"] = _raise_uninitialized_error
        self.__dict__["_SetNegateAt"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsCompositeDisplayCondition._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsCompositeDisplayCondition from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsCompositeDisplayCondition = agcom.GUID(IAgStkGraphicsCompositeDisplayCondition._uuid)
        vtable_offset_local = IAgStkGraphicsCompositeDisplayCondition._vtable_offset - 1
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCompositeDisplayCondition, vtable_offset_local+1, POINTER(agcom.INT))
        self.__dict__["_GetCapacity"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCompositeDisplayCondition, vtable_offset_local+2, POINTER(agcom.INT))
        self.__dict__["_GetLogicOperation"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCompositeDisplayCondition, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetLogicOperation"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCompositeDisplayCondition, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_Item"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCompositeDisplayCondition, vtable_offset_local+5, agcom.INT, POINTER(agcom.PVOID))
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCompositeDisplayCondition, vtable_offset_local+6, POINTER(agcom.PVOID))
        self.__dict__["_Reserve"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCompositeDisplayCondition, vtable_offset_local+7, agcom.INT)
        self.__dict__["_AddWithNegate"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCompositeDisplayCondition, vtable_offset_local+8, agcom.PVOID, agcom.VARIANT_BOOL)
        self.__dict__["_Add"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCompositeDisplayCondition, vtable_offset_local+9, agcom.PVOID)
        self.__dict__["_InsertWithNegate"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCompositeDisplayCondition, vtable_offset_local+10, agcom.INT, agcom.PVOID, agcom.VARIANT_BOOL)
        self.__dict__["_Insert"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCompositeDisplayCondition, vtable_offset_local+11, agcom.INT, agcom.PVOID)
        self.__dict__["_Remove"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCompositeDisplayCondition, vtable_offset_local+12, agcom.PVOID)
        self.__dict__["_RemoveAt"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCompositeDisplayCondition, vtable_offset_local+13, agcom.INT)
        self.__dict__["_Clear"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCompositeDisplayCondition, vtable_offset_local+14, )
        self.__dict__["_GetNegate"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCompositeDisplayCondition, vtable_offset_local+15, agcom.PVOID, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetNegate"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCompositeDisplayCondition, vtable_offset_local+16, agcom.PVOID, agcom.VARIANT_BOOL)
        self.__dict__["_GetNegateAt"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCompositeDisplayCondition, vtable_offset_local+17, agcom.INT, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetNegateAt"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCompositeDisplayCondition, vtable_offset_local+18, agcom.INT, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsCompositeDisplayCondition.__dict__ and type(IAgStkGraphicsCompositeDisplayCondition.__dict__[attrname]) == property:
            return IAgStkGraphicsCompositeDisplayCondition.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsCompositeDisplayCondition.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> "IAgStkGraphicsDisplayCondition":
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    
    @property
    def Count(self) -> int:
        """Gets the number of display conditions in the composite."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Capacity(self) -> int:
        """Gets the number of display conditions for which memory has been allocated. This will always be greater or equal to count."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCapacity"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def LogicOperation(self) -> "AgEStkGraphicsBinaryLogicOperation":
        """Gets or sets the binary logic operation applied to all display conditions in the composite when the composite is evaluated. To combine logical and and or operations in the same expression, create composites containing composites."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsBinaryLogicOperation) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetLogicOperation"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @LogicOperation.setter
    def LogicOperation(self, logicOperation:"AgEStkGraphicsBinaryLogicOperation") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsBinaryLogicOperation, logicOperation) as arg_logicOperation:
            agcls.evaluate_hresult(self.__dict__["_SetLogicOperation"](arg_logicOperation.COM_val))

    def Item(self, index:int) -> "IAgStkGraphicsDisplayCondition":
        """Returns the condition at the given zero-based index."""
        with agmarshall.INT_arg(index) as arg_index, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Item"](arg_index.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        """Returns an enumerator that iterates through the collection."""
        with agmarshall.IEnumVARIANT_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def Reserve(self, count:int) -> None:
        """Requests enough memory for the composite to contain at least count display conditions. count will not be affected but capacity may be."""
        with agmarshall.INT_arg(count) as arg_count:
            agcls.evaluate_hresult(self.__dict__["_Reserve"](arg_count.COM_val))

    def AddWithNegate(self, displayCondition:"IAgStkGraphicsDisplayCondition", negate:bool) -> None:
        """Adds a display condition to the end of the composite."""
        with agmarshall.AgInterface_in_arg(displayCondition, IAgStkGraphicsDisplayCondition) as arg_displayCondition, \
             agmarshall.VARIANT_BOOL_arg(negate) as arg_negate:
            agcls.evaluate_hresult(self.__dict__["_AddWithNegate"](arg_displayCondition.COM_val, arg_negate.COM_val))

    def Add(self, displayCondition:"IAgStkGraphicsDisplayCondition") -> None:
        """Adds a display condition to the end of the composite."""
        with agmarshall.AgInterface_in_arg(displayCondition, IAgStkGraphicsDisplayCondition) as arg_displayCondition:
            agcls.evaluate_hresult(self.__dict__["_Add"](arg_displayCondition.COM_val))

    def InsertWithNegate(self, index:int, displayCondition:"IAgStkGraphicsDisplayCondition", negate:bool) -> None:
        """Inserts a display condition at the given zero-based index, shifting existing display conditions."""
        with agmarshall.INT_arg(index) as arg_index, \
             agmarshall.AgInterface_in_arg(displayCondition, IAgStkGraphicsDisplayCondition) as arg_displayCondition, \
             agmarshall.VARIANT_BOOL_arg(negate) as arg_negate:
            agcls.evaluate_hresult(self.__dict__["_InsertWithNegate"](arg_index.COM_val, arg_displayCondition.COM_val, arg_negate.COM_val))

    def Insert(self, index:int, displayCondition:"IAgStkGraphicsDisplayCondition") -> None:
        """Inserts a display condition at the given zero-based index, shifting existing display conditions."""
        with agmarshall.INT_arg(index) as arg_index, \
             agmarshall.AgInterface_in_arg(displayCondition, IAgStkGraphicsDisplayCondition) as arg_displayCondition:
            agcls.evaluate_hresult(self.__dict__["_Insert"](arg_index.COM_val, arg_displayCondition.COM_val))

    def Remove(self, displayCondition:"IAgStkGraphicsDisplayCondition") -> None:
        """Removes a display condition from the composite."""
        with agmarshall.AgInterface_in_arg(displayCondition, IAgStkGraphicsDisplayCondition) as arg_displayCondition:
            agcls.evaluate_hresult(self.__dict__["_Remove"](arg_displayCondition.COM_val))

    def RemoveAt(self, index:int) -> None:
        """Removes the display condition at the given zero-based index, shifting existing display conditions."""
        with agmarshall.INT_arg(index) as arg_index:
            agcls.evaluate_hresult(self.__dict__["_RemoveAt"](arg_index.COM_val))

    def Clear(self) -> None:
        """Removes all display conditions from the composite."""
        agcls.evaluate_hresult(self.__dict__["_Clear"]())

    def GetNegate(self, displayCondition:"IAgStkGraphicsDisplayCondition") -> bool:
        """Determines if a logical not operation is applied to a display condition in the composite."""
        with agmarshall.AgInterface_in_arg(displayCondition, IAgStkGraphicsDisplayCondition) as arg_displayCondition, \
             agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetNegate"](arg_displayCondition.COM_val, byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def SetNegate(self, displayCondition:"IAgStkGraphicsDisplayCondition", negate:bool) -> None:
        """Sets if a logical not operation is applied to a display condition in the composite when the composite is evaluated."""
        with agmarshall.AgInterface_in_arg(displayCondition, IAgStkGraphicsDisplayCondition) as arg_displayCondition, \
             agmarshall.VARIANT_BOOL_arg(negate) as arg_negate:
            agcls.evaluate_hresult(self.__dict__["_SetNegate"](arg_displayCondition.COM_val, arg_negate.COM_val))

    def GetNegateAt(self, index:int) -> bool:
        """Determines if a logical not operation is applied to a display condition in the composite."""
        with agmarshall.INT_arg(index) as arg_index, \
             agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetNegateAt"](arg_index.COM_val, byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def SetNegateAt(self, index:int, negate:bool) -> None:
        """Sets if a logical not operation is applied to a display condition in the composite when the composite is evaluated."""
        with agmarshall.INT_arg(index) as arg_index, \
             agmarshall.VARIANT_BOOL_arg(negate) as arg_negate:
            agcls.evaluate_hresult(self.__dict__["_SetNegateAt"](arg_index.COM_val, arg_negate.COM_val))

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{afe0e66f-0fc5-46ad-801f-22670cfe99a9}", IAgStkGraphicsCompositeDisplayCondition)
agcls.AgTypeNameMap["IAgStkGraphicsCompositeDisplayCondition"] = IAgStkGraphicsCompositeDisplayCondition
__all__.append("IAgStkGraphicsCompositeDisplayCondition")

class IAgStkGraphicsCompositePrimitive(object):
    """ A primitive that is composed of multiple other primitives. Since composites can contain other composites, they are commonly used to build hierarchies of primitives to efficiently evaluate display conditions..."""
    _uuid = "{c24448a9-4fe7-4905-86e0-70a71346fcf2}"
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        self.__dict__["_GetTranslucentPrimitivesSortOrder"] = _raise_uninitialized_error
        self.__dict__["_SetTranslucentPrimitivesSortOrder"] = _raise_uninitialized_error
        self.__dict__["_Add"] = _raise_uninitialized_error
        self.__dict__["_Remove"] = _raise_uninitialized_error
        self.__dict__["_Contains"] = _raise_uninitialized_error
        self.__dict__["_Clear"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsCompositePrimitive._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsCompositePrimitive from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsCompositePrimitive = agcom.GUID(IAgStkGraphicsCompositePrimitive._uuid)
        vtable_offset_local = IAgStkGraphicsCompositePrimitive._vtable_offset - 1
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCompositePrimitive, vtable_offset_local+1, POINTER(agcom.INT))
        self.__dict__["_GetTranslucentPrimitivesSortOrder"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCompositePrimitive, vtable_offset_local+2, POINTER(agcom.LONG))
        self.__dict__["_SetTranslucentPrimitivesSortOrder"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCompositePrimitive, vtable_offset_local+3, agcom.LONG)
        self.__dict__["_Add"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCompositePrimitive, vtable_offset_local+4, agcom.PVOID)
        self.__dict__["_Remove"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCompositePrimitive, vtable_offset_local+5, agcom.PVOID)
        self.__dict__["_Contains"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCompositePrimitive, vtable_offset_local+6, agcom.PVOID, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_Clear"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCompositePrimitive, vtable_offset_local+7, )
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCompositePrimitive, vtable_offset_local+8, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsCompositePrimitive.__dict__ and type(IAgStkGraphicsCompositePrimitive.__dict__[attrname]) == property:
            return IAgStkGraphicsCompositePrimitive.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsCompositePrimitive.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> typing.Any:
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    
    @property
    def Count(self) -> int:
        """Gets the number of primitives in the composite."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def TranslucentPrimitivesSortOrder(self) -> "AgEStkGraphicsPrimitivesSortOrder":
        """Gets or sets the sort order for translucent primitives in this composite. This determines a trade-off between rendering speed and quality..."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsPrimitivesSortOrder) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTranslucentPrimitivesSortOrder"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @TranslucentPrimitivesSortOrder.setter
    def TranslucentPrimitivesSortOrder(self, translucentPrimitivesSortOrder:"AgEStkGraphicsPrimitivesSortOrder") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsPrimitivesSortOrder, translucentPrimitivesSortOrder) as arg_translucentPrimitivesSortOrder:
            agcls.evaluate_hresult(self.__dict__["_SetTranslucentPrimitivesSortOrder"](arg_translucentPrimitivesSortOrder.COM_val))

    def Add(self, primitive:"IAgStkGraphicsPrimitive") -> None:
        """Adds a primitive to the composite."""
        with agmarshall.AgInterface_in_arg(primitive, IAgStkGraphicsPrimitive) as arg_primitive:
            agcls.evaluate_hresult(self.__dict__["_Add"](arg_primitive.COM_val))

    def Remove(self, primitive:"IAgStkGraphicsPrimitive") -> None:
        """Removes a primitive from the composite."""
        with agmarshall.AgInterface_in_arg(primitive, IAgStkGraphicsPrimitive) as arg_primitive:
            agcls.evaluate_hresult(self.__dict__["_Remove"](arg_primitive.COM_val))

    def Contains(self, primitive:"IAgStkGraphicsPrimitive") -> bool:
        """Determines whether the composite contains a primitive."""
        with agmarshall.AgInterface_in_arg(primitive, IAgStkGraphicsPrimitive) as arg_primitive, \
             agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_Contains"](arg_primitive.COM_val, byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def Clear(self) -> None:
        """Removes all primitives from the composite."""
        agcls.evaluate_hresult(self.__dict__["_Clear"]())

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        """Returns an enumerator that iterates through the collection. The order of the primitives is not guaranteed to be the order that the primitives were added."""
        with agmarshall.IEnumVARIANT_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{c24448a9-4fe7-4905-86e0-70a71346fcf2}", IAgStkGraphicsCompositePrimitive)
agcls.AgTypeNameMap["IAgStkGraphicsCompositePrimitive"] = IAgStkGraphicsCompositePrimitive
__all__.append("IAgStkGraphicsCompositePrimitive")

class IAgStkGraphicsConstantDisplayCondition(object):
    """A display condition that evaluates to a user-defined value. This is commonly used to hide primitives by assigning to a primitive a display condition that always returns false."""
    _uuid = "{efede07b-4d59-4622-ba51-0281a5108aab}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetDisplay"] = _raise_uninitialized_error
        self.__dict__["_SetDisplay"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsConstantDisplayCondition._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsConstantDisplayCondition from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsConstantDisplayCondition = agcom.GUID(IAgStkGraphicsConstantDisplayCondition._uuid)
        vtable_offset_local = IAgStkGraphicsConstantDisplayCondition._vtable_offset - 1
        self.__dict__["_GetDisplay"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsConstantDisplayCondition, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetDisplay"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsConstantDisplayCondition, vtable_offset_local+2, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsConstantDisplayCondition.__dict__ and type(IAgStkGraphicsConstantDisplayCondition.__dict__[attrname]) == property:
            return IAgStkGraphicsConstantDisplayCondition.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsConstantDisplayCondition.")
    
    @property
    def Display(self) -> bool:
        """Gets or sets the value the display condition evaluates to."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDisplay"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Display.setter
    def Display(self, display:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(display) as arg_display:
            agcls.evaluate_hresult(self.__dict__["_SetDisplay"](arg_display.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{efede07b-4d59-4622-ba51-0281a5108aab}", IAgStkGraphicsConstantDisplayCondition)
agcls.AgTypeNameMap["IAgStkGraphicsConstantDisplayCondition"] = IAgStkGraphicsConstantDisplayCondition
__all__.append("IAgStkGraphicsConstantDisplayCondition")

class IAgStkGraphicsDisplayCondition(object):
    """When assigned to objects, such as primitives or globe overlays, display conditions are evaluated to determine if the object should be rendered."""
    _uuid = "{5214ce90-6448-4cc7-bc5c-f06485ec5bb8}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsDisplayCondition._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsDisplayCondition from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsDisplayCondition = agcom.GUID(IAgStkGraphicsDisplayCondition._uuid)
        vtable_offset_local = IAgStkGraphicsDisplayCondition._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsDisplayCondition.__dict__ and type(IAgStkGraphicsDisplayCondition.__dict__[attrname]) == property:
            return IAgStkGraphicsDisplayCondition.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsDisplayCondition.")
    

agcls.AgClassCatalog.add_catalog_entry("{5214ce90-6448-4cc7-bc5c-f06485ec5bb8}", IAgStkGraphicsDisplayCondition)
agcls.AgTypeNameMap["IAgStkGraphicsDisplayCondition"] = IAgStkGraphicsDisplayCondition
__all__.append("IAgStkGraphicsDisplayCondition")

class IAgStkGraphicsDistanceDisplayCondition(object):
    """Defines an inclusive distance interval that determines when an object, such as a primitive, is rendered based on the distance from the camera to the object."""
    _uuid = "{b1b3130c-bebb-4a64-a5b7-2357384e2b8c}"
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetMinimumDistance"] = _raise_uninitialized_error
        self.__dict__["_SetMinimumDistance"] = _raise_uninitialized_error
        self.__dict__["_GetMaximumDistance"] = _raise_uninitialized_error
        self.__dict__["_SetMaximumDistance"] = _raise_uninitialized_error
        self.__dict__["_GetMinimumDistanceSquared"] = _raise_uninitialized_error
        self.__dict__["_GetMaximumDistanceSquared"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsDistanceDisplayCondition._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsDistanceDisplayCondition from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsDistanceDisplayCondition = agcom.GUID(IAgStkGraphicsDistanceDisplayCondition._uuid)
        vtable_offset_local = IAgStkGraphicsDistanceDisplayCondition._vtable_offset - 1
        self.__dict__["_GetMinimumDistance"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsDistanceDisplayCondition, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMinimumDistance"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsDistanceDisplayCondition, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetMaximumDistance"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsDistanceDisplayCondition, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaximumDistance"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsDistanceDisplayCondition, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetMinimumDistanceSquared"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsDistanceDisplayCondition, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_GetMaximumDistanceSquared"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsDistanceDisplayCondition, vtable_offset_local+6, POINTER(agcom.DOUBLE))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsDistanceDisplayCondition.__dict__ and type(IAgStkGraphicsDistanceDisplayCondition.__dict__[attrname]) == property:
            return IAgStkGraphicsDistanceDisplayCondition.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsDistanceDisplayCondition.")
    
    @property
    def MinimumDistance(self) -> float:
        """Gets or sets the minimum distance of the inclusive distance interval."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinimumDistance"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @MinimumDistance.setter
    def MinimumDistance(self, minimumDistance:float) -> None:
        with agmarshall.DOUBLE_arg(minimumDistance) as arg_minimumDistance:
            agcls.evaluate_hresult(self.__dict__["_SetMinimumDistance"](arg_minimumDistance.COM_val))

    @property
    def MaximumDistance(self) -> float:
        """Gets or sets the maximum distance of the inclusive distance interval. Use Double.MaxValue to ignore checking the maximum distance."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaximumDistance"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @MaximumDistance.setter
    def MaximumDistance(self, maximumDistance:float) -> None:
        with agmarshall.DOUBLE_arg(maximumDistance) as arg_maximumDistance:
            agcls.evaluate_hresult(self.__dict__["_SetMaximumDistance"](arg_maximumDistance.COM_val))

    @property
    def MinimumDistanceSquared(self) -> float:
        """Gets the squared minimum distance of the inclusive distance interval."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinimumDistanceSquared"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def MaximumDistanceSquared(self) -> float:
        """Gets the squared maximum distance of the inclusive distance interval."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaximumDistanceSquared"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{b1b3130c-bebb-4a64-a5b7-2357384e2b8c}", IAgStkGraphicsDistanceDisplayCondition)
agcls.AgTypeNameMap["IAgStkGraphicsDistanceDisplayCondition"] = IAgStkGraphicsDistanceDisplayCondition
__all__.append("IAgStkGraphicsDistanceDisplayCondition")

class IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition(object):
    """Defines an inclusive distance interval that determines when an object, such as a primitive, is rendered based on the distance from the camera to the globe overlay..."""
    _uuid = "{212b00ec-ff3a-4f1b-9fc3-5a900c6536dc}"
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetGlobeOverlay"] = _raise_uninitialized_error
        self.__dict__["_SetGlobeOverlay"] = _raise_uninitialized_error
        self.__dict__["_GetMinimumDistance"] = _raise_uninitialized_error
        self.__dict__["_SetMinimumDistance"] = _raise_uninitialized_error
        self.__dict__["_GetMinimumDistanceSquared"] = _raise_uninitialized_error
        self.__dict__["_GetMaximumDistance"] = _raise_uninitialized_error
        self.__dict__["_SetMaximumDistance"] = _raise_uninitialized_error
        self.__dict__["_GetMaximumDistanceSquared"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition = agcom.GUID(IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition._uuid)
        vtable_offset_local = IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition._vtable_offset - 1
        self.__dict__["_GetGlobeOverlay"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_SetGlobeOverlay"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition, vtable_offset_local+2, agcom.PVOID)
        self.__dict__["_GetMinimumDistance"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMinimumDistance"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetMinimumDistanceSquared"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_GetMaximumDistance"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition, vtable_offset_local+6, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaximumDistance"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition, vtable_offset_local+7, agcom.DOUBLE)
        self.__dict__["_GetMaximumDistanceSquared"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition, vtable_offset_local+8, POINTER(agcom.DOUBLE))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition.__dict__ and type(IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition.__dict__[attrname]) == property:
            return IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition.")
    
    @property
    def GlobeOverlay(self) -> "IAgStkGraphicsGlobeOverlay":
        """Gets or sets the globe overlay associated with this instance."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetGlobeOverlay"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @GlobeOverlay.setter
    def GlobeOverlay(self, globeOverlay:"IAgStkGraphicsGlobeOverlay") -> None:
        with agmarshall.AgInterface_in_arg(globeOverlay, IAgStkGraphicsGlobeOverlay) as arg_globeOverlay:
            agcls.evaluate_hresult(self.__dict__["_SetGlobeOverlay"](arg_globeOverlay.COM_val))

    @property
    def MinimumDistance(self) -> float:
        """Gets or sets the minimum distance of the inclusive distance interval."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinimumDistance"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @MinimumDistance.setter
    def MinimumDistance(self, minimumDistance:float) -> None:
        with agmarshall.DOUBLE_arg(minimumDistance) as arg_minimumDistance:
            agcls.evaluate_hresult(self.__dict__["_SetMinimumDistance"](arg_minimumDistance.COM_val))

    @property
    def MinimumDistanceSquared(self) -> float:
        """Gets the squared minimum distance of the inclusive distance interval."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinimumDistanceSquared"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def MaximumDistance(self) -> float:
        """Gets or sets the maximum distance of the inclusive distance interval. Use Double.MaxValue to ignore checking the maximum distance."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaximumDistance"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @MaximumDistance.setter
    def MaximumDistance(self, maximumDistance:float) -> None:
        with agmarshall.DOUBLE_arg(maximumDistance) as arg_maximumDistance:
            agcls.evaluate_hresult(self.__dict__["_SetMaximumDistance"](arg_maximumDistance.COM_val))

    @property
    def MaximumDistanceSquared(self) -> float:
        """Gets the squared maximum distance of the inclusive distance interval."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaximumDistanceSquared"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{212b00ec-ff3a-4f1b-9fc3-5a900c6536dc}", IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition)
agcls.AgTypeNameMap["IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition"] = IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition
__all__.append("IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition")

class IAgStkGraphicsDistanceToPositionDisplayCondition(object):
    """Defines an inclusive distance interval that determines when an object, such as a primitive, is rendered based on the distance from the camera to a position defined in the given reference frame."""
    _uuid = "{0110db74-d567-4804-9bec-d7cce8ed59d0}"
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetMinimumDistance"] = _raise_uninitialized_error
        self.__dict__["_SetMinimumDistance"] = _raise_uninitialized_error
        self.__dict__["_GetMinimumDistanceSquared"] = _raise_uninitialized_error
        self.__dict__["_GetMaximumDistance"] = _raise_uninitialized_error
        self.__dict__["_SetMaximumDistance"] = _raise_uninitialized_error
        self.__dict__["_GetMaximumDistanceSquared"] = _raise_uninitialized_error
        self.__dict__["_GetPosition"] = _raise_uninitialized_error
        self.__dict__["_SetPosition"] = _raise_uninitialized_error
        self.__dict__["_GetReferenceFrame"] = _raise_uninitialized_error
        self.__dict__["_SetReferenceFrame"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsDistanceToPositionDisplayCondition._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsDistanceToPositionDisplayCondition from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsDistanceToPositionDisplayCondition = agcom.GUID(IAgStkGraphicsDistanceToPositionDisplayCondition._uuid)
        vtable_offset_local = IAgStkGraphicsDistanceToPositionDisplayCondition._vtable_offset - 1
        self.__dict__["_GetMinimumDistance"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsDistanceToPositionDisplayCondition, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMinimumDistance"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsDistanceToPositionDisplayCondition, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetMinimumDistanceSquared"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsDistanceToPositionDisplayCondition, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_GetMaximumDistance"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsDistanceToPositionDisplayCondition, vtable_offset_local+4, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaximumDistance"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsDistanceToPositionDisplayCondition, vtable_offset_local+5, agcom.DOUBLE)
        self.__dict__["_GetMaximumDistanceSquared"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsDistanceToPositionDisplayCondition, vtable_offset_local+6, POINTER(agcom.DOUBLE))
        self.__dict__["_GetPosition"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsDistanceToPositionDisplayCondition, vtable_offset_local+7, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetPosition"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsDistanceToPositionDisplayCondition, vtable_offset_local+8, agcom.SAFEARRAY)
        self.__dict__["_GetReferenceFrame"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsDistanceToPositionDisplayCondition, vtable_offset_local+9, POINTER(agcom.PVOID))
        self.__dict__["_SetReferenceFrame"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsDistanceToPositionDisplayCondition, vtable_offset_local+10, agcom.PVOID)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsDistanceToPositionDisplayCondition.__dict__ and type(IAgStkGraphicsDistanceToPositionDisplayCondition.__dict__[attrname]) == property:
            return IAgStkGraphicsDistanceToPositionDisplayCondition.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsDistanceToPositionDisplayCondition.")
    
    @property
    def MinimumDistance(self) -> float:
        """Gets or sets the minimum distance of the inclusive distance interval."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinimumDistance"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @MinimumDistance.setter
    def MinimumDistance(self, minimumDistance:float) -> None:
        with agmarshall.DOUBLE_arg(minimumDistance) as arg_minimumDistance:
            agcls.evaluate_hresult(self.__dict__["_SetMinimumDistance"](arg_minimumDistance.COM_val))

    @property
    def MinimumDistanceSquared(self) -> float:
        """Gets the squared minimum distance of the inclusive distance interval."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinimumDistanceSquared"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def MaximumDistance(self) -> float:
        """Gets or sets the maximum distance of the inclusive distance interval. Use Double.MaxValue to ignore checking the maximum distance."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaximumDistance"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @MaximumDistance.setter
    def MaximumDistance(self, maximumDistance:float) -> None:
        with agmarshall.DOUBLE_arg(maximumDistance) as arg_maximumDistance:
            agcls.evaluate_hresult(self.__dict__["_SetMaximumDistance"](arg_maximumDistance.COM_val))

    @property
    def MaximumDistanceSquared(self) -> float:
        """Gets the squared maximum distance of the inclusive distance interval."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaximumDistanceSquared"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Position(self) -> list:
        """Gets or sets the position used to compute the distance from the camera. The array contains the components of the position arranged in the order x, y, z."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPosition"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @Position.setter
    def Position(self, position:list) -> None:
        with agmarshall.SAFEARRAY_arg(position) as arg_position:
            agcls.evaluate_hresult(self.__dict__["_SetPosition"](arg_position.COM_val))

    @property
    def ReferenceFrame(self) -> "IAgCrdnSystem":
        """Gets or sets the reference frame that position is defined in."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetReferenceFrame"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @ReferenceFrame.setter
    def ReferenceFrame(self, referenceFrame:"IAgCrdnSystem") -> None:
        with agmarshall.AgInterface_in_arg(referenceFrame, IAgCrdnSystem) as arg_referenceFrame:
            agcls.evaluate_hresult(self.__dict__["_SetReferenceFrame"](arg_referenceFrame.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{0110db74-d567-4804-9bec-d7cce8ed59d0}", IAgStkGraphicsDistanceToPositionDisplayCondition)
agcls.AgTypeNameMap["IAgStkGraphicsDistanceToPositionDisplayCondition"] = IAgStkGraphicsDistanceToPositionDisplayCondition
__all__.append("IAgStkGraphicsDistanceToPositionDisplayCondition")

class IAgStkGraphicsDistanceToPrimitiveDisplayCondition(object):
    """Defines an inclusive distance interval that determines when an object, such as a screen overlay, is rendered based on the distance from the camera to the primitive..."""
    _uuid = "{bf9664c2-e8c4-471b-a071-865f1448a031}"
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetPrimitive"] = _raise_uninitialized_error
        self.__dict__["_SetPrimitive"] = _raise_uninitialized_error
        self.__dict__["_GetMinimumDistance"] = _raise_uninitialized_error
        self.__dict__["_SetMinimumDistance"] = _raise_uninitialized_error
        self.__dict__["_GetMinimumDistanceSquared"] = _raise_uninitialized_error
        self.__dict__["_GetMaximumDistance"] = _raise_uninitialized_error
        self.__dict__["_SetMaximumDistance"] = _raise_uninitialized_error
        self.__dict__["_GetMaximumDistanceSquared"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsDistanceToPrimitiveDisplayCondition._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsDistanceToPrimitiveDisplayCondition from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsDistanceToPrimitiveDisplayCondition = agcom.GUID(IAgStkGraphicsDistanceToPrimitiveDisplayCondition._uuid)
        vtable_offset_local = IAgStkGraphicsDistanceToPrimitiveDisplayCondition._vtable_offset - 1
        self.__dict__["_GetPrimitive"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsDistanceToPrimitiveDisplayCondition, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_SetPrimitive"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsDistanceToPrimitiveDisplayCondition, vtable_offset_local+2, agcom.PVOID)
        self.__dict__["_GetMinimumDistance"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsDistanceToPrimitiveDisplayCondition, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMinimumDistance"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsDistanceToPrimitiveDisplayCondition, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetMinimumDistanceSquared"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsDistanceToPrimitiveDisplayCondition, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_GetMaximumDistance"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsDistanceToPrimitiveDisplayCondition, vtable_offset_local+6, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaximumDistance"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsDistanceToPrimitiveDisplayCondition, vtable_offset_local+7, agcom.DOUBLE)
        self.__dict__["_GetMaximumDistanceSquared"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsDistanceToPrimitiveDisplayCondition, vtable_offset_local+8, POINTER(agcom.DOUBLE))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsDistanceToPrimitiveDisplayCondition.__dict__ and type(IAgStkGraphicsDistanceToPrimitiveDisplayCondition.__dict__[attrname]) == property:
            return IAgStkGraphicsDistanceToPrimitiveDisplayCondition.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsDistanceToPrimitiveDisplayCondition.")
    
    @property
    def Primitive(self) -> "IAgStkGraphicsPrimitive":
        """Gets or sets the primitive associated with this instance."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPrimitive"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @Primitive.setter
    def Primitive(self, primitive:"IAgStkGraphicsPrimitive") -> None:
        with agmarshall.AgInterface_in_arg(primitive, IAgStkGraphicsPrimitive) as arg_primitive:
            agcls.evaluate_hresult(self.__dict__["_SetPrimitive"](arg_primitive.COM_val))

    @property
    def MinimumDistance(self) -> float:
        """Gets or sets the minimum distance of the inclusive distance interval."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinimumDistance"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @MinimumDistance.setter
    def MinimumDistance(self, minimumDistance:float) -> None:
        with agmarshall.DOUBLE_arg(minimumDistance) as arg_minimumDistance:
            agcls.evaluate_hresult(self.__dict__["_SetMinimumDistance"](arg_minimumDistance.COM_val))

    @property
    def MinimumDistanceSquared(self) -> float:
        """Gets the squared minimum distance of the inclusive distance interval."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinimumDistanceSquared"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def MaximumDistance(self) -> float:
        """Gets or sets the maximum distance of the inclusive distance interval. Use Double.MaxValue to ignore checking the maximum distance."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaximumDistance"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @MaximumDistance.setter
    def MaximumDistance(self, maximumDistance:float) -> None:
        with agmarshall.DOUBLE_arg(maximumDistance) as arg_maximumDistance:
            agcls.evaluate_hresult(self.__dict__["_SetMaximumDistance"](arg_maximumDistance.COM_val))

    @property
    def MaximumDistanceSquared(self) -> float:
        """Gets the squared maximum distance of the inclusive distance interval."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaximumDistanceSquared"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{bf9664c2-e8c4-471b-a071-865f1448a031}", IAgStkGraphicsDistanceToPrimitiveDisplayCondition)
agcls.AgTypeNameMap["IAgStkGraphicsDistanceToPrimitiveDisplayCondition"] = IAgStkGraphicsDistanceToPrimitiveDisplayCondition
__all__.append("IAgStkGraphicsDistanceToPrimitiveDisplayCondition")

class IAgStkGraphicsDurationPathPrimitiveUpdatePolicy(object):
    """path primitive update policy that removes points from remove location after a given duration."""
    _uuid = "{23d3c9c4-b242-4a5a-89cf-58387bd9f935}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetDuration"] = _raise_uninitialized_error
        self.__dict__["_SetDuration"] = _raise_uninitialized_error
        self.__dict__["_GetRemoveLocation"] = _raise_uninitialized_error
        self.__dict__["_SetRemoveLocation"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsDurationPathPrimitiveUpdatePolicy._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsDurationPathPrimitiveUpdatePolicy from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsDurationPathPrimitiveUpdatePolicy = agcom.GUID(IAgStkGraphicsDurationPathPrimitiveUpdatePolicy._uuid)
        vtable_offset_local = IAgStkGraphicsDurationPathPrimitiveUpdatePolicy._vtable_offset - 1
        self.__dict__["_GetDuration"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsDurationPathPrimitiveUpdatePolicy, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDuration"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsDurationPathPrimitiveUpdatePolicy, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetRemoveLocation"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsDurationPathPrimitiveUpdatePolicy, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetRemoveLocation"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsDurationPathPrimitiveUpdatePolicy, vtable_offset_local+4, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsDurationPathPrimitiveUpdatePolicy.__dict__ and type(IAgStkGraphicsDurationPathPrimitiveUpdatePolicy.__dict__[attrname]) == property:
            return IAgStkGraphicsDurationPathPrimitiveUpdatePolicy.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsDurationPathPrimitiveUpdatePolicy.")
    
    @property
    def Duration(self) -> float:
        """Gets or sets the maximum duration that a point will lie on the line."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDuration"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Duration.setter
    def Duration(self, duration:float) -> None:
        with agmarshall.DOUBLE_arg(duration) as arg_duration:
            agcls.evaluate_hresult(self.__dict__["_SetDuration"](arg_duration.COM_val))

    @property
    def RemoveLocation(self) -> "AgEStkGraphicsPathPrimitiveRemoveLocation":
        """Gets or sets where the positions on the path are removed from."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsPathPrimitiveRemoveLocation) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetRemoveLocation"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @RemoveLocation.setter
    def RemoveLocation(self, removeLocation:"AgEStkGraphicsPathPrimitiveRemoveLocation") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsPathPrimitiveRemoveLocation, removeLocation) as arg_removeLocation:
            agcls.evaluate_hresult(self.__dict__["_SetRemoveLocation"](arg_removeLocation.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{23d3c9c4-b242-4a5a-89cf-58387bd9f935}", IAgStkGraphicsDurationPathPrimitiveUpdatePolicy)
agcls.AgTypeNameMap["IAgStkGraphicsDurationPathPrimitiveUpdatePolicy"] = IAgStkGraphicsDurationPathPrimitiveUpdatePolicy
__all__.append("IAgStkGraphicsDurationPathPrimitiveUpdatePolicy")

class IAgStkGraphicsFrameRate(object):
    """Keeps track of how many times the scenes are rendered per second."""
    _uuid = "{9bbe1077-fcb3-4d73-ae9e-727155e14288}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetFramesPerSecond"] = _raise_uninitialized_error
        self.__dict__["_GetMaximumNumberOfFrames"] = _raise_uninitialized_error
        self.__dict__["_SetMaximumNumberOfFrames"] = _raise_uninitialized_error
        self.__dict__["_Reset"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsFrameRate._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsFrameRate from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsFrameRate = agcom.GUID(IAgStkGraphicsFrameRate._uuid)
        vtable_offset_local = IAgStkGraphicsFrameRate._vtable_offset - 1
        self.__dict__["_GetFramesPerSecond"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFrameRate, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_GetMaximumNumberOfFrames"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFrameRate, vtable_offset_local+2, POINTER(agcom.INT))
        self.__dict__["_SetMaximumNumberOfFrames"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFrameRate, vtable_offset_local+3, agcom.INT)
        self.__dict__["_Reset"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFrameRate, vtable_offset_local+4, )
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsFrameRate.__dict__ and type(IAgStkGraphicsFrameRate.__dict__[attrname]) == property:
            return IAgStkGraphicsFrameRate.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsFrameRate.")
    
    @property
    def FramesPerSecond(self) -> float:
        """Gets the current frame rate in frames per second."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetFramesPerSecond"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def MaximumNumberOfFrames(self) -> int:
        """Gets or sets the maximum number of frames used to determine frame rate. More frames means that the frame rate is averaged over a longer period of time and will fluctuate less than fewer frames would. The minimum value is 2."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaximumNumberOfFrames"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @MaximumNumberOfFrames.setter
    def MaximumNumberOfFrames(self, maximumNumberOfFrames:int) -> None:
        with agmarshall.INT_arg(maximumNumberOfFrames) as arg_maximumNumberOfFrames:
            agcls.evaluate_hresult(self.__dict__["_SetMaximumNumberOfFrames"](arg_maximumNumberOfFrames.COM_val))

    def Reset(self) -> None:
        """This resets the frame rate counter back to zero. The frame rate computation begins anew."""
        agcls.evaluate_hresult(self.__dict__["_Reset"]())


agcls.AgClassCatalog.add_catalog_entry("{9bbe1077-fcb3-4d73-ae9e-727155e14288}", IAgStkGraphicsFrameRate)
agcls.AgTypeNameMap["IAgStkGraphicsFrameRate"] = IAgStkGraphicsFrameRate
__all__.append("IAgStkGraphicsFrameRate")

class IAgStkGraphicsGlobeImageOverlay(object):
    """A globe overlay that shows an image."""
    _uuid = "{ac17f1dd-17dc-41bd-8429-80f90234b53f}"
    _num_methods = 13
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetTranslucency"] = _raise_uninitialized_error
        self.__dict__["_SetTranslucency"] = _raise_uninitialized_error
        self.__dict__["_GetUseAltitudeBasedTranslucency"] = _raise_uninitialized_error
        self.__dict__["_SetUseAltitudeBasedTranslucency"] = _raise_uninitialized_error
        self.__dict__["_GetAltitudeBasedTranslucencyLowerTranslucency"] = _raise_uninitialized_error
        self.__dict__["_SetAltitudeBasedTranslucencyLowerTranslucency"] = _raise_uninitialized_error
        self.__dict__["_GetAltitudeBasedTranslucencyUpperTranslucency"] = _raise_uninitialized_error
        self.__dict__["_SetAltitudeBasedTranslucencyUpperTranslucency"] = _raise_uninitialized_error
        self.__dict__["_GetAltitudeBasedTranslucencyLowerAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetAltitudeBasedTranslucencyLowerAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetAltitudeBasedTranslucencyUpperAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetAltitudeBasedTranslucencyUpperAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetMoreThanOneImageGlobeOverlaySupported"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsGlobeImageOverlay._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsGlobeImageOverlay from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsGlobeImageOverlay = agcom.GUID(IAgStkGraphicsGlobeImageOverlay._uuid)
        vtable_offset_local = IAgStkGraphicsGlobeImageOverlay._vtable_offset - 1
        self.__dict__["_GetTranslucency"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsGlobeImageOverlay, vtable_offset_local+1, POINTER(agcom.FLOAT))
        self.__dict__["_SetTranslucency"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsGlobeImageOverlay, vtable_offset_local+2, agcom.FLOAT)
        self.__dict__["_GetUseAltitudeBasedTranslucency"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsGlobeImageOverlay, vtable_offset_local+3, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseAltitudeBasedTranslucency"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsGlobeImageOverlay, vtable_offset_local+4, agcom.VARIANT_BOOL)
        self.__dict__["_GetAltitudeBasedTranslucencyLowerTranslucency"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsGlobeImageOverlay, vtable_offset_local+5, POINTER(agcom.FLOAT))
        self.__dict__["_SetAltitudeBasedTranslucencyLowerTranslucency"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsGlobeImageOverlay, vtable_offset_local+6, agcom.FLOAT)
        self.__dict__["_GetAltitudeBasedTranslucencyUpperTranslucency"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsGlobeImageOverlay, vtable_offset_local+7, POINTER(agcom.FLOAT))
        self.__dict__["_SetAltitudeBasedTranslucencyUpperTranslucency"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsGlobeImageOverlay, vtable_offset_local+8, agcom.FLOAT)
        self.__dict__["_GetAltitudeBasedTranslucencyLowerAltitude"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsGlobeImageOverlay, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAltitudeBasedTranslucencyLowerAltitude"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsGlobeImageOverlay, vtable_offset_local+10, agcom.DOUBLE)
        self.__dict__["_GetAltitudeBasedTranslucencyUpperAltitude"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsGlobeImageOverlay, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAltitudeBasedTranslucencyUpperAltitude"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsGlobeImageOverlay, vtable_offset_local+12, agcom.DOUBLE)
        self.__dict__["_GetMoreThanOneImageGlobeOverlaySupported"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsGlobeImageOverlay, vtable_offset_local+13, POINTER(agcom.VARIANT_BOOL))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsGlobeImageOverlay.__dict__ and type(IAgStkGraphicsGlobeImageOverlay.__dict__[attrname]) == property:
            return IAgStkGraphicsGlobeImageOverlay.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsGlobeImageOverlay.")
    
    @property
    def Translucency(self) -> float:
        """Gets or sets the translucency value for the image. The translucency is between 0 and 1, where 0 is fully opaque and 1 is invisible."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTranslucency"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Translucency.setter
    def Translucency(self, translucency:float) -> None:
        with agmarshall.FLOAT_arg(translucency) as arg_translucency:
            agcls.evaluate_hresult(self.__dict__["_SetTranslucency"](arg_translucency.COM_val))

    @property
    def UseAltitudeBasedTranslucency(self) -> bool:
        """Gets or sets whether to use altitude to determine the translucency value for the image or not. If <see langword='false' />, the translucency value is used..."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseAltitudeBasedTranslucency"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @UseAltitudeBasedTranslucency.setter
    def UseAltitudeBasedTranslucency(self, useAltitudeBasedTranslucency:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(useAltitudeBasedTranslucency) as arg_useAltitudeBasedTranslucency:
            agcls.evaluate_hresult(self.__dict__["_SetUseAltitudeBasedTranslucency"](arg_useAltitudeBasedTranslucency.COM_val))

    @property
    def AltitudeBasedTranslucencyLowerTranslucency(self) -> float:
        """Gets or sets the lower translucency value for the image when use altitude based translucency is set to <see langword='true' />..."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitudeBasedTranslucencyLowerTranslucency"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @AltitudeBasedTranslucencyLowerTranslucency.setter
    def AltitudeBasedTranslucencyLowerTranslucency(self, altitudeBasedTranslucencyLowerTranslucency:float) -> None:
        with agmarshall.FLOAT_arg(altitudeBasedTranslucencyLowerTranslucency) as arg_altitudeBasedTranslucencyLowerTranslucency:
            agcls.evaluate_hresult(self.__dict__["_SetAltitudeBasedTranslucencyLowerTranslucency"](arg_altitudeBasedTranslucencyLowerTranslucency.COM_val))

    @property
    def AltitudeBasedTranslucencyUpperTranslucency(self) -> float:
        """Gets or sets the upper translucency value for the image when use altitude based translucency is set to <see langword='true' />..."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitudeBasedTranslucencyUpperTranslucency"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @AltitudeBasedTranslucencyUpperTranslucency.setter
    def AltitudeBasedTranslucencyUpperTranslucency(self, altitudeBasedTranslucencyUpperTranslucency:float) -> None:
        with agmarshall.FLOAT_arg(altitudeBasedTranslucencyUpperTranslucency) as arg_altitudeBasedTranslucencyUpperTranslucency:
            agcls.evaluate_hresult(self.__dict__["_SetAltitudeBasedTranslucencyUpperTranslucency"](arg_altitudeBasedTranslucencyUpperTranslucency.COM_val))

    @property
    def AltitudeBasedTranslucencyLowerAltitude(self) -> float:
        """Gets or sets the lower altitude bound used to calculate translucency for the image when use altitude based translucency is set to <see langword='true' />..."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitudeBasedTranslucencyLowerAltitude"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @AltitudeBasedTranslucencyLowerAltitude.setter
    def AltitudeBasedTranslucencyLowerAltitude(self, altitudeBasedTranslucencyLowerAltitude:float) -> None:
        with agmarshall.DOUBLE_arg(altitudeBasedTranslucencyLowerAltitude) as arg_altitudeBasedTranslucencyLowerAltitude:
            agcls.evaluate_hresult(self.__dict__["_SetAltitudeBasedTranslucencyLowerAltitude"](arg_altitudeBasedTranslucencyLowerAltitude.COM_val))

    @property
    def AltitudeBasedTranslucencyUpperAltitude(self) -> float:
        """Gets or sets the upper altitude bound used to calculate translucency for the image when use altitude based translucency is set to <see langword='true' />..."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitudeBasedTranslucencyUpperAltitude"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @AltitudeBasedTranslucencyUpperAltitude.setter
    def AltitudeBasedTranslucencyUpperAltitude(self, altitudeBasedTranslucencyUpperAltitude:float) -> None:
        with agmarshall.DOUBLE_arg(altitudeBasedTranslucencyUpperAltitude) as arg_altitudeBasedTranslucencyUpperAltitude:
            agcls.evaluate_hresult(self.__dict__["_SetAltitudeBasedTranslucencyUpperAltitude"](arg_altitudeBasedTranslucencyUpperAltitude.COM_val))

    @property
    def MoreThanOneImageGlobeOverlaySupported(self) -> bool:
        """Gets whether or not the video card allows for more than one image globe overlay globe image overlay to be added."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMoreThanOneImageGlobeOverlaySupported"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{ac17f1dd-17dc-41bd-8429-80f90234b53f}", IAgStkGraphicsGlobeImageOverlay)
agcls.AgTypeNameMap["IAgStkGraphicsGlobeImageOverlay"] = IAgStkGraphicsGlobeImageOverlay
__all__.append("IAgStkGraphicsGlobeImageOverlay")

class IAgStkGraphicsGraphicsFont(object):
    """A font that is suitable for use with the text batch primitive. For best performance, avoid creating duplicate font objects. Instead assign the same font object to several text batch primitives."""
    _uuid = "{36a67d60-3f13-435b-92d8-b6a76ed1a74a}"
    _num_methods = 9
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetName"] = _raise_uninitialized_error
        self.__dict__["_GetSize"] = _raise_uninitialized_error
        self.__dict__["_GetBold"] = _raise_uninitialized_error
        self.__dict__["_GetItalic"] = _raise_uninitialized_error
        self.__dict__["_GetUnderline"] = _raise_uninitialized_error
        self.__dict__["_GetStrikeout"] = _raise_uninitialized_error
        self.__dict__["_GetOutline"] = _raise_uninitialized_error
        self.__dict__["_GetStyle"] = _raise_uninitialized_error
        self.__dict__["_GetAntialias"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsGraphicsFont._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsGraphicsFont from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsGraphicsFont = agcom.GUID(IAgStkGraphicsGraphicsFont._uuid)
        vtable_offset_local = IAgStkGraphicsGraphicsFont._vtable_offset - 1
        self.__dict__["_GetName"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsGraphicsFont, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_GetSize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsGraphicsFont, vtable_offset_local+2, POINTER(agcom.INT))
        self.__dict__["_GetBold"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsGraphicsFont, vtable_offset_local+3, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetItalic"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsGraphicsFont, vtable_offset_local+4, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetUnderline"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsGraphicsFont, vtable_offset_local+5, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetStrikeout"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsGraphicsFont, vtable_offset_local+6, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetOutline"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsGraphicsFont, vtable_offset_local+7, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetStyle"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsGraphicsFont, vtable_offset_local+8, POINTER(agcom.LONG))
        self.__dict__["_GetAntialias"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsGraphicsFont, vtable_offset_local+9, POINTER(agcom.VARIANT_BOOL))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsGraphicsFont.__dict__ and type(IAgStkGraphicsGraphicsFont.__dict__[attrname]) == property:
            return IAgStkGraphicsGraphicsFont.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsGraphicsFont.")
    
    @property
    def Name(self) -> str:
        """Gets the typeface name of the font."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetName"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Size(self) -> int:
        """Gets the size of the font."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSize"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Bold(self) -> bool:
        """Gets a value that indicates whether this font is bold."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBold"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Italic(self) -> bool:
        """Gets a value that indicates whether this font is italic."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetItalic"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Underline(self) -> bool:
        """Gets a value that indicates whether this font is underlined."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetUnderline"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Strikeout(self) -> bool:
        """Gets a value that indicates whether this font has a horizontal line through its characters."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetStrikeout"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Outline(self) -> bool:
        """Gets a value that indicates whether this font has an outline around its characters."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetOutline"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Style(self) -> "AgEStkGraphicsFontStyle":
        """Gets the font style enumeration that contains the style for this font. This does not include the outline property."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsFontStyle) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetStyle"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Antialias(self) -> bool:
        """Gets a value that indicates whether this font is antialiased."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAntialias"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{36a67d60-3f13-435b-92d8-b6a76ed1a74a}", IAgStkGraphicsGraphicsFont)
agcls.AgTypeNameMap["IAgStkGraphicsGraphicsFont"] = IAgStkGraphicsGraphicsFont
__all__.append("IAgStkGraphicsGraphicsFont")

class IAgStkGraphicsGreatArcInterpolator(object):
    """The great arc interpolator computes interpolated positions along a great arc. A great arc is the shortest path between two positions on an ellipsoid."""
    _uuid = "{8de070c1-de8f-48ee-96ea-5dc046706d28}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCentralBody"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBody"] = _raise_uninitialized_error
        self.__dict__["_GetGranularity"] = _raise_uninitialized_error
        self.__dict__["_SetGranularity"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsGreatArcInterpolator._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsGreatArcInterpolator from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsGreatArcInterpolator = agcom.GUID(IAgStkGraphicsGreatArcInterpolator._uuid)
        vtable_offset_local = IAgStkGraphicsGreatArcInterpolator._vtable_offset - 1
        self.__dict__["_GetCentralBody"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsGreatArcInterpolator, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCentralBody"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsGreatArcInterpolator, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetGranularity"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsGreatArcInterpolator, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetGranularity"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsGreatArcInterpolator, vtable_offset_local+4, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsGreatArcInterpolator.__dict__ and type(IAgStkGraphicsGreatArcInterpolator.__dict__[attrname]) == property:
            return IAgStkGraphicsGreatArcInterpolator.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsGreatArcInterpolator.")
    
    @property
    def CentralBody(self) -> str:
        """Gets or sets the central body used when interpolating with interpolate."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBody"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @CentralBody.setter
    def CentralBody(self, centralBody:str) -> None:
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBody"](arg_centralBody.COM_val))

    @property
    def Granularity(self) -> float:
        """Gets or sets the granularity used when interpolating with interpolate. Lower granularities are more precise but create more positions."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetGranularity"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Granularity.setter
    def Granularity(self, granularity:float) -> None:
        with agmarshall.DOUBLE_arg(granularity) as arg_granularity:
            agcls.evaluate_hresult(self.__dict__["_SetGranularity"](arg_granularity.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{8de070c1-de8f-48ee-96ea-5dc046706d28}", IAgStkGraphicsGreatArcInterpolator)
agcls.AgTypeNameMap["IAgStkGraphicsGreatArcInterpolator"] = IAgStkGraphicsGreatArcInterpolator
__all__.append("IAgStkGraphicsGreatArcInterpolator")

class IAgStkGraphicsImageCollection(object):
    """A collection of globe image overlay objects."""
    _uuid = "{797b7253-9205-47a1-b49b-edf6e06326c0}"
    _num_methods = 20
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        self.__dict__["_GetIsReadOnly"] = _raise_uninitialized_error
        self.__dict__["_Item"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        self.__dict__["_Contains"] = _raise_uninitialized_error
        self.__dict__["_ContainsUriString"] = _raise_uninitialized_error
        self.__dict__["_Remove"] = _raise_uninitialized_error
        self.__dict__["_Clear"] = _raise_uninitialized_error
        self.__dict__["_Add"] = _raise_uninitialized_error
        self.__dict__["_AddAsync"] = _raise_uninitialized_error
        self.__dict__["_IndexOf"] = _raise_uninitialized_error
        self.__dict__["_IndexOfUriString"] = _raise_uninitialized_error
        self.__dict__["_AddUriString"] = _raise_uninitialized_error
        self.__dict__["_AddAsyncUriString"] = _raise_uninitialized_error
        self.__dict__["_Swap"] = _raise_uninitialized_error
        self.__dict__["_SwapByIndex"] = _raise_uninitialized_error
        self.__dict__["_Move"] = _raise_uninitialized_error
        self.__dict__["_MoveByIndex"] = _raise_uninitialized_error
        self.__dict__["_BringToFront"] = _raise_uninitialized_error
        self.__dict__["_SendToBack"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsImageCollection._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsImageCollection from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsImageCollection = agcom.GUID(IAgStkGraphicsImageCollection._uuid)
        vtable_offset_local = IAgStkGraphicsImageCollection._vtable_offset - 1
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsImageCollection, vtable_offset_local+1, POINTER(agcom.INT))
        self.__dict__["_GetIsReadOnly"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsImageCollection, vtable_offset_local+2, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_Item"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsImageCollection, vtable_offset_local+3, agcom.INT, POINTER(agcom.PVOID))
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsImageCollection, vtable_offset_local+4, POINTER(agcom.PVOID))
        self.__dict__["_Contains"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsImageCollection, vtable_offset_local+5, agcom.PVOID, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_ContainsUriString"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsImageCollection, vtable_offset_local+6, agcom.BSTR, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_Remove"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsImageCollection, vtable_offset_local+7, agcom.PVOID, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_Clear"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsImageCollection, vtable_offset_local+8, )
        self.__dict__["_Add"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsImageCollection, vtable_offset_local+9, agcom.PVOID)
        self.__dict__["_AddAsync"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsImageCollection, vtable_offset_local+10, agcom.PVOID)
        self.__dict__["_IndexOf"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsImageCollection, vtable_offset_local+11, agcom.PVOID, POINTER(agcom.INT))
        self.__dict__["_IndexOfUriString"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsImageCollection, vtable_offset_local+12, agcom.BSTR, POINTER(agcom.INT))
        self.__dict__["_AddUriString"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsImageCollection, vtable_offset_local+13, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_AddAsyncUriString"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsImageCollection, vtable_offset_local+14, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_Swap"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsImageCollection, vtable_offset_local+15, agcom.PVOID, agcom.PVOID)
        self.__dict__["_SwapByIndex"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsImageCollection, vtable_offset_local+16, agcom.INT, agcom.INT)
        self.__dict__["_Move"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsImageCollection, vtable_offset_local+17, agcom.PVOID, agcom.INT)
        self.__dict__["_MoveByIndex"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsImageCollection, vtable_offset_local+18, agcom.INT, agcom.INT)
        self.__dict__["_BringToFront"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsImageCollection, vtable_offset_local+19, agcom.PVOID)
        self.__dict__["_SendToBack"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsImageCollection, vtable_offset_local+20, agcom.PVOID)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsImageCollection.__dict__ and type(IAgStkGraphicsImageCollection.__dict__[attrname]) == property:
            return IAgStkGraphicsImageCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsImageCollection.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> "IAgStkGraphicsGlobeImageOverlay":
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    def Subscribe(self) -> IAgStkGraphicsImageCollectionEventHandler:
        """Returns an IAgStkGraphicsImageCollectionEventHandler that is subscribed to handle events associated with this instance of IAgStkGraphicsImageCollection."""
        return IAgStkGraphicsImageCollectionEventHandler(self._pUnk)    
    @property
    def Count(self) -> int:
        """Gets the number of globe overlay objects in the collection."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def IsReadOnly(self) -> bool:
        """Gets whether or not the collection is read only."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetIsReadOnly"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def Item(self, index:int) -> "IAgStkGraphicsGlobeImageOverlay":
        """Gets the globe image overlay at the specified index."""
        with agmarshall.INT_arg(index) as arg_index, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Item"](arg_index.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        """Constructs an iterator that can be used to iterate the collection."""
        with agmarshall.IEnumVARIANT_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def Contains(self, imageryOverlay:"IAgStkGraphicsGlobeImageOverlay") -> bool:
        """Checks the presence of a globe image overlay in the collection."""
        with agmarshall.AgInterface_in_arg(imageryOverlay, IAgStkGraphicsGlobeImageOverlay) as arg_imageryOverlay, \
             agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_Contains"](arg_imageryOverlay.COM_val, byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def ContainsUriString(self, stringUri:str) -> bool:
        """Checks the presence of a globe image overlay with the specified Uri in the collection."""
        with agmarshall.BSTR_arg(stringUri) as arg_stringUri, \
             agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_ContainsUriString"](arg_stringUri.COM_val, byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def Remove(self, globeOverlay:"IAgStkGraphicsGlobeImageOverlay") -> bool:
        """Removes a globe image overlay from the collection."""
        with agmarshall.AgInterface_in_arg(globeOverlay, IAgStkGraphicsGlobeImageOverlay) as arg_globeOverlay, \
             agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_Remove"](arg_globeOverlay.COM_val, byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def Clear(self) -> None:
        """Removes all globe image overlay objects from the collection."""
        agcls.evaluate_hresult(self.__dict__["_Clear"]())

    def Add(self, imageryOverlay:"IAgStkGraphicsGlobeImageOverlay") -> None:
        """Adds imageryOverlay to the collection."""
        with agmarshall.AgInterface_in_arg(imageryOverlay, IAgStkGraphicsGlobeImageOverlay) as arg_imageryOverlay:
            agcls.evaluate_hresult(self.__dict__["_Add"](arg_imageryOverlay.COM_val))

    def AddAsync(self, imageryOverlay:"IAgStkGraphicsGlobeImageOverlay") -> None:
        """Adds imageryOverlay to the collection asynchronously."""
        with agmarshall.AgInterface_in_arg(imageryOverlay, IAgStkGraphicsGlobeImageOverlay) as arg_imageryOverlay:
            agcls.evaluate_hresult(self.__dict__["_AddAsync"](arg_imageryOverlay.COM_val))

    def IndexOf(self, imageryOverlay:"IAgStkGraphicsGlobeImageOverlay") -> int:
        """Gets the index of the specified globe image overlay."""
        with agmarshall.AgInterface_in_arg(imageryOverlay, IAgStkGraphicsGlobeImageOverlay) as arg_imageryOverlay, \
             agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_IndexOf"](arg_imageryOverlay.COM_val, byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def IndexOfUriString(self, stringUri:str) -> int:
        """Gets the index of the globe image overlay with the specified Uri."""
        with agmarshall.BSTR_arg(stringUri) as arg_stringUri, \
             agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_IndexOfUriString"](arg_stringUri.COM_val, byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def AddUriString(self, uri:str) -> "IAgStkGraphicsGlobeImageOverlay":
        """Creates a globe overlay from the uri, which represents a uri, and adds it to the collection."""
        with agmarshall.BSTR_arg(uri) as arg_uri, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_AddUriString"](arg_uri.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def AddAsyncUriString(self, uri:str) -> "IAgStkGraphicsGlobeImageOverlay":
        """Creates a globe image overlay from the uri, which represents a uri, and adds it to the collection asynchronously."""
        with agmarshall.BSTR_arg(uri) as arg_uri, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_AddAsyncUriString"](arg_uri.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def Swap(self, imageryOverlay1:"IAgStkGraphicsGlobeImageOverlay", imageryOverlay2:"IAgStkGraphicsGlobeImageOverlay") -> None:
        """Swaps the position of two globe image overlay objects."""
        with agmarshall.AgInterface_in_arg(imageryOverlay1, IAgStkGraphicsGlobeImageOverlay) as arg_imageryOverlay1, \
             agmarshall.AgInterface_in_arg(imageryOverlay2, IAgStkGraphicsGlobeImageOverlay) as arg_imageryOverlay2:
            agcls.evaluate_hresult(self.__dict__["_Swap"](arg_imageryOverlay1.COM_val, arg_imageryOverlay2.COM_val))

    def SwapByIndex(self, index1:int, index2:int) -> None:
        """Swaps the position of two globe image overlay objects at the specified indices."""
        with agmarshall.INT_arg(index1) as arg_index1, \
             agmarshall.INT_arg(index2) as arg_index2:
            agcls.evaluate_hresult(self.__dict__["_SwapByIndex"](arg_index1.COM_val, arg_index2.COM_val))

    def Move(self, imageryOverlay:"IAgStkGraphicsGlobeImageOverlay", newPosition:int) -> None:
        """Moves the globe image overlay to the specified position."""
        with agmarshall.AgInterface_in_arg(imageryOverlay, IAgStkGraphicsGlobeImageOverlay) as arg_imageryOverlay, \
             agmarshall.INT_arg(newPosition) as arg_newPosition:
            agcls.evaluate_hresult(self.__dict__["_Move"](arg_imageryOverlay.COM_val, arg_newPosition.COM_val))

    def MoveByIndex(self, index:int, newPosition:int) -> None:
        """Moves the globe image overlay at the specified index to the specified position."""
        with agmarshall.INT_arg(index) as arg_index, \
             agmarshall.INT_arg(newPosition) as arg_newPosition:
            agcls.evaluate_hresult(self.__dict__["_MoveByIndex"](arg_index.COM_val, arg_newPosition.COM_val))

    def BringToFront(self, imageryOverlay:"IAgStkGraphicsGlobeImageOverlay") -> None:
        """Brings the globe image overlay to the front of the collection so it is rendered first or on the bottom."""
        with agmarshall.AgInterface_in_arg(imageryOverlay, IAgStkGraphicsGlobeImageOverlay) as arg_imageryOverlay:
            agcls.evaluate_hresult(self.__dict__["_BringToFront"](arg_imageryOverlay.COM_val))

    def SendToBack(self, imageryOverlay:"IAgStkGraphicsGlobeImageOverlay") -> None:
        """Sends the globe image overlay to the back of the collection so it is rendered last or on the top."""
        with agmarshall.AgInterface_in_arg(imageryOverlay, IAgStkGraphicsGlobeImageOverlay) as arg_imageryOverlay:
            agcls.evaluate_hresult(self.__dict__["_SendToBack"](arg_imageryOverlay.COM_val))

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{797b7253-9205-47a1-b49b-edf6e06326c0}", IAgStkGraphicsImageCollection)
agcls.AgTypeNameMap["IAgStkGraphicsImageCollection"] = IAgStkGraphicsImageCollection
__all__.append("IAgStkGraphicsImageCollection")

class IAgStkGraphicsAlphaFromLuminanceFilter(object):
    """Adds an alpha band to the source raster derived from the luminance of the raster's color bands."""
    _uuid = "{9ee1933e-8f0d-4fca-8386-e03194e483da}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsAlphaFromLuminanceFilter._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsAlphaFromLuminanceFilter from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsAlphaFromLuminanceFilter = agcom.GUID(IAgStkGraphicsAlphaFromLuminanceFilter._uuid)
        vtable_offset_local = IAgStkGraphicsAlphaFromLuminanceFilter._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsAlphaFromLuminanceFilter.__dict__ and type(IAgStkGraphicsAlphaFromLuminanceFilter.__dict__[attrname]) == property:
            return IAgStkGraphicsAlphaFromLuminanceFilter.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsAlphaFromLuminanceFilter.")
    

agcls.AgClassCatalog.add_catalog_entry("{9ee1933e-8f0d-4fca-8386-e03194e483da}", IAgStkGraphicsAlphaFromLuminanceFilter)
agcls.AgTypeNameMap["IAgStkGraphicsAlphaFromLuminanceFilter"] = IAgStkGraphicsAlphaFromLuminanceFilter
__all__.append("IAgStkGraphicsAlphaFromLuminanceFilter")

class IAgStkGraphicsAlphaFromPixelFilter(object):
    """Adds an alpha band to the source raster based on the value of its first pixel. All pixels in the source raster that are the same color as the first pixel will be made transparent."""
    _uuid = "{071460a3-f86a-4c28-b2bf-22946db06ac8}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsAlphaFromPixelFilter._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsAlphaFromPixelFilter from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsAlphaFromPixelFilter = agcom.GUID(IAgStkGraphicsAlphaFromPixelFilter._uuid)
        vtable_offset_local = IAgStkGraphicsAlphaFromPixelFilter._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsAlphaFromPixelFilter.__dict__ and type(IAgStkGraphicsAlphaFromPixelFilter.__dict__[attrname]) == property:
            return IAgStkGraphicsAlphaFromPixelFilter.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsAlphaFromPixelFilter.")
    

agcls.AgClassCatalog.add_catalog_entry("{071460a3-f86a-4c28-b2bf-22946db06ac8}", IAgStkGraphicsAlphaFromPixelFilter)
agcls.AgTypeNameMap["IAgStkGraphicsAlphaFromPixelFilter"] = IAgStkGraphicsAlphaFromPixelFilter
__all__.append("IAgStkGraphicsAlphaFromPixelFilter")

class IAgStkGraphicsAlphaFromRasterFilter(object):
    """Adds an alpha band to the source raster derived from the color bands or alpha of another raster. This filter can be used to apply an alpha mask to the source raster."""
    _uuid = "{77326f5e-c3f3-4660-8df4-6225cfdc0870}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetRaster"] = _raise_uninitialized_error
        self.__dict__["_SetRaster"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsAlphaFromRasterFilter._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsAlphaFromRasterFilter from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsAlphaFromRasterFilter = agcom.GUID(IAgStkGraphicsAlphaFromRasterFilter._uuid)
        vtable_offset_local = IAgStkGraphicsAlphaFromRasterFilter._vtable_offset - 1
        self.__dict__["_GetRaster"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsAlphaFromRasterFilter, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_SetRaster"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsAlphaFromRasterFilter, vtable_offset_local+2, agcom.PVOID)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsAlphaFromRasterFilter.__dict__ and type(IAgStkGraphicsAlphaFromRasterFilter.__dict__[attrname]) == property:
            return IAgStkGraphicsAlphaFromRasterFilter.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsAlphaFromRasterFilter.")
    
    @property
    def Raster(self) -> "IAgStkGraphicsRaster":
        """Gets or sets the raster that the source raster will use to derive an alpha band."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetRaster"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @Raster.setter
    def Raster(self, raster:"IAgStkGraphicsRaster") -> None:
        with agmarshall.AgInterface_in_arg(raster, IAgStkGraphicsRaster) as arg_raster:
            agcls.evaluate_hresult(self.__dict__["_SetRaster"](arg_raster.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{77326f5e-c3f3-4660-8df4-6225cfdc0870}", IAgStkGraphicsAlphaFromRasterFilter)
agcls.AgTypeNameMap["IAgStkGraphicsAlphaFromRasterFilter"] = IAgStkGraphicsAlphaFromRasterFilter
__all__.append("IAgStkGraphicsAlphaFromRasterFilter")

class IAgStkGraphicsBandExtractFilter(object):
    """Extracts a band or set of bands from the source raster. The extract format property specifies the bands and the order of the bands that will be extracted."""
    _uuid = "{68723ebb-619a-4d11-bb5a-27200ef0e15c}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetExtractFormat"] = _raise_uninitialized_error
        self.__dict__["_SetExtractFormat"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsBandExtractFilter._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsBandExtractFilter from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsBandExtractFilter = agcom.GUID(IAgStkGraphicsBandExtractFilter._uuid)
        vtable_offset_local = IAgStkGraphicsBandExtractFilter._vtable_offset - 1
        self.__dict__["_GetExtractFormat"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsBandExtractFilter, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetExtractFormat"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsBandExtractFilter, vtable_offset_local+2, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsBandExtractFilter.__dict__ and type(IAgStkGraphicsBandExtractFilter.__dict__[attrname]) == property:
            return IAgStkGraphicsBandExtractFilter.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsBandExtractFilter.")
    
    @property
    def ExtractFormat(self) -> "AgEStkGraphicsRasterFormat":
        """Gets or sets the raster format containing the bands and the order of the bands that will be extracted."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsRasterFormat) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetExtractFormat"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @ExtractFormat.setter
    def ExtractFormat(self, extractFormat:"AgEStkGraphicsRasterFormat") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsRasterFormat, extractFormat) as arg_extractFormat:
            agcls.evaluate_hresult(self.__dict__["_SetExtractFormat"](arg_extractFormat.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{68723ebb-619a-4d11-bb5a-27200ef0e15c}", IAgStkGraphicsBandExtractFilter)
agcls.AgTypeNameMap["IAgStkGraphicsBandExtractFilter"] = IAgStkGraphicsBandExtractFilter
__all__.append("IAgStkGraphicsBandExtractFilter")

class IAgStkGraphicsBandOrderFilter(object):
    """Reorders or swizzles the bands of the source raster to match the band order of the raster format specified by the band order property. When maintain raster format is true, the source raster's format is maintained after swizzling."""
    _uuid = "{a4a76805-e8e4-4bb6-878c-dcb0da6d84d3}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetBandOrder"] = _raise_uninitialized_error
        self.__dict__["_SetBandOrder"] = _raise_uninitialized_error
        self.__dict__["_GetMaintainRasterFormat"] = _raise_uninitialized_error
        self.__dict__["_SetMaintainRasterFormat"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsBandOrderFilter._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsBandOrderFilter from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsBandOrderFilter = agcom.GUID(IAgStkGraphicsBandOrderFilter._uuid)
        vtable_offset_local = IAgStkGraphicsBandOrderFilter._vtable_offset - 1
        self.__dict__["_GetBandOrder"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsBandOrderFilter, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetBandOrder"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsBandOrderFilter, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetMaintainRasterFormat"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsBandOrderFilter, vtable_offset_local+3, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetMaintainRasterFormat"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsBandOrderFilter, vtable_offset_local+4, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsBandOrderFilter.__dict__ and type(IAgStkGraphicsBandOrderFilter.__dict__[attrname]) == property:
            return IAgStkGraphicsBandOrderFilter.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsBandOrderFilter.")
    
    @property
    def BandOrder(self) -> "AgEStkGraphicsRasterFormat":
        """Gets or sets the raster format indicating the desired order of the bands in the source raster."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsRasterFormat) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBandOrder"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @BandOrder.setter
    def BandOrder(self, bandOrder:"AgEStkGraphicsRasterFormat") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsRasterFormat, bandOrder) as arg_bandOrder:
            agcls.evaluate_hresult(self.__dict__["_SetBandOrder"](arg_bandOrder.COM_val))

    @property
    def MaintainRasterFormat(self) -> bool:
        """Gets or sets a value indicating whether to maintain the source raster's format after the filter is applied. When true, the source raster's format is maintained after swizzling."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaintainRasterFormat"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @MaintainRasterFormat.setter
    def MaintainRasterFormat(self, maintainRasterFormat:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(maintainRasterFormat) as arg_maintainRasterFormat:
            agcls.evaluate_hresult(self.__dict__["_SetMaintainRasterFormat"](arg_maintainRasterFormat.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{a4a76805-e8e4-4bb6-878c-dcb0da6d84d3}", IAgStkGraphicsBandOrderFilter)
agcls.AgTypeNameMap["IAgStkGraphicsBandOrderFilter"] = IAgStkGraphicsBandOrderFilter
__all__.append("IAgStkGraphicsBandOrderFilter")

class IAgStkGraphicsBlurFilter(object):
    """Applies a convolution filter to blur or smooth the source raster. Can be used to reduce noise in the raster."""
    _uuid = "{78e623b1-dc80-478d-acb8-a552fa136ccc}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetMethod"] = _raise_uninitialized_error
        self.__dict__["_SetMethod"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsBlurFilter._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsBlurFilter from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsBlurFilter = agcom.GUID(IAgStkGraphicsBlurFilter._uuid)
        vtable_offset_local = IAgStkGraphicsBlurFilter._vtable_offset - 1
        self.__dict__["_GetMethod"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsBlurFilter, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetMethod"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsBlurFilter, vtable_offset_local+2, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsBlurFilter.__dict__ and type(IAgStkGraphicsBlurFilter.__dict__[attrname]) == property:
            return IAgStkGraphicsBlurFilter.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsBlurFilter.")
    
    @property
    def Method(self) -> "AgEStkGraphicsBlurMethod":
        """Gets or sets the method used to blur the source raster."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsBlurMethod) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMethod"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Method.setter
    def Method(self, method:"AgEStkGraphicsBlurMethod") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsBlurMethod, method) as arg_method:
            agcls.evaluate_hresult(self.__dict__["_SetMethod"](arg_method.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{78e623b1-dc80-478d-acb8-a552fa136ccc}", IAgStkGraphicsBlurFilter)
agcls.AgTypeNameMap["IAgStkGraphicsBlurFilter"] = IAgStkGraphicsBlurFilter
__all__.append("IAgStkGraphicsBlurFilter")

class IAgStkGraphicsBrightnessFilter(object):
    """Adjusts the brightness of the source raster's color bands. The adjustment to brightness is a value between -1 and 1, corresponding to least bright to most bright."""
    _uuid = "{fd8324ea-dbc2-42a5-88ba-c2769fd4a28e}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAdjustment"] = _raise_uninitialized_error
        self.__dict__["_SetAdjustment"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsBrightnessFilter._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsBrightnessFilter from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsBrightnessFilter = agcom.GUID(IAgStkGraphicsBrightnessFilter._uuid)
        vtable_offset_local = IAgStkGraphicsBrightnessFilter._vtable_offset - 1
        self.__dict__["_GetAdjustment"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsBrightnessFilter, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAdjustment"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsBrightnessFilter, vtable_offset_local+2, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsBrightnessFilter.__dict__ and type(IAgStkGraphicsBrightnessFilter.__dict__[attrname]) == property:
            return IAgStkGraphicsBrightnessFilter.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsBrightnessFilter.")
    
    @property
    def Adjustment(self) -> float:
        """Gets or sets the brightness adjustment value for the filter. The value must be between -1 and 1, corresponding to least bright to most bright."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAdjustment"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Adjustment.setter
    def Adjustment(self, adjustment:float) -> None:
        with agmarshall.DOUBLE_arg(adjustment) as arg_adjustment:
            agcls.evaluate_hresult(self.__dict__["_SetAdjustment"](arg_adjustment.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{fd8324ea-dbc2-42a5-88ba-c2769fd4a28e}", IAgStkGraphicsBrightnessFilter)
agcls.AgTypeNameMap["IAgStkGraphicsBrightnessFilter"] = IAgStkGraphicsBrightnessFilter
__all__.append("IAgStkGraphicsBrightnessFilter")

class IAgStkGraphicsColorToLuminanceFilter(object):
    """Extracts a luminance band derived from the color bands of the source raster."""
    _uuid = "{bc1d198f-705b-452b-8e51-1c600c547594}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsColorToLuminanceFilter._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsColorToLuminanceFilter from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsColorToLuminanceFilter = agcom.GUID(IAgStkGraphicsColorToLuminanceFilter._uuid)
        vtable_offset_local = IAgStkGraphicsColorToLuminanceFilter._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsColorToLuminanceFilter.__dict__ and type(IAgStkGraphicsColorToLuminanceFilter.__dict__[attrname]) == property:
            return IAgStkGraphicsColorToLuminanceFilter.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsColorToLuminanceFilter.")
    

agcls.AgClassCatalog.add_catalog_entry("{bc1d198f-705b-452b-8e51-1c600c547594}", IAgStkGraphicsColorToLuminanceFilter)
agcls.AgTypeNameMap["IAgStkGraphicsColorToLuminanceFilter"] = IAgStkGraphicsColorToLuminanceFilter
__all__.append("IAgStkGraphicsColorToLuminanceFilter")

class IAgStkGraphicsContrastFilter(object):
    """Adjusts the contrast of the source raster. The adjustment to contrast is a value between -1 and 1, corresponding to least contrast to most contrast."""
    _uuid = "{47ea43c3-5ffd-4935-8569-bb19ee6b0799}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAdjustment"] = _raise_uninitialized_error
        self.__dict__["_SetAdjustment"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsContrastFilter._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsContrastFilter from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsContrastFilter = agcom.GUID(IAgStkGraphicsContrastFilter._uuid)
        vtable_offset_local = IAgStkGraphicsContrastFilter._vtable_offset - 1
        self.__dict__["_GetAdjustment"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsContrastFilter, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAdjustment"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsContrastFilter, vtable_offset_local+2, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsContrastFilter.__dict__ and type(IAgStkGraphicsContrastFilter.__dict__[attrname]) == property:
            return IAgStkGraphicsContrastFilter.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsContrastFilter.")
    
    @property
    def Adjustment(self) -> float:
        """Gets or sets the contrast adjustment value for the filter. The value must be between -1 and 1, corresponding to least contrast to most contrast."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAdjustment"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Adjustment.setter
    def Adjustment(self, adjustment:float) -> None:
        with agmarshall.DOUBLE_arg(adjustment) as arg_adjustment:
            agcls.evaluate_hresult(self.__dict__["_SetAdjustment"](arg_adjustment.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{47ea43c3-5ffd-4935-8569-bb19ee6b0799}", IAgStkGraphicsContrastFilter)
agcls.AgTypeNameMap["IAgStkGraphicsContrastFilter"] = IAgStkGraphicsContrastFilter
__all__.append("IAgStkGraphicsContrastFilter")

class IAgStkGraphicsConvolutionFilter(object):
    """Applies convolution to the source raster. Convolution is the modification of a pixel's value based on the values of its surrounding pixels. The kernel is the numerical matrix that is applied to each pixel in this process..."""
    _uuid = "{65e3646d-dfac-40af-b37f-15596ef13292}"
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetDivisor"] = _raise_uninitialized_error
        self.__dict__["_SetDivisor"] = _raise_uninitialized_error
        self.__dict__["_GetOffset"] = _raise_uninitialized_error
        self.__dict__["_SetOffset"] = _raise_uninitialized_error
        self.__dict__["_GetKernel"] = _raise_uninitialized_error
        self.__dict__["_SetKernel"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsConvolutionFilter._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsConvolutionFilter from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsConvolutionFilter = agcom.GUID(IAgStkGraphicsConvolutionFilter._uuid)
        vtable_offset_local = IAgStkGraphicsConvolutionFilter._vtable_offset - 1
        self.__dict__["_GetDivisor"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsConvolutionFilter, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDivisor"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsConvolutionFilter, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetOffset"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsConvolutionFilter, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetOffset"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsConvolutionFilter, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetKernel"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsConvolutionFilter, vtable_offset_local+5, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetKernel"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsConvolutionFilter, vtable_offset_local+6, agcom.SAFEARRAY)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsConvolutionFilter.__dict__ and type(IAgStkGraphicsConvolutionFilter.__dict__[attrname]) == property:
            return IAgStkGraphicsConvolutionFilter.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsConvolutionFilter.")
    
    @property
    def Divisor(self) -> float:
        """Gets or sets the divisor for the result of the convolution kernel operation."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDivisor"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Divisor.setter
    def Divisor(self, divisor:float) -> None:
        with agmarshall.DOUBLE_arg(divisor) as arg_divisor:
            agcls.evaluate_hresult(self.__dict__["_SetDivisor"](arg_divisor.COM_val))

    @property
    def Offset(self) -> float:
        """Gets or sets the offset for the result of the convolution kernel operation. The value is added to the result of the operation."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetOffset"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Offset.setter
    def Offset(self, offset:float) -> None:
        with agmarshall.DOUBLE_arg(offset) as arg_offset:
            agcls.evaluate_hresult(self.__dict__["_SetOffset"](arg_offset.COM_val))

    @property
    def Kernel(self) -> list:
        """Gets or sets the convolution kernel of the filter. The array contains the 9 elements of the kernel of the convolution matrix..."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetKernel"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @Kernel.setter
    def Kernel(self, kernel:list) -> None:
        with agmarshall.SAFEARRAY_arg(kernel) as arg_kernel:
            agcls.evaluate_hresult(self.__dict__["_SetKernel"](arg_kernel.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{65e3646d-dfac-40af-b37f-15596ef13292}", IAgStkGraphicsConvolutionFilter)
agcls.AgTypeNameMap["IAgStkGraphicsConvolutionFilter"] = IAgStkGraphicsConvolutionFilter
__all__.append("IAgStkGraphicsConvolutionFilter")

class IAgStkGraphicsEdgeDetectFilter(object):
    """Applies a convolution filter to detect edges in the source raster."""
    _uuid = "{0919d5b6-9497-4027-9fa2-69afe60c5f02}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetMethod"] = _raise_uninitialized_error
        self.__dict__["_SetMethod"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsEdgeDetectFilter._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsEdgeDetectFilter from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsEdgeDetectFilter = agcom.GUID(IAgStkGraphicsEdgeDetectFilter._uuid)
        vtable_offset_local = IAgStkGraphicsEdgeDetectFilter._vtable_offset - 1
        self.__dict__["_GetMethod"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsEdgeDetectFilter, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetMethod"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsEdgeDetectFilter, vtable_offset_local+2, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsEdgeDetectFilter.__dict__ and type(IAgStkGraphicsEdgeDetectFilter.__dict__[attrname]) == property:
            return IAgStkGraphicsEdgeDetectFilter.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsEdgeDetectFilter.")
    
    @property
    def Method(self) -> "AgEStkGraphicsEdgeDetectMethod":
        """Gets or sets the method used to detect edges in the source raster."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsEdgeDetectMethod) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMethod"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Method.setter
    def Method(self, method:"AgEStkGraphicsEdgeDetectMethod") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsEdgeDetectMethod, method) as arg_method:
            agcls.evaluate_hresult(self.__dict__["_SetMethod"](arg_method.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{0919d5b6-9497-4027-9fa2-69afe60c5f02}", IAgStkGraphicsEdgeDetectFilter)
agcls.AgTypeNameMap["IAgStkGraphicsEdgeDetectFilter"] = IAgStkGraphicsEdgeDetectFilter
__all__.append("IAgStkGraphicsEdgeDetectFilter")

class IAgStkGraphicsFilteringRasterStream(object):
    """A class decorator for applying a raster filter to each update of a raster stream. Can be used to apply filters to videos and other raster streams as they are updated."""
    _uuid = "{75917a6b-c2f9-4350-879a-248bcc239e6b}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetFilter"] = _raise_uninitialized_error
        self.__dict__["_GetStream"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsFilteringRasterStream._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsFilteringRasterStream from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsFilteringRasterStream = agcom.GUID(IAgStkGraphicsFilteringRasterStream._uuid)
        vtable_offset_local = IAgStkGraphicsFilteringRasterStream._vtable_offset - 1
        self.__dict__["_GetFilter"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFilteringRasterStream, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetStream"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFilteringRasterStream, vtable_offset_local+2, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsFilteringRasterStream.__dict__ and type(IAgStkGraphicsFilteringRasterStream.__dict__[attrname]) == property:
            return IAgStkGraphicsFilteringRasterStream.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsFilteringRasterStream.")
    
    @property
    def Filter(self) -> "IAgStkGraphicsRasterFilter":
        """Gets the raster filter that will be applied to the raster stream on each update."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetFilter"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Stream(self) -> "IAgStkGraphicsRasterStream":
        """Gets the raster stream that will have the raster filter applied on each update."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetStream"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{75917a6b-c2f9-4350-879a-248bcc239e6b}", IAgStkGraphicsFilteringRasterStream)
agcls.AgTypeNameMap["IAgStkGraphicsFilteringRasterStream"] = IAgStkGraphicsFilteringRasterStream
__all__.append("IAgStkGraphicsFilteringRasterStream")

class IAgStkGraphicsFlipFilter(object):
    """Flips the source raster along the given flip axis."""
    _uuid = "{478edb08-272a-42b6-b486-a81a5bcaf92b}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetFlipAxis"] = _raise_uninitialized_error
        self.__dict__["_SetFlipAxis"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsFlipFilter._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsFlipFilter from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsFlipFilter = agcom.GUID(IAgStkGraphicsFlipFilter._uuid)
        vtable_offset_local = IAgStkGraphicsFlipFilter._vtable_offset - 1
        self.__dict__["_GetFlipAxis"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFlipFilter, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetFlipAxis"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFlipFilter, vtable_offset_local+2, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsFlipFilter.__dict__ and type(IAgStkGraphicsFlipFilter.__dict__[attrname]) == property:
            return IAgStkGraphicsFlipFilter.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsFlipFilter.")
    
    @property
    def FlipAxis(self) -> "AgEStkGraphicsFlipAxis":
        """Gets or sets the flip axis along which the source raster will be flipped."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsFlipAxis) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetFlipAxis"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @FlipAxis.setter
    def FlipAxis(self, flipAxis:"AgEStkGraphicsFlipAxis") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsFlipAxis, flipAxis) as arg_flipAxis:
            agcls.evaluate_hresult(self.__dict__["_SetFlipAxis"](arg_flipAxis.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{478edb08-272a-42b6-b486-a81a5bcaf92b}", IAgStkGraphicsFlipFilter)
agcls.AgTypeNameMap["IAgStkGraphicsFlipFilter"] = IAgStkGraphicsFlipFilter
__all__.append("IAgStkGraphicsFlipFilter")

class IAgStkGraphicsGammaCorrectionFilter(object):
    """Applies gamma correction to the source raster. The gamma is a value between .2 and 5. The default gamma value is 2.2."""
    _uuid = "{c4b3703d-c059-47c7-8b49-11bbedd7975a}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetGamma"] = _raise_uninitialized_error
        self.__dict__["_SetGamma"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsGammaCorrectionFilter._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsGammaCorrectionFilter from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsGammaCorrectionFilter = agcom.GUID(IAgStkGraphicsGammaCorrectionFilter._uuid)
        vtable_offset_local = IAgStkGraphicsGammaCorrectionFilter._vtable_offset - 1
        self.__dict__["_GetGamma"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsGammaCorrectionFilter, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetGamma"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsGammaCorrectionFilter, vtable_offset_local+2, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsGammaCorrectionFilter.__dict__ and type(IAgStkGraphicsGammaCorrectionFilter.__dict__[attrname]) == property:
            return IAgStkGraphicsGammaCorrectionFilter.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsGammaCorrectionFilter.")
    
    @property
    def Gamma(self) -> float:
        """Gets or sets the gamma value for the filter. The value must be between .2 and 5. The default gamma value is 2.2."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetGamma"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Gamma.setter
    def Gamma(self, gamma:float) -> None:
        with agmarshall.DOUBLE_arg(gamma) as arg_gamma:
            agcls.evaluate_hresult(self.__dict__["_SetGamma"](arg_gamma.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{c4b3703d-c059-47c7-8b49-11bbedd7975a}", IAgStkGraphicsGammaCorrectionFilter)
agcls.AgTypeNameMap["IAgStkGraphicsGammaCorrectionFilter"] = IAgStkGraphicsGammaCorrectionFilter
__all__.append("IAgStkGraphicsGammaCorrectionFilter")

class IAgStkGraphicsGaussianBlurFilter(object):
    """Applies a convolution filter to blur the source raster using the Gaussian function."""
    _uuid = "{b5b0a55e-980a-453f-b7b4-7c7024f92ef4}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsGaussianBlurFilter._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsGaussianBlurFilter from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsGaussianBlurFilter = agcom.GUID(IAgStkGraphicsGaussianBlurFilter._uuid)
        vtable_offset_local = IAgStkGraphicsGaussianBlurFilter._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsGaussianBlurFilter.__dict__ and type(IAgStkGraphicsGaussianBlurFilter.__dict__[attrname]) == property:
            return IAgStkGraphicsGaussianBlurFilter.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsGaussianBlurFilter.")
    

agcls.AgClassCatalog.add_catalog_entry("{b5b0a55e-980a-453f-b7b4-7c7024f92ef4}", IAgStkGraphicsGaussianBlurFilter)
agcls.AgTypeNameMap["IAgStkGraphicsGaussianBlurFilter"] = IAgStkGraphicsGaussianBlurFilter
__all__.append("IAgStkGraphicsGaussianBlurFilter")

class IAgStkGraphicsGradientDetectFilter(object):
    """Applies a convolution filter to detect gradients in the source raster."""
    _uuid = "{5a9e0d4c-4f36-47c8-8f81-ffdfe63cb112}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetMethod"] = _raise_uninitialized_error
        self.__dict__["_SetMethod"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsGradientDetectFilter._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsGradientDetectFilter from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsGradientDetectFilter = agcom.GUID(IAgStkGraphicsGradientDetectFilter._uuid)
        vtable_offset_local = IAgStkGraphicsGradientDetectFilter._vtable_offset - 1
        self.__dict__["_GetMethod"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsGradientDetectFilter, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetMethod"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsGradientDetectFilter, vtable_offset_local+2, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsGradientDetectFilter.__dict__ and type(IAgStkGraphicsGradientDetectFilter.__dict__[attrname]) == property:
            return IAgStkGraphicsGradientDetectFilter.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsGradientDetectFilter.")
    
    @property
    def Method(self) -> "AgEStkGraphicsGradientDetectMethod":
        """Gets or sets the method used to detect gradients in the source raster."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsGradientDetectMethod) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMethod"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Method.setter
    def Method(self, method:"AgEStkGraphicsGradientDetectMethod") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsGradientDetectMethod, method) as arg_method:
            agcls.evaluate_hresult(self.__dict__["_SetMethod"](arg_method.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{5a9e0d4c-4f36-47c8-8f81-ffdfe63cb112}", IAgStkGraphicsGradientDetectFilter)
agcls.AgTypeNameMap["IAgStkGraphicsGradientDetectFilter"] = IAgStkGraphicsGradientDetectFilter
__all__.append("IAgStkGraphicsGradientDetectFilter")

class IAgStkGraphicsLevelsFilter(object):
    """Adjusts the band levels of the source raster linearly."""
    _uuid = "{e0d6dad5-cfcb-476a-95fd-2cd486114a68}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_SetLevelAdjustment"] = _raise_uninitialized_error
        self.__dict__["_ClearAdjustments"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsLevelsFilter._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsLevelsFilter from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsLevelsFilter = agcom.GUID(IAgStkGraphicsLevelsFilter._uuid)
        vtable_offset_local = IAgStkGraphicsLevelsFilter._vtable_offset - 1
        self.__dict__["_SetLevelAdjustment"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsLevelsFilter, vtable_offset_local+1, agcom.LONG, agcom.INT)
        self.__dict__["_ClearAdjustments"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsLevelsFilter, vtable_offset_local+2, )
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsLevelsFilter.__dict__ and type(IAgStkGraphicsLevelsFilter.__dict__[attrname]) == property:
            return IAgStkGraphicsLevelsFilter.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsLevelsFilter.")
    
    def SetLevelAdjustment(self, band:"AgEStkGraphicsRasterBand", adjustment:int) -> None:
        """Sets the linear level adjustment value for the given raster band. Both negative and positive values are accepted."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsRasterBand, band) as arg_band, \
             agmarshall.INT_arg(adjustment) as arg_adjustment:
            agcls.evaluate_hresult(self.__dict__["_SetLevelAdjustment"](arg_band.COM_val, arg_adjustment.COM_val))

    def ClearAdjustments(self) -> None:
        """Clears the level adjustment values for all bands."""
        agcls.evaluate_hresult(self.__dict__["_ClearAdjustments"]())


agcls.AgClassCatalog.add_catalog_entry("{e0d6dad5-cfcb-476a-95fd-2cd486114a68}", IAgStkGraphicsLevelsFilter)
agcls.AgTypeNameMap["IAgStkGraphicsLevelsFilter"] = IAgStkGraphicsLevelsFilter
__all__.append("IAgStkGraphicsLevelsFilter")

class IAgStkGraphicsProjectionRasterStreamPluginActivator(object):
    """The Activator class provides methods to load COM plugins that implement projection and raster streaming. For more information about the projection and raster plugins, see the STK Programming Interface."""
    _uuid = "{0c1e9236-42e6-4539-9003-06e06f906432}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_CreateFromDisplayName"] = _raise_uninitialized_error
        self.__dict__["_GetAvailableDisplayNames"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsProjectionRasterStreamPluginActivator._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsProjectionRasterStreamPluginActivator from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsProjectionRasterStreamPluginActivator = agcom.GUID(IAgStkGraphicsProjectionRasterStreamPluginActivator._uuid)
        vtable_offset_local = IAgStkGraphicsProjectionRasterStreamPluginActivator._vtable_offset - 1
        self.__dict__["_CreateFromDisplayName"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsProjectionRasterStreamPluginActivator, vtable_offset_local+1, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_GetAvailableDisplayNames"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsProjectionRasterStreamPluginActivator, vtable_offset_local+2, POINTER(agcom.SAFEARRAY))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsProjectionRasterStreamPluginActivator.__dict__ and type(IAgStkGraphicsProjectionRasterStreamPluginActivator.__dict__[attrname]) == property:
            return IAgStkGraphicsProjectionRasterStreamPluginActivator.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsProjectionRasterStreamPluginActivator.")
    
    def CreateFromDisplayName(self, displayName:str) -> "IAgStkGraphicsProjectionRasterStreamPluginProxy":
        """Loads a projection/raster COM plugin associated with the specified display name and returns a proxy object that allows accessing the raster and projection streams implemented by the plugin."""
        with agmarshall.BSTR_arg(displayName) as arg_displayName, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_CreateFromDisplayName"](arg_displayName.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def GetAvailableDisplayNames(self) -> list:
        """Gets a list of available projection/raster plugins' Display Names (Programmatic Identifiers)."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAvailableDisplayNames"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{0c1e9236-42e6-4539-9003-06e06f906432}", IAgStkGraphicsProjectionRasterStreamPluginActivator)
agcls.AgTypeNameMap["IAgStkGraphicsProjectionRasterStreamPluginActivator"] = IAgStkGraphicsProjectionRasterStreamPluginActivator
__all__.append("IAgStkGraphicsProjectionRasterStreamPluginActivator")

class IAgStkGraphicsProjectionRasterStreamPluginProxy(object):
    """A proxy class provides access to the raster and projection streams implemented by a plugin. Proxies are instantiated using projection raster stream plugin activator."""
    _uuid = "{5a28d922-9211-4860-81ae-0d98d38ca6d7}"
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetRasterStream"] = _raise_uninitialized_error
        self.__dict__["_GetProjectionStream"] = _raise_uninitialized_error
        self.__dict__["_GetIsRasterStreamSupported"] = _raise_uninitialized_error
        self.__dict__["_GetIsProjectionStreamSupported"] = _raise_uninitialized_error
        self.__dict__["_GetRealPluginObject"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsProjectionRasterStreamPluginProxy._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsProjectionRasterStreamPluginProxy from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsProjectionRasterStreamPluginProxy = agcom.GUID(IAgStkGraphicsProjectionRasterStreamPluginProxy._uuid)
        vtable_offset_local = IAgStkGraphicsProjectionRasterStreamPluginProxy._vtable_offset - 1
        self.__dict__["_GetRasterStream"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsProjectionRasterStreamPluginProxy, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetProjectionStream"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsProjectionRasterStreamPluginProxy, vtable_offset_local+2, POINTER(agcom.PVOID))
        self.__dict__["_GetIsRasterStreamSupported"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsProjectionRasterStreamPluginProxy, vtable_offset_local+3, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetIsProjectionStreamSupported"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsProjectionRasterStreamPluginProxy, vtable_offset_local+4, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetRealPluginObject"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsProjectionRasterStreamPluginProxy, vtable_offset_local+5, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsProjectionRasterStreamPluginProxy.__dict__ and type(IAgStkGraphicsProjectionRasterStreamPluginProxy.__dict__[attrname]) == property:
            return IAgStkGraphicsProjectionRasterStreamPluginProxy.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsProjectionRasterStreamPluginProxy.")
    
    @property
    def RasterStream(self) -> "IAgStkGraphicsRasterStream":
        """Returns a raster stream."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetRasterStream"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def ProjectionStream(self) -> "IAgStkGraphicsProjectionStream":
        """Returns a projection stream."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetProjectionStream"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def IsRasterStreamSupported(self) -> bool:
        """Returns true if the raster streaming is supported."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetIsRasterStreamSupported"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def IsProjectionStreamSupported(self) -> bool:
        """Returns true if the projection streaming is supported."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetIsProjectionStreamSupported"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def RealPluginObject(self) -> typing.Any:
        """Returns a pointer to plugin object's IUnknown interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetRealPluginObject"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{5a28d922-9211-4860-81ae-0d98d38ca6d7}", IAgStkGraphicsProjectionRasterStreamPluginProxy)
agcls.AgTypeNameMap["IAgStkGraphicsProjectionRasterStreamPluginProxy"] = IAgStkGraphicsProjectionRasterStreamPluginProxy
__all__.append("IAgStkGraphicsProjectionRasterStreamPluginProxy")

class IAgStkGraphicsRaster(object):
    """A raster dataset. A raster consists of one or more bands, or sets of values, which are most commonly associated with colors when the raster represents an image..."""
    _uuid = "{e0113161-7dd5-4411-bca9-6175aad19b4e}"
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAttributes"] = _raise_uninitialized_error
        self.__dict__["_GetWidth"] = _raise_uninitialized_error
        self.__dict__["_GetHeight"] = _raise_uninitialized_error
        self.__dict__["_Flip"] = _raise_uninitialized_error
        self.__dict__["_Rotate"] = _raise_uninitialized_error
        self.__dict__["_Apply"] = _raise_uninitialized_error
        self.__dict__["_ApplyInPlace"] = _raise_uninitialized_error
        self.__dict__["_ExtractBand"] = _raise_uninitialized_error
        self.__dict__["_ExtractBandFromRasterFormat"] = _raise_uninitialized_error
        self.__dict__["_CopyFromRaster"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsRaster._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsRaster from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsRaster = agcom.GUID(IAgStkGraphicsRaster._uuid)
        vtable_offset_local = IAgStkGraphicsRaster._vtable_offset - 1
        self.__dict__["_GetAttributes"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsRaster, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetWidth"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsRaster, vtable_offset_local+2, POINTER(agcom.INT))
        self.__dict__["_GetHeight"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsRaster, vtable_offset_local+3, POINTER(agcom.INT))
        self.__dict__["_Flip"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsRaster, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_Rotate"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsRaster, vtable_offset_local+5, agcom.DOUBLE)
        self.__dict__["_Apply"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsRaster, vtable_offset_local+6, agcom.PVOID, POINTER(agcom.PVOID))
        self.__dict__["_ApplyInPlace"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsRaster, vtable_offset_local+7, agcom.PVOID)
        self.__dict__["_ExtractBand"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsRaster, vtable_offset_local+8, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_ExtractBandFromRasterFormat"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsRaster, vtable_offset_local+9, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_CopyFromRaster"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsRaster, vtable_offset_local+10, agcom.PVOID)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsRaster.__dict__ and type(IAgStkGraphicsRaster.__dict__[attrname]) == property:
            return IAgStkGraphicsRaster.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsRaster.")
    
    @property
    def Attributes(self) -> "IAgStkGraphicsRasterAttributes":
        """Gets the raster attributes that define the raster data."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAttributes"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Width(self) -> int:
        """Gets the width of the raster in pixels."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetWidth"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Height(self) -> int:
        """Gets the height of the raster in pixels."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetHeight"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def Flip(self, axis:"AgEStkGraphicsFlipAxis") -> None:
        """Flips the raster along the given axis."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsFlipAxis, axis) as arg_axis:
            agcls.evaluate_hresult(self.__dict__["_Flip"](arg_axis.COM_val))

    def Rotate(self, angle:float) -> None:
        """Rotates the raster by the given angle."""
        with agmarshall.DOUBLE_arg(angle) as arg_angle:
            agcls.evaluate_hresult(self.__dict__["_Rotate"](arg_angle.COM_val))

    def Apply(self, filter:"IAgStkGraphicsRasterFilter") -> "IAgStkGraphicsRaster":
        """Applies a raster filter to the raster and returns a new raster with the results of the filtering. The current raster is not modified."""
        with agmarshall.AgInterface_in_arg(filter, IAgStkGraphicsRasterFilter) as arg_filter, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Apply"](arg_filter.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def ApplyInPlace(self, filter:"IAgStkGraphicsRasterFilter") -> None:
        """Applies a raster filter to the raster. The current raster will contain the results of the filtering."""
        with agmarshall.AgInterface_in_arg(filter, IAgStkGraphicsRasterFilter) as arg_filter:
            agcls.evaluate_hresult(self.__dict__["_ApplyInPlace"](arg_filter.COM_val))

    def ExtractBand(self, band:"AgEStkGraphicsRasterBand") -> "IAgStkGraphicsRaster":
        """Extracts the band of raster data associated with the given raster band."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsRasterBand, band) as arg_band, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_ExtractBand"](arg_band.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def ExtractBandFromRasterFormat(self, format:"AgEStkGraphicsRasterFormat") -> "IAgStkGraphicsRaster":
        """Extracts the bands of raster data associated with the given raster format."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsRasterFormat, format) as arg_format, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_ExtractBandFromRasterFormat"](arg_format.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def CopyFromRaster(self, raster:"IAgStkGraphicsRaster") -> None:
        """Copies the data associated with the given raster into this raster."""
        with agmarshall.AgInterface_in_arg(raster, IAgStkGraphicsRaster) as arg_raster:
            agcls.evaluate_hresult(self.__dict__["_CopyFromRaster"](arg_raster.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{e0113161-7dd5-4411-bca9-6175aad19b4e}", IAgStkGraphicsRaster)
agcls.AgTypeNameMap["IAgStkGraphicsRaster"] = IAgStkGraphicsRaster
__all__.append("IAgStkGraphicsRaster")

class IAgStkGraphicsRasterAttributes(object):
    """The attributes describing a raster dataset. raster attributes define the memory layout of a raster, and includes properties defining the order of each raster band that the raster contains, as specified by the raster format..."""
    _uuid = "{067e0cd7-c1c5-41b7-93a8-f9ae8b67df25}"
    _num_methods = 11
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetFormat"] = _raise_uninitialized_error
        self.__dict__["_GetType"] = _raise_uninitialized_error
        self.__dict__["_GetOrientation"] = _raise_uninitialized_error
        self.__dict__["_GetByteLength"] = _raise_uninitialized_error
        self.__dict__["_GetWidth"] = _raise_uninitialized_error
        self.__dict__["_GetHeight"] = _raise_uninitialized_error
        self.__dict__["_GetPixelAspectRatio"] = _raise_uninitialized_error
        self.__dict__["_GetRowAlignment"] = _raise_uninitialized_error
        self.__dict__["_GetNumberOfBands"] = _raise_uninitialized_error
        self.__dict__["_GetRowStride"] = _raise_uninitialized_error
        self.__dict__["_HasBand"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsRasterAttributes._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsRasterAttributes from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsRasterAttributes = agcom.GUID(IAgStkGraphicsRasterAttributes._uuid)
        vtable_offset_local = IAgStkGraphicsRasterAttributes._vtable_offset - 1
        self.__dict__["_GetFormat"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsRasterAttributes, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_GetType"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsRasterAttributes, vtable_offset_local+2, POINTER(agcom.LONG))
        self.__dict__["_GetOrientation"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsRasterAttributes, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_GetByteLength"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsRasterAttributes, vtable_offset_local+4, POINTER(agcom.INT))
        self.__dict__["_GetWidth"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsRasterAttributes, vtable_offset_local+5, POINTER(agcom.INT))
        self.__dict__["_GetHeight"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsRasterAttributes, vtable_offset_local+6, POINTER(agcom.INT))
        self.__dict__["_GetPixelAspectRatio"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsRasterAttributes, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_GetRowAlignment"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsRasterAttributes, vtable_offset_local+8, POINTER(agcom.INT))
        self.__dict__["_GetNumberOfBands"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsRasterAttributes, vtable_offset_local+9, POINTER(agcom.INT))
        self.__dict__["_GetRowStride"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsRasterAttributes, vtable_offset_local+10, POINTER(agcom.INT))
        self.__dict__["_HasBand"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsRasterAttributes, vtable_offset_local+11, agcom.LONG, POINTER(agcom.VARIANT_BOOL))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsRasterAttributes.__dict__ and type(IAgStkGraphicsRasterAttributes.__dict__[attrname]) == property:
            return IAgStkGraphicsRasterAttributes.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsRasterAttributes.")
    
    @property
    def Format(self) -> "AgEStkGraphicsRasterFormat":
        """Gets the raster format associated with the attributes."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsRasterFormat) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetFormat"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Type(self) -> "AgEStkGraphicsRasterType":
        """Gets the raster type associated with the attributes."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsRasterType) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetType"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Orientation(self) -> "AgEStkGraphicsRasterOrientation":
        """Gets the raster orientation associated with the attributes."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsRasterOrientation) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetOrientation"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def ByteLength(self) -> int:
        """Gets the size of the raster data in bytes."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetByteLength"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Width(self) -> int:
        """Gets the width of the raster in pixels."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetWidth"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Height(self) -> int:
        """Gets the height of the raster in pixels."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetHeight"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def PixelAspectRatio(self) -> float:
        """Gets the pixel aspect ratio of the raster."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPixelAspectRatio"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def RowAlignment(self) -> int:
        """Gets the row alignment of the raster data in bytes."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetRowAlignment"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def NumberOfBands(self) -> int:
        """Gets the number of bands comprising the raster."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetNumberOfBands"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def RowStride(self) -> int:
        """Gets the stride or scan/row width in bytes of the raster data."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetRowStride"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def HasBand(self, band:"AgEStkGraphicsRasterBand") -> bool:
        """Gets whether the raster contains the given band."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsRasterBand, band) as arg_band, \
             agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_HasBand"](arg_band.COM_val, byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{067e0cd7-c1c5-41b7-93a8-f9ae8b67df25}", IAgStkGraphicsRasterAttributes)
agcls.AgTypeNameMap["IAgStkGraphicsRasterAttributes"] = IAgStkGraphicsRasterAttributes
__all__.append("IAgStkGraphicsRasterAttributes")

class IAgStkGraphicsRasterFilter(object):
    """A filter for processing raster datasets. RasterFilter is the base class for all raster filters..."""
    _uuid = "{1d21525d-4204-47cc-8457-996e1a6eab7e}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsRasterFilter._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsRasterFilter from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsRasterFilter = agcom.GUID(IAgStkGraphicsRasterFilter._uuid)
        vtable_offset_local = IAgStkGraphicsRasterFilter._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsRasterFilter.__dict__ and type(IAgStkGraphicsRasterFilter.__dict__[attrname]) == property:
            return IAgStkGraphicsRasterFilter.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsRasterFilter.")
    

agcls.AgClassCatalog.add_catalog_entry("{1d21525d-4204-47cc-8457-996e1a6eab7e}", IAgStkGraphicsRasterFilter)
agcls.AgTypeNameMap["IAgStkGraphicsRasterFilter"] = IAgStkGraphicsRasterFilter
__all__.append("IAgStkGraphicsRasterFilter")

class IAgStkGraphicsRasterStream(object):
    """A raster, the data of which, is updated dynamically at the specified update delta. The class can be used to stream video and other dynamic raster data to textures and other raster clients..."""
    _uuid = "{63f024ca-7113-4841-8d26-7a286458bd7c}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetUpdateDelta"] = _raise_uninitialized_error
        self.__dict__["_SetUpdateDelta"] = _raise_uninitialized_error
        self.__dict__["_Update"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsRasterStream._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsRasterStream from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsRasterStream = agcom.GUID(IAgStkGraphicsRasterStream._uuid)
        vtable_offset_local = IAgStkGraphicsRasterStream._vtable_offset - 1
        self.__dict__["_GetUpdateDelta"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsRasterStream, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetUpdateDelta"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsRasterStream, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_Update"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsRasterStream, vtable_offset_local+3, agcom.PVOID, agcom.PVOID, POINTER(agcom.VARIANT_BOOL))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsRasterStream.__dict__ and type(IAgStkGraphicsRasterStream.__dict__[attrname]) == property:
            return IAgStkGraphicsRasterStream.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsRasterStream.")
    
    @property
    def UpdateDelta(self) -> float:
        """Gets or sets the update delta of the raster stream in seconds. The update delta defines the interval at which the Update method will be called. The default update delta is 0, which will call the Update method every time the scene manager time changes..."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetUpdateDelta"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @UpdateDelta.setter
    def UpdateDelta(self, updateDelta:float) -> None:
        with agmarshall.DOUBLE_arg(updateDelta) as arg_updateDelta:
            agcls.evaluate_hresult(self.__dict__["_SetUpdateDelta"](arg_updateDelta.COM_val))

    def Update(self, time:"IAgDate", nextTime:"IAgDate") -> bool:
        """When overridden in a derived class, updates the raster data associated with the raster stream at the specified time..."""
        with agmarshall.AgInterface_in_arg(time, IAgDate) as arg_time, \
             agmarshall.AgInterface_in_arg(nextTime, IAgDate) as arg_nextTime, \
             agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_Update"](arg_time.COM_val, arg_nextTime.COM_val, byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{63f024ca-7113-4841-8d26-7a286458bd7c}", IAgStkGraphicsRasterStream)
agcls.AgTypeNameMap["IAgStkGraphicsRasterStream"] = IAgStkGraphicsRasterStream
__all__.append("IAgStkGraphicsRasterStream")

class IAgStkGraphicsRotateFilter(object):
    """Rotates the source raster clockwise by the specified angle."""
    _uuid = "{4b6dc620-04e1-4956-be55-890fdb25bd40}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAngle"] = _raise_uninitialized_error
        self.__dict__["_SetAngle"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsRotateFilter._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsRotateFilter from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsRotateFilter = agcom.GUID(IAgStkGraphicsRotateFilter._uuid)
        vtable_offset_local = IAgStkGraphicsRotateFilter._vtable_offset - 1
        self.__dict__["_GetAngle"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsRotateFilter, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAngle"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsRotateFilter, vtable_offset_local+2, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsRotateFilter.__dict__ and type(IAgStkGraphicsRotateFilter.__dict__[attrname]) == property:
            return IAgStkGraphicsRotateFilter.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsRotateFilter.")
    
    @property
    def Angle(self) -> float:
        """Gets or sets the counterclockwise rotation angle."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAngle"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Angle.setter
    def Angle(self, angle:float) -> None:
        with agmarshall.DOUBLE_arg(angle) as arg_angle:
            agcls.evaluate_hresult(self.__dict__["_SetAngle"](arg_angle.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{4b6dc620-04e1-4956-be55-890fdb25bd40}", IAgStkGraphicsRotateFilter)
agcls.AgTypeNameMap["IAgStkGraphicsRotateFilter"] = IAgStkGraphicsRotateFilter
__all__.append("IAgStkGraphicsRotateFilter")

class IAgStkGraphicsSequenceFilter(object):
    """Applies a sequence of filters to the source raster in the order in which they were added. When continue on failure is set to true, subsequent filters will still be applied to the source raster even if one or more filters in the sequence cannot be applied."""
    _uuid = "{72e2b4cb-2be3-418e-b0c8-69f33164e475}"
    _num_methods = 7
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetContinueOnFailure"] = _raise_uninitialized_error
        self.__dict__["_SetContinueOnFailure"] = _raise_uninitialized_error
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        self.__dict__["_Add"] = _raise_uninitialized_error
        self.__dict__["_Remove"] = _raise_uninitialized_error
        self.__dict__["_Clear"] = _raise_uninitialized_error
        self.__dict__["_Contains"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsSequenceFilter._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsSequenceFilter from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsSequenceFilter = agcom.GUID(IAgStkGraphicsSequenceFilter._uuid)
        vtable_offset_local = IAgStkGraphicsSequenceFilter._vtable_offset - 1
        self.__dict__["_GetContinueOnFailure"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSequenceFilter, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetContinueOnFailure"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSequenceFilter, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSequenceFilter, vtable_offset_local+3, POINTER(agcom.INT))
        self.__dict__["_Add"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSequenceFilter, vtable_offset_local+4, agcom.PVOID)
        self.__dict__["_Remove"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSequenceFilter, vtable_offset_local+5, agcom.PVOID)
        self.__dict__["_Clear"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSequenceFilter, vtable_offset_local+6, )
        self.__dict__["_Contains"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSequenceFilter, vtable_offset_local+7, agcom.PVOID, POINTER(agcom.VARIANT_BOOL))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsSequenceFilter.__dict__ and type(IAgStkGraphicsSequenceFilter.__dict__[attrname]) == property:
            return IAgStkGraphicsSequenceFilter.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsSequenceFilter.")
    
    @property
    def ContinueOnFailure(self) -> bool:
        """Gets or sets whether to continue applying filters in the sequence regardless of individual filter failures. When set to true, subsequent filters will still be applied to the source raster even if one or more filters in the sequence cannot be applied."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetContinueOnFailure"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @ContinueOnFailure.setter
    def ContinueOnFailure(self, continueOnFailure:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(continueOnFailure) as arg_continueOnFailure:
            agcls.evaluate_hresult(self.__dict__["_SetContinueOnFailure"](arg_continueOnFailure.COM_val))

    @property
    def Count(self) -> int:
        """Gets the number of filters in the collection."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def Add(self, filter:"IAgStkGraphicsRasterFilter") -> None:
        """Adds a filter to the sequence."""
        with agmarshall.AgInterface_in_arg(filter, IAgStkGraphicsRasterFilter) as arg_filter:
            agcls.evaluate_hresult(self.__dict__["_Add"](arg_filter.COM_val))

    def Remove(self, filter:"IAgStkGraphicsRasterFilter") -> None:
        """Removes a filter from the sequence."""
        with agmarshall.AgInterface_in_arg(filter, IAgStkGraphicsRasterFilter) as arg_filter:
            agcls.evaluate_hresult(self.__dict__["_Remove"](arg_filter.COM_val))

    def Clear(self) -> None:
        """Clears all filters from the sequence."""
        agcls.evaluate_hresult(self.__dict__["_Clear"]())

    def Contains(self, filter:"IAgStkGraphicsRasterFilter") -> bool:
        """Returns true if the sequence contains the filter."""
        with agmarshall.AgInterface_in_arg(filter, IAgStkGraphicsRasterFilter) as arg_filter, \
             agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_Contains"](arg_filter.COM_val, byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{72e2b4cb-2be3-418e-b0c8-69f33164e475}", IAgStkGraphicsSequenceFilter)
agcls.AgTypeNameMap["IAgStkGraphicsSequenceFilter"] = IAgStkGraphicsSequenceFilter
__all__.append("IAgStkGraphicsSequenceFilter")

class IAgStkGraphicsSharpenFilter(object):
    """Applies a convolution filter to increase the sharpness of the source raster."""
    _uuid = "{927e244d-ace0-4387-8e3e-6f14bfe230eb}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetMethod"] = _raise_uninitialized_error
        self.__dict__["_SetMethod"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsSharpenFilter._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsSharpenFilter from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsSharpenFilter = agcom.GUID(IAgStkGraphicsSharpenFilter._uuid)
        vtable_offset_local = IAgStkGraphicsSharpenFilter._vtable_offset - 1
        self.__dict__["_GetMethod"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSharpenFilter, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetMethod"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSharpenFilter, vtable_offset_local+2, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsSharpenFilter.__dict__ and type(IAgStkGraphicsSharpenFilter.__dict__[attrname]) == property:
            return IAgStkGraphicsSharpenFilter.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsSharpenFilter.")
    
    @property
    def Method(self) -> "AgEStkGraphicsSharpenMethod":
        """Gets or sets the method used to sharpen the source raster."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsSharpenMethod) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMethod"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Method.setter
    def Method(self, method:"AgEStkGraphicsSharpenMethod") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsSharpenMethod, method) as arg_method:
            agcls.evaluate_hresult(self.__dict__["_SetMethod"](arg_method.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{927e244d-ace0-4387-8e3e-6f14bfe230eb}", IAgStkGraphicsSharpenFilter)
agcls.AgTypeNameMap["IAgStkGraphicsSharpenFilter"] = IAgStkGraphicsSharpenFilter
__all__.append("IAgStkGraphicsSharpenFilter")

class IAgStkGraphicsVideoStream(object):
    """A raster stream that streams from a video. The video can be read from a file, or streamed from an HTTP, RTP, UDP, or TCP source. See the Video Streams Overview for a list of supported video formats and Uri usage."""
    _uuid = "{95fcc91e-a95a-48c4-a34f-9ed67f8e4f4a}"
    _num_methods = 35
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetUri"] = _raise_uninitialized_error
        self.__dict__["_GetPlayback"] = _raise_uninitialized_error
        self.__dict__["_SetPlayback"] = _raise_uninitialized_error
        self.__dict__["_GetFrameRate"] = _raise_uninitialized_error
        self.__dict__["_SetFrameRate"] = _raise_uninitialized_error
        self.__dict__["_GetIntervalStartTime"] = _raise_uninitialized_error
        self.__dict__["_SetIntervalStartTime"] = _raise_uninitialized_error
        self.__dict__["_GetIntervalEndTime"] = _raise_uninitialized_error
        self.__dict__["_SetIntervalEndTime"] = _raise_uninitialized_error
        self.__dict__["_GetStartTime"] = _raise_uninitialized_error
        self.__dict__["_SetStartTime"] = _raise_uninitialized_error
        self.__dict__["_GetEndTime"] = _raise_uninitialized_error
        self.__dict__["_SetEndTime"] = _raise_uninitialized_error
        self.__dict__["_GetStartFrame"] = _raise_uninitialized_error
        self.__dict__["_SetStartFrame"] = _raise_uninitialized_error
        self.__dict__["_GetEndFrame"] = _raise_uninitialized_error
        self.__dict__["_SetEndFrame"] = _raise_uninitialized_error
        self.__dict__["_GetLoop"] = _raise_uninitialized_error
        self.__dict__["_SetLoop"] = _raise_uninitialized_error
        self.__dict__["_GetIsPlaying"] = _raise_uninitialized_error
        self.__dict__["_GetPacketAcquirementYieldTime"] = _raise_uninitialized_error
        self.__dict__["_SetPacketAcquirementYieldTime"] = _raise_uninitialized_error
        self.__dict__["_GetPacketBufferLimit"] = _raise_uninitialized_error
        self.__dict__["_SetPacketBufferLimit"] = _raise_uninitialized_error
        self.__dict__["_GetAllowFrameDrop"] = _raise_uninitialized_error
        self.__dict__["_SetAllowFrameDrop"] = _raise_uninitialized_error
        self.__dict__["_GetEnableAudio"] = _raise_uninitialized_error
        self.__dict__["_SetEnableAudio"] = _raise_uninitialized_error
        self.__dict__["_ReinitializeWithStringUri"] = _raise_uninitialized_error
        self.__dict__["_Play"] = _raise_uninitialized_error
        self.__dict__["_Pause"] = _raise_uninitialized_error
        self.__dict__["_Stop"] = _raise_uninitialized_error
        self.__dict__["_Reset"] = _raise_uninitialized_error
        self.__dict__["_Close"] = _raise_uninitialized_error
        self.__dict__["_GetAudioUri"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsVideoStream._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsVideoStream from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsVideoStream = agcom.GUID(IAgStkGraphicsVideoStream._uuid)
        vtable_offset_local = IAgStkGraphicsVideoStream._vtable_offset - 1
        self.__dict__["_GetUri"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVideoStream, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_GetPlayback"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVideoStream, vtable_offset_local+2, POINTER(agcom.LONG))
        self.__dict__["_SetPlayback"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVideoStream, vtable_offset_local+3, agcom.LONG)
        self.__dict__["_GetFrameRate"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVideoStream, vtable_offset_local+4, POINTER(agcom.DOUBLE))
        self.__dict__["_SetFrameRate"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVideoStream, vtable_offset_local+5, agcom.DOUBLE)
        self.__dict__["_GetIntervalStartTime"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVideoStream, vtable_offset_local+6, POINTER(agcom.PVOID))
        self.__dict__["_SetIntervalStartTime"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVideoStream, vtable_offset_local+7, agcom.PVOID)
        self.__dict__["_GetIntervalEndTime"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVideoStream, vtable_offset_local+8, POINTER(agcom.PVOID))
        self.__dict__["_SetIntervalEndTime"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVideoStream, vtable_offset_local+9, agcom.PVOID)
        self.__dict__["_GetStartTime"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVideoStream, vtable_offset_local+10, POINTER(agcom.DOUBLE))
        self.__dict__["_SetStartTime"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVideoStream, vtable_offset_local+11, agcom.DOUBLE)
        self.__dict__["_GetEndTime"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVideoStream, vtable_offset_local+12, POINTER(agcom.DOUBLE))
        self.__dict__["_SetEndTime"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVideoStream, vtable_offset_local+13, agcom.DOUBLE)
        self.__dict__["_GetStartFrame"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVideoStream, vtable_offset_local+14, POINTER(agcom.INT))
        self.__dict__["_SetStartFrame"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVideoStream, vtable_offset_local+15, agcom.INT)
        self.__dict__["_GetEndFrame"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVideoStream, vtable_offset_local+16, POINTER(agcom.INT))
        self.__dict__["_SetEndFrame"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVideoStream, vtable_offset_local+17, agcom.INT)
        self.__dict__["_GetLoop"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVideoStream, vtable_offset_local+18, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetLoop"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVideoStream, vtable_offset_local+19, agcom.VARIANT_BOOL)
        self.__dict__["_GetIsPlaying"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVideoStream, vtable_offset_local+20, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetPacketAcquirementYieldTime"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVideoStream, vtable_offset_local+21, POINTER(agcom.INT))
        self.__dict__["_SetPacketAcquirementYieldTime"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVideoStream, vtable_offset_local+22, agcom.INT)
        self.__dict__["_GetPacketBufferLimit"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVideoStream, vtable_offset_local+23, POINTER(agcom.INT))
        self.__dict__["_SetPacketBufferLimit"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVideoStream, vtable_offset_local+24, agcom.INT)
        self.__dict__["_GetAllowFrameDrop"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVideoStream, vtable_offset_local+25, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetAllowFrameDrop"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVideoStream, vtable_offset_local+26, agcom.VARIANT_BOOL)
        self.__dict__["_GetEnableAudio"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVideoStream, vtable_offset_local+27, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetEnableAudio"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVideoStream, vtable_offset_local+28, agcom.VARIANT_BOOL)
        self.__dict__["_ReinitializeWithStringUri"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVideoStream, vtable_offset_local+29, agcom.BSTR)
        self.__dict__["_Play"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVideoStream, vtable_offset_local+30, )
        self.__dict__["_Pause"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVideoStream, vtable_offset_local+31, )
        self.__dict__["_Stop"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVideoStream, vtable_offset_local+32, )
        self.__dict__["_Reset"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVideoStream, vtable_offset_local+33, )
        self.__dict__["_Close"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVideoStream, vtable_offset_local+34, )
        self.__dict__["_GetAudioUri"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVideoStream, vtable_offset_local+35, POINTER(agcom.BSTR))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsVideoStream.__dict__ and type(IAgStkGraphicsVideoStream.__dict__[attrname]) == property:
            return IAgStkGraphicsVideoStream.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsVideoStream.")
    
    @property
    def Uri(self) -> str:
        """Gets the uri of the video."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetUri"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Playback(self) -> "AgEStkGraphicsVideoPlayback":
        """Gets or sets the video playback mode of the video."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsVideoPlayback) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPlayback"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Playback.setter
    def Playback(self, playback:"AgEStkGraphicsVideoPlayback") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsVideoPlayback, playback) as arg_playback:
            agcls.evaluate_hresult(self.__dict__["_SetPlayback"](arg_playback.COM_val))

    @property
    def FrameRate(self) -> float:
        """Gets or sets the frame rate of the video when the playback property is set to real time. If this property is not set, the internal framerate of the video is used."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetFrameRate"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @FrameRate.setter
    def FrameRate(self, frameRate:float) -> None:
        with agmarshall.DOUBLE_arg(frameRate) as arg_frameRate:
            agcls.evaluate_hresult(self.__dict__["_SetFrameRate"](arg_frameRate.COM_val))

    @property
    def IntervalStartTime(self) -> "IAgDate":
        """Gets or sets the scene manager time at which the video will begin playing when the playback property is set to time interval."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetIntervalStartTime"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @IntervalStartTime.setter
    def IntervalStartTime(self, intervalStartTime:"IAgDate") -> None:
        with agmarshall.AgInterface_in_arg(intervalStartTime, IAgDate) as arg_intervalStartTime:
            agcls.evaluate_hresult(self.__dict__["_SetIntervalStartTime"](arg_intervalStartTime.COM_val))

    @property
    def IntervalEndTime(self) -> "IAgDate":
        """Gets or sets the scene manager time at which the video will stop playing when the playback property is set to time interval."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetIntervalEndTime"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @IntervalEndTime.setter
    def IntervalEndTime(self, intervalEndTime:"IAgDate") -> None:
        with agmarshall.AgInterface_in_arg(intervalEndTime, IAgDate) as arg_intervalEndTime:
            agcls.evaluate_hresult(self.__dict__["_SetIntervalEndTime"](arg_intervalEndTime.COM_val))

    @property
    def StartTime(self) -> float:
        """Gets or sets the start time of the video in seconds. Changing the start time property also changes the start frame property to the frame in the video that corresponds to the specified time."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetStartTime"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @StartTime.setter
    def StartTime(self, startTime:float) -> None:
        with agmarshall.DOUBLE_arg(startTime) as arg_startTime:
            agcls.evaluate_hresult(self.__dict__["_SetStartTime"](arg_startTime.COM_val))

    @property
    def EndTime(self) -> float:
        """Gets or sets the end time of the video in seconds. Changing the end time property also changes the end frame property to the frame in the video that corresponds to the specified time."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetEndTime"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @EndTime.setter
    def EndTime(self, endTime:float) -> None:
        with agmarshall.DOUBLE_arg(endTime) as arg_endTime:
            agcls.evaluate_hresult(self.__dict__["_SetEndTime"](arg_endTime.COM_val))

    @property
    def StartFrame(self) -> int:
        """Gets or sets the start frame of the video. Changing the start frame property also changes the start time property to the time in the video that corresponds to the specified frame."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetStartFrame"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @StartFrame.setter
    def StartFrame(self, startFrame:int) -> None:
        with agmarshall.INT_arg(startFrame) as arg_startFrame:
            agcls.evaluate_hresult(self.__dict__["_SetStartFrame"](arg_startFrame.COM_val))

    @property
    def EndFrame(self) -> int:
        """Gets or sets the end frame of the video. Changing the end frame property also changes the end time property to the time in the video that corresponds to the specified frame."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetEndFrame"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @EndFrame.setter
    def EndFrame(self, endFrame:int) -> None:
        with agmarshall.INT_arg(endFrame) as arg_endFrame:
            agcls.evaluate_hresult(self.__dict__["_SetEndFrame"](arg_endFrame.COM_val))

    @property
    def Loop(self) -> bool:
        """Gets or sets whether the video will loop when it reaches its last frame when the playback property is set to real time."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetLoop"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Loop.setter
    def Loop(self, loop:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(loop) as arg_loop:
            agcls.evaluate_hresult(self.__dict__["_SetLoop"](arg_loop.COM_val))

    @property
    def IsPlaying(self) -> bool:
        """Gets whether or not the video is playing. Use the play, pause, stop, and Reset methods to control the playback of the video when the playback property is set to real time."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetIsPlaying"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def PacketAcquirementYieldTime(self) -> int:
        """Gets or sets the thread processing yield time for asynchronous streaming of video over common protocols like udp. Setting a high value may increase performance, but may cause frames or packets to drop, effecting visual quality..."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPacketAcquirementYieldTime"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @PacketAcquirementYieldTime.setter
    def PacketAcquirementYieldTime(self, packetAcquirementYieldTime:int) -> None:
        with agmarshall.INT_arg(packetAcquirementYieldTime) as arg_packetAcquirementYieldTime:
            agcls.evaluate_hresult(self.__dict__["_SetPacketAcquirementYieldTime"](arg_packetAcquirementYieldTime.COM_val))

    @property
    def PacketBufferLimit(self) -> int:
        """Gets or sets a value indicating the buffering limit for packets when processing a video stream..."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPacketBufferLimit"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @PacketBufferLimit.setter
    def PacketBufferLimit(self, packetBufferLimit:int) -> None:
        with agmarshall.INT_arg(packetBufferLimit) as arg_packetBufferLimit:
            agcls.evaluate_hresult(self.__dict__["_SetPacketBufferLimit"](arg_packetBufferLimit.COM_val))

    @property
    def AllowFrameDrop(self) -> bool:
        """Gets or sets a value indicating if frames should be dropped if video processing can not keep up with a video stream. If this is set to false, the video quality may degrade when the processing load is too high..."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAllowFrameDrop"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @AllowFrameDrop.setter
    def AllowFrameDrop(self, allowFrameDrop:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(allowFrameDrop) as arg_allowFrameDrop:
            agcls.evaluate_hresult(self.__dict__["_SetAllowFrameDrop"](arg_allowFrameDrop.COM_val))

    @property
    def EnableAudio(self) -> bool:
        """Gets or sets a value indicating if the encoded audio stream should be synchronized to video playback If this is set to false, the audio stream will be disabled..."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnableAudio"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @EnableAudio.setter
    def EnableAudio(self, enableAudio:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(enableAudio) as arg_enableAudio:
            agcls.evaluate_hresult(self.__dict__["_SetEnableAudio"](arg_enableAudio.COM_val))

    def ReinitializeWithStringUri(self, uri:str) -> None:
        """Reinitializes the video stream from a Uri, which can be a file, HTTP, RTP, UDP, or TCP source. See the Video Streams Overview for a list of supported video formats and Uri usage."""
        with agmarshall.BSTR_arg(uri) as arg_uri:
            agcls.evaluate_hresult(self.__dict__["_ReinitializeWithStringUri"](arg_uri.COM_val))

    def Play(self) -> None:
        """Begins playing the video when the playback property is set to real time."""
        agcls.evaluate_hresult(self.__dict__["_Play"]())

    def Pause(self) -> None:
        """Pauses the video when the playback property is set to real time."""
        agcls.evaluate_hresult(self.__dict__["_Pause"]())

    def Stop(self) -> None:
        """Stops the video when the playback property is set to real time. Stopping the video will seek to the first frame and pause playback. Use the Play method to begin playing the video again."""
        agcls.evaluate_hresult(self.__dict__["_Stop"]())

    def Reset(self) -> None:
        """Seeks the video to its first frame and begins playing the video when the playback property is set to real time."""
        agcls.evaluate_hresult(self.__dict__["_Reset"]())

    def Close(self) -> None:
        """Closes the video stream and any associated resources."""
        agcls.evaluate_hresult(self.__dict__["_Close"]())

    @property
    def AudioUri(self) -> str:
        """Gets the uri of the audio."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAudioUri"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{95fcc91e-a95a-48c4-a34f-9ed67f8e4f4a}", IAgStkGraphicsVideoStream)
agcls.AgTypeNameMap["IAgStkGraphicsVideoStream"] = IAgStkGraphicsVideoStream
__all__.append("IAgStkGraphicsVideoStream")

class IAgStkGraphicsKmlContainer(object):
    """A KmlContainer contains a collection of children kml features."""
    _uuid = "{32147ba1-8610-4270-9365-b8966730dd6f}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetChildren"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsKmlContainer._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsKmlContainer from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsKmlContainer = agcom.GUID(IAgStkGraphicsKmlContainer._uuid)
        vtable_offset_local = IAgStkGraphicsKmlContainer._vtable_offset - 1
        self.__dict__["_GetChildren"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsKmlContainer, vtable_offset_local+1, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsKmlContainer.__dict__ and type(IAgStkGraphicsKmlContainer.__dict__[attrname]) == property:
            return IAgStkGraphicsKmlContainer.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsKmlContainer.")
    
    @property
    def Children(self) -> "IAgStkGraphicsKmlFeatureCollection":
        """The collection of kml features that are children of this container."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetChildren"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{32147ba1-8610-4270-9365-b8966730dd6f}", IAgStkGraphicsKmlContainer)
agcls.AgTypeNameMap["IAgStkGraphicsKmlContainer"] = IAgStkGraphicsKmlContainer
__all__.append("IAgStkGraphicsKmlContainer")

class IAgStkGraphicsKmlDocument(object):
    """A KML document."""
    _uuid = "{2e284efe-3dda-4fac-91ab-7b8c84eb3ad2}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetUri"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsKmlDocument._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsKmlDocument from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsKmlDocument = agcom.GUID(IAgStkGraphicsKmlDocument._uuid)
        vtable_offset_local = IAgStkGraphicsKmlDocument._vtable_offset - 1
        self.__dict__["_GetUri"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsKmlDocument, vtable_offset_local+1, POINTER(agcom.BSTR))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsKmlDocument.__dict__ and type(IAgStkGraphicsKmlDocument.__dict__[attrname]) == property:
            return IAgStkGraphicsKmlDocument.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsKmlDocument.")
    
    @property
    def Uri(self) -> str:
        """Gets the uri of the document."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetUri"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{2e284efe-3dda-4fac-91ab-7b8c84eb3ad2}", IAgStkGraphicsKmlDocument)
agcls.AgTypeNameMap["IAgStkGraphicsKmlDocument"] = IAgStkGraphicsKmlDocument
__all__.append("IAgStkGraphicsKmlDocument")

class IAgStkGraphicsKmlFeature(object):
    """A KML feature."""
    _uuid = "{bc7646ca-da52-4a62-8ef4-838382f21a08}"
    _num_methods = 9
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetIsLoaded"] = _raise_uninitialized_error
        self.__dict__["_GetDisplay"] = _raise_uninitialized_error
        self.__dict__["_SetDisplay"] = _raise_uninitialized_error
        self.__dict__["_GetContent"] = _raise_uninitialized_error
        self.__dict__["_GetName"] = _raise_uninitialized_error
        self.__dict__["_GetDescription"] = _raise_uninitialized_error
        self.__dict__["_GetSnippet"] = _raise_uninitialized_error
        self.__dict__["_GetBoundingSphere"] = _raise_uninitialized_error
        self.__dict__["_FlyTo"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsKmlFeature._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsKmlFeature from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsKmlFeature = agcom.GUID(IAgStkGraphicsKmlFeature._uuid)
        vtable_offset_local = IAgStkGraphicsKmlFeature._vtable_offset - 1
        self.__dict__["_GetIsLoaded"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsKmlFeature, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetDisplay"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsKmlFeature, vtable_offset_local+2, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetDisplay"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsKmlFeature, vtable_offset_local+3, agcom.VARIANT_BOOL)
        self.__dict__["_GetContent"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsKmlFeature, vtable_offset_local+4, POINTER(agcom.BSTR))
        self.__dict__["_GetName"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsKmlFeature, vtable_offset_local+5, POINTER(agcom.BSTR))
        self.__dict__["_GetDescription"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsKmlFeature, vtable_offset_local+6, POINTER(agcom.BSTR))
        self.__dict__["_GetSnippet"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsKmlFeature, vtable_offset_local+7, POINTER(agcom.BSTR))
        self.__dict__["_GetBoundingSphere"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsKmlFeature, vtable_offset_local+8, POINTER(agcom.PVOID))
        self.__dict__["_FlyTo"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsKmlFeature, vtable_offset_local+9, )
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsKmlFeature.__dict__ and type(IAgStkGraphicsKmlFeature.__dict__[attrname]) == property:
            return IAgStkGraphicsKmlFeature.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsKmlFeature.")
    
    @property
    def IsLoaded(self) -> bool:
        """Gets whether the document associated with this feature is loaded."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetIsLoaded"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Display(self) -> bool:
        """Gets or sets whether this feature will be displayed in the Scene."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDisplay"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Display.setter
    def Display(self, display:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(display) as arg_display:
            agcls.evaluate_hresult(self.__dict__["_SetDisplay"](arg_display.COM_val))

    @property
    def Content(self) -> str:
        """Gets the content associated with this feature."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetContent"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Name(self) -> str:
        """Gets the name of this feature."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetName"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Description(self) -> str:
        """Gets the description associated with this feature."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDescription"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Snippet(self) -> str:
        """Gets the snippet associated with this feature."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSnippet"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def BoundingSphere(self) -> "IAgStkGraphicsBoundingSphere":
        """The bounding sphere encompassing the area associated with this feature."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBoundingSphere"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def FlyTo(self) -> None:
        """Moves the camera to the area encompassing this feature."""
        agcls.evaluate_hresult(self.__dict__["_FlyTo"]())


agcls.AgClassCatalog.add_catalog_entry("{bc7646ca-da52-4a62-8ef4-838382f21a08}", IAgStkGraphicsKmlFeature)
agcls.AgTypeNameMap["IAgStkGraphicsKmlFeature"] = IAgStkGraphicsKmlFeature
__all__.append("IAgStkGraphicsKmlFeature")

class IAgStkGraphicsKmlFolder(object):
    """A KML folder."""
    _uuid = "{28b2dfb1-4f4c-4697-a0f9-076ebd92eb1f}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsKmlFolder._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsKmlFolder from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsKmlFolder = agcom.GUID(IAgStkGraphicsKmlFolder._uuid)
        vtable_offset_local = IAgStkGraphicsKmlFolder._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsKmlFolder.__dict__ and type(IAgStkGraphicsKmlFolder.__dict__[attrname]) == property:
            return IAgStkGraphicsKmlFolder.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsKmlFolder.")
    

agcls.AgClassCatalog.add_catalog_entry("{28b2dfb1-4f4c-4697-a0f9-076ebd92eb1f}", IAgStkGraphicsKmlFolder)
agcls.AgTypeNameMap["IAgStkGraphicsKmlFolder"] = IAgStkGraphicsKmlFolder
__all__.append("IAgStkGraphicsKmlFolder")

class IAgStkGraphicsKmlGraphics(object):
    """Provides loading and unloading of kml documents for a particular central body."""
    _uuid = "{056eb708-4504-4d62-b4d8-3ca00b0b91fa}"
    _num_methods = 9
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetDocuments"] = _raise_uninitialized_error
        self.__dict__["_LoadDocument"] = _raise_uninitialized_error
        self.__dict__["_LoadDocumentString"] = _raise_uninitialized_error
        self.__dict__["_Load"] = _raise_uninitialized_error
        self.__dict__["_LoadDocumentAsync"] = _raise_uninitialized_error
        self.__dict__["_LoadDocumentAsyncString"] = _raise_uninitialized_error
        self.__dict__["_LoadAsync"] = _raise_uninitialized_error
        self.__dict__["_Unload"] = _raise_uninitialized_error
        self.__dict__["_UnloadAll"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsKmlGraphics._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsKmlGraphics from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsKmlGraphics = agcom.GUID(IAgStkGraphicsKmlGraphics._uuid)
        vtable_offset_local = IAgStkGraphicsKmlGraphics._vtable_offset - 1
        self.__dict__["_GetDocuments"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsKmlGraphics, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_LoadDocument"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsKmlGraphics, vtable_offset_local+2, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_LoadDocumentString"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsKmlGraphics, vtable_offset_local+3, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_Load"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsKmlGraphics, vtable_offset_local+4, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_LoadDocumentAsync"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsKmlGraphics, vtable_offset_local+5, agcom.BSTR)
        self.__dict__["_LoadDocumentAsyncString"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsKmlGraphics, vtable_offset_local+6, agcom.BSTR)
        self.__dict__["_LoadAsync"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsKmlGraphics, vtable_offset_local+7, agcom.BSTR)
        self.__dict__["_Unload"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsKmlGraphics, vtable_offset_local+8, agcom.PVOID)
        self.__dict__["_UnloadAll"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsKmlGraphics, vtable_offset_local+9, )
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsKmlGraphics.__dict__ and type(IAgStkGraphicsKmlGraphics.__dict__[attrname]) == property:
            return IAgStkGraphicsKmlGraphics.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsKmlGraphics.")
    def Subscribe(self) -> IAgStkGraphicsKmlGraphicsEventHandler:
        """Returns an IAgStkGraphicsKmlGraphicsEventHandler that is subscribed to handle events associated with this instance of IAgStkGraphicsKmlGraphics."""
        return IAgStkGraphicsKmlGraphicsEventHandler(self._pUnk)    
    @property
    def Documents(self) -> "IAgStkGraphicsKmlDocumentCollection":
        """The collection of kml documents that are currently loaded."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDocuments"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def LoadDocument(self, kmlUri:str) -> "IAgStkGraphicsKmlDocument":
        """Loads a kml document from a uri."""
        with agmarshall.BSTR_arg(kmlUri) as arg_kmlUri, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_LoadDocument"](arg_kmlUri.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def LoadDocumentString(self, kmlUri:str) -> "IAgStkGraphicsKmlDocument":
        """Loads a kml document from a Uri."""
        with agmarshall.BSTR_arg(kmlUri) as arg_kmlUri, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_LoadDocumentString"](arg_kmlUri.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def Load(self, kmlDocument:str) -> "IAgStkGraphicsKmlDocument":
        """Loads a kml document from a string containing the document."""
        with agmarshall.BSTR_arg(kmlDocument) as arg_kmlDocument, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Load"](arg_kmlDocument.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def LoadDocumentAsync(self, kmlUri:str) -> None:
        """Loads a kml document asynchronously from a uri. The document loaded event is raised when the document is loaded."""
        with agmarshall.BSTR_arg(kmlUri) as arg_kmlUri:
            agcls.evaluate_hresult(self.__dict__["_LoadDocumentAsync"](arg_kmlUri.COM_val))

    def LoadDocumentAsyncString(self, kmlUri:str) -> None:
        """Loads a kml document asynchronously from a Uri. The document loaded event is raised when the document is loaded."""
        with agmarshall.BSTR_arg(kmlUri) as arg_kmlUri:
            agcls.evaluate_hresult(self.__dict__["_LoadDocumentAsyncString"](arg_kmlUri.COM_val))

    def LoadAsync(self, kmlDocument:str) -> None:
        """Loads a kml document asynchronously from a string containing the document. The document loaded event is raised when the document is loaded."""
        with agmarshall.BSTR_arg(kmlDocument) as arg_kmlDocument:
            agcls.evaluate_hresult(self.__dict__["_LoadAsync"](arg_kmlDocument.COM_val))

    def Unload(self, kmlDocument:"IAgStkGraphicsKmlDocument") -> None:
        """Unloads a kml document. All associated visual features will be removed from the Scene. Once a KmlDocument is unloaded, it is no longer valid and will throw when accessing properties or methods."""
        with agmarshall.AgInterface_in_arg(kmlDocument, IAgStkGraphicsKmlDocument) as arg_kmlDocument:
            agcls.evaluate_hresult(self.__dict__["_Unload"](arg_kmlDocument.COM_val))

    def UnloadAll(self) -> None:
        """Unloads all kml documents associated with this central body. All associated visual features will be removed from the Scene. Once a KmlDocument is unloaded, it is no longer valid and will throw when accessing properties or methods."""
        agcls.evaluate_hresult(self.__dict__["_UnloadAll"]())


agcls.AgClassCatalog.add_catalog_entry("{056eb708-4504-4d62-b4d8-3ca00b0b91fa}", IAgStkGraphicsKmlGraphics)
agcls.AgTypeNameMap["IAgStkGraphicsKmlGraphics"] = IAgStkGraphicsKmlGraphics
__all__.append("IAgStkGraphicsKmlGraphics")

class IAgStkGraphicsKmlNetworkLink(object):
    """A KML network link."""
    _uuid = "{0b66ea82-dd0d-444f-b097-dda9427e1b87}"
    _num_methods = 17
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetUri"] = _raise_uninitialized_error
        self.__dict__["_GetRefreshMode"] = _raise_uninitialized_error
        self.__dict__["_SetRefreshMode"] = _raise_uninitialized_error
        self.__dict__["_GetRefreshInterval"] = _raise_uninitialized_error
        self.__dict__["_SetRefreshInterval"] = _raise_uninitialized_error
        self.__dict__["_GetViewRefreshMode"] = _raise_uninitialized_error
        self.__dict__["_SetViewRefreshMode"] = _raise_uninitialized_error
        self.__dict__["_GetViewRefreshTime"] = _raise_uninitialized_error
        self.__dict__["_SetViewRefreshTime"] = _raise_uninitialized_error
        self.__dict__["_GetViewBoundScale"] = _raise_uninitialized_error
        self.__dict__["_SetViewBoundScale"] = _raise_uninitialized_error
        self.__dict__["_GetMinimumRefreshPeriod"] = _raise_uninitialized_error
        self.__dict__["_GetCookie"] = _raise_uninitialized_error
        self.__dict__["_GetMessage"] = _raise_uninitialized_error
        self.__dict__["_GetLinkSnippet"] = _raise_uninitialized_error
        self.__dict__["_GetExpires"] = _raise_uninitialized_error
        self.__dict__["_Refresh"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsKmlNetworkLink._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsKmlNetworkLink from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsKmlNetworkLink = agcom.GUID(IAgStkGraphicsKmlNetworkLink._uuid)
        vtable_offset_local = IAgStkGraphicsKmlNetworkLink._vtable_offset - 1
        self.__dict__["_GetUri"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsKmlNetworkLink, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_GetRefreshMode"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsKmlNetworkLink, vtable_offset_local+2, POINTER(agcom.LONG))
        self.__dict__["_SetRefreshMode"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsKmlNetworkLink, vtable_offset_local+3, agcom.LONG)
        self.__dict__["_GetRefreshInterval"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsKmlNetworkLink, vtable_offset_local+4, POINTER(agcom.DOUBLE))
        self.__dict__["_SetRefreshInterval"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsKmlNetworkLink, vtable_offset_local+5, agcom.DOUBLE)
        self.__dict__["_GetViewRefreshMode"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsKmlNetworkLink, vtable_offset_local+6, POINTER(agcom.LONG))
        self.__dict__["_SetViewRefreshMode"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsKmlNetworkLink, vtable_offset_local+7, agcom.LONG)
        self.__dict__["_GetViewRefreshTime"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsKmlNetworkLink, vtable_offset_local+8, POINTER(agcom.DOUBLE))
        self.__dict__["_SetViewRefreshTime"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsKmlNetworkLink, vtable_offset_local+9, agcom.DOUBLE)
        self.__dict__["_GetViewBoundScale"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsKmlNetworkLink, vtable_offset_local+10, POINTER(agcom.DOUBLE))
        self.__dict__["_SetViewBoundScale"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsKmlNetworkLink, vtable_offset_local+11, agcom.DOUBLE)
        self.__dict__["_GetMinimumRefreshPeriod"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsKmlNetworkLink, vtable_offset_local+12, POINTER(agcom.DOUBLE))
        self.__dict__["_GetCookie"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsKmlNetworkLink, vtable_offset_local+13, POINTER(agcom.BSTR))
        self.__dict__["_GetMessage"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsKmlNetworkLink, vtable_offset_local+14, POINTER(agcom.BSTR))
        self.__dict__["_GetLinkSnippet"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsKmlNetworkLink, vtable_offset_local+15, POINTER(agcom.BSTR))
        self.__dict__["_GetExpires"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsKmlNetworkLink, vtable_offset_local+16, POINTER(agcom.BSTR))
        self.__dict__["_Refresh"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsKmlNetworkLink, vtable_offset_local+17, )
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsKmlNetworkLink.__dict__ and type(IAgStkGraphicsKmlNetworkLink.__dict__[attrname]) == property:
            return IAgStkGraphicsKmlNetworkLink.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsKmlNetworkLink.")
    
    @property
    def Uri(self) -> str:
        """Gets the uri of the network link."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetUri"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def RefreshMode(self) -> "AgEStkGraphicsKmlNetworkLinkRefreshMode":
        """Gets or sets the refresh mode of the network link. The refresh mode specifies a time-based refresh policy for this link."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsKmlNetworkLinkRefreshMode) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetRefreshMode"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @RefreshMode.setter
    def RefreshMode(self, refreshMode:"AgEStkGraphicsKmlNetworkLinkRefreshMode") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsKmlNetworkLinkRefreshMode, refreshMode) as arg_refreshMode:
            agcls.evaluate_hresult(self.__dict__["_SetRefreshMode"](arg_refreshMode.COM_val))

    @property
    def RefreshInterval(self) -> float:
        """Gets or sets the interval duration at which this network link will refresh, when refresh mode is set to on interval."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetRefreshInterval"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @RefreshInterval.setter
    def RefreshInterval(self, refreshInterval:float) -> None:
        with agmarshall.DOUBLE_arg(refreshInterval) as arg_refreshInterval:
            agcls.evaluate_hresult(self.__dict__["_SetRefreshInterval"](arg_refreshInterval.COM_val))

    @property
    def ViewRefreshMode(self) -> "AgEStkGraphicsKmlNetworkLinkViewRefreshMode":
        """Gets or sets the view refresh mode of the network link. The view refresh mode specifies the refresh policy for the when the camera's view changes."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsKmlNetworkLinkViewRefreshMode) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetViewRefreshMode"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @ViewRefreshMode.setter
    def ViewRefreshMode(self, viewRefreshMode:"AgEStkGraphicsKmlNetworkLinkViewRefreshMode") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsKmlNetworkLinkViewRefreshMode, viewRefreshMode) as arg_viewRefreshMode:
            agcls.evaluate_hresult(self.__dict__["_SetViewRefreshMode"](arg_viewRefreshMode.COM_val))

    @property
    def ViewRefreshTime(self) -> float:
        """Gets or sets the duration after camera view movement stops that this network link will refresh, when view refresh mode is set to on stop."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetViewRefreshTime"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @ViewRefreshTime.setter
    def ViewRefreshTime(self, viewRefreshTime:float) -> None:
        with agmarshall.DOUBLE_arg(viewRefreshTime) as arg_viewRefreshTime:
            agcls.evaluate_hresult(self.__dict__["_SetViewRefreshTime"](arg_viewRefreshTime.COM_val))

    @property
    def ViewBoundScale(self) -> float:
        """Gets or sets the value that scales the bounding box defining the view associated with this network link. A value less than 1.0 specifies to use less than the full view (screen). A value greater than 1..."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetViewBoundScale"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @ViewBoundScale.setter
    def ViewBoundScale(self, viewBoundScale:float) -> None:
        with agmarshall.DOUBLE_arg(viewBoundScale) as arg_viewBoundScale:
            agcls.evaluate_hresult(self.__dict__["_SetViewBoundScale"](arg_viewBoundScale.COM_val))

    @property
    def MinimumRefreshPeriod(self) -> float:
        """Gets the duration that is the minimum allowed time between refreshes of this network link."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinimumRefreshPeriod"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Cookie(self) -> str:
        """Gets the cookie string associated with this network link."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCookie"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Message(self) -> str:
        """Gets the message string associated with this network link."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMessage"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def LinkSnippet(self) -> str:
        """Gets the link snippet associated with this network link."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetLinkSnippet"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Expires(self) -> str:
        """Gets the string specifying the date/time this network should expire and be refreshed."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetExpires"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def Refresh(self) -> None:
        """Refreshes the network link."""
        agcls.evaluate_hresult(self.__dict__["_Refresh"]())


agcls.AgClassCatalog.add_catalog_entry("{0b66ea82-dd0d-444f-b097-dda9427e1b87}", IAgStkGraphicsKmlNetworkLink)
agcls.AgTypeNameMap["IAgStkGraphicsKmlNetworkLink"] = IAgStkGraphicsKmlNetworkLink
__all__.append("IAgStkGraphicsKmlNetworkLink")

class IAgStkGraphicsMarkerBatchPrimitive(object):
    """ Renders one or more markers in the 3D scene. Markers are 2D images that always face the viewer which can be sized in pixels or meters. Markers are also referred to as sprites or billboards..."""
    _uuid = "{235878c1-62d9-4ce6-85ff-9d82aff701e9}"
    _num_methods = 54
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetSizeSource"] = _raise_uninitialized_error
        self.__dict__["_GetSortOrder"] = _raise_uninitialized_error
        self.__dict__["_GetSetHint"] = _raise_uninitialized_error
        self.__dict__["_GetRenderingMethod"] = _raise_uninitialized_error
        self.__dict__["_GetRenderPass"] = _raise_uninitialized_error
        self.__dict__["_SetRenderPass"] = _raise_uninitialized_error
        self.__dict__["_GetBoundingSphereScale"] = _raise_uninitialized_error
        self.__dict__["_SetBoundingSphereScale"] = _raise_uninitialized_error
        self.__dict__["_GetDistanceDisplayConditionPerMarker"] = _raise_uninitialized_error
        self.__dict__["_SetDistanceDisplayConditionPerMarker"] = _raise_uninitialized_error
        self.__dict__["_GetTexture"] = _raise_uninitialized_error
        self.__dict__["_SetTexture"] = _raise_uninitialized_error
        self.__dict__["_GetSizeUnit"] = _raise_uninitialized_error
        self.__dict__["_SetSizeUnit"] = _raise_uninitialized_error
        self.__dict__["_GetSize"] = _raise_uninitialized_error
        self.__dict__["_SetSize"] = _raise_uninitialized_error
        self.__dict__["_GetOrigin"] = _raise_uninitialized_error
        self.__dict__["_SetOrigin"] = _raise_uninitialized_error
        self.__dict__["_GetPixelOffset"] = _raise_uninitialized_error
        self.__dict__["_SetPixelOffset"] = _raise_uninitialized_error
        self.__dict__["_GetEyeOffset"] = _raise_uninitialized_error
        self.__dict__["_SetEyeOffset"] = _raise_uninitialized_error
        self.__dict__["_GetRotation"] = _raise_uninitialized_error
        self.__dict__["_SetRotation"] = _raise_uninitialized_error
        self.__dict__["_GetTextureCoordinate"] = _raise_uninitialized_error
        self.__dict__["_SetTextureCoordinate"] = _raise_uninitialized_error
        self.__dict__["_GetWireframe"] = _raise_uninitialized_error
        self.__dict__["_SetWireframe"] = _raise_uninitialized_error
        self.__dict__["_GetPerItemPickingEnabled"] = _raise_uninitialized_error
        self.__dict__["_SetPerItemPickingEnabled"] = _raise_uninitialized_error
        self.__dict__["_GetTextureFilter"] = _raise_uninitialized_error
        self.__dict__["_SetTextureFilter"] = _raise_uninitialized_error
        self.__dict__["_Set"] = _raise_uninitialized_error
        self.__dict__["_SetWithOptionalParameters"] = _raise_uninitialized_error
        self.__dict__["_SetWithOptionalParametersAndRenderPassHint"] = _raise_uninitialized_error
        self.__dict__["_SetCartographic"] = _raise_uninitialized_error
        self.__dict__["_SetCartographicWithOptionalParameters"] = _raise_uninitialized_error
        self.__dict__["_SetCartographicWithOptionalParametersAndRenderPassHint"] = _raise_uninitialized_error
        self.__dict__["_SetPartial"] = _raise_uninitialized_error
        self.__dict__["_SetPartialWithIndicesOrder"] = _raise_uninitialized_error
        self.__dict__["_SetPartialWithOptionalParameters"] = _raise_uninitialized_error
        self.__dict__["_SetPartialWithOptionalParametersIndicesOrderAndRenderPass"] = _raise_uninitialized_error
        self.__dict__["_SetPartialCartographic"] = _raise_uninitialized_error
        self.__dict__["_SetPartialCartographicWithIndicesOrder"] = _raise_uninitialized_error
        self.__dict__["_SetPartialCartographicWithOptionalParameters"] = _raise_uninitialized_error
        self.__dict__["_SetPartialCartographicWithOptionalParametersIndicesOrderAndRenderPass"] = _raise_uninitialized_error
        self.__dict__["_Supported"] = _raise_uninitialized_error
        self.__dict__["_GetClampToPixel"] = _raise_uninitialized_error
        self.__dict__["_SetClampToPixel"] = _raise_uninitialized_error
        self.__dict__["_GetCentralBodyClipped"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBodyClipped"] = _raise_uninitialized_error
        self.__dict__["_AlignToScreen"] = _raise_uninitialized_error
        self.__dict__["_AlignToNorth"] = _raise_uninitialized_error
        self.__dict__["_AlignToAxis"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsMarkerBatchPrimitive._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsMarkerBatchPrimitive from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsMarkerBatchPrimitive = agcom.GUID(IAgStkGraphicsMarkerBatchPrimitive._uuid)
        vtable_offset_local = IAgStkGraphicsMarkerBatchPrimitive._vtable_offset - 1
        self.__dict__["_GetSizeSource"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitive, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_GetSortOrder"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitive, vtable_offset_local+2, POINTER(agcom.LONG))
        self.__dict__["_GetSetHint"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitive, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_GetRenderingMethod"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitive, vtable_offset_local+4, POINTER(agcom.LONG))
        self.__dict__["_GetRenderPass"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitive, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetRenderPass"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitive, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_GetBoundingSphereScale"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitive, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetBoundingSphereScale"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitive, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetDistanceDisplayConditionPerMarker"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitive, vtable_offset_local+9, POINTER(agcom.PVOID))
        self.__dict__["_SetDistanceDisplayConditionPerMarker"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitive, vtable_offset_local+10, agcom.PVOID)
        self.__dict__["_GetTexture"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitive, vtable_offset_local+11, POINTER(agcom.PVOID))
        self.__dict__["_SetTexture"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitive, vtable_offset_local+12, agcom.PVOID)
        self.__dict__["_GetSizeUnit"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitive, vtable_offset_local+13, POINTER(agcom.LONG))
        self.__dict__["_SetSizeUnit"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitive, vtable_offset_local+14, agcom.LONG)
        self.__dict__["_GetSize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitive, vtable_offset_local+15, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetSize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitive, vtable_offset_local+16, agcom.SAFEARRAY)
        self.__dict__["_GetOrigin"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitive, vtable_offset_local+17, POINTER(agcom.LONG))
        self.__dict__["_SetOrigin"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitive, vtable_offset_local+18, agcom.LONG)
        self.__dict__["_GetPixelOffset"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitive, vtable_offset_local+19, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetPixelOffset"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitive, vtable_offset_local+20, agcom.SAFEARRAY)
        self.__dict__["_GetEyeOffset"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitive, vtable_offset_local+21, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetEyeOffset"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitive, vtable_offset_local+22, agcom.SAFEARRAY)
        self.__dict__["_GetRotation"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitive, vtable_offset_local+23, POINTER(agcom.DOUBLE))
        self.__dict__["_SetRotation"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitive, vtable_offset_local+24, agcom.DOUBLE)
        self.__dict__["_GetTextureCoordinate"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitive, vtable_offset_local+25, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetTextureCoordinate"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitive, vtable_offset_local+26, agcom.SAFEARRAY)
        self.__dict__["_GetWireframe"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitive, vtable_offset_local+27, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetWireframe"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitive, vtable_offset_local+28, agcom.VARIANT_BOOL)
        self.__dict__["_GetPerItemPickingEnabled"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitive, vtable_offset_local+29, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetPerItemPickingEnabled"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitive, vtable_offset_local+30, agcom.VARIANT_BOOL)
        self.__dict__["_GetTextureFilter"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitive, vtable_offset_local+31, POINTER(agcom.PVOID))
        self.__dict__["_SetTextureFilter"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitive, vtable_offset_local+32, agcom.PVOID)
        self.__dict__["_Set"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitive, vtable_offset_local+33, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetWithOptionalParameters"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitive, vtable_offset_local+34, POINTER(agcom.SAFEARRAY), agcom.PVOID)
        self.__dict__["_SetWithOptionalParametersAndRenderPassHint"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitive, vtable_offset_local+35, POINTER(agcom.SAFEARRAY), agcom.PVOID, agcom.LONG)
        self.__dict__["_SetCartographic"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitive, vtable_offset_local+36, agcom.BSTR, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetCartographicWithOptionalParameters"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitive, vtable_offset_local+37, agcom.BSTR, POINTER(agcom.SAFEARRAY), agcom.PVOID)
        self.__dict__["_SetCartographicWithOptionalParametersAndRenderPassHint"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitive, vtable_offset_local+38, agcom.BSTR, POINTER(agcom.SAFEARRAY), agcom.PVOID, agcom.LONG)
        self.__dict__["_SetPartial"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitive, vtable_offset_local+39, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetPartialWithIndicesOrder"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitive, vtable_offset_local+40, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.LONG)
        self.__dict__["_SetPartialWithOptionalParameters"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitive, vtable_offset_local+41, POINTER(agcom.SAFEARRAY), agcom.PVOID, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetPartialWithOptionalParametersIndicesOrderAndRenderPass"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitive, vtable_offset_local+42, POINTER(agcom.SAFEARRAY), agcom.PVOID, POINTER(agcom.SAFEARRAY), agcom.LONG, agcom.LONG)
        self.__dict__["_SetPartialCartographic"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitive, vtable_offset_local+43, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetPartialCartographicWithIndicesOrder"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitive, vtable_offset_local+44, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.LONG)
        self.__dict__["_SetPartialCartographicWithOptionalParameters"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitive, vtable_offset_local+45, agcom.BSTR, POINTER(agcom.SAFEARRAY), agcom.PVOID, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetPartialCartographicWithOptionalParametersIndicesOrderAndRenderPass"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitive, vtable_offset_local+46, agcom.BSTR, POINTER(agcom.SAFEARRAY), agcom.PVOID, POINTER(agcom.SAFEARRAY), agcom.LONG, agcom.LONG)
        self.__dict__["_Supported"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitive, vtable_offset_local+47, agcom.LONG, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetClampToPixel"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitive, vtable_offset_local+48, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetClampToPixel"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitive, vtable_offset_local+49, agcom.VARIANT_BOOL)
        self.__dict__["_GetCentralBodyClipped"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitive, vtable_offset_local+50, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetCentralBodyClipped"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitive, vtable_offset_local+51, agcom.VARIANT_BOOL)
        self.__dict__["_AlignToScreen"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitive, vtable_offset_local+52, )
        self.__dict__["_AlignToNorth"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitive, vtable_offset_local+53, agcom.BSTR)
        self.__dict__["_AlignToAxis"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitive, vtable_offset_local+54, agcom.BSTR, POINTER(agcom.SAFEARRAY))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsMarkerBatchPrimitive.__dict__ and type(IAgStkGraphicsMarkerBatchPrimitive.__dict__[attrname]) == property:
            return IAgStkGraphicsMarkerBatchPrimitive.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsMarkerBatchPrimitive.")
    
    @property
    def SizeSource(self) -> "AgEStkGraphicsMarkerBatchSizeSource":
        """Gets the source used for the size of markers in the batch."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsMarkerBatchSizeSource) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSizeSource"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def SortOrder(self) -> "AgEStkGraphicsMarkerBatchSortOrder":
        """Gets the order in which markers in the marker batch are sorted before rendering."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsMarkerBatchSortOrder) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSortOrder"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def SetHint(self) -> "AgEStkGraphicsSetHint":
        """Gets the primitive's set hint. See the Set Hint Performance Overview for selecting an appropriate value to construct the primitive with."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsSetHint) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSetHint"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def RenderingMethod(self) -> "AgEStkGraphicsMarkerBatchRenderingMethod":
        """Gets the rendering method used to render the marker batch."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsMarkerBatchRenderingMethod) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetRenderingMethod"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def RenderPass(self) -> "AgEStkGraphicsMarkerBatchRenderPass":
        """Gets or sets the pass during which the marker batch is rendered."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsMarkerBatchRenderPass) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetRenderPass"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @RenderPass.setter
    def RenderPass(self, renderPass:"AgEStkGraphicsMarkerBatchRenderPass") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsMarkerBatchRenderPass, renderPass) as arg_renderPass:
            agcls.evaluate_hresult(self.__dict__["_SetRenderPass"](arg_renderPass.COM_val))

    @property
    def BoundingSphereScale(self) -> float:
        """Gets or sets the scale applied to the radius of this primitive's bounding sphere."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBoundingSphereScale"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @BoundingSphereScale.setter
    def BoundingSphereScale(self, boundingSphereScale:float) -> None:
        with agmarshall.DOUBLE_arg(boundingSphereScale) as arg_boundingSphereScale:
            agcls.evaluate_hresult(self.__dict__["_SetBoundingSphereScale"](arg_boundingSphereScale.COM_val))

    @property
    def DistanceDisplayConditionPerMarker(self) -> "IAgStkGraphicsDistanceDisplayCondition":
        """Gets or sets a distance display condition that is evaluated per marker in the marker batch during rendering. This is different than display condition, which is evaluated once for the entire marker batch..."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDistanceDisplayConditionPerMarker"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @DistanceDisplayConditionPerMarker.setter
    def DistanceDisplayConditionPerMarker(self, distanceDisplayConditionPerMarker:"IAgStkGraphicsDistanceDisplayCondition") -> None:
        with agmarshall.AgInterface_in_arg(distanceDisplayConditionPerMarker, IAgStkGraphicsDistanceDisplayCondition) as arg_distanceDisplayConditionPerMarker:
            agcls.evaluate_hresult(self.__dict__["_SetDistanceDisplayConditionPerMarker"](arg_distanceDisplayConditionPerMarker.COM_val))

    @property
    def Texture(self) -> "IAgStkGraphicsRendererTexture2D":
        """Gets or sets the per-batch texture, which is applied to each marker in the batch."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTexture"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @Texture.setter
    def Texture(self, texture:"IAgStkGraphicsRendererTexture2D") -> None:
        with agmarshall.AgInterface_in_arg(texture, IAgStkGraphicsRendererTexture2D) as arg_texture:
            agcls.evaluate_hresult(self.__dict__["_SetTexture"](arg_texture.COM_val))

    @property
    def SizeUnit(self) -> "AgEStkGraphicsMarkerBatchUnit":
        """Gets or sets the unit that each marker's size is defined in."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsMarkerBatchUnit) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSizeUnit"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @SizeUnit.setter
    def SizeUnit(self, sizeUnit:"AgEStkGraphicsMarkerBatchUnit") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsMarkerBatchUnit, sizeUnit) as arg_sizeUnit:
            agcls.evaluate_hresult(self.__dict__["_SetSizeUnit"](arg_sizeUnit.COM_val))

    @property
    def Size(self) -> list:
        """Gets or sets the per-batch size, which is applied to each marker in the batch. The array contains one width followed by one height."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @Size.setter
    def Size(self, size:list) -> None:
        with agmarshall.SAFEARRAY_arg(size) as arg_size:
            agcls.evaluate_hresult(self.__dict__["_SetSize"](arg_size.COM_val))

    @property
    def Origin(self) -> "AgEStkGraphicsOrigin":
        """Gets or sets the per-batch origin, which is applied to each marker in the batch."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsOrigin) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetOrigin"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Origin.setter
    def Origin(self, origin:"AgEStkGraphicsOrigin") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsOrigin, origin) as arg_origin:
            agcls.evaluate_hresult(self.__dict__["_SetOrigin"](arg_origin.COM_val))

    @property
    def PixelOffset(self) -> list:
        """Gets or sets the per-batch pixel offset, which is applied to each marker in the batch. The array contains one x pixel offset followed by one y pixel offset."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPixelOffset"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @PixelOffset.setter
    def PixelOffset(self, pixelOffset:list) -> None:
        with agmarshall.SAFEARRAY_arg(pixelOffset) as arg_pixelOffset:
            agcls.evaluate_hresult(self.__dict__["_SetPixelOffset"](arg_pixelOffset.COM_val))

    @property
    def EyeOffset(self) -> list:
        """Gets or sets the per-batch eye offset, which is applied to each marker in the batch. The array contains the components of the eye offset in the order x, y, z."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetEyeOffset"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @EyeOffset.setter
    def EyeOffset(self, eyeOffset:list) -> None:
        with agmarshall.SAFEARRAY_arg(eyeOffset) as arg_eyeOffset:
            agcls.evaluate_hresult(self.__dict__["_SetEyeOffset"](arg_eyeOffset.COM_val))

    @property
    def Rotation(self) -> float:
        """Gets or sets the per-batch rotation angle which is applied to each marker in the batch."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetRotation"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Rotation.setter
    def Rotation(self, rotation:float) -> None:
        with agmarshall.DOUBLE_arg(rotation) as arg_rotation:
            agcls.evaluate_hresult(self.__dict__["_SetRotation"](arg_rotation.COM_val))

    @property
    def TextureCoordinate(self) -> list:
        """Gets or sets the per-batch texture coordinate, which is applied to each marker in the batch. The array contains the texture coordinates arranged in the order s, t, p, q."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTextureCoordinate"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @TextureCoordinate.setter
    def TextureCoordinate(self, textureCoordinate:list) -> None:
        with agmarshall.SAFEARRAY_arg(textureCoordinate) as arg_textureCoordinate:
            agcls.evaluate_hresult(self.__dict__["_SetTextureCoordinate"](arg_textureCoordinate.COM_val))

    @property
    def Wireframe(self) -> bool:
        """Gets or sets whether the primitive is rendered in wireframe. This is useful for debugging."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetWireframe"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Wireframe.setter
    def Wireframe(self, wireframe:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(wireframe) as arg_wireframe:
            agcls.evaluate_hresult(self.__dict__["_SetWireframe"](arg_wireframe.COM_val))

    @property
    def PerItemPickingEnabled(self) -> bool:
        """Gets or sets whether individual marker indices will be included in the pick results returned from the scene's Pick method. Each marker index that is picked will be returned as a batch primitive index."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPerItemPickingEnabled"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @PerItemPickingEnabled.setter
    def PerItemPickingEnabled(self, perItemPickingEnabled:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(perItemPickingEnabled) as arg_perItemPickingEnabled:
            agcls.evaluate_hresult(self.__dict__["_SetPerItemPickingEnabled"](arg_perItemPickingEnabled.COM_val))

    @property
    def TextureFilter(self) -> "IAgStkGraphicsTextureFilter2D":
        """Gets or sets the filter used for per-marker or per-batch textures."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTextureFilter"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @TextureFilter.setter
    def TextureFilter(self, textureFilter:"IAgStkGraphicsTextureFilter2D") -> None:
        with agmarshall.AgInterface_in_arg(textureFilter, IAgStkGraphicsTextureFilter2D) as arg_textureFilter:
            agcls.evaluate_hresult(self.__dict__["_SetTextureFilter"](arg_textureFilter.COM_val))

    def Set(self, positions:list) -> None:
        """Defines the positions of markers in a marker batch. The markers are rendered in the primitive's reference frame."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions:
            agcls.evaluate_hresult(self.__dict__["_Set"](byref(arg_positions.COM_val)))

    def SetWithOptionalParameters(self, positions:list, optionalParameters:"IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters") -> None:
        """Defines the positions and optional per-marker parameters of markers in a marker batch. The markers are rendered in the primitive's reference frame."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.AgInterface_in_arg(optionalParameters, IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters) as arg_optionalParameters:
            agcls.evaluate_hresult(self.__dict__["_SetWithOptionalParameters"](byref(arg_positions.COM_val), arg_optionalParameters.COM_val))

    def SetWithOptionalParametersAndRenderPassHint(self, positions:list, optionalParameters:"IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters", renderPassHint:"AgEStkGraphicsRenderPassHint") -> None:
        """Defines the positions and optional per-marker parameters of markers in a marker batch. The markers are rendered in the primitive's reference frame. renderPassHint is provided for efficiency."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.AgInterface_in_arg(optionalParameters, IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters) as arg_optionalParameters, \
             agmarshall.AgEnum_arg(AgEStkGraphicsRenderPassHint, renderPassHint) as arg_renderPassHint:
            agcls.evaluate_hresult(self.__dict__["_SetWithOptionalParametersAndRenderPassHint"](byref(arg_positions.COM_val), arg_optionalParameters.COM_val, arg_renderPassHint.COM_val))

    def SetCartographic(self, centralBody:str, positions:list) -> None:
        """For convenience. Defines the positions of markers in a marker batch using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling Set."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions:
            agcls.evaluate_hresult(self.__dict__["_SetCartographic"](arg_centralBody.COM_val, byref(arg_positions.COM_val)))

    def SetCartographicWithOptionalParameters(self, centralBody:str, positions:list, optionalParameters:"IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters") -> None:
        """For convenience. Defines the positions and optional per-marker parameters of markers in a marker batch using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling Set."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.AgInterface_in_arg(optionalParameters, IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters) as arg_optionalParameters:
            agcls.evaluate_hresult(self.__dict__["_SetCartographicWithOptionalParameters"](arg_centralBody.COM_val, byref(arg_positions.COM_val), arg_optionalParameters.COM_val))

    def SetCartographicWithOptionalParametersAndRenderPassHint(self, centralBody:str, positions:list, optionalParameters:"IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters", renderPassHint:"AgEStkGraphicsRenderPassHint") -> None:
        """For convenience. Defines the positions and optional per-marker parameters of markers in a marker batch using cartographic positions. renderPassHint is provided for efficiency..."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.AgInterface_in_arg(optionalParameters, IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters) as arg_optionalParameters, \
             agmarshall.AgEnum_arg(AgEStkGraphicsRenderPassHint, renderPassHint) as arg_renderPassHint:
            agcls.evaluate_hresult(self.__dict__["_SetCartographicWithOptionalParametersAndRenderPassHint"](arg_centralBody.COM_val, byref(arg_positions.COM_val), arg_optionalParameters.COM_val, arg_renderPassHint.COM_val))

    def SetPartial(self, positions:list, indices:list) -> None:
        """Updates a subset of marker positions in a marker batch."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices:
            agcls.evaluate_hresult(self.__dict__["_SetPartial"](byref(arg_positions.COM_val), byref(arg_indices.COM_val)))

    def SetPartialWithIndicesOrder(self, positions:list, indices:list, indicesOrderHint:"AgEStkGraphicsIndicesOrderHint") -> None:
        """Updates a subset of marker positions in a marker batch."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices, \
             agmarshall.AgEnum_arg(AgEStkGraphicsIndicesOrderHint, indicesOrderHint) as arg_indicesOrderHint:
            agcls.evaluate_hresult(self.__dict__["_SetPartialWithIndicesOrder"](byref(arg_positions.COM_val), byref(arg_indices.COM_val), arg_indicesOrderHint.COM_val))

    def SetPartialWithOptionalParameters(self, positions:list, optionalParameters:"IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters", indices:list) -> None:
        """Updates a subset of marker positions and/or per-marker parameters in a marker batch."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.AgInterface_in_arg(optionalParameters, IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters) as arg_optionalParameters, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices:
            agcls.evaluate_hresult(self.__dict__["_SetPartialWithOptionalParameters"](byref(arg_positions.COM_val), arg_optionalParameters.COM_val, byref(arg_indices.COM_val)))

    def SetPartialWithOptionalParametersIndicesOrderAndRenderPass(self, positions:list, optionalParameters:"IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters", indices:list, indicesOrderHint:"AgEStkGraphicsIndicesOrderHint", renderPassHint:"AgEStkGraphicsRenderPassHint") -> None:
        """Updates a subset of marker positions and/or per-marker parameters in a marker batch."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.AgInterface_in_arg(optionalParameters, IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters) as arg_optionalParameters, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices, \
             agmarshall.AgEnum_arg(AgEStkGraphicsIndicesOrderHint, indicesOrderHint) as arg_indicesOrderHint, \
             agmarshall.AgEnum_arg(AgEStkGraphicsRenderPassHint, renderPassHint) as arg_renderPassHint:
            agcls.evaluate_hresult(self.__dict__["_SetPartialWithOptionalParametersIndicesOrderAndRenderPass"](byref(arg_positions.COM_val), arg_optionalParameters.COM_val, byref(arg_indices.COM_val), arg_indicesOrderHint.COM_val, arg_renderPassHint.COM_val))

    def SetPartialCartographic(self, centralBody:str, positions:list, indices:list) -> None:
        """For convenience. Updates a subset of positions in a marker batch using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling SetPartial."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices:
            agcls.evaluate_hresult(self.__dict__["_SetPartialCartographic"](arg_centralBody.COM_val, byref(arg_positions.COM_val), byref(arg_indices.COM_val)))

    def SetPartialCartographicWithIndicesOrder(self, centralBody:str, positions:list, indices:list, indicesOrderHint:"AgEStkGraphicsIndicesOrderHint") -> None:
        """For convenience. Updates a subset of positions in a marker batch using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling SetPartial."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices, \
             agmarshall.AgEnum_arg(AgEStkGraphicsIndicesOrderHint, indicesOrderHint) as arg_indicesOrderHint:
            agcls.evaluate_hresult(self.__dict__["_SetPartialCartographicWithIndicesOrder"](arg_centralBody.COM_val, byref(arg_positions.COM_val), byref(arg_indices.COM_val), arg_indicesOrderHint.COM_val))

    def SetPartialCartographicWithOptionalParameters(self, centralBody:str, positions:list, optionalParameters:"IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters", indices:list) -> None:
        """For convenience. Updates a subset of positions and/or optional per-marker parameters of markers in a marker batch using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling SetPartial."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.AgInterface_in_arg(optionalParameters, IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters) as arg_optionalParameters, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices:
            agcls.evaluate_hresult(self.__dict__["_SetPartialCartographicWithOptionalParameters"](arg_centralBody.COM_val, byref(arg_positions.COM_val), arg_optionalParameters.COM_val, byref(arg_indices.COM_val)))

    def SetPartialCartographicWithOptionalParametersIndicesOrderAndRenderPass(self, centralBody:str, positions:list, optionalParameters:"IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters", indices:list, indicesOrderHint:"AgEStkGraphicsIndicesOrderHint", renderPassHint:"AgEStkGraphicsRenderPassHint") -> None:
        """For convenience. Updates a subset of positions and/or optional per-marker parameters of markers in a marker batch using cartographic positions. renderPassHint is provided for efficiency..."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.AgInterface_in_arg(optionalParameters, IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters) as arg_optionalParameters, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices, \
             agmarshall.AgEnum_arg(AgEStkGraphicsIndicesOrderHint, indicesOrderHint) as arg_indicesOrderHint, \
             agmarshall.AgEnum_arg(AgEStkGraphicsRenderPassHint, renderPassHint) as arg_renderPassHint:
            agcls.evaluate_hresult(self.__dict__["_SetPartialCartographicWithOptionalParametersIndicesOrderAndRenderPass"](arg_centralBody.COM_val, byref(arg_positions.COM_val), arg_optionalParameters.COM_val, byref(arg_indices.COM_val), arg_indicesOrderHint.COM_val, arg_renderPassHint.COM_val))

    def Supported(self, renderingMethod:"AgEStkGraphicsMarkerBatchRenderingMethod") -> bool:
        """Determines whether or not the video card supports the marker batch primitive with the given renderingMethod."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsMarkerBatchRenderingMethod, renderingMethod) as arg_renderingMethod, \
             agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_Supported"](arg_renderingMethod.COM_val, byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def ClampToPixel(self) -> bool:
        """Gets or sets whether the screen space position of each marker is clamped to a pixel."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetClampToPixel"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @ClampToPixel.setter
    def ClampToPixel(self, clampToPixel:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(clampToPixel) as arg_clampToPixel:
            agcls.evaluate_hresult(self.__dict__["_SetClampToPixel"](arg_clampToPixel.COM_val))

    @property
    def CentralBodyClipped(self) -> bool:
        """Gets or sets whether the markers are clipped by the central body."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyClipped"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @CentralBodyClipped.setter
    def CentralBodyClipped(self, centralBodyClipped:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(centralBodyClipped) as arg_centralBodyClipped:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBodyClipped"](arg_centralBodyClipped.COM_val))

    def AlignToScreen(self) -> None:
        """Sets the up vector of the markers to always be aligned to the up vector of the camera. This is the default alignment."""
        agcls.evaluate_hresult(self.__dict__["_AlignToScreen"]())

    def AlignToNorth(self, centralBody:str) -> None:
        """Sets the up vector of the markers to point towards the north axis of centralBody. It will be aligned with the tangent vector of the surface that points north."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody:
            agcls.evaluate_hresult(self.__dict__["_AlignToNorth"](arg_centralBody.COM_val))

    def AlignToAxis(self, centralBody:str, axis:list) -> None:
        """Sets the up vector of the markers to point towards the axis of centralBody. It will be aligned with the tangent vector of the surface that points towards the axis..."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(axis) as arg_axis:
            agcls.evaluate_hresult(self.__dict__["_AlignToAxis"](arg_centralBody.COM_val, byref(arg_axis.COM_val)))


agcls.AgClassCatalog.add_catalog_entry("{235878c1-62d9-4ce6-85ff-9d82aff701e9}", IAgStkGraphicsMarkerBatchPrimitive)
agcls.AgTypeNameMap["IAgStkGraphicsMarkerBatchPrimitive"] = IAgStkGraphicsMarkerBatchPrimitive
__all__.append("IAgStkGraphicsMarkerBatchPrimitive")

class IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters(object):
    """Optional per-marker parameters for marker batch primitive that overrides the marker batch's per-batch parameters..."""
    _uuid = "{7303b63e-a1b7-445e-90e0-508a6937de86}"
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_SetTextures"] = _raise_uninitialized_error
        self.__dict__["_SetSizes"] = _raise_uninitialized_error
        self.__dict__["_SetColors"] = _raise_uninitialized_error
        self.__dict__["_SetOrigins"] = _raise_uninitialized_error
        self.__dict__["_SetPixelOffsets"] = _raise_uninitialized_error
        self.__dict__["_SetEyeOffsets"] = _raise_uninitialized_error
        self.__dict__["_SetRotations"] = _raise_uninitialized_error
        self.__dict__["_SetTextureCoordinates"] = _raise_uninitialized_error
        self.__dict__["_SetTimeIntervalDisplayConditions"] = _raise_uninitialized_error
        self.__dict__["_SetDisplays"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters = agcom.GUID(IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters._uuid)
        vtable_offset_local = IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters._vtable_offset - 1
        self.__dict__["_SetTextures"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters, vtable_offset_local+1, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetSizes"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters, vtable_offset_local+2, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetColors"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters, vtable_offset_local+3, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetOrigins"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters, vtable_offset_local+4, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetPixelOffsets"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters, vtable_offset_local+5, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetEyeOffsets"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters, vtable_offset_local+6, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetRotations"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters, vtable_offset_local+7, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetTextureCoordinates"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters, vtable_offset_local+8, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetTimeIntervalDisplayConditions"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters, vtable_offset_local+9, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetDisplays"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters, vtable_offset_local+10, POINTER(agcom.SAFEARRAY))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters.__dict__ and type(IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters.__dict__[attrname]) == property:
            return IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters.")
    
    def SetTextures(self, textures:list) -> None:
        """Defines a collection of textures, one for each marker in the batch."""
        with agmarshall.SAFEARRAY_arg(textures) as arg_textures:
            agcls.evaluate_hresult(self.__dict__["_SetTextures"](byref(arg_textures.COM_val)))

    def SetSizes(self, sizes:list) -> None:
        """Defines a collection of sizes, one for each marker in the batch."""
        with agmarshall.SAFEARRAY_arg(sizes) as arg_sizes:
            agcls.evaluate_hresult(self.__dict__["_SetSizes"](byref(arg_sizes.COM_val)))

    def SetColors(self, colors:list) -> None:
        """Defines a collection of colors, one for each marker in the batch."""
        with agmarshall.SAFEARRAY_arg(colors) as arg_colors:
            agcls.evaluate_hresult(self.__dict__["_SetColors"](byref(arg_colors.COM_val)))

    def SetOrigins(self, origins:list) -> None:
        """Defines a collection of origins, one for each marker in the batch."""
        with agmarshall.SAFEARRAY_arg(origins) as arg_origins:
            agcls.evaluate_hresult(self.__dict__["_SetOrigins"](byref(arg_origins.COM_val)))

    def SetPixelOffsets(self, pixelOffsets:list) -> None:
        """Defines a collection of pixel offsets, one for each marker in the batch."""
        with agmarshall.SAFEARRAY_arg(pixelOffsets) as arg_pixelOffsets:
            agcls.evaluate_hresult(self.__dict__["_SetPixelOffsets"](byref(arg_pixelOffsets.COM_val)))

    def SetEyeOffsets(self, eyeOffsets:list) -> None:
        """Defines a collection of eye offsets, one for each marker in the batch."""
        with agmarshall.SAFEARRAY_arg(eyeOffsets) as arg_eyeOffsets:
            agcls.evaluate_hresult(self.__dict__["_SetEyeOffsets"](byref(arg_eyeOffsets.COM_val)))

    def SetRotations(self, rotationAngles:list) -> None:
        """Defines a collection of rotation angles, one for each marker in the batch."""
        with agmarshall.SAFEARRAY_arg(rotationAngles) as arg_rotationAngles:
            agcls.evaluate_hresult(self.__dict__["_SetRotations"](byref(arg_rotationAngles.COM_val)))

    def SetTextureCoordinates(self, textureCoordinates:list) -> None:
        """Defines a collection of texture coordinates, one for each marker in the batch."""
        with agmarshall.SAFEARRAY_arg(textureCoordinates) as arg_textureCoordinates:
            agcls.evaluate_hresult(self.__dict__["_SetTextureCoordinates"](byref(arg_textureCoordinates.COM_val)))

    def SetTimeIntervalDisplayConditions(self, timeIntervals:list) -> None:
        """Defines a collection of time interval display conditions, one for each marker in the batch."""
        with agmarshall.SAFEARRAY_arg(timeIntervals) as arg_timeIntervals:
            agcls.evaluate_hresult(self.__dict__["_SetTimeIntervalDisplayConditions"](byref(arg_timeIntervals.COM_val)))

    def SetDisplays(self, displays:list) -> None:
        """Defines a collection of boolean display flags, one for each marker in the batch."""
        with agmarshall.SAFEARRAY_arg(displays) as arg_displays:
            agcls.evaluate_hresult(self.__dict__["_SetDisplays"](byref(arg_displays.COM_val)))


agcls.AgClassCatalog.add_catalog_entry("{7303b63e-a1b7-445e-90e0-508a6937de86}", IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters)
agcls.AgTypeNameMap["IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters"] = IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters
__all__.append("IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters")

class IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy(object):
    """path primitive update policy that removes points from remove location when the number of points in the path exceeds maximum count."""
    _uuid = "{fcacfb20-3ffb-46c4-9e07-495b1446c52b}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetMaximumCount"] = _raise_uninitialized_error
        self.__dict__["_SetMaximumCount"] = _raise_uninitialized_error
        self.__dict__["_GetRemoveLocation"] = _raise_uninitialized_error
        self.__dict__["_SetRemoveLocation"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy = agcom.GUID(IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy._uuid)
        vtable_offset_local = IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy._vtable_offset - 1
        self.__dict__["_GetMaximumCount"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy, vtable_offset_local+1, POINTER(agcom.INT))
        self.__dict__["_SetMaximumCount"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy, vtable_offset_local+2, agcom.INT)
        self.__dict__["_GetRemoveLocation"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetRemoveLocation"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy, vtable_offset_local+4, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy.__dict__ and type(IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy.__dict__[attrname]) == property:
            return IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy.")
    
    @property
    def MaximumCount(self) -> int:
        """Gets or sets the maximum number of points in the path."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaximumCount"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @MaximumCount.setter
    def MaximumCount(self, maximumCount:int) -> None:
        with agmarshall.INT_arg(maximumCount) as arg_maximumCount:
            agcls.evaluate_hresult(self.__dict__["_SetMaximumCount"](arg_maximumCount.COM_val))

    @property
    def RemoveLocation(self) -> "AgEStkGraphicsPathPrimitiveRemoveLocation":
        """Gets or sets where the positions on the path are removed from."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsPathPrimitiveRemoveLocation) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetRemoveLocation"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @RemoveLocation.setter
    def RemoveLocation(self, removeLocation:"AgEStkGraphicsPathPrimitiveRemoveLocation") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsPathPrimitiveRemoveLocation, removeLocation) as arg_removeLocation:
            agcls.evaluate_hresult(self.__dict__["_SetRemoveLocation"](arg_removeLocation.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{fcacfb20-3ffb-46c4-9e07-495b1446c52b}", IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy)
agcls.AgTypeNameMap["IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy"] = IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy
__all__.append("IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy")

class IAgStkGraphicsModelArticulation(object):
    """A model articulation identifies geometry on the model and is a collection of transformations that can be applied to that geometry."""
    _uuid = "{4554a375-123b-4a39-b727-3e9131879196}"
    _num_methods = 7
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetName"] = _raise_uninitialized_error
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        self.__dict__["_Item"] = _raise_uninitialized_error
        self.__dict__["_GetItemByString"] = _raise_uninitialized_error
        self.__dict__["_GetByName"] = _raise_uninitialized_error
        self.__dict__["_Contains"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsModelArticulation._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsModelArticulation from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsModelArticulation = agcom.GUID(IAgStkGraphicsModelArticulation._uuid)
        vtable_offset_local = IAgStkGraphicsModelArticulation._vtable_offset - 1
        self.__dict__["_GetName"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsModelArticulation, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsModelArticulation, vtable_offset_local+2, POINTER(agcom.INT))
        self.__dict__["_Item"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsModelArticulation, vtable_offset_local+3, agcom.INT, POINTER(agcom.PVOID))
        self.__dict__["_GetItemByString"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsModelArticulation, vtable_offset_local+4, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_GetByName"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsModelArticulation, vtable_offset_local+5, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_Contains"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsModelArticulation, vtable_offset_local+6, agcom.BSTR, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsModelArticulation, vtable_offset_local+7, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsModelArticulation.__dict__ and type(IAgStkGraphicsModelArticulation.__dict__[attrname]) == property:
            return IAgStkGraphicsModelArticulation.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsModelArticulation.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> "IAgStkGraphicsModelTransformation":
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    
    @property
    def Name(self) -> str:
        """Gets the name of the articulation."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetName"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Count(self) -> int:
        """Gets the number of transformations in the collection."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def Item(self, index:int) -> "IAgStkGraphicsModelTransformation":
        """Gets the transformation at the given index. The index is zero-based."""
        with agmarshall.INT_arg(index) as arg_index, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Item"](arg_index.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def GetItemByString(self, name:str) -> "IAgStkGraphicsModelTransformation":
        """Gets a transformation by name."""
        with agmarshall.BSTR_arg(name) as arg_name, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetItemByString"](arg_name.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def GetByName(self, name:str) -> "IAgStkGraphicsModelTransformation":
        """Gets a transformation by name."""
        with agmarshall.BSTR_arg(name) as arg_name, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetByName"](arg_name.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def Contains(self, name:str) -> bool:
        """Returns true if the collection contains the transformation."""
        with agmarshall.BSTR_arg(name) as arg_name, \
             agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_Contains"](arg_name.COM_val, byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        """Returns the enumerator for this collection."""
        with agmarshall.IEnumVARIANT_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{4554a375-123b-4a39-b727-3e9131879196}", IAgStkGraphicsModelArticulation)
agcls.AgTypeNameMap["IAgStkGraphicsModelArticulation"] = IAgStkGraphicsModelArticulation
__all__.append("IAgStkGraphicsModelArticulation")

class IAgStkGraphicsModelArticulationCollection(object):
    """A collection containing a model primitive's available articulations. A model articulation identifies geometry on the model and is a collection of transformations that can be applied to that geometry."""
    _uuid = "{cf6e3054-4d92-42f8-ac4d-e43bfd93d23d}"
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        self.__dict__["_Item"] = _raise_uninitialized_error
        self.__dict__["_GetItemByString"] = _raise_uninitialized_error
        self.__dict__["_GetByName"] = _raise_uninitialized_error
        self.__dict__["_Contains"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsModelArticulationCollection._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsModelArticulationCollection from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsModelArticulationCollection = agcom.GUID(IAgStkGraphicsModelArticulationCollection._uuid)
        vtable_offset_local = IAgStkGraphicsModelArticulationCollection._vtable_offset - 1
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsModelArticulationCollection, vtable_offset_local+1, POINTER(agcom.INT))
        self.__dict__["_Item"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsModelArticulationCollection, vtable_offset_local+2, agcom.INT, POINTER(agcom.PVOID))
        self.__dict__["_GetItemByString"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsModelArticulationCollection, vtable_offset_local+3, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_GetByName"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsModelArticulationCollection, vtable_offset_local+4, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_Contains"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsModelArticulationCollection, vtable_offset_local+5, agcom.BSTR, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsModelArticulationCollection, vtable_offset_local+6, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsModelArticulationCollection.__dict__ and type(IAgStkGraphicsModelArticulationCollection.__dict__[attrname]) == property:
            return IAgStkGraphicsModelArticulationCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsModelArticulationCollection.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> "IAgStkGraphicsModelArticulation":
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    
    @property
    def Count(self) -> int:
        """Gets the number of articulations in the collection."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def Item(self, index:int) -> "IAgStkGraphicsModelArticulation":
        """Gets the articulation at the given index. The index is zero-based."""
        with agmarshall.INT_arg(index) as arg_index, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Item"](arg_index.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def GetItemByString(self, name:str) -> "IAgStkGraphicsModelArticulation":
        """Gets an articulation by name."""
        with agmarshall.BSTR_arg(name) as arg_name, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetItemByString"](arg_name.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def GetByName(self, name:str) -> "IAgStkGraphicsModelArticulation":
        """Gets an articulation by name."""
        with agmarshall.BSTR_arg(name) as arg_name, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetByName"](arg_name.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def Contains(self, name:str) -> bool:
        """Returns true if the collection contains the articulation."""
        with agmarshall.BSTR_arg(name) as arg_name, \
             agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_Contains"](arg_name.COM_val, byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        """Returns the enumerator for this collection."""
        with agmarshall.IEnumVARIANT_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{cf6e3054-4d92-42f8-ac4d-e43bfd93d23d}", IAgStkGraphicsModelArticulationCollection)
agcls.AgTypeNameMap["IAgStkGraphicsModelArticulationCollection"] = IAgStkGraphicsModelArticulationCollection
__all__.append("IAgStkGraphicsModelArticulationCollection")

class IAgStkGraphicsModelPrimitive(object):
    """The model primitive loads and renders <a href='http://www.collada.org/'>COLLADA</a> (DAE) and AGI <a href='https://support.agi.com/3d-models'>MDL</a> (MDL) models."""
    _uuid = "{67a2ad57-e9b2-4dc9-b509-62cbebc405ca}"
    _num_methods = 11
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetUriAsString"] = _raise_uninitialized_error
        self.__dict__["_GetScale"] = _raise_uninitialized_error
        self.__dict__["_SetScale"] = _raise_uninitialized_error
        self.__dict__["_GetPosition"] = _raise_uninitialized_error
        self.__dict__["_SetPosition"] = _raise_uninitialized_error
        self.__dict__["_GetOrientation"] = _raise_uninitialized_error
        self.__dict__["_SetOrientation"] = _raise_uninitialized_error
        self.__dict__["_GetArticulations"] = _raise_uninitialized_error
        self.__dict__["_LoadWithStringUri"] = _raise_uninitialized_error
        self.__dict__["_LoadWithStringUriAndUpAxis"] = _raise_uninitialized_error
        self.__dict__["_SetPositionCartographic"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsModelPrimitive._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsModelPrimitive from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsModelPrimitive = agcom.GUID(IAgStkGraphicsModelPrimitive._uuid)
        vtable_offset_local = IAgStkGraphicsModelPrimitive._vtable_offset - 1
        self.__dict__["_GetUriAsString"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsModelPrimitive, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_GetScale"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsModelPrimitive, vtable_offset_local+2, POINTER(agcom.DOUBLE))
        self.__dict__["_SetScale"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsModelPrimitive, vtable_offset_local+3, agcom.DOUBLE)
        self.__dict__["_GetPosition"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsModelPrimitive, vtable_offset_local+4, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetPosition"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsModelPrimitive, vtable_offset_local+5, agcom.SAFEARRAY)
        self.__dict__["_GetOrientation"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsModelPrimitive, vtable_offset_local+6, POINTER(agcom.PVOID))
        self.__dict__["_SetOrientation"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsModelPrimitive, vtable_offset_local+7, agcom.PVOID)
        self.__dict__["_GetArticulations"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsModelPrimitive, vtable_offset_local+8, POINTER(agcom.PVOID))
        self.__dict__["_LoadWithStringUri"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsModelPrimitive, vtable_offset_local+9, agcom.BSTR)
        self.__dict__["_LoadWithStringUriAndUpAxis"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsModelPrimitive, vtable_offset_local+10, agcom.BSTR, agcom.LONG)
        self.__dict__["_SetPositionCartographic"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsModelPrimitive, vtable_offset_local+11, agcom.BSTR, POINTER(agcom.SAFEARRAY))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsModelPrimitive.__dict__ and type(IAgStkGraphicsModelPrimitive.__dict__[attrname]) == property:
            return IAgStkGraphicsModelPrimitive.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsModelPrimitive.")
    
    @property
    def UriAsString(self) -> str:
        """Gets the URI of the file used to load the file."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetUriAsString"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Scale(self) -> float:
        """Gets or sets the linear scale used to increase or decrease the size of the rendered model."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetScale"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Scale.setter
    def Scale(self, scale:float) -> None:
        with agmarshall.DOUBLE_arg(scale) as arg_scale:
            agcls.evaluate_hresult(self.__dict__["_SetScale"](arg_scale.COM_val))

    @property
    def Position(self) -> list:
        """Gets or sets the position of the model. The position is defined in the model's reference frame. The array contains the components of the position in the order x, y, z."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPosition"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @Position.setter
    def Position(self, position:list) -> None:
        with agmarshall.SAFEARRAY_arg(position) as arg_position:
            agcls.evaluate_hresult(self.__dict__["_SetPosition"](arg_position.COM_val))

    @property
    def Orientation(self) -> "IAgOrientation":
        """Gets or sets the model's orientation. The quaternion is a rotation from the model's local axes to the axes of the model's reference frame."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetOrientation"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @Orientation.setter
    def Orientation(self, orientation:"IAgOrientation") -> None:
        with agmarshall.AgInterface_in_arg(orientation, IAgOrientation) as arg_orientation:
            agcls.evaluate_hresult(self.__dict__["_SetOrientation"](arg_orientation.COM_val))

    @property
    def Articulations(self) -> "IAgStkGraphicsModelArticulationCollection":
        """Gets the model's articulations. Articulations identify geometry and contain transformations for manipulating that geometry."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetArticulations"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def LoadWithStringUri(self, uri:str) -> None:
        """For convenience. Loads a <a href='http://www.collada.org/'>COLLADA</a> (DAE) or AGI <a href='https://support.agi.com/3d-models'>MDL</a> (MDL) model using a file path."""
        with agmarshall.BSTR_arg(uri) as arg_uri:
            agcls.evaluate_hresult(self.__dict__["_LoadWithStringUri"](arg_uri.COM_val))

    def LoadWithStringUriAndUpAxis(self, uri:str, upAxis:"AgEStkGraphicsModelUpAxis") -> None:
        """For convenience. Loads a <a href='http://www.collada.org/'>COLLADA</a> (DAE) or AGI <a href='https://support.agi.com/3d-models'>MDL</a> (MDL) model using a file path."""
        with agmarshall.BSTR_arg(uri) as arg_uri, \
             agmarshall.AgEnum_arg(AgEStkGraphicsModelUpAxis, upAxis) as arg_upAxis:
            agcls.evaluate_hresult(self.__dict__["_LoadWithStringUriAndUpAxis"](arg_uri.COM_val, arg_upAxis.COM_val))

    def SetPositionCartographic(self, centralBody:str, position:list) -> None:
        """For convenience. Sets the cartographic position of the model. This also sets position."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(position) as arg_position:
            agcls.evaluate_hresult(self.__dict__["_SetPositionCartographic"](arg_centralBody.COM_val, byref(arg_position.COM_val)))


agcls.AgClassCatalog.add_catalog_entry("{67a2ad57-e9b2-4dc9-b509-62cbebc405ca}", IAgStkGraphicsModelPrimitive)
agcls.AgTypeNameMap["IAgStkGraphicsModelPrimitive"] = IAgStkGraphicsModelPrimitive
__all__.append("IAgStkGraphicsModelPrimitive")

class IAgStkGraphicsModelTransformation(object):
    """A model transformation defines a transformation that is applied to geometry on a model primitive. That geometry is identified by the model articulation which contains the transformation..."""
    _uuid = "{c58f7fc4-2f63-494d-a461-2c385a53b9a2}"
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCurrentValue"] = _raise_uninitialized_error
        self.__dict__["_SetCurrentValue"] = _raise_uninitialized_error
        self.__dict__["_GetMinimumValue"] = _raise_uninitialized_error
        self.__dict__["_GetMaximumValue"] = _raise_uninitialized_error
        self.__dict__["_GetDefaultValue"] = _raise_uninitialized_error
        self.__dict__["_GetRange"] = _raise_uninitialized_error
        self.__dict__["_GetName"] = _raise_uninitialized_error
        self.__dict__["_GetType"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsModelTransformation._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsModelTransformation from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsModelTransformation = agcom.GUID(IAgStkGraphicsModelTransformation._uuid)
        vtable_offset_local = IAgStkGraphicsModelTransformation._vtable_offset - 1
        self.__dict__["_GetCurrentValue"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsModelTransformation, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetCurrentValue"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsModelTransformation, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetMinimumValue"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsModelTransformation, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_GetMaximumValue"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsModelTransformation, vtable_offset_local+4, POINTER(agcom.DOUBLE))
        self.__dict__["_GetDefaultValue"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsModelTransformation, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_GetRange"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsModelTransformation, vtable_offset_local+6, POINTER(agcom.DOUBLE))
        self.__dict__["_GetName"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsModelTransformation, vtable_offset_local+7, POINTER(agcom.BSTR))
        self.__dict__["_GetType"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsModelTransformation, vtable_offset_local+8, POINTER(agcom.LONG))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsModelTransformation.__dict__ and type(IAgStkGraphicsModelTransformation.__dict__[attrname]) == property:
            return IAgStkGraphicsModelTransformation.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsModelTransformation.")
    
    @property
    def CurrentValue(self) -> float:
        """Gets or sets the current value of the transformation. The current value of the transformation will be reflected in the geometry of the model primitive that it is associated with."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCurrentValue"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @CurrentValue.setter
    def CurrentValue(self, currentValue:float) -> None:
        with agmarshall.DOUBLE_arg(currentValue) as arg_currentValue:
            agcls.evaluate_hresult(self.__dict__["_SetCurrentValue"](arg_currentValue.COM_val))

    @property
    def MinimumValue(self) -> float:
        """Gets the minimum value of the transformation."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinimumValue"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def MaximumValue(self) -> float:
        """Gets the maximum value of the transformation."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaximumValue"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def DefaultValue(self) -> float:
        """Gets the default value of the transformation. The current value property of the transformation will have this value when the model primitive is initialized."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDefaultValue"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Range(self) -> float:
        """Gets the value range of the transformation. Equivalent to the difference of the maximum value and minimum value properties."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetRange"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Name(self) -> str:
        """Gets the name of the transformation."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetName"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Type(self) -> "AgEStkGraphicsModelTransformationType":
        """Gets the model transformation type associated with the transformation."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsModelTransformationType) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetType"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{c58f7fc4-2f63-494d-a461-2c385a53b9a2}", IAgStkGraphicsModelTransformation)
agcls.AgTypeNameMap["IAgStkGraphicsModelTransformation"] = IAgStkGraphicsModelTransformation
__all__.append("IAgStkGraphicsModelTransformation")

class IAgStkGraphicsOverlay(object):
    """A visible element drawn in screen space. Overlays are useful for floating logos, heads up displays, and integrating user interfaces into the 3D window."""
    _uuid = "{b7007235-5a52-450b-83af-1e8080d3b0be}"
    _num_methods = 76
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetPosition"] = _raise_uninitialized_error
        self.__dict__["_SetPosition"] = _raise_uninitialized_error
        self.__dict__["_GetPinningPosition"] = _raise_uninitialized_error
        self.__dict__["_SetPinningPosition"] = _raise_uninitialized_error
        self.__dict__["_GetX"] = _raise_uninitialized_error
        self.__dict__["_SetX"] = _raise_uninitialized_error
        self.__dict__["_GetXUnit"] = _raise_uninitialized_error
        self.__dict__["_SetXUnit"] = _raise_uninitialized_error
        self.__dict__["_GetY"] = _raise_uninitialized_error
        self.__dict__["_SetY"] = _raise_uninitialized_error
        self.__dict__["_GetYUnit"] = _raise_uninitialized_error
        self.__dict__["_SetYUnit"] = _raise_uninitialized_error
        self.__dict__["_GetSize"] = _raise_uninitialized_error
        self.__dict__["_SetSize"] = _raise_uninitialized_error
        self.__dict__["_GetWidth"] = _raise_uninitialized_error
        self.__dict__["_SetWidth"] = _raise_uninitialized_error
        self.__dict__["_GetWidthUnit"] = _raise_uninitialized_error
        self.__dict__["_SetWidthUnit"] = _raise_uninitialized_error
        self.__dict__["_GetHeight"] = _raise_uninitialized_error
        self.__dict__["_SetHeight"] = _raise_uninitialized_error
        self.__dict__["_GetHeightUnit"] = _raise_uninitialized_error
        self.__dict__["_SetHeightUnit"] = _raise_uninitialized_error
        self.__dict__["_GetMinimumSize"] = _raise_uninitialized_error
        self.__dict__["_SetMinimumSize"] = _raise_uninitialized_error
        self.__dict__["_GetMaximumSize"] = _raise_uninitialized_error
        self.__dict__["_SetMaximumSize"] = _raise_uninitialized_error
        self.__dict__["_GetBounds"] = _raise_uninitialized_error
        self.__dict__["_GetBorderColor"] = _raise_uninitialized_error
        self.__dict__["_SetBorderColor"] = _raise_uninitialized_error
        self.__dict__["_GetBorderSize"] = _raise_uninitialized_error
        self.__dict__["_SetBorderSize"] = _raise_uninitialized_error
        self.__dict__["_GetBorderTranslucency"] = _raise_uninitialized_error
        self.__dict__["_SetBorderTranslucency"] = _raise_uninitialized_error
        self.__dict__["_GetTranslationX"] = _raise_uninitialized_error
        self.__dict__["_SetTranslationX"] = _raise_uninitialized_error
        self.__dict__["_GetTranslationY"] = _raise_uninitialized_error
        self.__dict__["_SetTranslationY"] = _raise_uninitialized_error
        self.__dict__["_GetRotationAngle"] = _raise_uninitialized_error
        self.__dict__["_SetRotationAngle"] = _raise_uninitialized_error
        self.__dict__["_GetRotationPoint"] = _raise_uninitialized_error
        self.__dict__["_SetRotationPoint"] = _raise_uninitialized_error
        self.__dict__["_GetScale"] = _raise_uninitialized_error
        self.__dict__["_SetScale"] = _raise_uninitialized_error
        self.__dict__["_GetFlipX"] = _raise_uninitialized_error
        self.__dict__["_SetFlipX"] = _raise_uninitialized_error
        self.__dict__["_GetFlipY"] = _raise_uninitialized_error
        self.__dict__["_SetFlipY"] = _raise_uninitialized_error
        self.__dict__["_GetOrigin"] = _raise_uninitialized_error
        self.__dict__["_SetOrigin"] = _raise_uninitialized_error
        self.__dict__["_GetPinningOrigin"] = _raise_uninitialized_error
        self.__dict__["_SetPinningOrigin"] = _raise_uninitialized_error
        self.__dict__["_GetParent"] = _raise_uninitialized_error
        self.__dict__["_GetTranslucency"] = _raise_uninitialized_error
        self.__dict__["_SetTranslucency"] = _raise_uninitialized_error
        self.__dict__["_GetColor"] = _raise_uninitialized_error
        self.__dict__["_SetColor"] = _raise_uninitialized_error
        self.__dict__["_GetPickingEnabled"] = _raise_uninitialized_error
        self.__dict__["_SetPickingEnabled"] = _raise_uninitialized_error
        self.__dict__["_GetClipToParent"] = _raise_uninitialized_error
        self.__dict__["_SetClipToParent"] = _raise_uninitialized_error
        self.__dict__["_GetDisplay"] = _raise_uninitialized_error
        self.__dict__["_SetDisplay"] = _raise_uninitialized_error
        self.__dict__["_GetControlPosition"] = _raise_uninitialized_error
        self.__dict__["_GetControlSize"] = _raise_uninitialized_error
        self.__dict__["_GetControlBounds"] = _raise_uninitialized_error
        self.__dict__["_GetDisplayCondition"] = _raise_uninitialized_error
        self.__dict__["_SetDisplayCondition"] = _raise_uninitialized_error
        self.__dict__["_GetOverlays"] = _raise_uninitialized_error
        self.__dict__["_GetPadding"] = _raise_uninitialized_error
        self.__dict__["_SetPadding"] = _raise_uninitialized_error
        self.__dict__["_BringToFront"] = _raise_uninitialized_error
        self.__dict__["_SendToBack"] = _raise_uninitialized_error
        self.__dict__["_OverlayToControl"] = _raise_uninitialized_error
        self.__dict__["_ControlToOverlay"] = _raise_uninitialized_error
        self.__dict__["_GetTag"] = _raise_uninitialized_error
        self.__dict__["_SetTag"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsOverlay._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsOverlay from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsOverlay = agcom.GUID(IAgStkGraphicsOverlay._uuid)
        vtable_offset_local = IAgStkGraphicsOverlay._vtable_offset - 1
        self.__dict__["_GetPosition"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+1, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetPosition"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+2, agcom.SAFEARRAY)
        self.__dict__["_GetPinningPosition"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+3, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetPinningPosition"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+4, agcom.SAFEARRAY)
        self.__dict__["_GetX"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetX"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetXUnit"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+7, POINTER(agcom.LONG))
        self.__dict__["_SetXUnit"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+8, agcom.LONG)
        self.__dict__["_GetY"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetY"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+10, agcom.DOUBLE)
        self.__dict__["_GetYUnit"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+11, POINTER(agcom.LONG))
        self.__dict__["_SetYUnit"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+12, agcom.LONG)
        self.__dict__["_GetSize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+13, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetSize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+14, agcom.SAFEARRAY)
        self.__dict__["_GetWidth"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+15, POINTER(agcom.DOUBLE))
        self.__dict__["_SetWidth"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+16, agcom.DOUBLE)
        self.__dict__["_GetWidthUnit"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+17, POINTER(agcom.LONG))
        self.__dict__["_SetWidthUnit"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+18, agcom.LONG)
        self.__dict__["_GetHeight"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+19, POINTER(agcom.DOUBLE))
        self.__dict__["_SetHeight"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+20, agcom.DOUBLE)
        self.__dict__["_GetHeightUnit"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+21, POINTER(agcom.LONG))
        self.__dict__["_SetHeightUnit"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+22, agcom.LONG)
        self.__dict__["_GetMinimumSize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+23, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetMinimumSize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+24, agcom.SAFEARRAY)
        self.__dict__["_GetMaximumSize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+25, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetMaximumSize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+26, agcom.SAFEARRAY)
        self.__dict__["_GetBounds"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+27, POINTER(agcom.SAFEARRAY))
        self.__dict__["_GetBorderColor"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+28, POINTER(agcom.OLE_COLOR))
        self.__dict__["_SetBorderColor"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+29, agcom.OLE_COLOR)
        self.__dict__["_GetBorderSize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+30, POINTER(agcom.INT))
        self.__dict__["_SetBorderSize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+31, agcom.INT)
        self.__dict__["_GetBorderTranslucency"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+32, POINTER(agcom.FLOAT))
        self.__dict__["_SetBorderTranslucency"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+33, agcom.FLOAT)
        self.__dict__["_GetTranslationX"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+34, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTranslationX"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+35, agcom.DOUBLE)
        self.__dict__["_GetTranslationY"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+36, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTranslationY"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+37, agcom.DOUBLE)
        self.__dict__["_GetRotationAngle"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+38, POINTER(agcom.DOUBLE))
        self.__dict__["_SetRotationAngle"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+39, agcom.DOUBLE)
        self.__dict__["_GetRotationPoint"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+40, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetRotationPoint"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+41, agcom.SAFEARRAY)
        self.__dict__["_GetScale"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+42, POINTER(agcom.DOUBLE))
        self.__dict__["_SetScale"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+43, agcom.DOUBLE)
        self.__dict__["_GetFlipX"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+44, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetFlipX"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+45, agcom.VARIANT_BOOL)
        self.__dict__["_GetFlipY"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+46, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetFlipY"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+47, agcom.VARIANT_BOOL)
        self.__dict__["_GetOrigin"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+48, POINTER(agcom.LONG))
        self.__dict__["_SetOrigin"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+49, agcom.LONG)
        self.__dict__["_GetPinningOrigin"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+50, POINTER(agcom.LONG))
        self.__dict__["_SetPinningOrigin"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+51, agcom.LONG)
        self.__dict__["_GetParent"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+52, POINTER(agcom.PVOID))
        self.__dict__["_GetTranslucency"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+53, POINTER(agcom.FLOAT))
        self.__dict__["_SetTranslucency"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+54, agcom.FLOAT)
        self.__dict__["_GetColor"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+55, POINTER(agcom.OLE_COLOR))
        self.__dict__["_SetColor"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+56, agcom.OLE_COLOR)
        self.__dict__["_GetPickingEnabled"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+57, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetPickingEnabled"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+58, agcom.VARIANT_BOOL)
        self.__dict__["_GetClipToParent"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+59, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetClipToParent"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+60, agcom.VARIANT_BOOL)
        self.__dict__["_GetDisplay"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+61, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetDisplay"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+62, agcom.VARIANT_BOOL)
        self.__dict__["_GetControlPosition"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+63, POINTER(agcom.SAFEARRAY))
        self.__dict__["_GetControlSize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+64, POINTER(agcom.SAFEARRAY))
        self.__dict__["_GetControlBounds"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+65, POINTER(agcom.SAFEARRAY))
        self.__dict__["_GetDisplayCondition"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+66, POINTER(agcom.PVOID))
        self.__dict__["_SetDisplayCondition"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+67, agcom.PVOID)
        self.__dict__["_GetOverlays"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+68, POINTER(agcom.PVOID))
        self.__dict__["_GetPadding"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+69, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetPadding"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+70, agcom.SAFEARRAY)
        self.__dict__["_BringToFront"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+71, )
        self.__dict__["_SendToBack"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+72, )
        self.__dict__["_OverlayToControl"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+73, agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.SAFEARRAY))
        self.__dict__["_ControlToOverlay"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+74, agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.SAFEARRAY))
        self.__dict__["_GetTag"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+75, POINTER(agcom.VARIANT))
        self.__dict__["_SetTag"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsOverlay, vtable_offset_local+76, agcom.VARIANT)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsOverlay.__dict__ and type(IAgStkGraphicsOverlay.__dict__[attrname]) == property:
            return IAgStkGraphicsOverlay.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsOverlay.")
    
    @property
    def Position(self) -> list:
        """Gets or sets the position of the overlay relative to its parent. The array represents the position of the overlay and has a size of 4. The elements are in the order x position, y position, x screen overlay unit, y screen overlay unit."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPosition"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @Position.setter
    def Position(self, position:list) -> None:
        with agmarshall.SAFEARRAY_arg(position) as arg_position:
            agcls.evaluate_hresult(self.__dict__["_SetPosition"](arg_position.COM_val))

    @property
    def PinningPosition(self) -> list:
        """Gets or sets the pinning position of the overlay, relative to the overlay, which determines the point on the overlay that corresponds to the position property. The array represents the pinning position of the overlay and has a size of 4..."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPinningPosition"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @PinningPosition.setter
    def PinningPosition(self, pinningPosition:list) -> None:
        with agmarshall.SAFEARRAY_arg(pinningPosition) as arg_pinningPosition:
            agcls.evaluate_hresult(self.__dict__["_SetPinningPosition"](arg_pinningPosition.COM_val))

    @property
    def X(self) -> float:
        """Gets or sets the X position of the overlay relative to its parent. The unit in which the position is defined is specified by the x unit property. The position is measured horizontally from the origin, which is, by default, the lower-left corner."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetX"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @X.setter
    def X(self, x:float) -> None:
        with agmarshall.DOUBLE_arg(x) as arg_x:
            agcls.evaluate_hresult(self.__dict__["_SetX"](arg_x.COM_val))

    @property
    def XUnit(self) -> "AgEStkGraphicsScreenOverlayUnit":
        """Gets or sets the unit of the x property."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsScreenOverlayUnit) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetXUnit"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @XUnit.setter
    def XUnit(self, xUnit:"AgEStkGraphicsScreenOverlayUnit") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsScreenOverlayUnit, xUnit) as arg_xUnit:
            agcls.evaluate_hresult(self.__dict__["_SetXUnit"](arg_xUnit.COM_val))

    @property
    def Y(self) -> float:
        """Gets or sets the Y position of the overlay relative to its parent. The unit in which the position is defined is specified by the y unit property. The position is measured vertically from the origin, which is, by default, the lower-left corner."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetY"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Y.setter
    def Y(self, y:float) -> None:
        with agmarshall.DOUBLE_arg(y) as arg_y:
            agcls.evaluate_hresult(self.__dict__["_SetY"](arg_y.COM_val))

    @property
    def YUnit(self) -> "AgEStkGraphicsScreenOverlayUnit":
        """Gets or sets the unit of the y property."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsScreenOverlayUnit) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetYUnit"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @YUnit.setter
    def YUnit(self, yUnit:"AgEStkGraphicsScreenOverlayUnit") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsScreenOverlayUnit, yUnit) as arg_yUnit:
            agcls.evaluate_hresult(self.__dict__["_SetYUnit"](arg_yUnit.COM_val))

    @property
    def Size(self) -> list:
        """Gets or sets the size of the overlay. The array elements represent the size of the overlay in the order width, height, width screen overlay unit, height screen overlay unit."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @Size.setter
    def Size(self, size:list) -> None:
        with agmarshall.SAFEARRAY_arg(size) as arg_size:
            agcls.evaluate_hresult(self.__dict__["_SetSize"](arg_size.COM_val))

    @property
    def Width(self) -> float:
        """Gets or sets the width of the overlay. The unit in which the width is defined is specified by the width unit property."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetWidth"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Width.setter
    def Width(self, width:float) -> None:
        with agmarshall.DOUBLE_arg(width) as arg_width:
            agcls.evaluate_hresult(self.__dict__["_SetWidth"](arg_width.COM_val))

    @property
    def WidthUnit(self) -> "AgEStkGraphicsScreenOverlayUnit":
        """Gets or sets the unit of the width property."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsScreenOverlayUnit) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetWidthUnit"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @WidthUnit.setter
    def WidthUnit(self, widthUnit:"AgEStkGraphicsScreenOverlayUnit") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsScreenOverlayUnit, widthUnit) as arg_widthUnit:
            agcls.evaluate_hresult(self.__dict__["_SetWidthUnit"](arg_widthUnit.COM_val))

    @property
    def Height(self) -> float:
        """Gets or sets the height of the overlay. The unit in which the height is defined is specified by the height unit property."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetHeight"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Height.setter
    def Height(self, height:float) -> None:
        with agmarshall.DOUBLE_arg(height) as arg_height:
            agcls.evaluate_hresult(self.__dict__["_SetHeight"](arg_height.COM_val))

    @property
    def HeightUnit(self) -> "AgEStkGraphicsScreenOverlayUnit":
        """Gets or sets the unit of the height property."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsScreenOverlayUnit) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetHeightUnit"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @HeightUnit.setter
    def HeightUnit(self, heightUnit:"AgEStkGraphicsScreenOverlayUnit") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsScreenOverlayUnit, heightUnit) as arg_heightUnit:
            agcls.evaluate_hresult(self.__dict__["_SetHeightUnit"](arg_heightUnit.COM_val))

    @property
    def MinimumSize(self) -> list:
        """Gets or sets the minimum size of the overlay. The overlay will never be smaller than this size, even if the overlay's size is specified as a percentage of its parent and its parent is very small..."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinimumSize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @MinimumSize.setter
    def MinimumSize(self, minimumSize:list) -> None:
        with agmarshall.SAFEARRAY_arg(minimumSize) as arg_minimumSize:
            agcls.evaluate_hresult(self.__dict__["_SetMinimumSize"](arg_minimumSize.COM_val))

    @property
    def MaximumSize(self) -> list:
        """Gets or sets the maximum size of the overlay. The overlay will never be larger than this size, even if the overlay's size is specified as a percentage of its parent and its parent is very large..."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaximumSize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @MaximumSize.setter
    def MaximumSize(self, maximumSize:list) -> None:
        with agmarshall.SAFEARRAY_arg(maximumSize) as arg_maximumSize:
            agcls.evaluate_hresult(self.__dict__["_SetMaximumSize"](arg_maximumSize.COM_val))

    @property
    def Bounds(self) -> list:
        """Gets the bounds of the overlay relative to its parent. The array contains the properties defining the bounds in the order left x location, top y location, width, height."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBounds"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def BorderColor(self) -> agcolor.Color:
        """Gets or sets the overlay's border color. By default, the border color is white. However, also by default, the overlay has a border size of 0.0 so the border is not displayed."""
        with agmarshall.OLE_COLOR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBorderColor"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @BorderColor.setter
    def BorderColor(self, borderColor:agcolor.Color) -> None:
        with agmarshall.OLE_COLOR_arg(borderColor) as arg_borderColor:
            agcls.evaluate_hresult(self.__dict__["_SetBorderColor"](arg_borderColor.COM_val))

    @property
    def BorderSize(self) -> int:
        """Gets or sets the size of the overlay's border. By default, this is 0.0 so the border is not displayed."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBorderSize"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @BorderSize.setter
    def BorderSize(self, borderSize:int) -> None:
        with agmarshall.INT_arg(borderSize) as arg_borderSize:
            agcls.evaluate_hresult(self.__dict__["_SetBorderSize"](arg_borderSize.COM_val))

    @property
    def BorderTranslucency(self) -> float:
        """Gets or sets the translucency of the overlay border. Translucency is a value between 0.0 and 1.0, where 0.0 is completely opaque and 1.0 is completely transparent."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBorderTranslucency"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @BorderTranslucency.setter
    def BorderTranslucency(self, borderTranslucency:float) -> None:
        with agmarshall.FLOAT_arg(borderTranslucency) as arg_borderTranslucency:
            agcls.evaluate_hresult(self.__dict__["_SetBorderTranslucency"](arg_borderTranslucency.COM_val))

    @property
    def TranslationX(self) -> float:
        """Gets or sets the value with which the overlay will be translated from the X value of the position property."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTranslationX"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @TranslationX.setter
    def TranslationX(self, translationX:float) -> None:
        with agmarshall.DOUBLE_arg(translationX) as arg_translationX:
            agcls.evaluate_hresult(self.__dict__["_SetTranslationX"](arg_translationX.COM_val))

    @property
    def TranslationY(self) -> float:
        """Gets or sets the value with which the overlay will be translated from the Y value of the position property."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTranslationY"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @TranslationY.setter
    def TranslationY(self, translationY:float) -> None:
        with agmarshall.DOUBLE_arg(translationY) as arg_translationY:
            agcls.evaluate_hresult(self.__dict__["_SetTranslationY"](arg_translationY.COM_val))

    @property
    def RotationAngle(self) -> float:
        """Gets or sets the counter-clockwise rotation of the overlay. The overlay is rotated around the point specified by the rotation point property."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetRotationAngle"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @RotationAngle.setter
    def RotationAngle(self, rotationAngle:float) -> None:
        with agmarshall.DOUBLE_arg(rotationAngle) as arg_rotationAngle:
            agcls.evaluate_hresult(self.__dict__["_SetRotationAngle"](arg_rotationAngle.COM_val))

    @property
    def RotationPoint(self) -> list:
        """Gets or sets the point that the overlay is rotated around when the rotation angle property has a value other than 0.0. The array contains seven elements defining the properties of the rotation point..."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetRotationPoint"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @RotationPoint.setter
    def RotationPoint(self, rotationPoint:list) -> None:
        with agmarshall.SAFEARRAY_arg(rotationPoint) as arg_rotationPoint:
            agcls.evaluate_hresult(self.__dict__["_SetRotationPoint"](arg_rotationPoint.COM_val))

    @property
    def Scale(self) -> float:
        """Gets or sets the fractional value used to scale the overlay's size property. A value greater than 1.0 will make the overlay larger while a value less than 1.0 will make it smaller."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetScale"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Scale.setter
    def Scale(self, scale:float) -> None:
        with agmarshall.DOUBLE_arg(scale) as arg_scale:
            agcls.evaluate_hresult(self.__dict__["_SetScale"](arg_scale.COM_val))

    @property
    def FlipX(self) -> bool:
        """Gets or sets whether the overlay will be flipped along its X axis."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetFlipX"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @FlipX.setter
    def FlipX(self, flipX:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(flipX) as arg_flipX:
            agcls.evaluate_hresult(self.__dict__["_SetFlipX"](arg_flipX.COM_val))

    @property
    def FlipY(self) -> bool:
        """Gets or sets whether the overlay will be flipped along its Y axis."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetFlipY"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @FlipY.setter
    def FlipY(self, flipY:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(flipY) as arg_flipY:
            agcls.evaluate_hresult(self.__dict__["_SetFlipY"](arg_flipY.COM_val))

    @property
    def Origin(self) -> "AgEStkGraphicsScreenOverlayOrigin":
        """Gets or sets the origin from which the overlay's position is defined. By default, the value of this property is bottom left..."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsScreenOverlayOrigin) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetOrigin"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Origin.setter
    def Origin(self, origin:"AgEStkGraphicsScreenOverlayOrigin") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsScreenOverlayOrigin, origin) as arg_origin:
            agcls.evaluate_hresult(self.__dict__["_SetOrigin"](arg_origin.COM_val))

    @property
    def PinningOrigin(self) -> "AgEStkGraphicsScreenOverlayPinningOrigin":
        """Gets or sets the origin of the pinning position property, relative to the overlay..."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsScreenOverlayPinningOrigin) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPinningOrigin"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @PinningOrigin.setter
    def PinningOrigin(self, pinningOrigin:"AgEStkGraphicsScreenOverlayPinningOrigin") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsScreenOverlayPinningOrigin, pinningOrigin) as arg_pinningOrigin:
            agcls.evaluate_hresult(self.__dict__["_SetPinningOrigin"](arg_pinningOrigin.COM_val))

    @property
    def Parent(self) -> "IAgStkGraphicsScreenOverlayContainer":
        """Gets the overlay's parent. This may be another overlay if this overlay was added to that overlay's overlays collection. Or, it may be the screen overlay manager if this overlay was added to the scene manager'sscreen overlays collection."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetParent"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Translucency(self) -> float:
        """Gets or sets the overlay's translucency. Translucency is a value between 0.0 and 1.0, where 0.0 is completely opaque and 1.0 is completely transparent."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTranslucency"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Translucency.setter
    def Translucency(self, translucency:float) -> None:
        with agmarshall.FLOAT_arg(translucency) as arg_translucency:
            agcls.evaluate_hresult(self.__dict__["_SetTranslucency"](arg_translucency.COM_val))

    @property
    def Color(self) -> agcolor.Color:
        """Gets or sets the overlay's color. By default, the overlay is white."""
        with agmarshall.OLE_COLOR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetColor"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Color.setter
    def Color(self, color:agcolor.Color) -> None:
        with agmarshall.OLE_COLOR_arg(color) as arg_color:
            agcls.evaluate_hresult(self.__dict__["_SetColor"](arg_color.COM_val))

    @property
    def PickingEnabled(self) -> bool:
        """Gets or sets a value indicating whether or not picking on the overlay is enabled. If picking is disabled, this overlay will never show up in the result of PickScreenOverlay, even if it occupies the specified pick position."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPickingEnabled"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @PickingEnabled.setter
    def PickingEnabled(self, pickingEnabled:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(pickingEnabled) as arg_pickingEnabled:
            agcls.evaluate_hresult(self.__dict__["_SetPickingEnabled"](arg_pickingEnabled.COM_val))

    @property
    def ClipToParent(self) -> bool:
        """Gets or sets a value indicating whether or not the overlay will be clipped by the bounds of its parent. If this property is <see langword='false' />, part of this overlay may be visible outside of its parent's bounds."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetClipToParent"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @ClipToParent.setter
    def ClipToParent(self, clipToParent:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(clipToParent) as arg_clipToParent:
            agcls.evaluate_hresult(self.__dict__["_SetClipToParent"](arg_clipToParent.COM_val))

    @property
    def Display(self) -> bool:
        """Gets or sets if this overlay and the collection of overlays that are contained within this overlay should be rendered."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDisplay"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Display.setter
    def Display(self, display:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(display) as arg_display:
            agcls.evaluate_hresult(self.__dict__["_SetDisplay"](arg_display.COM_val))

    @property
    def ControlPosition(self) -> list:
        """Gets the position of the overlay in coordinates relative to the overall globe control. The array represents the position of the overlay and has a size of 4. The elements are in the order x position, y position, x screen overlay unit, y screen overlay unit."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetControlPosition"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def ControlSize(self) -> list:
        """Gets the size of the overlay in coordinates relative to the overall globe control. The elements are in the order width, height, width screen overlay unit, height screen overlay unit."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetControlSize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def ControlBounds(self) -> list:
        """Gets the bounds of the overlay in coordinates relative to the overall globe control. The array contains the properties defining the bounds in the order left x location, top y location, width, height."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetControlBounds"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def DisplayCondition(self) -> "IAgStkGraphicsDisplayCondition":
        """Gets or sets the display condition that determines if the overlay should be rendered. Both this and display must evaluate to true for the overlay to be rendered."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDisplayCondition"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @DisplayCondition.setter
    def DisplayCondition(self, displayCondition:"IAgStkGraphicsDisplayCondition") -> None:
        with agmarshall.AgInterface_in_arg(displayCondition, IAgStkGraphicsDisplayCondition) as arg_displayCondition:
            agcls.evaluate_hresult(self.__dict__["_SetDisplayCondition"](arg_displayCondition.COM_val))

    @property
    def Overlays(self) -> "IAgStkGraphicsScreenOverlayCollection":
        """Gets the collection of overlays that are contained within this overlay."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetOverlays"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Padding(self) -> list:
        """Gets or sets the padding surrounding the overlays that are contained within this overlay. The array contains the components of the padding arranged in the order left, top, right, bottom."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPadding"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @Padding.setter
    def Padding(self, padding:list) -> None:
        with agmarshall.SAFEARRAY_arg(padding) as arg_padding:
            agcls.evaluate_hresult(self.__dict__["_SetPadding"](arg_padding.COM_val))

    def BringToFront(self) -> None:
        """Brings the overlay to the front of the z-order, so it is on top of all other overlays with the same parent"""
        agcls.evaluate_hresult(self.__dict__["_BringToFront"]())

    def SendToBack(self) -> None:
        """Sends the overlay to the back of the z-order, so it is underneath all other overlays with the same parent"""
        agcls.evaluate_hresult(self.__dict__["_SendToBack"]())

    def OverlayToControl(self, x:float, y:float) -> list:
        """Transforms a given position, specified relative to the overlay, into coordinates relative to the overall globe control..."""
        with agmarshall.DOUBLE_arg(x) as arg_x, \
             agmarshall.DOUBLE_arg(y) as arg_y, \
             agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_OverlayToControl"](arg_x.COM_val, arg_y.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def ControlToOverlay(self, x:float, y:float) -> list:
        """Transforms a given position, specified relative to the overall globe control, into coordinates relative to this overlay..."""
        with agmarshall.DOUBLE_arg(x) as arg_x, \
             agmarshall.DOUBLE_arg(y) as arg_y, \
             agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_ControlToOverlay"](arg_x.COM_val, arg_y.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Tag(self) -> typing.Any:
        """Gets or sets custom value associated with this primitive."""
        with agmarshall.VARIANT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTag"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Tag.setter
    def Tag(self, tag:typing.Any) -> None:
        with agmarshall.VARIANT_arg(tag) as arg_tag:
            agcls.evaluate_hresult(self.__dict__["_SetTag"](arg_tag.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{b7007235-5a52-450b-83af-1e8080d3b0be}", IAgStkGraphicsOverlay)
agcls.AgTypeNameMap["IAgStkGraphicsOverlay"] = IAgStkGraphicsOverlay
__all__.append("IAgStkGraphicsOverlay")

class IAgStkGraphicsPathPrimitive(object):
    """Renders a line to the 3D scene. Similar to the polyline primitive; however, the PathPrimitive was designed for the efficient addition/removal of points to/from the front or back of the line."""
    _uuid = "{264ef2e0-ae0d-412d-9d89-f5f17f095a52}"
    _num_methods = 31
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        self.__dict__["_GetCapacity"] = _raise_uninitialized_error
        self.__dict__["_GetUpdatePolicy"] = _raise_uninitialized_error
        self.__dict__["_SetUpdatePolicy"] = _raise_uninitialized_error
        self.__dict__["_GetPolylineType"] = _raise_uninitialized_error
        self.__dict__["_SetPolylineType"] = _raise_uninitialized_error
        self.__dict__["_GetWidth"] = _raise_uninitialized_error
        self.__dict__["_SetWidth"] = _raise_uninitialized_error
        self.__dict__["_GetMinimumWidthSupported"] = _raise_uninitialized_error
        self.__dict__["_GetMaximumWidthSupported"] = _raise_uninitialized_error
        self.__dict__["_GetDisplayOutline"] = _raise_uninitialized_error
        self.__dict__["_SetDisplayOutline"] = _raise_uninitialized_error
        self.__dict__["_GetOutlineWidth"] = _raise_uninitialized_error
        self.__dict__["_SetOutlineWidth"] = _raise_uninitialized_error
        self.__dict__["_GetPerItemPickingEnabled"] = _raise_uninitialized_error
        self.__dict__["_SetPerItemPickingEnabled"] = _raise_uninitialized_error
        self.__dict__["_Item"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        self.__dict__["_AddFront"] = _raise_uninitialized_error
        self.__dict__["_AddRangeToFront"] = _raise_uninitialized_error
        self.__dict__["_AddBack"] = _raise_uninitialized_error
        self.__dict__["_AddRangeToBack"] = _raise_uninitialized_error
        self.__dict__["_RemoveFront"] = _raise_uninitialized_error
        self.__dict__["_RemoveAllBefore"] = _raise_uninitialized_error
        self.__dict__["_RemoveBack"] = _raise_uninitialized_error
        self.__dict__["_RemoveAllAfter"] = _raise_uninitialized_error
        self.__dict__["_Front"] = _raise_uninitialized_error
        self.__dict__["_Back"] = _raise_uninitialized_error
        self.__dict__["_Clear"] = _raise_uninitialized_error
        self.__dict__["_GetCentralBodyClipped"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBodyClipped"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsPathPrimitive._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsPathPrimitive from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsPathPrimitive = agcom.GUID(IAgStkGraphicsPathPrimitive._uuid)
        vtable_offset_local = IAgStkGraphicsPathPrimitive._vtable_offset - 1
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPathPrimitive, vtable_offset_local+1, POINTER(agcom.INT))
        self.__dict__["_GetCapacity"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPathPrimitive, vtable_offset_local+2, POINTER(agcom.INT))
        self.__dict__["_GetUpdatePolicy"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPathPrimitive, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_SetUpdatePolicy"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPathPrimitive, vtable_offset_local+4, agcom.PVOID)
        self.__dict__["_GetPolylineType"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPathPrimitive, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetPolylineType"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPathPrimitive, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_GetWidth"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPathPrimitive, vtable_offset_local+7, POINTER(agcom.FLOAT))
        self.__dict__["_SetWidth"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPathPrimitive, vtable_offset_local+8, agcom.FLOAT)
        self.__dict__["_GetMinimumWidthSupported"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPathPrimitive, vtable_offset_local+9, POINTER(agcom.FLOAT))
        self.__dict__["_GetMaximumWidthSupported"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPathPrimitive, vtable_offset_local+10, POINTER(agcom.FLOAT))
        self.__dict__["_GetDisplayOutline"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPathPrimitive, vtable_offset_local+11, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetDisplayOutline"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPathPrimitive, vtable_offset_local+12, agcom.VARIANT_BOOL)
        self.__dict__["_GetOutlineWidth"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPathPrimitive, vtable_offset_local+13, POINTER(agcom.FLOAT))
        self.__dict__["_SetOutlineWidth"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPathPrimitive, vtable_offset_local+14, agcom.FLOAT)
        self.__dict__["_GetPerItemPickingEnabled"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPathPrimitive, vtable_offset_local+15, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetPerItemPickingEnabled"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPathPrimitive, vtable_offset_local+16, agcom.VARIANT_BOOL)
        self.__dict__["_Item"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPathPrimitive, vtable_offset_local+17, agcom.INT, POINTER(agcom.PVOID))
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPathPrimitive, vtable_offset_local+18, POINTER(agcom.PVOID))
        self.__dict__["_AddFront"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPathPrimitive, vtable_offset_local+19, agcom.PVOID)
        self.__dict__["_AddRangeToFront"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPathPrimitive, vtable_offset_local+20, POINTER(agcom.SAFEARRAY))
        self.__dict__["_AddBack"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPathPrimitive, vtable_offset_local+21, agcom.PVOID)
        self.__dict__["_AddRangeToBack"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPathPrimitive, vtable_offset_local+22, POINTER(agcom.SAFEARRAY))
        self.__dict__["_RemoveFront"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPathPrimitive, vtable_offset_local+23, )
        self.__dict__["_RemoveAllBefore"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPathPrimitive, vtable_offset_local+24, agcom.INT)
        self.__dict__["_RemoveBack"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPathPrimitive, vtable_offset_local+25, )
        self.__dict__["_RemoveAllAfter"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPathPrimitive, vtable_offset_local+26, agcom.INT)
        self.__dict__["_Front"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPathPrimitive, vtable_offset_local+27, POINTER(agcom.PVOID))
        self.__dict__["_Back"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPathPrimitive, vtable_offset_local+28, POINTER(agcom.PVOID))
        self.__dict__["_Clear"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPathPrimitive, vtable_offset_local+29, )
        self.__dict__["_GetCentralBodyClipped"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPathPrimitive, vtable_offset_local+30, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetCentralBodyClipped"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPathPrimitive, vtable_offset_local+31, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsPathPrimitive.__dict__ and type(IAgStkGraphicsPathPrimitive.__dict__[attrname]) == property:
            return IAgStkGraphicsPathPrimitive.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsPathPrimitive.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> "IAgStkGraphicsPathPoint":
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    
    @property
    def Count(self) -> int:
        """Returns the number of points."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Capacity(self) -> int:
        """Returns the capacity that was set during object construction. The capacity is the amount of memory reserved for storing the points on the path. This will be automatically updated when adding/removing points."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCapacity"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def UpdatePolicy(self) -> "IAgStkGraphicsPathPrimitiveUpdatePolicy":
        """Gets or sets how the primitive will be updated based on the current animation time."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetUpdatePolicy"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @UpdatePolicy.setter
    def UpdatePolicy(self, updatePolicy:"IAgStkGraphicsPathPrimitiveUpdatePolicy") -> None:
        with agmarshall.AgInterface_in_arg(updatePolicy, IAgStkGraphicsPathPrimitiveUpdatePolicy) as arg_updatePolicy:
            agcls.evaluate_hresult(self.__dict__["_SetUpdatePolicy"](arg_updatePolicy.COM_val))

    @property
    def PolylineType(self) -> "AgEStkGraphicsPolylineType":
        """Gets or sets how the primitive interprets the positions."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsPolylineType) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPolylineType"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @PolylineType.setter
    def PolylineType(self, polylineType:"AgEStkGraphicsPolylineType") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsPolylineType, polylineType) as arg_polylineType:
            agcls.evaluate_hresult(self.__dict__["_SetPolylineType"](arg_polylineType.COM_val))

    @property
    def Width(self) -> float:
        """Gets or sets the line width, in pixels."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetWidth"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Width.setter
    def Width(self, width:float) -> None:
        with agmarshall.FLOAT_arg(width) as arg_width:
            agcls.evaluate_hresult(self.__dict__["_SetWidth"](arg_width.COM_val))

    @property
    def MinimumWidthSupported(self) -> float:
        """Gets the minimum width, in pixels, supported by the video card."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinimumWidthSupported"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def MaximumWidthSupported(self) -> float:
        """Gets the maximum width, in pixels, supported by the video card."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaximumWidthSupported"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def DisplayOutline(self) -> bool:
        """Gets or sets whether an outline is rendered around the line."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDisplayOutline"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @DisplayOutline.setter
    def DisplayOutline(self, displayOutline:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(displayOutline) as arg_displayOutline:
            agcls.evaluate_hresult(self.__dict__["_SetDisplayOutline"](arg_displayOutline.COM_val))

    @property
    def OutlineWidth(self) -> float:
        """Gets or sets the width, in pixels, of the outline around the line."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetOutlineWidth"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @OutlineWidth.setter
    def OutlineWidth(self, outlineWidth:float) -> None:
        with agmarshall.FLOAT_arg(outlineWidth) as arg_outlineWidth:
            agcls.evaluate_hresult(self.__dict__["_SetOutlineWidth"](arg_outlineWidth.COM_val))

    @property
    def PerItemPickingEnabled(self) -> bool:
        """Gets or sets whether individual line indices will be included in the pick results returned from the scene's Pick method. Each line index that is picked will be returned as a batch primitive index."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPerItemPickingEnabled"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @PerItemPickingEnabled.setter
    def PerItemPickingEnabled(self, perItemPickingEnabled:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(perItemPickingEnabled) as arg_perItemPickingEnabled:
            agcls.evaluate_hresult(self.__dict__["_SetPerItemPickingEnabled"](arg_perItemPickingEnabled.COM_val))

    def Item(self, index:int) -> "IAgStkGraphicsPathPoint":
        """Returns the point at the given zero-based index."""
        with agmarshall.INT_arg(index) as arg_index, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Item"](arg_index.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        """Returns an enumerator that iterates through the collection."""
        with agmarshall.IEnumVARIANT_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def AddFront(self, pathPoint:"IAgStkGraphicsPathPoint") -> None:
        """Add a path point to the front of the line."""
        with agmarshall.AgInterface_in_arg(pathPoint, IAgStkGraphicsPathPoint) as arg_pathPoint:
            agcls.evaluate_hresult(self.__dict__["_AddFront"](arg_pathPoint.COM_val))

    def AddRangeToFront(self, positions:list) -> None:
        """Add the range of path points to the front of the line."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions:
            agcls.evaluate_hresult(self.__dict__["_AddRangeToFront"](byref(arg_positions.COM_val)))

    def AddBack(self, pathPoint:"IAgStkGraphicsPathPoint") -> None:
        """Add a path point to the back of the line."""
        with agmarshall.AgInterface_in_arg(pathPoint, IAgStkGraphicsPathPoint) as arg_pathPoint:
            agcls.evaluate_hresult(self.__dict__["_AddBack"](arg_pathPoint.COM_val))

    def AddRangeToBack(self, positions:list) -> None:
        """Add the range of path points to the back of the line."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions:
            agcls.evaluate_hresult(self.__dict__["_AddRangeToBack"](byref(arg_positions.COM_val)))

    def RemoveFront(self) -> None:
        """Remove a path point to the front of the line."""
        agcls.evaluate_hresult(self.__dict__["_RemoveFront"]())

    def RemoveAllBefore(self, index:int) -> None:
        """Remove all points before index."""
        with agmarshall.INT_arg(index) as arg_index:
            agcls.evaluate_hresult(self.__dict__["_RemoveAllBefore"](arg_index.COM_val))

    def RemoveBack(self) -> None:
        """Remove a path point to the back of the line."""
        agcls.evaluate_hresult(self.__dict__["_RemoveBack"]())

    def RemoveAllAfter(self, index:int) -> None:
        """Remove all points after index."""
        with agmarshall.INT_arg(index) as arg_index:
            agcls.evaluate_hresult(self.__dict__["_RemoveAllAfter"](arg_index.COM_val))

    def Front(self) -> "IAgStkGraphicsPathPoint":
        """Access the path point at the front of the line."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Front"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def Back(self) -> "IAgStkGraphicsPathPoint":
        """Access the path point at the back of the line."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Back"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def Clear(self) -> None:
        """Removes all of the points."""
        agcls.evaluate_hresult(self.__dict__["_Clear"]())

    @property
    def CentralBodyClipped(self) -> bool:
        """Gets or sets whether the polyline will be clipped by the central body."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyClipped"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @CentralBodyClipped.setter
    def CentralBodyClipped(self, centralBodyClipped:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(centralBodyClipped) as arg_centralBodyClipped:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBodyClipped"](arg_centralBodyClipped.COM_val))

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{264ef2e0-ae0d-412d-9d89-f5f17f095a52}", IAgStkGraphicsPathPrimitive)
agcls.AgTypeNameMap["IAgStkGraphicsPathPrimitive"] = IAgStkGraphicsPathPrimitive
__all__.append("IAgStkGraphicsPathPrimitive")

class IAgStkGraphicsPickResult(object):
    """A single result from Pick."""
    _uuid = "{55238a64-4c7f-4be7-abcb-1d2321f8f64a}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetObjects"] = _raise_uninitialized_error
        self.__dict__["_GetDepth"] = _raise_uninitialized_error
        self.__dict__["_GetPosition"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsPickResult._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsPickResult from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsPickResult = agcom.GUID(IAgStkGraphicsPickResult._uuid)
        vtable_offset_local = IAgStkGraphicsPickResult._vtable_offset - 1
        self.__dict__["_GetObjects"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPickResult, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetDepth"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPickResult, vtable_offset_local+2, POINTER(agcom.FLOAT))
        self.__dict__["_GetPosition"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPickResult, vtable_offset_local+3, POINTER(agcom.SAFEARRAY))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsPickResult.__dict__ and type(IAgStkGraphicsPickResult.__dict__[attrname]) == property:
            return IAgStkGraphicsPickResult.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsPickResult.")
    
    @property
    def Objects(self) -> "IAgStkGraphicsObjectCollection":
        """Gets a collection of objects that were on the pick stack for the picked object."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetObjects"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Depth(self) -> float:
        """Gets the depth of the picked location in the 3D scene."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDepth"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Position(self) -> list:
        """Gets the position of the picked location in the central body's fixed reference frame. The array contains the components of the position arranged in the order x, y, z."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPosition"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{55238a64-4c7f-4be7-abcb-1d2321f8f64a}", IAgStkGraphicsPickResult)
agcls.AgTypeNameMap["IAgStkGraphicsPickResult"] = IAgStkGraphicsPickResult
__all__.append("IAgStkGraphicsPickResult")

class IAgStkGraphicsPixelSizeDisplayCondition(object):
    """Defines an inclusive interval, in pixels, that determines when an object, such as a primitive, is rendered based on the number of pixels the object's bounding sphere (or in the case of screen overlays, bounding rectangle) covers on the screen..."""
    _uuid = "{e5ccd610-a3b3-4f0c-9d51-e367a9ea5abf}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetMinimumPixelSize"] = _raise_uninitialized_error
        self.__dict__["_SetMinimumPixelSize"] = _raise_uninitialized_error
        self.__dict__["_GetMaximumPixelSize"] = _raise_uninitialized_error
        self.__dict__["_SetMaximumPixelSize"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsPixelSizeDisplayCondition._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsPixelSizeDisplayCondition from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsPixelSizeDisplayCondition = agcom.GUID(IAgStkGraphicsPixelSizeDisplayCondition._uuid)
        vtable_offset_local = IAgStkGraphicsPixelSizeDisplayCondition._vtable_offset - 1
        self.__dict__["_GetMinimumPixelSize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPixelSizeDisplayCondition, vtable_offset_local+1, POINTER(agcom.INT))
        self.__dict__["_SetMinimumPixelSize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPixelSizeDisplayCondition, vtable_offset_local+2, agcom.INT)
        self.__dict__["_GetMaximumPixelSize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPixelSizeDisplayCondition, vtable_offset_local+3, POINTER(agcom.INT))
        self.__dict__["_SetMaximumPixelSize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPixelSizeDisplayCondition, vtable_offset_local+4, agcom.INT)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsPixelSizeDisplayCondition.__dict__ and type(IAgStkGraphicsPixelSizeDisplayCondition.__dict__[attrname]) == property:
            return IAgStkGraphicsPixelSizeDisplayCondition.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsPixelSizeDisplayCondition.")
    
    @property
    def MinimumPixelSize(self) -> int:
        """Gets or sets the minimum pixel size of the inclusive distance interval."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinimumPixelSize"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @MinimumPixelSize.setter
    def MinimumPixelSize(self, minimumPixelSize:int) -> None:
        with agmarshall.INT_arg(minimumPixelSize) as arg_minimumPixelSize:
            agcls.evaluate_hresult(self.__dict__["_SetMinimumPixelSize"](arg_minimumPixelSize.COM_val))

    @property
    def MaximumPixelSize(self) -> int:
        """Gets or sets the maximum pixel size of the inclusive distance interval. Use Int32.MaxValue to ignore checking the maximum distance."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaximumPixelSize"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @MaximumPixelSize.setter
    def MaximumPixelSize(self, maximumPixelSize:int) -> None:
        with agmarshall.INT_arg(maximumPixelSize) as arg_maximumPixelSize:
            agcls.evaluate_hresult(self.__dict__["_SetMaximumPixelSize"](arg_maximumPixelSize.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{e5ccd610-a3b3-4f0c-9d51-e367a9ea5abf}", IAgStkGraphicsPixelSizeDisplayCondition)
agcls.AgTypeNameMap["IAgStkGraphicsPixelSizeDisplayCondition"] = IAgStkGraphicsPixelSizeDisplayCondition
__all__.append("IAgStkGraphicsPixelSizeDisplayCondition")

class IAgStkGraphicsPointBatchPrimitive(object):
    """ Renders one or more points in the 3D scene. Each point in the batch has a unique position and an optional color. All points in the batch share the same pixel size. For best performance, avoid creating lots of batches with only a few points each..."""
    _uuid = "{ae6c6dca-3afe-4419-8aad-dd56bee51446}"
    _num_methods = 33
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetDisplayOutline"] = _raise_uninitialized_error
        self.__dict__["_SetDisplayOutline"] = _raise_uninitialized_error
        self.__dict__["_GetOutlineColor"] = _raise_uninitialized_error
        self.__dict__["_SetOutlineColor"] = _raise_uninitialized_error
        self.__dict__["_GetOutlineTranslucency"] = _raise_uninitialized_error
        self.__dict__["_SetOutlineTranslucency"] = _raise_uninitialized_error
        self.__dict__["_GetOutlineWidth"] = _raise_uninitialized_error
        self.__dict__["_SetOutlineWidth"] = _raise_uninitialized_error
        self.__dict__["_GetPixelSize"] = _raise_uninitialized_error
        self.__dict__["_SetPixelSize"] = _raise_uninitialized_error
        self.__dict__["_GetMinimumPixelSizeSupported"] = _raise_uninitialized_error
        self.__dict__["_GetMaximumPixelSizeSupported"] = _raise_uninitialized_error
        self.__dict__["_GetDistanceDisplayConditionPerPoint"] = _raise_uninitialized_error
        self.__dict__["_SetDistanceDisplayConditionPerPoint"] = _raise_uninitialized_error
        self.__dict__["_GetSetHint"] = _raise_uninitialized_error
        self.__dict__["_GetPerItemPickingEnabled"] = _raise_uninitialized_error
        self.__dict__["_SetPerItemPickingEnabled"] = _raise_uninitialized_error
        self.__dict__["_Set"] = _raise_uninitialized_error
        self.__dict__["_SetWithColors"] = _raise_uninitialized_error
        self.__dict__["_SetWithColorsAndRenderPass"] = _raise_uninitialized_error
        self.__dict__["_SetCartographic"] = _raise_uninitialized_error
        self.__dict__["_SetCartographicWithColors"] = _raise_uninitialized_error
        self.__dict__["_SetCartographicWithColorsAndRenderPass"] = _raise_uninitialized_error
        self.__dict__["_SetPartial"] = _raise_uninitialized_error
        self.__dict__["_SetPartialWithIndicesOrder"] = _raise_uninitialized_error
        self.__dict__["_SetPartialWithColors"] = _raise_uninitialized_error
        self.__dict__["_SetPartialWithColorsIndicesOrderAndRenderPass"] = _raise_uninitialized_error
        self.__dict__["_SetPartialCartographic"] = _raise_uninitialized_error
        self.__dict__["_SetPartialCartographicWithIndicesOrder"] = _raise_uninitialized_error
        self.__dict__["_SetPartialCartographicWithColors"] = _raise_uninitialized_error
        self.__dict__["_SetPartialCartographicWithColorsIndicesOrderAndRenderPass"] = _raise_uninitialized_error
        self.__dict__["_GetCentralBodyClipped"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBodyClipped"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsPointBatchPrimitive._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsPointBatchPrimitive from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsPointBatchPrimitive = agcom.GUID(IAgStkGraphicsPointBatchPrimitive._uuid)
        vtable_offset_local = IAgStkGraphicsPointBatchPrimitive._vtable_offset - 1
        self.__dict__["_GetDisplayOutline"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPointBatchPrimitive, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetDisplayOutline"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPointBatchPrimitive, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetOutlineColor"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPointBatchPrimitive, vtable_offset_local+3, POINTER(agcom.OLE_COLOR))
        self.__dict__["_SetOutlineColor"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPointBatchPrimitive, vtable_offset_local+4, agcom.OLE_COLOR)
        self.__dict__["_GetOutlineTranslucency"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPointBatchPrimitive, vtable_offset_local+5, POINTER(agcom.FLOAT))
        self.__dict__["_SetOutlineTranslucency"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPointBatchPrimitive, vtable_offset_local+6, agcom.FLOAT)
        self.__dict__["_GetOutlineWidth"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPointBatchPrimitive, vtable_offset_local+7, POINTER(agcom.FLOAT))
        self.__dict__["_SetOutlineWidth"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPointBatchPrimitive, vtable_offset_local+8, agcom.FLOAT)
        self.__dict__["_GetPixelSize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPointBatchPrimitive, vtable_offset_local+9, POINTER(agcom.FLOAT))
        self.__dict__["_SetPixelSize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPointBatchPrimitive, vtable_offset_local+10, agcom.FLOAT)
        self.__dict__["_GetMinimumPixelSizeSupported"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPointBatchPrimitive, vtable_offset_local+11, POINTER(agcom.FLOAT))
        self.__dict__["_GetMaximumPixelSizeSupported"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPointBatchPrimitive, vtable_offset_local+12, POINTER(agcom.FLOAT))
        self.__dict__["_GetDistanceDisplayConditionPerPoint"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPointBatchPrimitive, vtable_offset_local+13, POINTER(agcom.PVOID))
        self.__dict__["_SetDistanceDisplayConditionPerPoint"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPointBatchPrimitive, vtable_offset_local+14, agcom.PVOID)
        self.__dict__["_GetSetHint"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPointBatchPrimitive, vtable_offset_local+15, POINTER(agcom.LONG))
        self.__dict__["_GetPerItemPickingEnabled"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPointBatchPrimitive, vtable_offset_local+16, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetPerItemPickingEnabled"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPointBatchPrimitive, vtable_offset_local+17, agcom.VARIANT_BOOL)
        self.__dict__["_Set"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPointBatchPrimitive, vtable_offset_local+18, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetWithColors"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPointBatchPrimitive, vtable_offset_local+19, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetWithColorsAndRenderPass"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPointBatchPrimitive, vtable_offset_local+20, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.LONG)
        self.__dict__["_SetCartographic"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPointBatchPrimitive, vtable_offset_local+21, agcom.BSTR, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetCartographicWithColors"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPointBatchPrimitive, vtable_offset_local+22, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetCartographicWithColorsAndRenderPass"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPointBatchPrimitive, vtable_offset_local+23, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.LONG)
        self.__dict__["_SetPartial"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPointBatchPrimitive, vtable_offset_local+24, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetPartialWithIndicesOrder"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPointBatchPrimitive, vtable_offset_local+25, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.LONG)
        self.__dict__["_SetPartialWithColors"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPointBatchPrimitive, vtable_offset_local+26, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetPartialWithColorsIndicesOrderAndRenderPass"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPointBatchPrimitive, vtable_offset_local+27, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.LONG, agcom.LONG)
        self.__dict__["_SetPartialCartographic"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPointBatchPrimitive, vtable_offset_local+28, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetPartialCartographicWithIndicesOrder"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPointBatchPrimitive, vtable_offset_local+29, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.LONG)
        self.__dict__["_SetPartialCartographicWithColors"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPointBatchPrimitive, vtable_offset_local+30, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetPartialCartographicWithColorsIndicesOrderAndRenderPass"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPointBatchPrimitive, vtable_offset_local+31, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.LONG, agcom.LONG)
        self.__dict__["_GetCentralBodyClipped"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPointBatchPrimitive, vtable_offset_local+32, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetCentralBodyClipped"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPointBatchPrimitive, vtable_offset_local+33, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsPointBatchPrimitive.__dict__ and type(IAgStkGraphicsPointBatchPrimitive.__dict__[attrname]) == property:
            return IAgStkGraphicsPointBatchPrimitive.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsPointBatchPrimitive.")
    
    @property
    def DisplayOutline(self) -> bool:
        """Gets or sets whether an outline is rendered around each point in the batch."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDisplayOutline"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @DisplayOutline.setter
    def DisplayOutline(self, displayOutline:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(displayOutline) as arg_displayOutline:
            agcls.evaluate_hresult(self.__dict__["_SetDisplayOutline"](arg_displayOutline.COM_val))

    @property
    def OutlineColor(self) -> agcolor.Color:
        """Gets or sets the outline's color."""
        with agmarshall.OLE_COLOR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetOutlineColor"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @OutlineColor.setter
    def OutlineColor(self, outlineColor:agcolor.Color) -> None:
        with agmarshall.OLE_COLOR_arg(outlineColor) as arg_outlineColor:
            agcls.evaluate_hresult(self.__dict__["_SetOutlineColor"](arg_outlineColor.COM_val))

    @property
    def OutlineTranslucency(self) -> float:
        """Gets or sets the translucency of the outline. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetOutlineTranslucency"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @OutlineTranslucency.setter
    def OutlineTranslucency(self, outlineTranslucency:float) -> None:
        with agmarshall.FLOAT_arg(outlineTranslucency) as arg_outlineTranslucency:
            agcls.evaluate_hresult(self.__dict__["_SetOutlineTranslucency"](arg_outlineTranslucency.COM_val))

    @property
    def OutlineWidth(self) -> float:
        """Gets or sets the size, in pixels, of the outline around each point in the batch."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetOutlineWidth"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @OutlineWidth.setter
    def OutlineWidth(self, outlineWidth:float) -> None:
        with agmarshall.FLOAT_arg(outlineWidth) as arg_outlineWidth:
            agcls.evaluate_hresult(self.__dict__["_SetOutlineWidth"](arg_outlineWidth.COM_val))

    @property
    def PixelSize(self) -> float:
        """Gets or sets the size, in pixels, of each point in the point batch."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPixelSize"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @PixelSize.setter
    def PixelSize(self, pixelSize:float) -> None:
        with agmarshall.FLOAT_arg(pixelSize) as arg_pixelSize:
            agcls.evaluate_hresult(self.__dict__["_SetPixelSize"](arg_pixelSize.COM_val))

    @property
    def MinimumPixelSizeSupported(self) -> float:
        """Gets the minimum pixel size supported by the video card."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinimumPixelSizeSupported"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def MaximumPixelSizeSupported(self) -> float:
        """Gets the maximum pixel size supported by the video card."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaximumPixelSizeSupported"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def DistanceDisplayConditionPerPoint(self) -> "IAgStkGraphicsDistanceDisplayCondition":
        """Gets or sets a distance display condition that is evaluated per point in the point batch during rendering. This is different than display condition, which is evaluated once for the entire point batch..."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDistanceDisplayConditionPerPoint"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @DistanceDisplayConditionPerPoint.setter
    def DistanceDisplayConditionPerPoint(self, distanceDisplayConditionPerPoint:"IAgStkGraphicsDistanceDisplayCondition") -> None:
        with agmarshall.AgInterface_in_arg(distanceDisplayConditionPerPoint, IAgStkGraphicsDistanceDisplayCondition) as arg_distanceDisplayConditionPerPoint:
            agcls.evaluate_hresult(self.__dict__["_SetDistanceDisplayConditionPerPoint"](arg_distanceDisplayConditionPerPoint.COM_val))

    @property
    def SetHint(self) -> "AgEStkGraphicsSetHint":
        """Gets the primitive's set hint. See the Set Hint Performance Overview for selecting an appropriate value to construct the primitive with."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsSetHint) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSetHint"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def PerItemPickingEnabled(self) -> bool:
        """Gets or sets whether individual point indices will be included in the pick results returned from the scene's Pick method. Each point index that is picked will be returned as a batch primitive index."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPerItemPickingEnabled"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @PerItemPickingEnabled.setter
    def PerItemPickingEnabled(self, perItemPickingEnabled:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(perItemPickingEnabled) as arg_perItemPickingEnabled:
            agcls.evaluate_hresult(self.__dict__["_SetPerItemPickingEnabled"](arg_perItemPickingEnabled.COM_val))

    def Set(self, positions:list) -> None:
        """Defines the positions of points in a point batch. The points are rendered in the primitive's reference frame."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions:
            agcls.evaluate_hresult(self.__dict__["_Set"](byref(arg_positions.COM_val)))

    def SetWithColors(self, positions:list, colors:list) -> None:
        """Defines the positions and colors of points in a point batch. The points are rendered in the primitive's reference frame."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(colors) as arg_colors:
            agcls.evaluate_hresult(self.__dict__["_SetWithColors"](byref(arg_positions.COM_val), byref(arg_colors.COM_val)))

    def SetWithColorsAndRenderPass(self, positions:list, colors:list, renderPassHint:"AgEStkGraphicsRenderPassHint") -> None:
        """Defines the positions and colors of points in a point batch. The points are rendered in the primitive's reference frame. renderPassHint is provided for efficiency."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(colors) as arg_colors, \
             agmarshall.AgEnum_arg(AgEStkGraphicsRenderPassHint, renderPassHint) as arg_renderPassHint:
            agcls.evaluate_hresult(self.__dict__["_SetWithColorsAndRenderPass"](byref(arg_positions.COM_val), byref(arg_colors.COM_val), arg_renderPassHint.COM_val))

    def SetCartographic(self, centralBody:str, positions:list) -> None:
        """For convenience. Defines the positions of points in a point batch using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling Set."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions:
            agcls.evaluate_hresult(self.__dict__["_SetCartographic"](arg_centralBody.COM_val, byref(arg_positions.COM_val)))

    def SetCartographicWithColors(self, centralBody:str, positions:list, colors:list) -> None:
        """For convenience. Defines the positions and colors of points in a point batch using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling Set."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(colors) as arg_colors:
            agcls.evaluate_hresult(self.__dict__["_SetCartographicWithColors"](arg_centralBody.COM_val, byref(arg_positions.COM_val), byref(arg_colors.COM_val)))

    def SetCartographicWithColorsAndRenderPass(self, centralBody:str, positions:list, colors:list, renderPassHint:"AgEStkGraphicsRenderPassHint") -> None:
        """For convenience. Defines the positions and colors of points in a point batch using cartographic positions. renderPassHint is provided for efficiency. This is equivalent to converting each position in positions to cartesian and calling Set."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(colors) as arg_colors, \
             agmarshall.AgEnum_arg(AgEStkGraphicsRenderPassHint, renderPassHint) as arg_renderPassHint:
            agcls.evaluate_hresult(self.__dict__["_SetCartographicWithColorsAndRenderPass"](arg_centralBody.COM_val, byref(arg_positions.COM_val), byref(arg_colors.COM_val), arg_renderPassHint.COM_val))

    def SetPartial(self, positions:list, indices:list) -> None:
        """Updates a subset of positions in a point batch."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices:
            agcls.evaluate_hresult(self.__dict__["_SetPartial"](byref(arg_positions.COM_val), byref(arg_indices.COM_val)))

    def SetPartialWithIndicesOrder(self, positions:list, indices:list, indicesOrderHint:"AgEStkGraphicsIndicesOrderHint") -> None:
        """Updates a subset of positions in a point batch."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices, \
             agmarshall.AgEnum_arg(AgEStkGraphicsIndicesOrderHint, indicesOrderHint) as arg_indicesOrderHint:
            agcls.evaluate_hresult(self.__dict__["_SetPartialWithIndicesOrder"](byref(arg_positions.COM_val), byref(arg_indices.COM_val), arg_indicesOrderHint.COM_val))

    def SetPartialWithColors(self, positions:list, colors:list, indices:list) -> None:
        """Updates a subset of positions and/or colors in a point batch."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(colors) as arg_colors, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices:
            agcls.evaluate_hresult(self.__dict__["_SetPartialWithColors"](byref(arg_positions.COM_val), byref(arg_colors.COM_val), byref(arg_indices.COM_val)))

    def SetPartialWithColorsIndicesOrderAndRenderPass(self, positions:list, colors:list, indices:list, indicesOrderHint:"AgEStkGraphicsIndicesOrderHint", renderPassHint:"AgEStkGraphicsRenderPassHint") -> None:
        """Updates a subset of positions and/or colors in a point batch."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(colors) as arg_colors, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices, \
             agmarshall.AgEnum_arg(AgEStkGraphicsIndicesOrderHint, indicesOrderHint) as arg_indicesOrderHint, \
             agmarshall.AgEnum_arg(AgEStkGraphicsRenderPassHint, renderPassHint) as arg_renderPassHint:
            agcls.evaluate_hresult(self.__dict__["_SetPartialWithColorsIndicesOrderAndRenderPass"](byref(arg_positions.COM_val), byref(arg_colors.COM_val), byref(arg_indices.COM_val), arg_indicesOrderHint.COM_val, arg_renderPassHint.COM_val))

    def SetPartialCartographic(self, centralBody:str, positions:list, indices:list) -> None:
        """For convenience. Updates a subset of positions in a point batch using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling SetPartial"""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices:
            agcls.evaluate_hresult(self.__dict__["_SetPartialCartographic"](arg_centralBody.COM_val, byref(arg_positions.COM_val), byref(arg_indices.COM_val)))

    def SetPartialCartographicWithIndicesOrder(self, centralBody:str, positions:list, indices:list, indicesOrderHint:"AgEStkGraphicsIndicesOrderHint") -> None:
        """For convenience. Updates a subset of positions in a point batch using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling SetPartial"""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices, \
             agmarshall.AgEnum_arg(AgEStkGraphicsIndicesOrderHint, indicesOrderHint) as arg_indicesOrderHint:
            agcls.evaluate_hresult(self.__dict__["_SetPartialCartographicWithIndicesOrder"](arg_centralBody.COM_val, byref(arg_positions.COM_val), byref(arg_indices.COM_val), arg_indicesOrderHint.COM_val))

    def SetPartialCartographicWithColors(self, centralBody:str, positions:list, colors:list, indices:list) -> None:
        """For convenience. Updates a subset of positions and/or colors in a point batch using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling SetPartial"""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(colors) as arg_colors, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices:
            agcls.evaluate_hresult(self.__dict__["_SetPartialCartographicWithColors"](arg_centralBody.COM_val, byref(arg_positions.COM_val), byref(arg_colors.COM_val), byref(arg_indices.COM_val)))

    def SetPartialCartographicWithColorsIndicesOrderAndRenderPass(self, centralBody:str, positions:list, colors:list, indices:list, indicesOrderHint:"AgEStkGraphicsIndicesOrderHint", renderPassHint:"AgEStkGraphicsRenderPassHint") -> None:
        """For convenience. Updates a subset of positions and/or colors in a point batch using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling SetPartial"""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(colors) as arg_colors, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices, \
             agmarshall.AgEnum_arg(AgEStkGraphicsIndicesOrderHint, indicesOrderHint) as arg_indicesOrderHint, \
             agmarshall.AgEnum_arg(AgEStkGraphicsRenderPassHint, renderPassHint) as arg_renderPassHint:
            agcls.evaluate_hresult(self.__dict__["_SetPartialCartographicWithColorsIndicesOrderAndRenderPass"](arg_centralBody.COM_val, byref(arg_positions.COM_val), byref(arg_colors.COM_val), byref(arg_indices.COM_val), arg_indicesOrderHint.COM_val, arg_renderPassHint.COM_val))

    @property
    def CentralBodyClipped(self) -> bool:
        """Gets or sets whether individual points will be clipped by the central body."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyClipped"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @CentralBodyClipped.setter
    def CentralBodyClipped(self, centralBodyClipped:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(centralBodyClipped) as arg_centralBodyClipped:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBodyClipped"](arg_centralBodyClipped.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{ae6c6dca-3afe-4419-8aad-dd56bee51446}", IAgStkGraphicsPointBatchPrimitive)
agcls.AgTypeNameMap["IAgStkGraphicsPointBatchPrimitive"] = IAgStkGraphicsPointBatchPrimitive
__all__.append("IAgStkGraphicsPointBatchPrimitive")

class IAgStkGraphicsPolylinePrimitive(object):
    """Renders a polyline in the 3D scene. Each line segment may have a different color. A polyline can be constructed with a position interpolator to render great arcs or rhumb lines."""
    _uuid = "{0122dc2b-4232-443d-b8da-09b42967b841}"
    _num_methods = 42
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetWidth"] = _raise_uninitialized_error
        self.__dict__["_SetWidth"] = _raise_uninitialized_error
        self.__dict__["_GetMinimumWidthSupported"] = _raise_uninitialized_error
        self.__dict__["_GetMaximumWidthSupported"] = _raise_uninitialized_error
        self.__dict__["_GetPositionInterpolator"] = _raise_uninitialized_error
        self.__dict__["_GetPolylineType"] = _raise_uninitialized_error
        self.__dict__["_GetSetHint"] = _raise_uninitialized_error
        self.__dict__["_GetDisplayOutline"] = _raise_uninitialized_error
        self.__dict__["_SetDisplayOutline"] = _raise_uninitialized_error
        self.__dict__["_GetOutlineColor"] = _raise_uninitialized_error
        self.__dict__["_SetOutlineColor"] = _raise_uninitialized_error
        self.__dict__["_GetOutlineTranslucency"] = _raise_uninitialized_error
        self.__dict__["_SetOutlineTranslucency"] = _raise_uninitialized_error
        self.__dict__["_GetOutlineWidth"] = _raise_uninitialized_error
        self.__dict__["_SetOutlineWidth"] = _raise_uninitialized_error
        self.__dict__["_GetPerItemPickingEnabled"] = _raise_uninitialized_error
        self.__dict__["_SetPerItemPickingEnabled"] = _raise_uninitialized_error
        self.__dict__["_Set"] = _raise_uninitialized_error
        self.__dict__["_SetWithColors"] = _raise_uninitialized_error
        self.__dict__["_SetWithColorsAndHint"] = _raise_uninitialized_error
        self.__dict__["_SetWithSurfaceShapesResult"] = _raise_uninitialized_error
        self.__dict__["_SetWithSurfaceTriangulatorResult"] = _raise_uninitialized_error
        self.__dict__["_SetWithSolidTriangulatorResult"] = _raise_uninitialized_error
        self.__dict__["_SetCartographic"] = _raise_uninitialized_error
        self.__dict__["_SetCartographicWithColors"] = _raise_uninitialized_error
        self.__dict__["_SetCartographicWithColorsAndHint"] = _raise_uninitialized_error
        self.__dict__["_SetSubset"] = _raise_uninitialized_error
        self.__dict__["_SetSubsetCartographic"] = _raise_uninitialized_error
        self.__dict__["_SetPartial"] = _raise_uninitialized_error
        self.__dict__["_SetPartialWithIndicesOrder"] = _raise_uninitialized_error
        self.__dict__["_SetPartialWithColors"] = _raise_uninitialized_error
        self.__dict__["_SetPartialWithColorsIndicesOrderAndRenderPassHint"] = _raise_uninitialized_error
        self.__dict__["_SetPartialCartographic"] = _raise_uninitialized_error
        self.__dict__["_SetPartialCartographicWithIndicesOrder"] = _raise_uninitialized_error
        self.__dict__["_SetPartialCartographicWithColors"] = _raise_uninitialized_error
        self.__dict__["_SetPartialCartographicWithColorsIndicesOrderAndRenderPass"] = _raise_uninitialized_error
        self.__dict__["_GetCentralBodyClipped"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBodyClipped"] = _raise_uninitialized_error
        self.__dict__["_SetWithColorsAndOptionalParameters"] = _raise_uninitialized_error
        self.__dict__["_SetCartographicWithColorsAndOptionalParameters"] = _raise_uninitialized_error
        self.__dict__["_SetPartialWithColorsAndOptionalParameters"] = _raise_uninitialized_error
        self.__dict__["_SetPartialCartographicWithOptionalParameters"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsPolylinePrimitive._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsPolylinePrimitive from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsPolylinePrimitive = agcom.GUID(IAgStkGraphicsPolylinePrimitive._uuid)
        vtable_offset_local = IAgStkGraphicsPolylinePrimitive._vtable_offset - 1
        self.__dict__["_GetWidth"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPolylinePrimitive, vtable_offset_local+1, POINTER(agcom.FLOAT))
        self.__dict__["_SetWidth"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPolylinePrimitive, vtable_offset_local+2, agcom.FLOAT)
        self.__dict__["_GetMinimumWidthSupported"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPolylinePrimitive, vtable_offset_local+3, POINTER(agcom.FLOAT))
        self.__dict__["_GetMaximumWidthSupported"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPolylinePrimitive, vtable_offset_local+4, POINTER(agcom.FLOAT))
        self.__dict__["_GetPositionInterpolator"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPolylinePrimitive, vtable_offset_local+5, POINTER(agcom.PVOID))
        self.__dict__["_GetPolylineType"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPolylinePrimitive, vtable_offset_local+6, POINTER(agcom.LONG))
        self.__dict__["_GetSetHint"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPolylinePrimitive, vtable_offset_local+7, POINTER(agcom.LONG))
        self.__dict__["_GetDisplayOutline"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPolylinePrimitive, vtable_offset_local+8, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetDisplayOutline"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPolylinePrimitive, vtable_offset_local+9, agcom.VARIANT_BOOL)
        self.__dict__["_GetOutlineColor"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPolylinePrimitive, vtable_offset_local+10, POINTER(agcom.OLE_COLOR))
        self.__dict__["_SetOutlineColor"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPolylinePrimitive, vtable_offset_local+11, agcom.OLE_COLOR)
        self.__dict__["_GetOutlineTranslucency"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPolylinePrimitive, vtable_offset_local+12, POINTER(agcom.FLOAT))
        self.__dict__["_SetOutlineTranslucency"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPolylinePrimitive, vtable_offset_local+13, agcom.FLOAT)
        self.__dict__["_GetOutlineWidth"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPolylinePrimitive, vtable_offset_local+14, POINTER(agcom.FLOAT))
        self.__dict__["_SetOutlineWidth"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPolylinePrimitive, vtable_offset_local+15, agcom.FLOAT)
        self.__dict__["_GetPerItemPickingEnabled"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPolylinePrimitive, vtable_offset_local+16, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetPerItemPickingEnabled"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPolylinePrimitive, vtable_offset_local+17, agcom.VARIANT_BOOL)
        self.__dict__["_Set"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPolylinePrimitive, vtable_offset_local+18, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetWithColors"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPolylinePrimitive, vtable_offset_local+19, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetWithColorsAndHint"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPolylinePrimitive, vtable_offset_local+20, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.LONG)
        self.__dict__["_SetWithSurfaceShapesResult"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPolylinePrimitive, vtable_offset_local+21, agcom.PVOID)
        self.__dict__["_SetWithSurfaceTriangulatorResult"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPolylinePrimitive, vtable_offset_local+22, agcom.PVOID)
        self.__dict__["_SetWithSolidTriangulatorResult"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPolylinePrimitive, vtable_offset_local+23, agcom.PVOID)
        self.__dict__["_SetCartographic"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPolylinePrimitive, vtable_offset_local+24, agcom.BSTR, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetCartographicWithColors"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPolylinePrimitive, vtable_offset_local+25, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetCartographicWithColorsAndHint"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPolylinePrimitive, vtable_offset_local+26, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.LONG)
        self.__dict__["_SetSubset"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPolylinePrimitive, vtable_offset_local+27, POINTER(agcom.SAFEARRAY), agcom.INT, agcom.INT)
        self.__dict__["_SetSubsetCartographic"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPolylinePrimitive, vtable_offset_local+28, agcom.BSTR, POINTER(agcom.SAFEARRAY), agcom.INT, agcom.INT)
        self.__dict__["_SetPartial"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPolylinePrimitive, vtable_offset_local+29, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetPartialWithIndicesOrder"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPolylinePrimitive, vtable_offset_local+30, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.LONG)
        self.__dict__["_SetPartialWithColors"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPolylinePrimitive, vtable_offset_local+31, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetPartialWithColorsIndicesOrderAndRenderPassHint"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPolylinePrimitive, vtable_offset_local+32, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.LONG, agcom.LONG)
        self.__dict__["_SetPartialCartographic"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPolylinePrimitive, vtable_offset_local+33, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetPartialCartographicWithIndicesOrder"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPolylinePrimitive, vtable_offset_local+34, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.LONG)
        self.__dict__["_SetPartialCartographicWithColors"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPolylinePrimitive, vtable_offset_local+35, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetPartialCartographicWithColorsIndicesOrderAndRenderPass"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPolylinePrimitive, vtable_offset_local+36, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.LONG, agcom.LONG)
        self.__dict__["_GetCentralBodyClipped"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPolylinePrimitive, vtable_offset_local+37, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetCentralBodyClipped"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPolylinePrimitive, vtable_offset_local+38, agcom.VARIANT_BOOL)
        self.__dict__["_SetWithColorsAndOptionalParameters"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPolylinePrimitive, vtable_offset_local+39, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.PVOID)
        self.__dict__["_SetCartographicWithColorsAndOptionalParameters"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPolylinePrimitive, vtable_offset_local+40, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.PVOID)
        self.__dict__["_SetPartialWithColorsAndOptionalParameters"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPolylinePrimitive, vtable_offset_local+41, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.PVOID, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetPartialCartographicWithOptionalParameters"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPolylinePrimitive, vtable_offset_local+42, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.PVOID, POINTER(agcom.SAFEARRAY))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsPolylinePrimitive.__dict__ and type(IAgStkGraphicsPolylinePrimitive.__dict__[attrname]) == property:
            return IAgStkGraphicsPolylinePrimitive.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsPolylinePrimitive.")
    
    @property
    def Width(self) -> float:
        """Gets or sets the line width, in pixels."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetWidth"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Width.setter
    def Width(self, width:float) -> None:
        with agmarshall.FLOAT_arg(width) as arg_width:
            agcls.evaluate_hresult(self.__dict__["_SetWidth"](arg_width.COM_val))

    @property
    def MinimumWidthSupported(self) -> float:
        """Gets the minimum width, in pixels, supported by the video card."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinimumWidthSupported"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def MaximumWidthSupported(self) -> float:
        """Gets the maximum width, in pixels, supported by the video card."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaximumWidthSupported"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def PositionInterpolator(self) -> "IAgStkGraphicsPositionInterpolator":
        """Gets the position interpolator applied to positions passed to Set, SetCartographic, SetSubset, and SetSubsetCartographic methods. When this property is null, linear interpolation is used."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPositionInterpolator"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def PolylineType(self) -> "AgEStkGraphicsPolylineType":
        """Gets how the polyline interprets the positions passed to Set methods."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsPolylineType) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPolylineType"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def SetHint(self) -> "AgEStkGraphicsSetHint":
        """Gets the primitive's set hint. See the Set Hint Performance Overview for selecting an appropriate value to construct the primitive with."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsSetHint) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSetHint"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def DisplayOutline(self) -> bool:
        """Gets or sets whether an outline is rendered around the polyline."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDisplayOutline"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @DisplayOutline.setter
    def DisplayOutline(self, displayOutline:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(displayOutline) as arg_displayOutline:
            agcls.evaluate_hresult(self.__dict__["_SetDisplayOutline"](arg_displayOutline.COM_val))

    @property
    def OutlineColor(self) -> agcolor.Color:
        """Gets or sets the outline's color."""
        with agmarshall.OLE_COLOR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetOutlineColor"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @OutlineColor.setter
    def OutlineColor(self, outlineColor:agcolor.Color) -> None:
        with agmarshall.OLE_COLOR_arg(outlineColor) as arg_outlineColor:
            agcls.evaluate_hresult(self.__dict__["_SetOutlineColor"](arg_outlineColor.COM_val))

    @property
    def OutlineTranslucency(self) -> float:
        """Gets or sets the translucency of the outline. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetOutlineTranslucency"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @OutlineTranslucency.setter
    def OutlineTranslucency(self, outlineTranslucency:float) -> None:
        with agmarshall.FLOAT_arg(outlineTranslucency) as arg_outlineTranslucency:
            agcls.evaluate_hresult(self.__dict__["_SetOutlineTranslucency"](arg_outlineTranslucency.COM_val))

    @property
    def OutlineWidth(self) -> float:
        """Gets or sets the width, in pixels, of the outline around the polyline."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetOutlineWidth"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @OutlineWidth.setter
    def OutlineWidth(self, outlineWidth:float) -> None:
        with agmarshall.FLOAT_arg(outlineWidth) as arg_outlineWidth:
            agcls.evaluate_hresult(self.__dict__["_SetOutlineWidth"](arg_outlineWidth.COM_val))

    @property
    def PerItemPickingEnabled(self) -> bool:
        """Gets or sets whether individual line indices will be included in the pick results returned from the scene's Pick method. Each line index that is picked will be returned as a batch primitive index."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPerItemPickingEnabled"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @PerItemPickingEnabled.setter
    def PerItemPickingEnabled(self, perItemPickingEnabled:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(perItemPickingEnabled) as arg_perItemPickingEnabled:
            agcls.evaluate_hresult(self.__dict__["_SetPerItemPickingEnabled"](arg_perItemPickingEnabled.COM_val))

    def Set(self, positions:list) -> None:
        """Defines the positions for a polyline primitive. The polyline is rendered in its reference frame."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions:
            agcls.evaluate_hresult(self.__dict__["_Set"](byref(arg_positions.COM_val)))

    def SetWithColors(self, positions:list, colors:list) -> None:
        """Defines the positions and colors of a polyline. The polyline is rendered in its reference frame."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(colors) as arg_colors:
            agcls.evaluate_hresult(self.__dict__["_SetWithColors"](byref(arg_positions.COM_val), byref(arg_colors.COM_val)))

    def SetWithColorsAndHint(self, positions:list, colors:list, renderPassHint:"AgEStkGraphicsRenderPassHint") -> None:
        """Defines the positions and colors of a polyline. The polyline is rendered in its reference frame. renderPassHint is provided for efficiency."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(colors) as arg_colors, \
             agmarshall.AgEnum_arg(AgEStkGraphicsRenderPassHint, renderPassHint) as arg_renderPassHint:
            agcls.evaluate_hresult(self.__dict__["_SetWithColorsAndHint"](byref(arg_positions.COM_val), byref(arg_colors.COM_val), arg_renderPassHint.COM_val))

    def SetWithSurfaceShapesResult(self, surfaceShapesResult:"IAgStkGraphicsSurfaceShapesResult") -> None:
        """Defines the positions of a polyline using the positions of the specified surfaceShapesResult."""
        with agmarshall.AgInterface_in_arg(surfaceShapesResult, IAgStkGraphicsSurfaceShapesResult) as arg_surfaceShapesResult:
            agcls.evaluate_hresult(self.__dict__["_SetWithSurfaceShapesResult"](arg_surfaceShapesResult.COM_val))

    def SetWithSurfaceTriangulatorResult(self, surfaceTriangulatorResult:"IAgStkGraphicsSurfaceTriangulatorResult") -> None:
        """Defines the positions of a polyline using the boundary positions of the specified surfaceTriangulatorResult."""
        with agmarshall.AgInterface_in_arg(surfaceTriangulatorResult, IAgStkGraphicsSurfaceTriangulatorResult) as arg_surfaceTriangulatorResult:
            agcls.evaluate_hresult(self.__dict__["_SetWithSurfaceTriangulatorResult"](arg_surfaceTriangulatorResult.COM_val))

    def SetWithSolidTriangulatorResult(self, solidTriangulatorResult:"IAgStkGraphicsSolidTriangulatorResult") -> None:
        """Defines the positions of a polyline using the outline positions of the specified solidTriangulatorResult."""
        with agmarshall.AgInterface_in_arg(solidTriangulatorResult, IAgStkGraphicsSolidTriangulatorResult) as arg_solidTriangulatorResult:
            agcls.evaluate_hresult(self.__dict__["_SetWithSolidTriangulatorResult"](arg_solidTriangulatorResult.COM_val))

    def SetCartographic(self, centralBody:str, positions:list) -> None:
        """For convenience. Defines the positions of a polyline using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling Set."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions:
            agcls.evaluate_hresult(self.__dict__["_SetCartographic"](arg_centralBody.COM_val, byref(arg_positions.COM_val)))

    def SetCartographicWithColors(self, centralBody:str, positions:list, colors:list) -> None:
        """For convenience. Defines the positions and colors of a polyline using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling Set."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(colors) as arg_colors:
            agcls.evaluate_hresult(self.__dict__["_SetCartographicWithColors"](arg_centralBody.COM_val, byref(arg_positions.COM_val), byref(arg_colors.COM_val)))

    def SetCartographicWithColorsAndHint(self, centralBody:str, positions:list, colors:list, renderPassHint:"AgEStkGraphicsRenderPassHint") -> None:
        """For convenience. Defines the positions and colors of a polyline using cartographic positions. renderPassHint is provided for efficiency. This is equivalent to converting each position in positions to cartesian and calling Set."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(colors) as arg_colors, \
             agmarshall.AgEnum_arg(AgEStkGraphicsRenderPassHint, renderPassHint) as arg_renderPassHint:
            agcls.evaluate_hresult(self.__dict__["_SetCartographicWithColorsAndHint"](arg_centralBody.COM_val, byref(arg_positions.COM_val), byref(arg_colors.COM_val), arg_renderPassHint.COM_val))

    def SetSubset(self, positions:list, index:int, count:int) -> None:
        """Defines the positions of a polyline using a subset of input positions."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.INT_arg(index) as arg_index, \
             agmarshall.INT_arg(count) as arg_count:
            agcls.evaluate_hresult(self.__dict__["_SetSubset"](byref(arg_positions.COM_val), arg_index.COM_val, arg_count.COM_val))

    def SetSubsetCartographic(self, centralBody:str, positions:list, index:int, count:int) -> None:
        """For convenience. Defines the positions of a polyline using a subset of input cartographic positions. This is equivalent to converting the subset of positions to cartesian and calling SetSubset."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.INT_arg(index) as arg_index, \
             agmarshall.INT_arg(count) as arg_count:
            agcls.evaluate_hresult(self.__dict__["_SetSubsetCartographic"](arg_centralBody.COM_val, byref(arg_positions.COM_val), arg_index.COM_val, arg_count.COM_val))

    def SetPartial(self, positions:list, indices:list) -> None:
        """Updates a subset of positions in a polyline."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices:
            agcls.evaluate_hresult(self.__dict__["_SetPartial"](byref(arg_positions.COM_val), byref(arg_indices.COM_val)))

    def SetPartialWithIndicesOrder(self, positions:list, indices:list, indicesOrderHint:"AgEStkGraphicsIndicesOrderHint") -> None:
        """Updates a subset of positions in a polyline."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices, \
             agmarshall.AgEnum_arg(AgEStkGraphicsIndicesOrderHint, indicesOrderHint) as arg_indicesOrderHint:
            agcls.evaluate_hresult(self.__dict__["_SetPartialWithIndicesOrder"](byref(arg_positions.COM_val), byref(arg_indices.COM_val), arg_indicesOrderHint.COM_val))

    def SetPartialWithColors(self, positions:list, colors:list, indices:list) -> None:
        """Updates a subset of positions and/or colors in a polyline."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(colors) as arg_colors, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices:
            agcls.evaluate_hresult(self.__dict__["_SetPartialWithColors"](byref(arg_positions.COM_val), byref(arg_colors.COM_val), byref(arg_indices.COM_val)))

    def SetPartialWithColorsIndicesOrderAndRenderPassHint(self, positions:list, colors:list, indices:list, indicesOrderHint:"AgEStkGraphicsIndicesOrderHint", renderPassHint:"AgEStkGraphicsRenderPassHint") -> None:
        """Updates a subset of positions and/or colors in a polyline."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(colors) as arg_colors, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices, \
             agmarshall.AgEnum_arg(AgEStkGraphicsIndicesOrderHint, indicesOrderHint) as arg_indicesOrderHint, \
             agmarshall.AgEnum_arg(AgEStkGraphicsRenderPassHint, renderPassHint) as arg_renderPassHint:
            agcls.evaluate_hresult(self.__dict__["_SetPartialWithColorsIndicesOrderAndRenderPassHint"](byref(arg_positions.COM_val), byref(arg_colors.COM_val), byref(arg_indices.COM_val), arg_indicesOrderHint.COM_val, arg_renderPassHint.COM_val))

    def SetPartialCartographic(self, centralBody:str, positions:list, indices:list) -> None:
        """For convenience. Updates a subset of positions in a polyline using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling SetPartial"""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices:
            agcls.evaluate_hresult(self.__dict__["_SetPartialCartographic"](arg_centralBody.COM_val, byref(arg_positions.COM_val), byref(arg_indices.COM_val)))

    def SetPartialCartographicWithIndicesOrder(self, centralBody:str, positions:list, indices:list, indicesOrderHint:"AgEStkGraphicsIndicesOrderHint") -> None:
        """For convenience. Updates a subset of positions in a polyline using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling SetPartial"""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices, \
             agmarshall.AgEnum_arg(AgEStkGraphicsIndicesOrderHint, indicesOrderHint) as arg_indicesOrderHint:
            agcls.evaluate_hresult(self.__dict__["_SetPartialCartographicWithIndicesOrder"](arg_centralBody.COM_val, byref(arg_positions.COM_val), byref(arg_indices.COM_val), arg_indicesOrderHint.COM_val))

    def SetPartialCartographicWithColors(self, centralBody:str, positions:list, colors:list, indices:list) -> None:
        """For convenience. Updates a subset of positions and/or colors in a polyline using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling SetPartial"""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(colors) as arg_colors, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices:
            agcls.evaluate_hresult(self.__dict__["_SetPartialCartographicWithColors"](arg_centralBody.COM_val, byref(arg_positions.COM_val), byref(arg_colors.COM_val), byref(arg_indices.COM_val)))

    def SetPartialCartographicWithColorsIndicesOrderAndRenderPass(self, centralBody:str, positions:list, colors:list, indices:list, indicesOrderHint:"AgEStkGraphicsIndicesOrderHint", renderPassHint:"AgEStkGraphicsRenderPassHint") -> None:
        """For convenience. Updates a subset of positions and/or colors in a polyline using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling SetPartial"""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(colors) as arg_colors, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices, \
             agmarshall.AgEnum_arg(AgEStkGraphicsIndicesOrderHint, indicesOrderHint) as arg_indicesOrderHint, \
             agmarshall.AgEnum_arg(AgEStkGraphicsRenderPassHint, renderPassHint) as arg_renderPassHint:
            agcls.evaluate_hresult(self.__dict__["_SetPartialCartographicWithColorsIndicesOrderAndRenderPass"](arg_centralBody.COM_val, byref(arg_positions.COM_val), byref(arg_colors.COM_val), byref(arg_indices.COM_val), arg_indicesOrderHint.COM_val, arg_renderPassHint.COM_val))

    @property
    def CentralBodyClipped(self) -> bool:
        """Gets or sets whether the polyline will be clipped by the central body."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyClipped"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @CentralBodyClipped.setter
    def CentralBodyClipped(self, centralBodyClipped:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(centralBodyClipped) as arg_centralBodyClipped:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBodyClipped"](arg_centralBodyClipped.COM_val))

    def SetWithColorsAndOptionalParameters(self, positions:list, colors:list, optionalParameters:"IAgStkGraphicsPolylinePrimitiveOptionalParameters") -> None:
        """Defines the positions, colors, and/or optional point properties of a polyline. The polyline is rendered in its reference frame."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(colors) as arg_colors, \
             agmarshall.AgInterface_in_arg(optionalParameters, IAgStkGraphicsPolylinePrimitiveOptionalParameters) as arg_optionalParameters:
            agcls.evaluate_hresult(self.__dict__["_SetWithColorsAndOptionalParameters"](byref(arg_positions.COM_val), byref(arg_colors.COM_val), arg_optionalParameters.COM_val))

    def SetCartographicWithColorsAndOptionalParameters(self, centralBody:str, positions:list, colors:list, optionalParameters:"IAgStkGraphicsPolylinePrimitiveOptionalParameters") -> None:
        """For convenience. Defines the positions, colors, and/or optional point properties of a polyline using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling Set."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(colors) as arg_colors, \
             agmarshall.AgInterface_in_arg(optionalParameters, IAgStkGraphicsPolylinePrimitiveOptionalParameters) as arg_optionalParameters:
            agcls.evaluate_hresult(self.__dict__["_SetCartographicWithColorsAndOptionalParameters"](arg_centralBody.COM_val, byref(arg_positions.COM_val), byref(arg_colors.COM_val), arg_optionalParameters.COM_val))

    def SetPartialWithColorsAndOptionalParameters(self, positions:list, colors:list, optionalParameters:"IAgStkGraphicsPolylinePrimitiveOptionalParameters", indices:list) -> None:
        """Updates a subset of positions, colors, and/or optional point properties in a polyline."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(colors) as arg_colors, \
             agmarshall.AgInterface_in_arg(optionalParameters, IAgStkGraphicsPolylinePrimitiveOptionalParameters) as arg_optionalParameters, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices:
            agcls.evaluate_hresult(self.__dict__["_SetPartialWithColorsAndOptionalParameters"](byref(arg_positions.COM_val), byref(arg_colors.COM_val), arg_optionalParameters.COM_val, byref(arg_indices.COM_val)))

    def SetPartialCartographicWithOptionalParameters(self, centralBody:str, positions:list, colors:list, optionalParameters:"IAgStkGraphicsPolylinePrimitiveOptionalParameters", indices:list) -> None:
        """For convenience. Updates a subset of positions, colors, and/or optional point properties in a polyline using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling SetPartial"""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(colors) as arg_colors, \
             agmarshall.AgInterface_in_arg(optionalParameters, IAgStkGraphicsPolylinePrimitiveOptionalParameters) as arg_optionalParameters, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices:
            agcls.evaluate_hresult(self.__dict__["_SetPartialCartographicWithOptionalParameters"](arg_centralBody.COM_val, byref(arg_positions.COM_val), byref(arg_colors.COM_val), arg_optionalParameters.COM_val, byref(arg_indices.COM_val)))


agcls.AgClassCatalog.add_catalog_entry("{0122dc2b-4232-443d-b8da-09b42967b841}", IAgStkGraphicsPolylinePrimitive)
agcls.AgTypeNameMap["IAgStkGraphicsPolylinePrimitive"] = IAgStkGraphicsPolylinePrimitive
__all__.append("IAgStkGraphicsPolylinePrimitive")

class IAgStkGraphicsPolylinePrimitiveOptionalParameters(object):
    """Optional per-point or per-segment parameters for polyline primitive that overrides the polyline primitive's global parameters..."""
    _uuid = "{7ccefc1c-372f-43ff-91ca-fca3de401669}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_SetTimeIntervals"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsPolylinePrimitiveOptionalParameters._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsPolylinePrimitiveOptionalParameters from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsPolylinePrimitiveOptionalParameters = agcom.GUID(IAgStkGraphicsPolylinePrimitiveOptionalParameters._uuid)
        vtable_offset_local = IAgStkGraphicsPolylinePrimitiveOptionalParameters._vtable_offset - 1
        self.__dict__["_SetTimeIntervals"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPolylinePrimitiveOptionalParameters, vtable_offset_local+1, POINTER(agcom.SAFEARRAY))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsPolylinePrimitiveOptionalParameters.__dict__ and type(IAgStkGraphicsPolylinePrimitiveOptionalParameters.__dict__[attrname]) == property:
            return IAgStkGraphicsPolylinePrimitiveOptionalParameters.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsPolylinePrimitiveOptionalParameters.")
    
    def SetTimeIntervals(self, timeIntervals:list) -> None:
        """Defines a collection of TimeIntervals defined by MinimumTime and MaximumTime in Epoch Seconds, one for each point in the Polyline"""
        with agmarshall.SAFEARRAY_arg(timeIntervals) as arg_timeIntervals:
            agcls.evaluate_hresult(self.__dict__["_SetTimeIntervals"](byref(arg_timeIntervals.COM_val)))


agcls.AgClassCatalog.add_catalog_entry("{7ccefc1c-372f-43ff-91ca-fca3de401669}", IAgStkGraphicsPolylinePrimitiveOptionalParameters)
agcls.AgTypeNameMap["IAgStkGraphicsPolylinePrimitiveOptionalParameters"] = IAgStkGraphicsPolylinePrimitiveOptionalParameters
__all__.append("IAgStkGraphicsPolylinePrimitiveOptionalParameters")

class IAgStkGraphicsPositionInterpolator(object):
    """Position interpolators compute positions based on a collection of input positions. Position interpolators are used in conjunction with the polyline primitive to render things such as great arcs and rhumb lines."""
    _uuid = "{512c0d62-559e-42ce-98e2-218c02662290}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetPolylineType"] = _raise_uninitialized_error
        self.__dict__["_Interpolate"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsPositionInterpolator._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsPositionInterpolator from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsPositionInterpolator = agcom.GUID(IAgStkGraphicsPositionInterpolator._uuid)
        vtable_offset_local = IAgStkGraphicsPositionInterpolator._vtable_offset - 1
        self.__dict__["_GetPolylineType"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPositionInterpolator, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_Interpolate"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPositionInterpolator, vtable_offset_local+2, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsPositionInterpolator.__dict__ and type(IAgStkGraphicsPositionInterpolator.__dict__[attrname]) == property:
            return IAgStkGraphicsPositionInterpolator.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsPositionInterpolator.")
    
    @property
    def PolylineType(self) -> "AgEStkGraphicsPolylineType":
        """Gets the polyline type of positions returned from interpolate"""
        with agmarshall.AgEnum_arg(AgEStkGraphicsPolylineType) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPolylineType"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def Interpolate(self, positions:list) -> list:
        """Computes interpolated positions based on the input positions. Returns an array of positions in the order x, y, z."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Interpolate"](byref(arg_positions.COM_val), byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{512c0d62-559e-42ce-98e2-218c02662290}", IAgStkGraphicsPositionInterpolator)
agcls.AgTypeNameMap["IAgStkGraphicsPositionInterpolator"] = IAgStkGraphicsPositionInterpolator
__all__.append("IAgStkGraphicsPositionInterpolator")

class IAgStkGraphicsPrimitive(object):
    """Primitives represent objects rendered in the 3D scene."""
    _uuid = "{b593dc7b-315a-4c37-9f3c-42dfbd996ac2}"
    _num_methods = 16
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetReferenceFrame"] = _raise_uninitialized_error
        self.__dict__["_SetReferenceFrame"] = _raise_uninitialized_error
        self.__dict__["_GetBoundingSphere"] = _raise_uninitialized_error
        self.__dict__["_SetBoundingSphere"] = _raise_uninitialized_error
        self.__dict__["_GetAutomaticallyComputeBoundingSphere"] = _raise_uninitialized_error
        self.__dict__["_SetAutomaticallyComputeBoundingSphere"] = _raise_uninitialized_error
        self.__dict__["_GetDisplayCondition"] = _raise_uninitialized_error
        self.__dict__["_SetDisplayCondition"] = _raise_uninitialized_error
        self.__dict__["_GetDisplay"] = _raise_uninitialized_error
        self.__dict__["_SetDisplay"] = _raise_uninitialized_error
        self.__dict__["_GetColor"] = _raise_uninitialized_error
        self.__dict__["_SetColor"] = _raise_uninitialized_error
        self.__dict__["_GetTranslucency"] = _raise_uninitialized_error
        self.__dict__["_SetTranslucency"] = _raise_uninitialized_error
        self.__dict__["_GetTag"] = _raise_uninitialized_error
        self.__dict__["_SetTag"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsPrimitive._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsPrimitive from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsPrimitive = agcom.GUID(IAgStkGraphicsPrimitive._uuid)
        vtable_offset_local = IAgStkGraphicsPrimitive._vtable_offset - 1
        self.__dict__["_GetReferenceFrame"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPrimitive, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_SetReferenceFrame"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPrimitive, vtable_offset_local+2, agcom.PVOID)
        self.__dict__["_GetBoundingSphere"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPrimitive, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_SetBoundingSphere"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPrimitive, vtable_offset_local+4, agcom.PVOID)
        self.__dict__["_GetAutomaticallyComputeBoundingSphere"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPrimitive, vtable_offset_local+5, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetAutomaticallyComputeBoundingSphere"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPrimitive, vtable_offset_local+6, agcom.VARIANT_BOOL)
        self.__dict__["_GetDisplayCondition"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPrimitive, vtable_offset_local+7, POINTER(agcom.PVOID))
        self.__dict__["_SetDisplayCondition"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPrimitive, vtable_offset_local+8, agcom.PVOID)
        self.__dict__["_GetDisplay"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPrimitive, vtable_offset_local+9, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetDisplay"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPrimitive, vtable_offset_local+10, agcom.VARIANT_BOOL)
        self.__dict__["_GetColor"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPrimitive, vtable_offset_local+11, POINTER(agcom.OLE_COLOR))
        self.__dict__["_SetColor"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPrimitive, vtable_offset_local+12, agcom.OLE_COLOR)
        self.__dict__["_GetTranslucency"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPrimitive, vtable_offset_local+13, POINTER(agcom.FLOAT))
        self.__dict__["_SetTranslucency"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPrimitive, vtable_offset_local+14, agcom.FLOAT)
        self.__dict__["_GetTag"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPrimitive, vtable_offset_local+15, POINTER(agcom.VARIANT))
        self.__dict__["_SetTag"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPrimitive, vtable_offset_local+16, agcom.VARIANT)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsPrimitive.__dict__ and type(IAgStkGraphicsPrimitive.__dict__[attrname]) == property:
            return IAgStkGraphicsPrimitive.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsPrimitive.")
    
    @property
    def ReferenceFrame(self) -> "IAgCrdnSystem":
        """Gets or sets the reference frame this primitive is defined and rendered in."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetReferenceFrame"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @ReferenceFrame.setter
    def ReferenceFrame(self, referenceFrame:"IAgCrdnSystem") -> None:
        with agmarshall.AgInterface_in_arg(referenceFrame, IAgCrdnSystem) as arg_referenceFrame:
            agcls.evaluate_hresult(self.__dict__["_SetReferenceFrame"](arg_referenceFrame.COM_val))

    @property
    def BoundingSphere(self) -> "IAgStkGraphicsBoundingSphere":
        """Gets or sets the bounding sphere that encompasses the primitive. The center is defined in the primitive's reference frame."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBoundingSphere"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @BoundingSphere.setter
    def BoundingSphere(self, boundingSphere:"IAgStkGraphicsBoundingSphere") -> None:
        with agmarshall.AgInterface_in_arg(boundingSphere, IAgStkGraphicsBoundingSphere) as arg_boundingSphere:
            agcls.evaluate_hresult(self.__dict__["_SetBoundingSphere"](arg_boundingSphere.COM_val))

    @property
    def AutomaticallyComputeBoundingSphere(self) -> bool:
        """Gets or sets if the primitive's bounding sphere is automatically computed."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAutomaticallyComputeBoundingSphere"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @AutomaticallyComputeBoundingSphere.setter
    def AutomaticallyComputeBoundingSphere(self, automaticallyComputeBoundingSphere:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(automaticallyComputeBoundingSphere) as arg_automaticallyComputeBoundingSphere:
            agcls.evaluate_hresult(self.__dict__["_SetAutomaticallyComputeBoundingSphere"](arg_automaticallyComputeBoundingSphere.COM_val))

    @property
    def DisplayCondition(self) -> "IAgStkGraphicsDisplayCondition":
        """Gets or sets the display condition that determines if the primitive should be rendered. Both this and display must evaluate to true for the primitive to be rendered."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDisplayCondition"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @DisplayCondition.setter
    def DisplayCondition(self, displayCondition:"IAgStkGraphicsDisplayCondition") -> None:
        with agmarshall.AgInterface_in_arg(displayCondition, IAgStkGraphicsDisplayCondition) as arg_displayCondition:
            agcls.evaluate_hresult(self.__dict__["_SetDisplayCondition"](arg_displayCondition.COM_val))

    @property
    def Display(self) -> bool:
        """Gets or sets if the primitive should be rendered. Both this and display condition must evaluate to true for the primitive to be rendered."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDisplay"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Display.setter
    def Display(self, display:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(display) as arg_display:
            agcls.evaluate_hresult(self.__dict__["_SetDisplay"](arg_display.COM_val))

    @property
    def Color(self) -> agcolor.Color:
        """Gets or sets the primitive's color."""
        with agmarshall.OLE_COLOR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetColor"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Color.setter
    def Color(self, color:agcolor.Color) -> None:
        with agmarshall.OLE_COLOR_arg(color) as arg_color:
            agcls.evaluate_hresult(self.__dict__["_SetColor"](arg_color.COM_val))

    @property
    def Translucency(self) -> float:
        """Gets or sets the primitive's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTranslucency"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Translucency.setter
    def Translucency(self, translucency:float) -> None:
        with agmarshall.FLOAT_arg(translucency) as arg_translucency:
            agcls.evaluate_hresult(self.__dict__["_SetTranslucency"](arg_translucency.COM_val))

    @property
    def Tag(self) -> typing.Any:
        """Gets or sets custom value associated with this primitive."""
        with agmarshall.VARIANT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTag"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Tag.setter
    def Tag(self, tag:typing.Any) -> None:
        with agmarshall.VARIANT_arg(tag) as arg_tag:
            agcls.evaluate_hresult(self.__dict__["_SetTag"](arg_tag.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{b593dc7b-315a-4c37-9f3c-42dfbd996ac2}", IAgStkGraphicsPrimitive)
agcls.AgTypeNameMap["IAgStkGraphicsPrimitive"] = IAgStkGraphicsPrimitive
__all__.append("IAgStkGraphicsPrimitive")

class IAgStkGraphicsPrimitiveManager(object):
    """The primitive manager contains spatial data structures used to efficiently render primitives. Once a primitive is constructed, it must be added to the primitive manager before it will be rendered."""
    _uuid = "{39006599-c2ac-4f46-a190-958d173714fc}"
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        self.__dict__["_GetPrecisionExponent"] = _raise_uninitialized_error
        self.__dict__["_SetPrecisionExponent"] = _raise_uninitialized_error
        self.__dict__["_GetTranslucentPrimitivesSortOrder"] = _raise_uninitialized_error
        self.__dict__["_SetTranslucentPrimitivesSortOrder"] = _raise_uninitialized_error
        self.__dict__["_Add"] = _raise_uninitialized_error
        self.__dict__["_Remove"] = _raise_uninitialized_error
        self.__dict__["_Contains"] = _raise_uninitialized_error
        self.__dict__["_Clear"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsPrimitiveManager._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsPrimitiveManager from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsPrimitiveManager = agcom.GUID(IAgStkGraphicsPrimitiveManager._uuid)
        vtable_offset_local = IAgStkGraphicsPrimitiveManager._vtable_offset - 1
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPrimitiveManager, vtable_offset_local+1, POINTER(agcom.INT))
        self.__dict__["_GetPrecisionExponent"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPrimitiveManager, vtable_offset_local+2, POINTER(agcom.INT))
        self.__dict__["_SetPrecisionExponent"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPrimitiveManager, vtable_offset_local+3, agcom.INT)
        self.__dict__["_GetTranslucentPrimitivesSortOrder"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPrimitiveManager, vtable_offset_local+4, POINTER(agcom.LONG))
        self.__dict__["_SetTranslucentPrimitivesSortOrder"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPrimitiveManager, vtable_offset_local+5, agcom.LONG)
        self.__dict__["_Add"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPrimitiveManager, vtable_offset_local+6, agcom.PVOID)
        self.__dict__["_Remove"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPrimitiveManager, vtable_offset_local+7, agcom.PVOID)
        self.__dict__["_Contains"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPrimitiveManager, vtable_offset_local+8, agcom.PVOID, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_Clear"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPrimitiveManager, vtable_offset_local+9, )
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPrimitiveManager, vtable_offset_local+10, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsPrimitiveManager.__dict__ and type(IAgStkGraphicsPrimitiveManager.__dict__[attrname]) == property:
            return IAgStkGraphicsPrimitiveManager.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsPrimitiveManager.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> typing.Any:
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    
    @property
    def Count(self) -> int:
        """Gets the number of primitives in the manager."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def PrecisionExponent(self) -> int:
        """This property is deprecated. This property is no longer in use Gets or sets the exponent used to compute the maximum precision for primitive rendering. For example, a value of -3 indicates the maximum precision of 2^-3, 0.125 m along the x, y, or z axis..."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPrecisionExponent"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @PrecisionExponent.setter
    def PrecisionExponent(self, precisionExponent:int) -> None:
        with agmarshall.INT_arg(precisionExponent) as arg_precisionExponent:
            agcls.evaluate_hresult(self.__dict__["_SetPrecisionExponent"](arg_precisionExponent.COM_val))

    @property
    def TranslucentPrimitivesSortOrder(self) -> "AgEStkGraphicsPrimitivesSortOrder":
        """Gets or sets the sort order for translucent primitives in the primitive manager. This determines a trade-off between rendering speed and quality..."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsPrimitivesSortOrder) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTranslucentPrimitivesSortOrder"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @TranslucentPrimitivesSortOrder.setter
    def TranslucentPrimitivesSortOrder(self, translucentPrimitivesSortOrder:"AgEStkGraphicsPrimitivesSortOrder") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsPrimitivesSortOrder, translucentPrimitivesSortOrder) as arg_translucentPrimitivesSortOrder:
            agcls.evaluate_hresult(self.__dict__["_SetTranslucentPrimitivesSortOrder"](arg_translucentPrimitivesSortOrder.COM_val))

    def Add(self, primitive:"IAgStkGraphicsPrimitive") -> None:
        """Adds a primitive to the manager. Primitives must be added to the manager to be rendered."""
        with agmarshall.AgInterface_in_arg(primitive, IAgStkGraphicsPrimitive) as arg_primitive:
            agcls.evaluate_hresult(self.__dict__["_Add"](arg_primitive.COM_val))

    def Remove(self, primitive:"IAgStkGraphicsPrimitive") -> None:
        """Removes a primitive from the manager. The primitive is no longer rendered unless it is added back into the manager."""
        with agmarshall.AgInterface_in_arg(primitive, IAgStkGraphicsPrimitive) as arg_primitive:
            agcls.evaluate_hresult(self.__dict__["_Remove"](arg_primitive.COM_val))

    def Contains(self, primitive:"IAgStkGraphicsPrimitive") -> bool:
        """Determines whether the manager contains a primitive."""
        with agmarshall.AgInterface_in_arg(primitive, IAgStkGraphicsPrimitive) as arg_primitive, \
             agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_Contains"](arg_primitive.COM_val, byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def Clear(self) -> None:
        """Removes all primitives from the manager."""
        agcls.evaluate_hresult(self.__dict__["_Clear"]())

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        """Returns an enumerator that iterates through the collection. The order of the primitives is not guaranteed to be the order that the primitives were added."""
        with agmarshall.IEnumVARIANT_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{39006599-c2ac-4f46-a190-958d173714fc}", IAgStkGraphicsPrimitiveManager)
agcls.AgTypeNameMap["IAgStkGraphicsPrimitiveManager"] = IAgStkGraphicsPrimitiveManager
__all__.append("IAgStkGraphicsPrimitiveManager")

class IAgStkGraphicsRasterImageGlobeOverlay(object):
    """A globe image overlay for handling rasters."""
    _uuid = "{de016591-933e-4085-b6a4-401e117109e9}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetUseTransparentColor"] = _raise_uninitialized_error
        self.__dict__["_SetUseTransparentColor"] = _raise_uninitialized_error
        self.__dict__["_GetTransparentColor"] = _raise_uninitialized_error
        self.__dict__["_SetTransparentColor"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsRasterImageGlobeOverlay._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsRasterImageGlobeOverlay from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsRasterImageGlobeOverlay = agcom.GUID(IAgStkGraphicsRasterImageGlobeOverlay._uuid)
        vtable_offset_local = IAgStkGraphicsRasterImageGlobeOverlay._vtable_offset - 1
        self.__dict__["_GetUseTransparentColor"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsRasterImageGlobeOverlay, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseTransparentColor"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsRasterImageGlobeOverlay, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetTransparentColor"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsRasterImageGlobeOverlay, vtable_offset_local+3, POINTER(agcom.OLE_COLOR))
        self.__dict__["_SetTransparentColor"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsRasterImageGlobeOverlay, vtable_offset_local+4, agcom.OLE_COLOR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsRasterImageGlobeOverlay.__dict__ and type(IAgStkGraphicsRasterImageGlobeOverlay.__dict__[attrname]) == property:
            return IAgStkGraphicsRasterImageGlobeOverlay.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsRasterImageGlobeOverlay.")
    
    @property
    def UseTransparentColor(self) -> bool:
        """Gets or sets whether transparent color should be used."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseTransparentColor"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @UseTransparentColor.setter
    def UseTransparentColor(self, useTransparentColor:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(useTransparentColor) as arg_useTransparentColor:
            agcls.evaluate_hresult(self.__dict__["_SetUseTransparentColor"](arg_useTransparentColor.COM_val))

    @property
    def TransparentColor(self) -> agcolor.Color:
        """Gets or sets the color that will become transparent."""
        with agmarshall.OLE_COLOR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTransparentColor"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @TransparentColor.setter
    def TransparentColor(self, transparentColor:agcolor.Color) -> None:
        with agmarshall.OLE_COLOR_arg(transparentColor) as arg_transparentColor:
            agcls.evaluate_hresult(self.__dict__["_SetTransparentColor"](arg_transparentColor.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{de016591-933e-4085-b6a4-401e117109e9}", IAgStkGraphicsRasterImageGlobeOverlay)
agcls.AgTypeNameMap["IAgStkGraphicsRasterImageGlobeOverlay"] = IAgStkGraphicsRasterImageGlobeOverlay
__all__.append("IAgStkGraphicsRasterImageGlobeOverlay")

class IAgStkGraphicsRhumbLineInterpolator(object):
    """The rhumb line interpolator computes interpolated positions along a rhumb line. Rhumb lines are lines of constant bearing. They appear as straight lines on a Mercator 2D map projection and are well suited to navigation."""
    _uuid = "{ccdec605-222e-4dea-a897-2632b43af87f}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCentralBody"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBody"] = _raise_uninitialized_error
        self.__dict__["_GetGranularity"] = _raise_uninitialized_error
        self.__dict__["_SetGranularity"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsRhumbLineInterpolator._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsRhumbLineInterpolator from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsRhumbLineInterpolator = agcom.GUID(IAgStkGraphicsRhumbLineInterpolator._uuid)
        vtable_offset_local = IAgStkGraphicsRhumbLineInterpolator._vtable_offset - 1
        self.__dict__["_GetCentralBody"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsRhumbLineInterpolator, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCentralBody"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsRhumbLineInterpolator, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetGranularity"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsRhumbLineInterpolator, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetGranularity"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsRhumbLineInterpolator, vtable_offset_local+4, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsRhumbLineInterpolator.__dict__ and type(IAgStkGraphicsRhumbLineInterpolator.__dict__[attrname]) == property:
            return IAgStkGraphicsRhumbLineInterpolator.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsRhumbLineInterpolator.")
    
    @property
    def CentralBody(self) -> str:
        """Gets or sets the central body used when interpolating with interpolate."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBody"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @CentralBody.setter
    def CentralBody(self, centralBody:str) -> None:
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBody"](arg_centralBody.COM_val))

    @property
    def Granularity(self) -> float:
        """Gets or sets the granularity used when interpolating with interpolate. Lower granularities are more precise but create more positions."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetGranularity"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Granularity.setter
    def Granularity(self, granularity:float) -> None:
        with agmarshall.DOUBLE_arg(granularity) as arg_granularity:
            agcls.evaluate_hresult(self.__dict__["_SetGranularity"](arg_granularity.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{ccdec605-222e-4dea-a897-2632b43af87f}", IAgStkGraphicsRhumbLineInterpolator)
agcls.AgTypeNameMap["IAgStkGraphicsRhumbLineInterpolator"] = IAgStkGraphicsRhumbLineInterpolator
__all__.append("IAgStkGraphicsRhumbLineInterpolator")

class IAgStkGraphicsScene(object):
    """A scene provides properties and functionality that are reflected in the rendering of the globe control that it is associated with. An globe control's scene is available from the scene property..."""
    _uuid = "{2d15c682-efb5-499f-8851-a49599b2097d}"
    _num_methods = 23
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCamera"] = _raise_uninitialized_error
        self.__dict__["_GetLighting"] = _raise_uninitialized_error
        self.__dict__["_GetShowSunshine"] = _raise_uninitialized_error
        self.__dict__["_SetShowSunshine"] = _raise_uninitialized_error
        self.__dict__["_GetCentralBodies"] = _raise_uninitialized_error
        self.__dict__["_GetBackgroundColor"] = _raise_uninitialized_error
        self.__dict__["_SetBackgroundColor"] = _raise_uninitialized_error
        self.__dict__["_GetShadeSkyBasedOnAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetShadeSkyBasedOnAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetShowStars"] = _raise_uninitialized_error
        self.__dict__["_SetShowStars"] = _raise_uninitialized_error
        self.__dict__["_GetGlobeOverlaySettings"] = _raise_uninitialized_error
        self.__dict__["_Render"] = _raise_uninitialized_error
        self.__dict__["_Pick"] = _raise_uninitialized_error
        self.__dict__["_PickRectangular"] = _raise_uninitialized_error
        self.__dict__["_PickScreenOverlays"] = _raise_uninitialized_error
        self.__dict__["_GetSceneID"] = _raise_uninitialized_error
        self.__dict__["_GetShowWaterSurface"] = _raise_uninitialized_error
        self.__dict__["_SetShowWaterSurface"] = _raise_uninitialized_error
        self.__dict__["_GetAntiAliasing"] = _raise_uninitialized_error
        self.__dict__["_SetAntiAliasing"] = _raise_uninitialized_error
        self.__dict__["_GetVisualEffects"] = _raise_uninitialized_error
        self.__dict__["_GetClouds"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsScene._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsScene from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsScene = agcom.GUID(IAgStkGraphicsScene._uuid)
        vtable_offset_local = IAgStkGraphicsScene._vtable_offset - 1
        self.__dict__["_GetCamera"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsScene, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetLighting"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsScene, vtable_offset_local+2, POINTER(agcom.PVOID))
        self.__dict__["_GetShowSunshine"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsScene, vtable_offset_local+3, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetShowSunshine"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsScene, vtable_offset_local+4, agcom.VARIANT_BOOL)
        self.__dict__["_GetCentralBodies"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsScene, vtable_offset_local+5, POINTER(agcom.PVOID))
        self.__dict__["_GetBackgroundColor"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsScene, vtable_offset_local+6, POINTER(agcom.OLE_COLOR))
        self.__dict__["_SetBackgroundColor"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsScene, vtable_offset_local+7, agcom.OLE_COLOR)
        self.__dict__["_GetShadeSkyBasedOnAltitude"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsScene, vtable_offset_local+8, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetShadeSkyBasedOnAltitude"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsScene, vtable_offset_local+9, agcom.VARIANT_BOOL)
        self.__dict__["_GetShowStars"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsScene, vtable_offset_local+10, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetShowStars"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsScene, vtable_offset_local+11, agcom.VARIANT_BOOL)
        self.__dict__["_GetGlobeOverlaySettings"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsScene, vtable_offset_local+12, POINTER(agcom.PVOID))
        self.__dict__["_Render"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsScene, vtable_offset_local+13, )
        self.__dict__["_Pick"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsScene, vtable_offset_local+14, agcom.INT, agcom.INT, POINTER(agcom.PVOID))
        self.__dict__["_PickRectangular"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsScene, vtable_offset_local+15, agcom.INT, agcom.INT, agcom.INT, agcom.INT, POINTER(agcom.PVOID))
        self.__dict__["_PickScreenOverlays"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsScene, vtable_offset_local+16, agcom.INT, agcom.INT, POINTER(agcom.PVOID))
        self.__dict__["_GetSceneID"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsScene, vtable_offset_local+17, POINTER(agcom.INT))
        self.__dict__["_GetShowWaterSurface"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsScene, vtable_offset_local+18, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetShowWaterSurface"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsScene, vtable_offset_local+19, agcom.VARIANT_BOOL)
        self.__dict__["_GetAntiAliasing"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsScene, vtable_offset_local+20, POINTER(agcom.LONG))
        self.__dict__["_SetAntiAliasing"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsScene, vtable_offset_local+21, agcom.LONG)
        self.__dict__["_GetVisualEffects"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsScene, vtable_offset_local+22, POINTER(agcom.PVOID))
        self.__dict__["_GetClouds"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsScene, vtable_offset_local+23, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsScene.__dict__ and type(IAgStkGraphicsScene.__dict__[attrname]) == property:
            return IAgStkGraphicsScene.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsScene.")
    def Subscribe(self) -> IAgStkGraphicsSceneEventHandler:
        """Returns an IAgStkGraphicsSceneEventHandler that is subscribed to handle events associated with this instance of IAgStkGraphicsScene."""
        return IAgStkGraphicsSceneEventHandler(self._pUnk)    
    @property
    def Camera(self) -> "IAgStkGraphicsCamera":
        """Gets the camera associated with the scene, which affects the view that is rendered by the scene."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCamera"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Lighting(self) -> "IAgStkGraphicsLighting":
        """Gets the lighting associated with the scene."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetLighting"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def ShowSunshine(self) -> bool:
        """Gets or sets whether sunshine is rendered by the Sun central body. Sunshine renders a halo effect around the sun when it is viewed in the scene."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetShowSunshine"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @ShowSunshine.setter
    def ShowSunshine(self, showSunshine:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(showSunshine) as arg_showSunshine:
            agcls.evaluate_hresult(self.__dict__["_SetShowSunshine"](arg_showSunshine.COM_val))

    @property
    def CentralBodies(self) -> "IAgStkGraphicsCentralBodyGraphicsIndexer":
        """Gets the central body graphics for a specified central body."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodies"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def BackgroundColor(self) -> agcolor.Color:
        """Gets or sets the background color of the scene."""
        with agmarshall.OLE_COLOR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBackgroundColor"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @BackgroundColor.setter
    def BackgroundColor(self, backgroundColor:agcolor.Color) -> None:
        with agmarshall.OLE_COLOR_arg(backgroundColor) as arg_backgroundColor:
            agcls.evaluate_hresult(self.__dict__["_SetBackgroundColor"](arg_backgroundColor.COM_val))

    @property
    def ShadeSkyBasedOnAltitude(self) -> bool:
        """Gets or sets whether the sky will be shaded based on camera altitude. When shade sky based on altitude is set to true, the sky will become more blue as the Camera gets closer to the surface of the central body."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetShadeSkyBasedOnAltitude"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @ShadeSkyBasedOnAltitude.setter
    def ShadeSkyBasedOnAltitude(self, shadeSkyBasedOnAltitude:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(shadeSkyBasedOnAltitude) as arg_shadeSkyBasedOnAltitude:
            agcls.evaluate_hresult(self.__dict__["_SetShadeSkyBasedOnAltitude"](arg_shadeSkyBasedOnAltitude.COM_val))

    @property
    def ShowStars(self) -> bool:
        """Gets or sets whether stars are shown or hidden in the scene."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetShowStars"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @ShowStars.setter
    def ShowStars(self, showStars:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(showStars) as arg_showStars:
            agcls.evaluate_hresult(self.__dict__["_SetShowStars"](arg_showStars.COM_val))

    @property
    def GlobeOverlaySettings(self) -> "IAgStkGraphicsSceneGlobeOverlaySettings":
        """Gets the scene globe overlay settings for the scene."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetGlobeOverlaySettings"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def Render(self) -> None:
        """Renders the scene. To render all the scenes within an application, use the Render method."""
        agcls.evaluate_hresult(self.__dict__["_Render"]())

    def Pick(self, x:int, y:int) -> "IAgStkGraphicsPickResultCollection":
        """Executes a pick at the given x, y and returns a depth sorted collection of picked objects. The coordinate origin is top, left. To pick screen overlays, use the PickScreenOverlays method."""
        with agmarshall.INT_arg(x) as arg_x, \
             agmarshall.INT_arg(y) as arg_y, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Pick"](arg_x.COM_val, arg_y.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def PickRectangular(self, left:int, bottom:int, right:int, top:int) -> "IAgStkGraphicsPickResultCollection":
        """Executes a pick in the given rectangular region and returns a depth sorted collection of picked objects. The coordinate origin is top, left. To pick screen overlays, use the PickScreenOverlays method."""
        with agmarshall.INT_arg(left) as arg_left, \
             agmarshall.INT_arg(bottom) as arg_bottom, \
             agmarshall.INT_arg(right) as arg_right, \
             agmarshall.INT_arg(top) as arg_top, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_PickRectangular"](arg_left.COM_val, arg_bottom.COM_val, arg_right.COM_val, arg_top.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def PickScreenOverlays(self, x:int, y:int) -> "IAgStkGraphicsScreenOverlayPickResultCollection":
        """Executes a pick on screen overlays at the given x, y and returns a front to back sorted collection of picked overlays. The coordinate origin is top, left. To pick other objects in the scene, use the Pick method."""
        with agmarshall.INT_arg(x) as arg_x, \
             agmarshall.INT_arg(y) as arg_y, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_PickScreenOverlays"](arg_x.COM_val, arg_y.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def SceneID(self) -> int:
        """Returns the scene identifier."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSceneID"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def ShowWaterSurface(self) -> bool:
        """Gets or sets whether water surface on earth is shown or hidden in the scene."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetShowWaterSurface"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @ShowWaterSurface.setter
    def ShowWaterSurface(self, showWaterSurface:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(showWaterSurface) as arg_showWaterSurface:
            agcls.evaluate_hresult(self.__dict__["_SetShowWaterSurface"](arg_showWaterSurface.COM_val))

    @property
    def AntiAliasing(self) -> "AgEStkGraphicsAntiAliasing":
        """Gets or sets the multisample anti-aliasing (MSAA) option for this scene. As the level of anti-aliasing increases, performance will generally decrease, but the quality of the anti-aliasing will improve."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsAntiAliasing) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAntiAliasing"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @AntiAliasing.setter
    def AntiAliasing(self, antiAliasing:"AgEStkGraphicsAntiAliasing") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsAntiAliasing, antiAliasing) as arg_antiAliasing:
            agcls.evaluate_hresult(self.__dict__["_SetAntiAliasing"](arg_antiAliasing.COM_val))

    @property
    def VisualEffects(self) -> "IAgStkGraphicsVisualEffects":
        """Gets the visual  effects associated with the scene."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetVisualEffects"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Clouds(self) -> "IAgStkGraphicsClouds":
        """Gets the clouds for the scene."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetClouds"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{2d15c682-efb5-499f-8851-a49599b2097d}", IAgStkGraphicsScene)
agcls.AgTypeNameMap["IAgStkGraphicsScene"] = IAgStkGraphicsScene
__all__.append("IAgStkGraphicsScene")

class IAgStkGraphicsSceneDisplayCondition(object):
    """A display condition used to control what scene or scenes an object, such as a primitive, is rendered in. This is used to show an object in some scenes and hide it in others."""
    _uuid = "{84cbf48f-1672-460e-86fd-9afda647bcca}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_SetDisplayInScene"] = _raise_uninitialized_error
        self.__dict__["_GetDisplayInScene"] = _raise_uninitialized_error
        self.__dict__["_DisplayOnlyInScene"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsSceneDisplayCondition._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsSceneDisplayCondition from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsSceneDisplayCondition = agcom.GUID(IAgStkGraphicsSceneDisplayCondition._uuid)
        vtable_offset_local = IAgStkGraphicsSceneDisplayCondition._vtable_offset - 1
        self.__dict__["_SetDisplayInScene"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSceneDisplayCondition, vtable_offset_local+1, agcom.PVOID, agcom.VARIANT_BOOL)
        self.__dict__["_GetDisplayInScene"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSceneDisplayCondition, vtable_offset_local+2, agcom.PVOID, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_DisplayOnlyInScene"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSceneDisplayCondition, vtable_offset_local+3, agcom.PVOID)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsSceneDisplayCondition.__dict__ and type(IAgStkGraphicsSceneDisplayCondition.__dict__[attrname]) == property:
            return IAgStkGraphicsSceneDisplayCondition.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsSceneDisplayCondition.")
    
    def SetDisplayInScene(self, scene:"IAgStkGraphicsScene", on:bool) -> None:
        """Allows or disallows rendering for in a particular scene for."""
        with agmarshall.AgInterface_in_arg(scene, IAgStkGraphicsScene) as arg_scene, \
             agmarshall.VARIANT_BOOL_arg(on) as arg_on:
            agcls.evaluate_hresult(self.__dict__["_SetDisplayInScene"](arg_scene.COM_val, arg_on.COM_val))

    def GetDisplayInScene(self, scene:"IAgStkGraphicsScene") -> bool:
        """Determines whether the display condition allows rendering rendering in the given scene."""
        with agmarshall.AgInterface_in_arg(scene, IAgStkGraphicsScene) as arg_scene, \
             agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDisplayInScene"](arg_scene.COM_val, byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def DisplayOnlyInScene(self, scene:"IAgStkGraphicsScene") -> None:
        """Allows rendering only in the given scene. The display condition will not allow rendering in other scenes, including newly created ones."""
        with agmarshall.AgInterface_in_arg(scene, IAgStkGraphicsScene) as arg_scene:
            agcls.evaluate_hresult(self.__dict__["_DisplayOnlyInScene"](arg_scene.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{84cbf48f-1672-460e-86fd-9afda647bcca}", IAgStkGraphicsSceneDisplayCondition)
agcls.AgTypeNameMap["IAgStkGraphicsSceneDisplayCondition"] = IAgStkGraphicsSceneDisplayCondition
__all__.append("IAgStkGraphicsSceneDisplayCondition")

class IAgStkGraphicsSceneManager(object):
    """The static scene manager class provides global properties and functionality that apply to all scenes and thus affect the rendering of every globe control..."""
    _uuid = "{257b97ef-839b-4a17-a924-c40320174d13}"
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetPrimitives"] = _raise_uninitialized_error
        self.__dict__["_GetScreenOverlays"] = _raise_uninitialized_error
        self.__dict__["_GetTextures"] = _raise_uninitialized_error
        self.__dict__["_GetGlobeOverlaySettings"] = _raise_uninitialized_error
        self.__dict__["_GetScenes"] = _raise_uninitialized_error
        self.__dict__["_Render"] = _raise_uninitialized_error
        self.__dict__["_GetInitializers"] = _raise_uninitialized_error
        self.__dict__["_GetFrameRate"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsSceneManager._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsSceneManager from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsSceneManager = agcom.GUID(IAgStkGraphicsSceneManager._uuid)
        vtable_offset_local = IAgStkGraphicsSceneManager._vtable_offset - 1
        self.__dict__["_GetPrimitives"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSceneManager, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetScreenOverlays"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSceneManager, vtable_offset_local+2, POINTER(agcom.PVOID))
        self.__dict__["_GetTextures"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSceneManager, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_GetGlobeOverlaySettings"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSceneManager, vtable_offset_local+4, POINTER(agcom.PVOID))
        self.__dict__["_GetScenes"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSceneManager, vtable_offset_local+5, POINTER(agcom.PVOID))
        self.__dict__["_Render"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSceneManager, vtable_offset_local+6, )
        self.__dict__["_GetInitializers"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSceneManager, vtable_offset_local+7, POINTER(agcom.PVOID))
        self.__dict__["_GetFrameRate"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSceneManager, vtable_offset_local+8, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsSceneManager.__dict__ and type(IAgStkGraphicsSceneManager.__dict__[attrname]) == property:
            return IAgStkGraphicsSceneManager.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsSceneManager.")
    
    @property
    def Primitives(self) -> "IAgStkGraphicsPrimitiveManager":
        """Gets the primitive manager, which is used to add primitives to your scenes."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPrimitives"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def ScreenOverlays(self) -> "IAgStkGraphicsScreenOverlayManager":
        """Gets the screen overlay manager, which is used to add screen overlays to your scenes."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetScreenOverlays"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Textures(self) -> "IAgStkGraphicsTexture2DFactory":
        """Gets the texture 2d factory, which can be used to create textures from various sources."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTextures"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def GlobeOverlaySettings(self) -> "IAgStkGraphicsGlobeOverlaySettings":
        """Gets the globe overlay settings, which are used to set global settings for all globe overlays."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetGlobeOverlaySettings"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Scenes(self) -> "IAgStkGraphicsSceneCollection":
        """Gets a read-only collection of scenes that are associated with the scene manager."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetScenes"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def Render(self) -> None:
        """Renders all scenes within an application. To render a specific scene, use the Render method."""
        agcls.evaluate_hresult(self.__dict__["_Render"]())

    @property
    def Initializers(self) -> "IAgStkGraphicsFactoryAndInitializers":
        """Allows the user to create or initialize primitives, display conditions, tringulators and other types of objects."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetInitializers"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def FrameRate(self) -> "IAgStkGraphicsFrameRate":
        """Gets the frame rate class, which can be used to keep track of how fast scenes are being <see ref='Render'>rendered</see>."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetFrameRate"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{257b97ef-839b-4a17-a924-c40320174d13}", IAgStkGraphicsSceneManager)
agcls.AgTypeNameMap["IAgStkGraphicsSceneManager"] = IAgStkGraphicsSceneManager
__all__.append("IAgStkGraphicsSceneManager")

class IAgStkGraphicsScreenOverlay(object):
    """A visible element drawn in screen space. Overlays are useful for floating logos, heads up displays, and integrating user interfaces into the 3D window."""
    _uuid = "{e9bdc8ad-dc02-4b22-9513-eb0cdfa85cf3}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsScreenOverlay._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsScreenOverlay from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsScreenOverlay = agcom.GUID(IAgStkGraphicsScreenOverlay._uuid)
        vtable_offset_local = IAgStkGraphicsScreenOverlay._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsScreenOverlay.__dict__ and type(IAgStkGraphicsScreenOverlay.__dict__[attrname]) == property:
            return IAgStkGraphicsScreenOverlay.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsScreenOverlay.")
    

agcls.AgClassCatalog.add_catalog_entry("{e9bdc8ad-dc02-4b22-9513-eb0cdfa85cf3}", IAgStkGraphicsScreenOverlay)
agcls.AgTypeNameMap["IAgStkGraphicsScreenOverlay"] = IAgStkGraphicsScreenOverlay
__all__.append("IAgStkGraphicsScreenOverlay")

class IAgStkGraphicsScreenOverlayCollection(object):
    """A collection of screen overlays."""
    _uuid = "{1bf5a224-26b7-4907-aa7d-fd6fc81a51f3}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsScreenOverlayCollection._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsScreenOverlayCollection from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsScreenOverlayCollection = agcom.GUID(IAgStkGraphicsScreenOverlayCollection._uuid)
        vtable_offset_local = IAgStkGraphicsScreenOverlayCollection._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsScreenOverlayCollection.__dict__ and type(IAgStkGraphicsScreenOverlayCollection.__dict__[attrname]) == property:
            return IAgStkGraphicsScreenOverlayCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsScreenOverlayCollection.")
    

agcls.AgClassCatalog.add_catalog_entry("{1bf5a224-26b7-4907-aa7d-fd6fc81a51f3}", IAgStkGraphicsScreenOverlayCollection)
agcls.AgTypeNameMap["IAgStkGraphicsScreenOverlayCollection"] = IAgStkGraphicsScreenOverlayCollection
__all__.append("IAgStkGraphicsScreenOverlayCollection")

class IAgStkGraphicsScreenOverlayManager(object):
    """The top-level container for screen overlays. All child screen overlays that are added to this container are specified relative to the overall globe control."""
    _uuid = "{25bf4e85-98ce-48e3-9c15-f517115bc794}"
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetBounds"] = _raise_uninitialized_error
        self.__dict__["_GetOverlays"] = _raise_uninitialized_error
        self.__dict__["_GetPadding"] = _raise_uninitialized_error
        self.__dict__["_SetPadding"] = _raise_uninitialized_error
        self.__dict__["_GetDisplay"] = _raise_uninitialized_error
        self.__dict__["_SetDisplay"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsScreenOverlayManager._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsScreenOverlayManager from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsScreenOverlayManager = agcom.GUID(IAgStkGraphicsScreenOverlayManager._uuid)
        vtable_offset_local = IAgStkGraphicsScreenOverlayManager._vtable_offset - 1
        self.__dict__["_GetBounds"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsScreenOverlayManager, vtable_offset_local+1, POINTER(agcom.SAFEARRAY))
        self.__dict__["_GetOverlays"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsScreenOverlayManager, vtable_offset_local+2, POINTER(agcom.PVOID))
        self.__dict__["_GetPadding"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsScreenOverlayManager, vtable_offset_local+3, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetPadding"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsScreenOverlayManager, vtable_offset_local+4, agcom.SAFEARRAY)
        self.__dict__["_GetDisplay"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsScreenOverlayManager, vtable_offset_local+5, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetDisplay"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsScreenOverlayManager, vtable_offset_local+6, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsScreenOverlayManager.__dict__ and type(IAgStkGraphicsScreenOverlayManager.__dict__[attrname]) == property:
            return IAgStkGraphicsScreenOverlayManager.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsScreenOverlayManager.")
    
    @property
    def Bounds(self) -> list:
        """Gets the overall bounds of the globe control. The array contains the properties defining the bounds in the order left x location, top y location, width, height."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBounds"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Overlays(self) -> "IAgStkGraphicsScreenOverlayCollection":
        """Gets the collection of overlays that are contained within this manager."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetOverlays"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Padding(self) -> list:
        """Gets or sets the padding surrounding the overlays that are contained within this manager. The array contains the components of the padding arranged in the order left, top, right, bottom."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPadding"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @Padding.setter
    def Padding(self, padding:list) -> None:
        with agmarshall.SAFEARRAY_arg(padding) as arg_padding:
            agcls.evaluate_hresult(self.__dict__["_SetPadding"](arg_padding.COM_val))

    @property
    def Display(self) -> bool:
        """Gets or sets if the collection of overlays that are contained within this manager should be rendered."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDisplay"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Display.setter
    def Display(self, display:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(display) as arg_display:
            agcls.evaluate_hresult(self.__dict__["_SetDisplay"](arg_display.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{25bf4e85-98ce-48e3-9c15-f517115bc794}", IAgStkGraphicsScreenOverlayManager)
agcls.AgTypeNameMap["IAgStkGraphicsScreenOverlayManager"] = IAgStkGraphicsScreenOverlayManager
__all__.append("IAgStkGraphicsScreenOverlayManager")

class IAgStkGraphicsScreenOverlayPickResult(object):
    """Describes a picked screen overlay as a result of a call to pick screen overlays."""
    _uuid = "{4872a8d1-b96f-4713-96f8-5ed5e5d6b8b4}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetPosition"] = _raise_uninitialized_error
        self.__dict__["_GetControlPosition"] = _raise_uninitialized_error
        self.__dict__["_GetOverlay"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsScreenOverlayPickResult._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsScreenOverlayPickResult from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsScreenOverlayPickResult = agcom.GUID(IAgStkGraphicsScreenOverlayPickResult._uuid)
        vtable_offset_local = IAgStkGraphicsScreenOverlayPickResult._vtable_offset - 1
        self.__dict__["_GetPosition"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsScreenOverlayPickResult, vtable_offset_local+1, POINTER(agcom.SAFEARRAY))
        self.__dict__["_GetControlPosition"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsScreenOverlayPickResult, vtable_offset_local+2, POINTER(agcom.SAFEARRAY))
        self.__dict__["_GetOverlay"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsScreenOverlayPickResult, vtable_offset_local+3, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsScreenOverlayPickResult.__dict__ and type(IAgStkGraphicsScreenOverlayPickResult.__dict__[attrname]) == property:
            return IAgStkGraphicsScreenOverlayPickResult.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsScreenOverlayPickResult.")
    
    @property
    def Position(self) -> list:
        """Gets the position that was picked within the picked overlay. The array represents the picked position and has a size of 4. The elements are in the order x position, y position, x screen overlay unit, y screen overlay unit."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPosition"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def ControlPosition(self) -> list:
        """Gets the position that was picked within the overall globe control. This is essentially the same position that was passed to pick screen overlays. The array represents the picked position and has a size of 4..."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetControlPosition"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Overlay(self) -> "IAgStkGraphicsScreenOverlay":
        """Gets the screen overlay that was picked."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetOverlay"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{4872a8d1-b96f-4713-96f8-5ed5e5d6b8b4}", IAgStkGraphicsScreenOverlayPickResult)
agcls.AgTypeNameMap["IAgStkGraphicsScreenOverlayPickResult"] = IAgStkGraphicsScreenOverlayPickResult
__all__.append("IAgStkGraphicsScreenOverlayPickResult")

class IAgStkGraphicsSolidPrimitive(object):
    """Renders filled solid objects and their outlines. Example solids include boxes and ellipsoids. Various effects are supported, such as displaying the solid's silhouette, and hiding the outline of the backside of the solid..."""
    _uuid = "{10ae68b3-ec89-4ced-9b4c-8aae9123eb24}"
    _num_methods = 39
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAffectedByLighting"] = _raise_uninitialized_error
        self.__dict__["_SetAffectedByLighting"] = _raise_uninitialized_error
        self.__dict__["_GetDisplayFill"] = _raise_uninitialized_error
        self.__dict__["_SetDisplayFill"] = _raise_uninitialized_error
        self.__dict__["_GetDisplaySilhouette"] = _raise_uninitialized_error
        self.__dict__["_SetDisplaySilhouette"] = _raise_uninitialized_error
        self.__dict__["_GetSilhouetteColor"] = _raise_uninitialized_error
        self.__dict__["_SetSilhouetteColor"] = _raise_uninitialized_error
        self.__dict__["_GetSilhouetteTranslucency"] = _raise_uninitialized_error
        self.__dict__["_SetSilhouetteTranslucency"] = _raise_uninitialized_error
        self.__dict__["_GetSilhouetteWidth"] = _raise_uninitialized_error
        self.__dict__["_SetSilhouetteWidth"] = _raise_uninitialized_error
        self.__dict__["_GetMinimumSilhouetteWidthSupported"] = _raise_uninitialized_error
        self.__dict__["_GetMaximumSilhouetteWidthSupported"] = _raise_uninitialized_error
        self.__dict__["_GetDisplayOutline"] = _raise_uninitialized_error
        self.__dict__["_SetDisplayOutline"] = _raise_uninitialized_error
        self.__dict__["_GetOutlineColor"] = _raise_uninitialized_error
        self.__dict__["_SetOutlineColor"] = _raise_uninitialized_error
        self.__dict__["_GetOutlineTranslucency"] = _raise_uninitialized_error
        self.__dict__["_SetOutlineTranslucency"] = _raise_uninitialized_error
        self.__dict__["_GetOutlineWidth"] = _raise_uninitialized_error
        self.__dict__["_SetOutlineWidth"] = _raise_uninitialized_error
        self.__dict__["_GetOutlineAppearance"] = _raise_uninitialized_error
        self.__dict__["_SetOutlineAppearance"] = _raise_uninitialized_error
        self.__dict__["_GetBackLineColor"] = _raise_uninitialized_error
        self.__dict__["_SetBackLineColor"] = _raise_uninitialized_error
        self.__dict__["_GetBackLineTranslucency"] = _raise_uninitialized_error
        self.__dict__["_SetBackLineTranslucency"] = _raise_uninitialized_error
        self.__dict__["_GetPosition"] = _raise_uninitialized_error
        self.__dict__["_SetPosition"] = _raise_uninitialized_error
        self.__dict__["_GetRotation"] = _raise_uninitialized_error
        self.__dict__["_SetRotation"] = _raise_uninitialized_error
        self.__dict__["_GetScale"] = _raise_uninitialized_error
        self.__dict__["_SetScale"] = _raise_uninitialized_error
        self.__dict__["_GetBackLineWidth"] = _raise_uninitialized_error
        self.__dict__["_SetBackLineWidth"] = _raise_uninitialized_error
        self.__dict__["_GetSetHint"] = _raise_uninitialized_error
        self.__dict__["_SetWithResult"] = _raise_uninitialized_error
        self.__dict__["_Set"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsSolidPrimitive._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsSolidPrimitive from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsSolidPrimitive = agcom.GUID(IAgStkGraphicsSolidPrimitive._uuid)
        vtable_offset_local = IAgStkGraphicsSolidPrimitive._vtable_offset - 1
        self.__dict__["_GetAffectedByLighting"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSolidPrimitive, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetAffectedByLighting"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSolidPrimitive, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetDisplayFill"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSolidPrimitive, vtable_offset_local+3, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetDisplayFill"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSolidPrimitive, vtable_offset_local+4, agcom.VARIANT_BOOL)
        self.__dict__["_GetDisplaySilhouette"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSolidPrimitive, vtable_offset_local+5, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetDisplaySilhouette"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSolidPrimitive, vtable_offset_local+6, agcom.VARIANT_BOOL)
        self.__dict__["_GetSilhouetteColor"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSolidPrimitive, vtable_offset_local+7, POINTER(agcom.OLE_COLOR))
        self.__dict__["_SetSilhouetteColor"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSolidPrimitive, vtable_offset_local+8, agcom.OLE_COLOR)
        self.__dict__["_GetSilhouetteTranslucency"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSolidPrimitive, vtable_offset_local+9, POINTER(agcom.FLOAT))
        self.__dict__["_SetSilhouetteTranslucency"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSolidPrimitive, vtable_offset_local+10, agcom.FLOAT)
        self.__dict__["_GetSilhouetteWidth"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSolidPrimitive, vtable_offset_local+11, POINTER(agcom.FLOAT))
        self.__dict__["_SetSilhouetteWidth"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSolidPrimitive, vtable_offset_local+12, agcom.FLOAT)
        self.__dict__["_GetMinimumSilhouetteWidthSupported"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSolidPrimitive, vtable_offset_local+13, POINTER(agcom.FLOAT))
        self.__dict__["_GetMaximumSilhouetteWidthSupported"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSolidPrimitive, vtable_offset_local+14, POINTER(agcom.FLOAT))
        self.__dict__["_GetDisplayOutline"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSolidPrimitive, vtable_offset_local+15, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetDisplayOutline"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSolidPrimitive, vtable_offset_local+16, agcom.VARIANT_BOOL)
        self.__dict__["_GetOutlineColor"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSolidPrimitive, vtable_offset_local+17, POINTER(agcom.OLE_COLOR))
        self.__dict__["_SetOutlineColor"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSolidPrimitive, vtable_offset_local+18, agcom.OLE_COLOR)
        self.__dict__["_GetOutlineTranslucency"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSolidPrimitive, vtable_offset_local+19, POINTER(agcom.FLOAT))
        self.__dict__["_SetOutlineTranslucency"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSolidPrimitive, vtable_offset_local+20, agcom.FLOAT)
        self.__dict__["_GetOutlineWidth"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSolidPrimitive, vtable_offset_local+21, POINTER(agcom.FLOAT))
        self.__dict__["_SetOutlineWidth"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSolidPrimitive, vtable_offset_local+22, agcom.FLOAT)
        self.__dict__["_GetOutlineAppearance"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSolidPrimitive, vtable_offset_local+23, POINTER(agcom.LONG))
        self.__dict__["_SetOutlineAppearance"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSolidPrimitive, vtable_offset_local+24, agcom.LONG)
        self.__dict__["_GetBackLineColor"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSolidPrimitive, vtable_offset_local+25, POINTER(agcom.OLE_COLOR))
        self.__dict__["_SetBackLineColor"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSolidPrimitive, vtable_offset_local+26, agcom.OLE_COLOR)
        self.__dict__["_GetBackLineTranslucency"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSolidPrimitive, vtable_offset_local+27, POINTER(agcom.FLOAT))
        self.__dict__["_SetBackLineTranslucency"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSolidPrimitive, vtable_offset_local+28, agcom.FLOAT)
        self.__dict__["_GetPosition"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSolidPrimitive, vtable_offset_local+29, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetPosition"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSolidPrimitive, vtable_offset_local+30, agcom.SAFEARRAY)
        self.__dict__["_GetRotation"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSolidPrimitive, vtable_offset_local+31, POINTER(agcom.PVOID))
        self.__dict__["_SetRotation"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSolidPrimitive, vtable_offset_local+32, agcom.PVOID)
        self.__dict__["_GetScale"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSolidPrimitive, vtable_offset_local+33, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetScale"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSolidPrimitive, vtable_offset_local+34, agcom.SAFEARRAY)
        self.__dict__["_GetBackLineWidth"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSolidPrimitive, vtable_offset_local+35, POINTER(agcom.FLOAT))
        self.__dict__["_SetBackLineWidth"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSolidPrimitive, vtable_offset_local+36, agcom.FLOAT)
        self.__dict__["_GetSetHint"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSolidPrimitive, vtable_offset_local+37, POINTER(agcom.LONG))
        self.__dict__["_SetWithResult"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSolidPrimitive, vtable_offset_local+38, agcom.PVOID)
        self.__dict__["_Set"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSolidPrimitive, vtable_offset_local+39, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.LONG, agcom.PVOID, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsSolidPrimitive.__dict__ and type(IAgStkGraphicsSolidPrimitive.__dict__[attrname]) == property:
            return IAgStkGraphicsSolidPrimitive.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsSolidPrimitive.")
    
    @property
    def AffectedByLighting(self) -> bool:
        """Gets or sets whether the primitive is affected by lighting."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAffectedByLighting"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @AffectedByLighting.setter
    def AffectedByLighting(self, affectedByLighting:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(affectedByLighting) as arg_affectedByLighting:
            agcls.evaluate_hresult(self.__dict__["_SetAffectedByLighting"](arg_affectedByLighting.COM_val))

    @property
    def DisplayFill(self) -> bool:
        """Gets or sets whether the solid's fill is displayed."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDisplayFill"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @DisplayFill.setter
    def DisplayFill(self, displayFill:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(displayFill) as arg_displayFill:
            agcls.evaluate_hresult(self.__dict__["_SetDisplayFill"](arg_displayFill.COM_val))

    @property
    def DisplaySilhouette(self) -> bool:
        """Gets or sets whether the solid's silhouette is displayed."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDisplaySilhouette"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @DisplaySilhouette.setter
    def DisplaySilhouette(self, displaySilhouette:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(displaySilhouette) as arg_displaySilhouette:
            agcls.evaluate_hresult(self.__dict__["_SetDisplaySilhouette"](arg_displaySilhouette.COM_val))

    @property
    def SilhouetteColor(self) -> agcolor.Color:
        """Gets or sets the silhouette's color."""
        with agmarshall.OLE_COLOR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSilhouetteColor"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @SilhouetteColor.setter
    def SilhouetteColor(self, silhouetteColor:agcolor.Color) -> None:
        with agmarshall.OLE_COLOR_arg(silhouetteColor) as arg_silhouetteColor:
            agcls.evaluate_hresult(self.__dict__["_SetSilhouetteColor"](arg_silhouetteColor.COM_val))

    @property
    def SilhouetteTranslucency(self) -> float:
        """Gets or sets the silhouette's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSilhouetteTranslucency"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @SilhouetteTranslucency.setter
    def SilhouetteTranslucency(self, silhouetteTranslucency:float) -> None:
        with agmarshall.FLOAT_arg(silhouetteTranslucency) as arg_silhouetteTranslucency:
            agcls.evaluate_hresult(self.__dict__["_SetSilhouetteTranslucency"](arg_silhouetteTranslucency.COM_val))

    @property
    def SilhouetteWidth(self) -> float:
        """Gets or sets the silhouette' width, in pixels."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSilhouetteWidth"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @SilhouetteWidth.setter
    def SilhouetteWidth(self, silhouetteWidth:float) -> None:
        with agmarshall.FLOAT_arg(silhouetteWidth) as arg_silhouetteWidth:
            agcls.evaluate_hresult(self.__dict__["_SetSilhouetteWidth"](arg_silhouetteWidth.COM_val))

    @property
    def MinimumSilhouetteWidthSupported(self) -> float:
        """Gets the minimum silhouette width, in pixels, supported by the video card."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinimumSilhouetteWidthSupported"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def MaximumSilhouetteWidthSupported(self) -> float:
        """Gets the maximum silhouette width, in pixels, supported by the video card."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaximumSilhouetteWidthSupported"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def DisplayOutline(self) -> bool:
        """Gets or sets whether the solid's outline is displayed."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDisplayOutline"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @DisplayOutline.setter
    def DisplayOutline(self, displayOutline:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(displayOutline) as arg_displayOutline:
            agcls.evaluate_hresult(self.__dict__["_SetDisplayOutline"](arg_displayOutline.COM_val))

    @property
    def OutlineColor(self) -> agcolor.Color:
        """Gets or sets the outline's color."""
        with agmarshall.OLE_COLOR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetOutlineColor"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @OutlineColor.setter
    def OutlineColor(self, outlineColor:agcolor.Color) -> None:
        with agmarshall.OLE_COLOR_arg(outlineColor) as arg_outlineColor:
            agcls.evaluate_hresult(self.__dict__["_SetOutlineColor"](arg_outlineColor.COM_val))

    @property
    def OutlineTranslucency(self) -> float:
        """Gets or sets the outline's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetOutlineTranslucency"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @OutlineTranslucency.setter
    def OutlineTranslucency(self, outlineTranslucency:float) -> None:
        with agmarshall.FLOAT_arg(outlineTranslucency) as arg_outlineTranslucency:
            agcls.evaluate_hresult(self.__dict__["_SetOutlineTranslucency"](arg_outlineTranslucency.COM_val))

    @property
    def OutlineWidth(self) -> float:
        """Gets or sets the outline's width, in pixels."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetOutlineWidth"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @OutlineWidth.setter
    def OutlineWidth(self, outlineWidth:float) -> None:
        with agmarshall.FLOAT_arg(outlineWidth) as arg_outlineWidth:
            agcls.evaluate_hresult(self.__dict__["_SetOutlineWidth"](arg_outlineWidth.COM_val))

    @property
    def OutlineAppearance(self) -> "AgEStkGraphicsOutlineAppearance":
        """Gets or sets the outline's appearance."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsOutlineAppearance) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetOutlineAppearance"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @OutlineAppearance.setter
    def OutlineAppearance(self, outlineAppearance:"AgEStkGraphicsOutlineAppearance") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsOutlineAppearance, outlineAppearance) as arg_outlineAppearance:
            agcls.evaluate_hresult(self.__dict__["_SetOutlineAppearance"](arg_outlineAppearance.COM_val))

    @property
    def BackLineColor(self) -> agcolor.Color:
        """Gets or sets the back line's color."""
        with agmarshall.OLE_COLOR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBackLineColor"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @BackLineColor.setter
    def BackLineColor(self, backLineColor:agcolor.Color) -> None:
        with agmarshall.OLE_COLOR_arg(backLineColor) as arg_backLineColor:
            agcls.evaluate_hresult(self.__dict__["_SetBackLineColor"](arg_backLineColor.COM_val))

    @property
    def BackLineTranslucency(self) -> float:
        """Gets or sets the back line's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBackLineTranslucency"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @BackLineTranslucency.setter
    def BackLineTranslucency(self, backLineTranslucency:float) -> None:
        with agmarshall.FLOAT_arg(backLineTranslucency) as arg_backLineTranslucency:
            agcls.evaluate_hresult(self.__dict__["_SetBackLineTranslucency"](arg_backLineTranslucency.COM_val))

    @property
    def Position(self) -> list:
        """Gets or sets the solid's position. The position is defined in the solid's reference frame. The array contains the components of the position in the order x, y, z."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPosition"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @Position.setter
    def Position(self, position:list) -> None:
        with agmarshall.SAFEARRAY_arg(position) as arg_position:
            agcls.evaluate_hresult(self.__dict__["_SetPosition"](arg_position.COM_val))

    @property
    def Rotation(self) -> "IAgOrientation":
        """Gets or sets the rotation applied to the solid before rendering."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetRotation"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @Rotation.setter
    def Rotation(self, rotation:"IAgOrientation") -> None:
        with agmarshall.AgInterface_in_arg(rotation, IAgOrientation) as arg_rotation:
            agcls.evaluate_hresult(self.__dict__["_SetRotation"](arg_rotation.COM_val))

    @property
    def Scale(self) -> list:
        """Gets or sets a non-uniform scale that is applied to the solid to increase or decrease its rendered size. The array contains the scale for each component of the size in the order x scale, y scale, z scale."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetScale"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @Scale.setter
    def Scale(self, scale:list) -> None:
        with agmarshall.SAFEARRAY_arg(scale) as arg_scale:
            agcls.evaluate_hresult(self.__dict__["_SetScale"](arg_scale.COM_val))

    @property
    def BackLineWidth(self) -> float:
        """Gets or sets the back line's width, in pixels."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBackLineWidth"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @BackLineWidth.setter
    def BackLineWidth(self, backLineWidth:float) -> None:
        with agmarshall.FLOAT_arg(backLineWidth) as arg_backLineWidth:
            agcls.evaluate_hresult(self.__dict__["_SetBackLineWidth"](arg_backLineWidth.COM_val))

    @property
    def SetHint(self) -> "AgEStkGraphicsSetHint":
        """Gets the primitive's set hint. See the Set Hint Performance Overview for selecting an appropriate value to construct the primitive with."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsSetHint) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSetHint"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def SetWithResult(self, solidTriangulatorResult:"IAgStkGraphicsSolidTriangulatorResult") -> None:
        """Defines the solid using the specified solidTriangulatorResult. The solid is rendered in the primitive's reference frame."""
        with agmarshall.AgInterface_in_arg(solidTriangulatorResult, IAgStkGraphicsSolidTriangulatorResult) as arg_solidTriangulatorResult:
            agcls.evaluate_hresult(self.__dict__["_SetWithResult"](arg_solidTriangulatorResult.COM_val))

    def Set(self, positions:list, normals:list, indices:list, outlineIndices:list, windingOrder:"AgEStkGraphicsWindingOrder", boundingSphere:"IAgStkGraphicsBoundingSphere", closed:bool) -> None:
        """Defines the solid using the specified parameters. The solid is rendered in the primitive's reference frame."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(normals) as arg_normals, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices, \
             agmarshall.SAFEARRAY_arg(outlineIndices) as arg_outlineIndices, \
             agmarshall.AgEnum_arg(AgEStkGraphicsWindingOrder, windingOrder) as arg_windingOrder, \
             agmarshall.AgInterface_in_arg(boundingSphere, IAgStkGraphicsBoundingSphere) as arg_boundingSphere, \
             agmarshall.VARIANT_BOOL_arg(closed) as arg_closed:
            agcls.evaluate_hresult(self.__dict__["_Set"](byref(arg_positions.COM_val), byref(arg_normals.COM_val), byref(arg_indices.COM_val), byref(arg_outlineIndices.COM_val), arg_windingOrder.COM_val, arg_boundingSphere.COM_val, arg_closed.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{10ae68b3-ec89-4ced-9b4c-8aae9123eb24}", IAgStkGraphicsSolidPrimitive)
agcls.AgTypeNameMap["IAgStkGraphicsSolidPrimitive"] = IAgStkGraphicsSolidPrimitive
__all__.append("IAgStkGraphicsSolidPrimitive")

class IAgStkGraphicsStereoscopic(object):
    """Gets the stereoscopic options for all Scenes. To use a particular stereoscopic display mode, ensure that your system supports the feature and that it is enabled."""
    _uuid = "{41d0e11b-d00c-4255-b869-2fc8430f994e}"
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetDisplayMode"] = _raise_uninitialized_error
        self.__dict__["_SetDisplayMode"] = _raise_uninitialized_error
        self.__dict__["_GetProjectionMode"] = _raise_uninitialized_error
        self.__dict__["_SetProjectionMode"] = _raise_uninitialized_error
        self.__dict__["_GetProjectionDistance"] = _raise_uninitialized_error
        self.__dict__["_SetProjectionDistance"] = _raise_uninitialized_error
        self.__dict__["_GetEyeSeparationFactor"] = _raise_uninitialized_error
        self.__dict__["_SetEyeSeparationFactor"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsStereoscopic._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsStereoscopic from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsStereoscopic = agcom.GUID(IAgStkGraphicsStereoscopic._uuid)
        vtable_offset_local = IAgStkGraphicsStereoscopic._vtable_offset - 1
        self.__dict__["_GetDisplayMode"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsStereoscopic, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetDisplayMode"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsStereoscopic, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetProjectionMode"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsStereoscopic, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetProjectionMode"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsStereoscopic, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_GetProjectionDistance"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsStereoscopic, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetProjectionDistance"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsStereoscopic, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetEyeSeparationFactor"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsStereoscopic, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetEyeSeparationFactor"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsStereoscopic, vtable_offset_local+8, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsStereoscopic.__dict__ and type(IAgStkGraphicsStereoscopic.__dict__[attrname]) == property:
            return IAgStkGraphicsStereoscopic.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsStereoscopic.")
    
    @property
    def DisplayMode(self) -> "AgEStkGraphicsStereoscopicDisplayMode":
        """Gets or sets the stereoscopic display mode for all Scenes. To use a particular stereoscopic display mode, ensure that your system supports the feature and that it is enabled."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsStereoscopicDisplayMode) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDisplayMode"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @DisplayMode.setter
    def DisplayMode(self, displayMode:"AgEStkGraphicsStereoscopicDisplayMode") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsStereoscopicDisplayMode, displayMode) as arg_displayMode:
            agcls.evaluate_hresult(self.__dict__["_SetDisplayMode"](arg_displayMode.COM_val))

    @property
    def ProjectionMode(self) -> "AgEStkGraphicsStereoProjectionMode":
        """Gets or sets whether the type of stereo projection that will be used."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsStereoProjectionMode) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetProjectionMode"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @ProjectionMode.setter
    def ProjectionMode(self, projectionMode:"AgEStkGraphicsStereoProjectionMode") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsStereoProjectionMode, projectionMode) as arg_projectionMode:
            agcls.evaluate_hresult(self.__dict__["_SetProjectionMode"](arg_projectionMode.COM_val))

    @property
    def ProjectionDistance(self) -> float:
        """Gets or sets the projection distance. If projection mode is set to eStkGraphicsStereoProjectionAutomatic, the value of this property will be ignored."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetProjectionDistance"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @ProjectionDistance.setter
    def ProjectionDistance(self, projectionDistance:float) -> None:
        with agmarshall.DOUBLE_arg(projectionDistance) as arg_projectionDistance:
            agcls.evaluate_hresult(self.__dict__["_SetProjectionDistance"](arg_projectionDistance.COM_val))

    @property
    def EyeSeparationFactor(self) -> float:
        """Gets or sets the eye separation factor."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetEyeSeparationFactor"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @EyeSeparationFactor.setter
    def EyeSeparationFactor(self, eyeSeparationFactor:float) -> None:
        with agmarshall.DOUBLE_arg(eyeSeparationFactor) as arg_eyeSeparationFactor:
            agcls.evaluate_hresult(self.__dict__["_SetEyeSeparationFactor"](arg_eyeSeparationFactor.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{41d0e11b-d00c-4255-b869-2fc8430f994e}", IAgStkGraphicsStereoscopic)
agcls.AgTypeNameMap["IAgStkGraphicsStereoscopic"] = IAgStkGraphicsStereoscopic
__all__.append("IAgStkGraphicsStereoscopic")

class IAgStkGraphicsSurfaceMeshPrimitive(object):
    """A triangle mesh primitive for meshes on the surface that need to conform to terrain."""
    _uuid = "{9f13f05b-9c30-4118-8d6b-ab331881aba6}"
    _num_methods = 17
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetTexture"] = _raise_uninitialized_error
        self.__dict__["_SetTexture"] = _raise_uninitialized_error
        self.__dict__["_GetWireframe"] = _raise_uninitialized_error
        self.__dict__["_SetWireframe"] = _raise_uninitialized_error
        self.__dict__["_GetTriangleWindingOrder"] = _raise_uninitialized_error
        self.__dict__["_GetSetHint"] = _raise_uninitialized_error
        self.__dict__["_GetRenderingMethod"] = _raise_uninitialized_error
        self.__dict__["_GetTextureFilter"] = _raise_uninitialized_error
        self.__dict__["_SetTextureFilter"] = _raise_uninitialized_error
        self.__dict__["_GetTextureMatrix"] = _raise_uninitialized_error
        self.__dict__["_SetTextureMatrix"] = _raise_uninitialized_error
        self.__dict__["_GetTransparentTextureBorder"] = _raise_uninitialized_error
        self.__dict__["_SetTransparentTextureBorder"] = _raise_uninitialized_error
        self.__dict__["_Set"] = _raise_uninitialized_error
        self.__dict__["_SetWithoutTexturing"] = _raise_uninitialized_error
        self.__dict__["_Supported"] = _raise_uninitialized_error
        self.__dict__["_SupportedWithDefaultRenderingMethod"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsSurfaceMeshPrimitive._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsSurfaceMeshPrimitive from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsSurfaceMeshPrimitive = agcom.GUID(IAgStkGraphicsSurfaceMeshPrimitive._uuid)
        vtable_offset_local = IAgStkGraphicsSurfaceMeshPrimitive._vtable_offset - 1
        self.__dict__["_GetTexture"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSurfaceMeshPrimitive, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_SetTexture"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSurfaceMeshPrimitive, vtable_offset_local+2, agcom.PVOID)
        self.__dict__["_GetWireframe"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSurfaceMeshPrimitive, vtable_offset_local+3, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetWireframe"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSurfaceMeshPrimitive, vtable_offset_local+4, agcom.VARIANT_BOOL)
        self.__dict__["_GetTriangleWindingOrder"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSurfaceMeshPrimitive, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_GetSetHint"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSurfaceMeshPrimitive, vtable_offset_local+6, POINTER(agcom.LONG))
        self.__dict__["_GetRenderingMethod"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSurfaceMeshPrimitive, vtable_offset_local+7, POINTER(agcom.LONG))
        self.__dict__["_GetTextureFilter"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSurfaceMeshPrimitive, vtable_offset_local+8, POINTER(agcom.PVOID))
        self.__dict__["_SetTextureFilter"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSurfaceMeshPrimitive, vtable_offset_local+9, agcom.PVOID)
        self.__dict__["_GetTextureMatrix"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSurfaceMeshPrimitive, vtable_offset_local+10, POINTER(agcom.PVOID))
        self.__dict__["_SetTextureMatrix"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSurfaceMeshPrimitive, vtable_offset_local+11, agcom.PVOID)
        self.__dict__["_GetTransparentTextureBorder"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSurfaceMeshPrimitive, vtable_offset_local+12, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetTransparentTextureBorder"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSurfaceMeshPrimitive, vtable_offset_local+13, agcom.VARIANT_BOOL)
        self.__dict__["_Set"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSurfaceMeshPrimitive, vtable_offset_local+14, agcom.PVOID)
        self.__dict__["_SetWithoutTexturing"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSurfaceMeshPrimitive, vtable_offset_local+15, agcom.PVOID)
        self.__dict__["_Supported"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSurfaceMeshPrimitive, vtable_offset_local+16, agcom.LONG, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SupportedWithDefaultRenderingMethod"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSurfaceMeshPrimitive, vtable_offset_local+17, POINTER(agcom.VARIANT_BOOL))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsSurfaceMeshPrimitive.__dict__ and type(IAgStkGraphicsSurfaceMeshPrimitive.__dict__[attrname]) == property:
            return IAgStkGraphicsSurfaceMeshPrimitive.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsSurfaceMeshPrimitive.")
    
    @property
    def Texture(self) -> "IAgStkGraphicsRendererTexture2D":
        """Gets or sets the texture applied to this primitive when rendering."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTexture"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @Texture.setter
    def Texture(self, texture:"IAgStkGraphicsRendererTexture2D") -> None:
        with agmarshall.AgInterface_in_arg(texture, IAgStkGraphicsRendererTexture2D) as arg_texture:
            agcls.evaluate_hresult(self.__dict__["_SetTexture"](arg_texture.COM_val))

    @property
    def Wireframe(self) -> bool:
        """Gets or sets whether the primitive is rendered in wireframe. This is useful for debugging."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetWireframe"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Wireframe.setter
    def Wireframe(self, wireframe:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(wireframe) as arg_wireframe:
            agcls.evaluate_hresult(self.__dict__["_SetWireframe"](arg_wireframe.COM_val))

    @property
    def TriangleWindingOrder(self) -> "AgEStkGraphicsWindingOrder":
        """Gets the orientation of front-facing triangles in the mesh."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsWindingOrder) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTriangleWindingOrder"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def SetHint(self) -> "AgEStkGraphicsSetHint":
        """Gets the primitive's set hint. See the Set Hint Performance Overview for selecting an appropriate value to construct the primitive with."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsSetHint) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSetHint"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def RenderingMethod(self) -> "AgEStkGraphicsSurfaceMeshRenderingMethod":
        """Gets the rendering method used to render the mesh."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsSurfaceMeshRenderingMethod) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetRenderingMethod"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def TextureFilter(self) -> "IAgStkGraphicsTextureFilter2D":
        """Gets or sets the filter used when a texture is applied to this primitive."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTextureFilter"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @TextureFilter.setter
    def TextureFilter(self, textureFilter:"IAgStkGraphicsTextureFilter2D") -> None:
        with agmarshall.AgInterface_in_arg(textureFilter, IAgStkGraphicsTextureFilter2D) as arg_textureFilter:
            agcls.evaluate_hresult(self.__dict__["_SetTextureFilter"](arg_textureFilter.COM_val))

    @property
    def TextureMatrix(self) -> "IAgStkGraphicsTextureMatrix":
        """Gets or sets the matrix used to transform texture coordinates when a texture is applied to this primitive."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTextureMatrix"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @TextureMatrix.setter
    def TextureMatrix(self, textureMatrix:"IAgStkGraphicsTextureMatrix") -> None:
        with agmarshall.AgInterface_in_arg(textureMatrix, IAgStkGraphicsTextureMatrix) as arg_textureMatrix:
            agcls.evaluate_hresult(self.__dict__["_SetTextureMatrix"](arg_textureMatrix.COM_val))

    @property
    def TransparentTextureBorder(self) -> bool:
        """Gets or set the boolean that defines if the color obtained from texture coordinates beyond the texture border should be considered transparent or not. This is typically used in conjunction with the a texture matrix."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTransparentTextureBorder"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @TransparentTextureBorder.setter
    def TransparentTextureBorder(self, transparentTextureBorder:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(transparentTextureBorder) as arg_transparentTextureBorder:
            agcls.evaluate_hresult(self.__dict__["_SetTransparentTextureBorder"](arg_transparentTextureBorder.COM_val))

    def Set(self, surfaceTriangulator:"IAgStkGraphicsSurfaceTriangulatorResult") -> None:
        """Defines the surface mesh using the specified surfaceTriangulator. The mesh is rendered in the primitive's reference frame."""
        with agmarshall.AgInterface_in_arg(surfaceTriangulator, IAgStkGraphicsSurfaceTriangulatorResult) as arg_surfaceTriangulator:
            agcls.evaluate_hresult(self.__dict__["_Set"](arg_surfaceTriangulator.COM_val))

    def SetWithoutTexturing(self, surfaceTriangulator:"IAgStkGraphicsSurfaceTriangulatorResult") -> None:
        """Defines the surface mesh using the specified surfaceTriangulator. The mesh is rendered in the primitive's reference frame."""
        with agmarshall.AgInterface_in_arg(surfaceTriangulator, IAgStkGraphicsSurfaceTriangulatorResult) as arg_surfaceTriangulator:
            agcls.evaluate_hresult(self.__dict__["_SetWithoutTexturing"](arg_surfaceTriangulator.COM_val))

    def Supported(self, renderingMethod:"AgEStkGraphicsSurfaceMeshRenderingMethod") -> bool:
        """Determines whether or not the video card supports the surface mesh primitive with the given renderingMethod."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsSurfaceMeshRenderingMethod, renderingMethod) as arg_renderingMethod, \
             agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_Supported"](arg_renderingMethod.COM_val, byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def SupportedWithDefaultRenderingMethod(self) -> bool:
        """Determines whether or not the video card supports the surface mesh primitive. This is equivalent to calling Supported with automatic."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_SupportedWithDefaultRenderingMethod"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{9f13f05b-9c30-4118-8d6b-ab331881aba6}", IAgStkGraphicsSurfaceMeshPrimitive)
agcls.AgTypeNameMap["IAgStkGraphicsSurfaceMeshPrimitive"] = IAgStkGraphicsSurfaceMeshPrimitive
__all__.append("IAgStkGraphicsSurfaceMeshPrimitive")

class IAgStkGraphicsTerrainCollection(object):
    """A collection of terrain overlay objects."""
    _uuid = "{6dbd63a6-624b-4318-8fec-daf384f070c4}"
    _num_methods = 20
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        self.__dict__["_GetIsReadOnly"] = _raise_uninitialized_error
        self.__dict__["_Item"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        self.__dict__["_Contains"] = _raise_uninitialized_error
        self.__dict__["_ContainsUriString"] = _raise_uninitialized_error
        self.__dict__["_Remove"] = _raise_uninitialized_error
        self.__dict__["_Clear"] = _raise_uninitialized_error
        self.__dict__["_Add"] = _raise_uninitialized_error
        self.__dict__["_AddAsync"] = _raise_uninitialized_error
        self.__dict__["_IndexOf"] = _raise_uninitialized_error
        self.__dict__["_IndexOfUriString"] = _raise_uninitialized_error
        self.__dict__["_AddUriString"] = _raise_uninitialized_error
        self.__dict__["_AddAsyncUriString"] = _raise_uninitialized_error
        self.__dict__["_Swap"] = _raise_uninitialized_error
        self.__dict__["_SwapByIndex"] = _raise_uninitialized_error
        self.__dict__["_Move"] = _raise_uninitialized_error
        self.__dict__["_MoveByIndex"] = _raise_uninitialized_error
        self.__dict__["_BringToFront"] = _raise_uninitialized_error
        self.__dict__["_SendToBack"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsTerrainCollection._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsTerrainCollection from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsTerrainCollection = agcom.GUID(IAgStkGraphicsTerrainCollection._uuid)
        vtable_offset_local = IAgStkGraphicsTerrainCollection._vtable_offset - 1
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTerrainCollection, vtable_offset_local+1, POINTER(agcom.INT))
        self.__dict__["_GetIsReadOnly"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTerrainCollection, vtable_offset_local+2, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_Item"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTerrainCollection, vtable_offset_local+3, agcom.INT, POINTER(agcom.PVOID))
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTerrainCollection, vtable_offset_local+4, POINTER(agcom.PVOID))
        self.__dict__["_Contains"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTerrainCollection, vtable_offset_local+5, agcom.PVOID, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_ContainsUriString"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTerrainCollection, vtable_offset_local+6, agcom.BSTR, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_Remove"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTerrainCollection, vtable_offset_local+7, agcom.PVOID, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_Clear"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTerrainCollection, vtable_offset_local+8, )
        self.__dict__["_Add"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTerrainCollection, vtable_offset_local+9, agcom.PVOID)
        self.__dict__["_AddAsync"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTerrainCollection, vtable_offset_local+10, agcom.PVOID)
        self.__dict__["_IndexOf"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTerrainCollection, vtable_offset_local+11, agcom.PVOID, POINTER(agcom.INT))
        self.__dict__["_IndexOfUriString"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTerrainCollection, vtable_offset_local+12, agcom.BSTR, POINTER(agcom.INT))
        self.__dict__["_AddUriString"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTerrainCollection, vtable_offset_local+13, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_AddAsyncUriString"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTerrainCollection, vtable_offset_local+14, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_Swap"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTerrainCollection, vtable_offset_local+15, agcom.PVOID, agcom.PVOID)
        self.__dict__["_SwapByIndex"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTerrainCollection, vtable_offset_local+16, agcom.INT, agcom.INT)
        self.__dict__["_Move"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTerrainCollection, vtable_offset_local+17, agcom.PVOID, agcom.INT)
        self.__dict__["_MoveByIndex"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTerrainCollection, vtable_offset_local+18, agcom.INT, agcom.INT)
        self.__dict__["_BringToFront"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTerrainCollection, vtable_offset_local+19, agcom.PVOID)
        self.__dict__["_SendToBack"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTerrainCollection, vtable_offset_local+20, agcom.PVOID)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsTerrainCollection.__dict__ and type(IAgStkGraphicsTerrainCollection.__dict__[attrname]) == property:
            return IAgStkGraphicsTerrainCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsTerrainCollection.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> "IAgStkGraphicsTerrainOverlay":
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    def Subscribe(self) -> IAgStkGraphicsTerrainCollectionEventHandler:
        """Returns an IAgStkGraphicsTerrainCollectionEventHandler that is subscribed to handle events associated with this instance of IAgStkGraphicsTerrainCollection."""
        return IAgStkGraphicsTerrainCollectionEventHandler(self._pUnk)    
    @property
    def Count(self) -> int:
        """Gets the number of terrain overlay objects in the collection."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def IsReadOnly(self) -> bool:
        """Gets whether or not the collection is read only."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetIsReadOnly"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def Item(self, index:int) -> "IAgStkGraphicsTerrainOverlay":
        """Gets the terrain overlay at the specified index."""
        with agmarshall.INT_arg(index) as arg_index, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Item"](arg_index.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        """Constructs an iterator that can be used to iterate the collection."""
        with agmarshall.IEnumVARIANT_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def Contains(self, terrainOverlay:"IAgStkGraphicsTerrainOverlay") -> bool:
        """Checks the presence of a terrain overlay in the collection."""
        with agmarshall.AgInterface_in_arg(terrainOverlay, IAgStkGraphicsTerrainOverlay) as arg_terrainOverlay, \
             agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_Contains"](arg_terrainOverlay.COM_val, byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def ContainsUriString(self, stringUri:str) -> bool:
        """Checks the presence of a terrain overlay with the specified Uri in the collection."""
        with agmarshall.BSTR_arg(stringUri) as arg_stringUri, \
             agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_ContainsUriString"](arg_stringUri.COM_val, byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def Remove(self, terrainOverlay:"IAgStkGraphicsTerrainOverlay") -> bool:
        """Removes a terrain overlay from the collection."""
        with agmarshall.AgInterface_in_arg(terrainOverlay, IAgStkGraphicsTerrainOverlay) as arg_terrainOverlay, \
             agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_Remove"](arg_terrainOverlay.COM_val, byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def Clear(self) -> None:
        """Removes all terrain overlay objects from the collection."""
        agcls.evaluate_hresult(self.__dict__["_Clear"]())

    def Add(self, terrainOverlay:"IAgStkGraphicsTerrainOverlay") -> None:
        """Adds terrainOverlay to the collection."""
        with agmarshall.AgInterface_in_arg(terrainOverlay, IAgStkGraphicsTerrainOverlay) as arg_terrainOverlay:
            agcls.evaluate_hresult(self.__dict__["_Add"](arg_terrainOverlay.COM_val))

    def AddAsync(self, terrainOverlay:"IAgStkGraphicsTerrainOverlay") -> None:
        """Adds terrainOverlay to the collection asynchronously."""
        with agmarshall.AgInterface_in_arg(terrainOverlay, IAgStkGraphicsTerrainOverlay) as arg_terrainOverlay:
            agcls.evaluate_hresult(self.__dict__["_AddAsync"](arg_terrainOverlay.COM_val))

    def IndexOf(self, terrainOverlay:"IAgStkGraphicsTerrainOverlay") -> int:
        """Gets the index of the specified terrain overlay."""
        with agmarshall.AgInterface_in_arg(terrainOverlay, IAgStkGraphicsTerrainOverlay) as arg_terrainOverlay, \
             agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_IndexOf"](arg_terrainOverlay.COM_val, byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def IndexOfUriString(self, stringUri:str) -> int:
        """Gets the index of the terrain overlay with the specified Uri."""
        with agmarshall.BSTR_arg(stringUri) as arg_stringUri, \
             agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_IndexOfUriString"](arg_stringUri.COM_val, byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def AddUriString(self, uri:str) -> "IAgStkGraphicsTerrainOverlay":
        """Creates a terrain overlay from the uri, which represents a uri, and adds it to the collection."""
        with agmarshall.BSTR_arg(uri) as arg_uri, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_AddUriString"](arg_uri.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def AddAsyncUriString(self, uri:str) -> "IAgStkGraphicsTerrainOverlay":
        """Creates a terrain overlay from the uri, which represents a uri, and adds it to the collection asynchronously."""
        with agmarshall.BSTR_arg(uri) as arg_uri, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_AddAsyncUriString"](arg_uri.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def Swap(self, terrainOverlay1:"IAgStkGraphicsTerrainOverlay", terrainOverlay2:"IAgStkGraphicsTerrainOverlay") -> None:
        """Swaps the position of two terrain overlay objects."""
        with agmarshall.AgInterface_in_arg(terrainOverlay1, IAgStkGraphicsTerrainOverlay) as arg_terrainOverlay1, \
             agmarshall.AgInterface_in_arg(terrainOverlay2, IAgStkGraphicsTerrainOverlay) as arg_terrainOverlay2:
            agcls.evaluate_hresult(self.__dict__["_Swap"](arg_terrainOverlay1.COM_val, arg_terrainOverlay2.COM_val))

    def SwapByIndex(self, index1:int, index2:int) -> None:
        """Swaps the position of two terrain overlay objects at the specified indices."""
        with agmarshall.INT_arg(index1) as arg_index1, \
             agmarshall.INT_arg(index2) as arg_index2:
            agcls.evaluate_hresult(self.__dict__["_SwapByIndex"](arg_index1.COM_val, arg_index2.COM_val))

    def Move(self, terrainOverlay:"IAgStkGraphicsTerrainOverlay", newPosition:int) -> None:
        """Moves the terrain overlay to the specified position."""
        with agmarshall.AgInterface_in_arg(terrainOverlay, IAgStkGraphicsTerrainOverlay) as arg_terrainOverlay, \
             agmarshall.INT_arg(newPosition) as arg_newPosition:
            agcls.evaluate_hresult(self.__dict__["_Move"](arg_terrainOverlay.COM_val, arg_newPosition.COM_val))

    def MoveByIndex(self, index:int, newPosition:int) -> None:
        """Moves the terrain overlay at the specified index to the specified position."""
        with agmarshall.INT_arg(index) as arg_index, \
             agmarshall.INT_arg(newPosition) as arg_newPosition:
            agcls.evaluate_hresult(self.__dict__["_MoveByIndex"](arg_index.COM_val, arg_newPosition.COM_val))

    def BringToFront(self, terrainOverlay:"IAgStkGraphicsTerrainOverlay") -> None:
        """Brings the terrain overlay to the front of the collection so it is rendered first or on the bottom."""
        with agmarshall.AgInterface_in_arg(terrainOverlay, IAgStkGraphicsTerrainOverlay) as arg_terrainOverlay:
            agcls.evaluate_hresult(self.__dict__["_BringToFront"](arg_terrainOverlay.COM_val))

    def SendToBack(self, terrainOverlay:"IAgStkGraphicsTerrainOverlay") -> None:
        """Sends the terrain overlay to the back of the collection so it is rendered last or on the top."""
        with agmarshall.AgInterface_in_arg(terrainOverlay, IAgStkGraphicsTerrainOverlay) as arg_terrainOverlay:
            agcls.evaluate_hresult(self.__dict__["_SendToBack"](arg_terrainOverlay.COM_val))

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{6dbd63a6-624b-4318-8fec-daf384f070c4}", IAgStkGraphicsTerrainCollection)
agcls.AgTypeNameMap["IAgStkGraphicsTerrainCollection"] = IAgStkGraphicsTerrainCollection
__all__.append("IAgStkGraphicsTerrainCollection")

class IAgStkGraphicsTerrainOverlay(object):
    """A globe overlay which shows terrain."""
    _uuid = "{dfe57e34-7b31-4360-a7a8-8db856882670}"
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAltitudeOffset"] = _raise_uninitialized_error
        self.__dict__["_SetAltitudeOffset"] = _raise_uninitialized_error
        self.__dict__["_GetAltitudeScale"] = _raise_uninitialized_error
        self.__dict__["_SetAltitudeScale"] = _raise_uninitialized_error
        self.__dict__["_GetSupported"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsTerrainOverlay._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsTerrainOverlay from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsTerrainOverlay = agcom.GUID(IAgStkGraphicsTerrainOverlay._uuid)
        vtable_offset_local = IAgStkGraphicsTerrainOverlay._vtable_offset - 1
        self.__dict__["_GetAltitudeOffset"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTerrainOverlay, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAltitudeOffset"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTerrainOverlay, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetAltitudeScale"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTerrainOverlay, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAltitudeScale"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTerrainOverlay, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetSupported"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTerrainOverlay, vtable_offset_local+5, POINTER(agcom.VARIANT_BOOL))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsTerrainOverlay.__dict__ and type(IAgStkGraphicsTerrainOverlay.__dict__[attrname]) == property:
            return IAgStkGraphicsTerrainOverlay.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsTerrainOverlay.")
    
    @property
    def AltitudeOffset(self) -> float:
        """Gets or sets the value from which to offset the terrain height."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitudeOffset"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @AltitudeOffset.setter
    def AltitudeOffset(self, altitudeOffset:float) -> None:
        with agmarshall.DOUBLE_arg(altitudeOffset) as arg_altitudeOffset:
            agcls.evaluate_hresult(self.__dict__["_SetAltitudeOffset"](arg_altitudeOffset.COM_val))

    @property
    def AltitudeScale(self) -> float:
        """Gets or sets the value from which to scale the terrain height."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitudeScale"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @AltitudeScale.setter
    def AltitudeScale(self, altitudeScale:float) -> None:
        with agmarshall.DOUBLE_arg(altitudeScale) as arg_altitudeScale:
            agcls.evaluate_hresult(self.__dict__["_SetAltitudeScale"](arg_altitudeScale.COM_val))

    @property
    def Supported(self) -> bool:
        """Gets whether the video card supports adding terrain overlay objects. Video cards that support OpenGL 1.2 or higher support terrain overlay objects."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSupported"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{dfe57e34-7b31-4360-a7a8-8db856882670}", IAgStkGraphicsTerrainOverlay)
agcls.AgTypeNameMap["IAgStkGraphicsTerrainOverlay"] = IAgStkGraphicsTerrainOverlay
__all__.append("IAgStkGraphicsTerrainOverlay")

class IAgStkGraphicsTextBatchPrimitive(object):
    """ Renders one or more strings in the 3D scene.  For best performance, avoid creating lots of batches with only a few strings each. See the Batching Performance Overview. """
    _uuid = "{037722fb-c0e5-4052-b34d-60aa662b5d2b}"
    _num_methods = 32
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetSetHint"] = _raise_uninitialized_error
        self.__dict__["_GetBoundingSphereScale"] = _raise_uninitialized_error
        self.__dict__["_SetBoundingSphereScale"] = _raise_uninitialized_error
        self.__dict__["_GetFont"] = _raise_uninitialized_error
        self.__dict__["_GetOutlineColor"] = _raise_uninitialized_error
        self.__dict__["_SetOutlineColor"] = _raise_uninitialized_error
        self.__dict__["_GetOutlineTranslucency"] = _raise_uninitialized_error
        self.__dict__["_SetOutlineTranslucency"] = _raise_uninitialized_error
        self.__dict__["_GetAlignToPixel"] = _raise_uninitialized_error
        self.__dict__["_SetAlignToPixel"] = _raise_uninitialized_error
        self.__dict__["_GetDistanceDisplayConditionPerString"] = _raise_uninitialized_error
        self.__dict__["_SetDistanceDisplayConditionPerString"] = _raise_uninitialized_error
        self.__dict__["_GetPerItemPickingEnabled"] = _raise_uninitialized_error
        self.__dict__["_SetPerItemPickingEnabled"] = _raise_uninitialized_error
        self.__dict__["_GetTextureFilter"] = _raise_uninitialized_error
        self.__dict__["_SetTextureFilter"] = _raise_uninitialized_error
        self.__dict__["_Set"] = _raise_uninitialized_error
        self.__dict__["_SetWithOptionalParameters"] = _raise_uninitialized_error
        self.__dict__["_SetWithOptionalParametersAndRenderPass"] = _raise_uninitialized_error
        self.__dict__["_SetCartographic"] = _raise_uninitialized_error
        self.__dict__["_SetCartographicWithOptionalParameters"] = _raise_uninitialized_error
        self.__dict__["_SetCartographicWithOptionalParametersAndRenderPass"] = _raise_uninitialized_error
        self.__dict__["_SetPartial"] = _raise_uninitialized_error
        self.__dict__["_SetPartialWithIndicesOrder"] = _raise_uninitialized_error
        self.__dict__["_SetPartialWithOptionalParameters"] = _raise_uninitialized_error
        self.__dict__["_SetPartialWithOptionalParametersIndicesOrderAndRenderPass"] = _raise_uninitialized_error
        self.__dict__["_SetPartialCartographic"] = _raise_uninitialized_error
        self.__dict__["_SetPartialCartographicWithIndicesOrder"] = _raise_uninitialized_error
        self.__dict__["_SetPartialCartographicWithOptionalParameters"] = _raise_uninitialized_error
        self.__dict__["_SetPartialCartographicWithOptionalParametersIndicesOrderAndRenderPass"] = _raise_uninitialized_error
        self.__dict__["_GetRenderInScreenSpace"] = _raise_uninitialized_error
        self.__dict__["_SetRenderInScreenSpace"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsTextBatchPrimitive._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsTextBatchPrimitive from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsTextBatchPrimitive = agcom.GUID(IAgStkGraphicsTextBatchPrimitive._uuid)
        vtable_offset_local = IAgStkGraphicsTextBatchPrimitive._vtable_offset - 1
        self.__dict__["_GetSetHint"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextBatchPrimitive, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_GetBoundingSphereScale"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextBatchPrimitive, vtable_offset_local+2, POINTER(agcom.DOUBLE))
        self.__dict__["_SetBoundingSphereScale"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextBatchPrimitive, vtable_offset_local+3, agcom.DOUBLE)
        self.__dict__["_GetFont"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextBatchPrimitive, vtable_offset_local+4, POINTER(agcom.PVOID))
        self.__dict__["_GetOutlineColor"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextBatchPrimitive, vtable_offset_local+5, POINTER(agcom.OLE_COLOR))
        self.__dict__["_SetOutlineColor"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextBatchPrimitive, vtable_offset_local+6, agcom.OLE_COLOR)
        self.__dict__["_GetOutlineTranslucency"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextBatchPrimitive, vtable_offset_local+7, POINTER(agcom.FLOAT))
        self.__dict__["_SetOutlineTranslucency"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextBatchPrimitive, vtable_offset_local+8, agcom.FLOAT)
        self.__dict__["_GetAlignToPixel"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextBatchPrimitive, vtable_offset_local+9, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetAlignToPixel"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextBatchPrimitive, vtable_offset_local+10, agcom.VARIANT_BOOL)
        self.__dict__["_GetDistanceDisplayConditionPerString"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextBatchPrimitive, vtable_offset_local+11, POINTER(agcom.PVOID))
        self.__dict__["_SetDistanceDisplayConditionPerString"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextBatchPrimitive, vtable_offset_local+12, agcom.PVOID)
        self.__dict__["_GetPerItemPickingEnabled"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextBatchPrimitive, vtable_offset_local+13, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetPerItemPickingEnabled"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextBatchPrimitive, vtable_offset_local+14, agcom.VARIANT_BOOL)
        self.__dict__["_GetTextureFilter"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextBatchPrimitive, vtable_offset_local+15, POINTER(agcom.PVOID))
        self.__dict__["_SetTextureFilter"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextBatchPrimitive, vtable_offset_local+16, agcom.PVOID)
        self.__dict__["_Set"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextBatchPrimitive, vtable_offset_local+17, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetWithOptionalParameters"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextBatchPrimitive, vtable_offset_local+18, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.PVOID)
        self.__dict__["_SetWithOptionalParametersAndRenderPass"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextBatchPrimitive, vtable_offset_local+19, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.PVOID, agcom.LONG)
        self.__dict__["_SetCartographic"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextBatchPrimitive, vtable_offset_local+20, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetCartographicWithOptionalParameters"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextBatchPrimitive, vtable_offset_local+21, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.PVOID)
        self.__dict__["_SetCartographicWithOptionalParametersAndRenderPass"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextBatchPrimitive, vtable_offset_local+22, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.PVOID, agcom.LONG)
        self.__dict__["_SetPartial"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextBatchPrimitive, vtable_offset_local+23, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetPartialWithIndicesOrder"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextBatchPrimitive, vtable_offset_local+24, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.LONG)
        self.__dict__["_SetPartialWithOptionalParameters"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextBatchPrimitive, vtable_offset_local+25, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.PVOID, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetPartialWithOptionalParametersIndicesOrderAndRenderPass"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextBatchPrimitive, vtable_offset_local+26, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.PVOID, POINTER(agcom.SAFEARRAY), agcom.LONG, agcom.LONG)
        self.__dict__["_SetPartialCartographic"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextBatchPrimitive, vtable_offset_local+27, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetPartialCartographicWithIndicesOrder"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextBatchPrimitive, vtable_offset_local+28, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.LONG)
        self.__dict__["_SetPartialCartographicWithOptionalParameters"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextBatchPrimitive, vtable_offset_local+29, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.PVOID, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetPartialCartographicWithOptionalParametersIndicesOrderAndRenderPass"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextBatchPrimitive, vtable_offset_local+30, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.PVOID, POINTER(agcom.SAFEARRAY), agcom.LONG, agcom.LONG)
        self.__dict__["_GetRenderInScreenSpace"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextBatchPrimitive, vtable_offset_local+31, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetRenderInScreenSpace"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextBatchPrimitive, vtable_offset_local+32, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsTextBatchPrimitive.__dict__ and type(IAgStkGraphicsTextBatchPrimitive.__dict__[attrname]) == property:
            return IAgStkGraphicsTextBatchPrimitive.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsTextBatchPrimitive.")
    
    @property
    def SetHint(self) -> "AgEStkGraphicsSetHint":
        """Gets the primitive's set hint. See the Set Hint Performance Overview for selecting an appropriate value to construct the primitive with."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsSetHint) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSetHint"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def BoundingSphereScale(self) -> float:
        """Gets or sets the scale applied to the radius of this primitive's bounding sphere."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBoundingSphereScale"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @BoundingSphereScale.setter
    def BoundingSphereScale(self, boundingSphereScale:float) -> None:
        with agmarshall.DOUBLE_arg(boundingSphereScale) as arg_boundingSphereScale:
            agcls.evaluate_hresult(self.__dict__["_SetBoundingSphereScale"](arg_boundingSphereScale.COM_val))

    @property
    def Font(self) -> "IAgStkGraphicsGraphicsFont":
        """Gets the font used to render the text batch."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetFont"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def OutlineColor(self) -> agcolor.Color:
        """Gets or sets the text's outline color."""
        with agmarshall.OLE_COLOR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetOutlineColor"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @OutlineColor.setter
    def OutlineColor(self, outlineColor:agcolor.Color) -> None:
        with agmarshall.OLE_COLOR_arg(outlineColor) as arg_outlineColor:
            agcls.evaluate_hresult(self.__dict__["_SetOutlineColor"](arg_outlineColor.COM_val))

    @property
    def OutlineTranslucency(self) -> float:
        """Gets or sets the text's outline translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetOutlineTranslucency"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @OutlineTranslucency.setter
    def OutlineTranslucency(self, outlineTranslucency:float) -> None:
        with agmarshall.FLOAT_arg(outlineTranslucency) as arg_outlineTranslucency:
            agcls.evaluate_hresult(self.__dict__["_SetOutlineTranslucency"](arg_outlineTranslucency.COM_val))

    @property
    def AlignToPixel(self) -> bool:
        """Gets or sets whether the screen space position of each string is aligned to a pixel."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAlignToPixel"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @AlignToPixel.setter
    def AlignToPixel(self, alignToPixel:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(alignToPixel) as arg_alignToPixel:
            agcls.evaluate_hresult(self.__dict__["_SetAlignToPixel"](arg_alignToPixel.COM_val))

    @property
    def DistanceDisplayConditionPerString(self) -> "IAgStkGraphicsDistanceDisplayCondition":
        """Gets or sets a distance display condition that is evaluated per string in the text batch during rendering. This is different than display condition, which is evaluated once for the entire text batch..."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDistanceDisplayConditionPerString"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @DistanceDisplayConditionPerString.setter
    def DistanceDisplayConditionPerString(self, distanceDisplayConditionPerString:"IAgStkGraphicsDistanceDisplayCondition") -> None:
        with agmarshall.AgInterface_in_arg(distanceDisplayConditionPerString, IAgStkGraphicsDistanceDisplayCondition) as arg_distanceDisplayConditionPerString:
            agcls.evaluate_hresult(self.__dict__["_SetDistanceDisplayConditionPerString"](arg_distanceDisplayConditionPerString.COM_val))

    @property
    def PerItemPickingEnabled(self) -> bool:
        """Gets or sets whether individual text indices will be included in the pick results returned from the scene's Pick method. Each text index that is picked will be returned as a batch primitive index."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPerItemPickingEnabled"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @PerItemPickingEnabled.setter
    def PerItemPickingEnabled(self, perItemPickingEnabled:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(perItemPickingEnabled) as arg_perItemPickingEnabled:
            agcls.evaluate_hresult(self.__dict__["_SetPerItemPickingEnabled"](arg_perItemPickingEnabled.COM_val))

    @property
    def TextureFilter(self) -> "IAgStkGraphicsTextureFilter2D":
        """Gets or sets the filter used to filter the texture-based font."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTextureFilter"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @TextureFilter.setter
    def TextureFilter(self, textureFilter:"IAgStkGraphicsTextureFilter2D") -> None:
        with agmarshall.AgInterface_in_arg(textureFilter, IAgStkGraphicsTextureFilter2D) as arg_textureFilter:
            agcls.evaluate_hresult(self.__dict__["_SetTextureFilter"](arg_textureFilter.COM_val))

    def Set(self, positions:list, text:list) -> None:
        """Defines the positions and text of strings in a text batch. The strings are rendered in the primitive's reference frame."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(text) as arg_text:
            agcls.evaluate_hresult(self.__dict__["_Set"](byref(arg_positions.COM_val), byref(arg_text.COM_val)))

    def SetWithOptionalParameters(self, positions:list, text:list, optionalParameters:"IAgStkGraphicsTextBatchPrimitiveOptionalParameters") -> None:
        """Defines the positions, text, and optional parameters of strings in a text batch. The strings are rendered in the primitive's reference frame."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(text) as arg_text, \
             agmarshall.AgInterface_in_arg(optionalParameters, IAgStkGraphicsTextBatchPrimitiveOptionalParameters) as arg_optionalParameters:
            agcls.evaluate_hresult(self.__dict__["_SetWithOptionalParameters"](byref(arg_positions.COM_val), byref(arg_text.COM_val), arg_optionalParameters.COM_val))

    def SetWithOptionalParametersAndRenderPass(self, positions:list, text:list, optionalParameters:"IAgStkGraphicsTextBatchPrimitiveOptionalParameters", renderPassHint:"AgEStkGraphicsRenderPassHint") -> None:
        """Defines the positions, text, and optional parameters of strings in a text batch. The strings are rendered in the primitive's reference frame. renderPassHint is provided for efficiency."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(text) as arg_text, \
             agmarshall.AgInterface_in_arg(optionalParameters, IAgStkGraphicsTextBatchPrimitiveOptionalParameters) as arg_optionalParameters, \
             agmarshall.AgEnum_arg(AgEStkGraphicsRenderPassHint, renderPassHint) as arg_renderPassHint:
            agcls.evaluate_hresult(self.__dict__["_SetWithOptionalParametersAndRenderPass"](byref(arg_positions.COM_val), byref(arg_text.COM_val), arg_optionalParameters.COM_val, arg_renderPassHint.COM_val))

    def SetCartographic(self, centralBody:str, positions:list, text:list) -> None:
        """For convenience. Defines the positions and text of strings in a text batch using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling Set."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(text) as arg_text:
            agcls.evaluate_hresult(self.__dict__["_SetCartographic"](arg_centralBody.COM_val, byref(arg_positions.COM_val), byref(arg_text.COM_val)))

    def SetCartographicWithOptionalParameters(self, centralBody:str, positions:list, text:list, optionalParameters:"IAgStkGraphicsTextBatchPrimitiveOptionalParameters") -> None:
        """For convenience. Defines the positions, text, and optional parameters of strings in a text batch using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling Set."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(text) as arg_text, \
             agmarshall.AgInterface_in_arg(optionalParameters, IAgStkGraphicsTextBatchPrimitiveOptionalParameters) as arg_optionalParameters:
            agcls.evaluate_hresult(self.__dict__["_SetCartographicWithOptionalParameters"](arg_centralBody.COM_val, byref(arg_positions.COM_val), byref(arg_text.COM_val), arg_optionalParameters.COM_val))

    def SetCartographicWithOptionalParametersAndRenderPass(self, centralBody:str, positions:list, text:list, optionalParameters:"IAgStkGraphicsTextBatchPrimitiveOptionalParameters", renderPassHint:"AgEStkGraphicsRenderPassHint") -> None:
        """For convenience. Defines the positions, text, and optional parameters of strings in a text batch using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling Set."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(text) as arg_text, \
             agmarshall.AgInterface_in_arg(optionalParameters, IAgStkGraphicsTextBatchPrimitiveOptionalParameters) as arg_optionalParameters, \
             agmarshall.AgEnum_arg(AgEStkGraphicsRenderPassHint, renderPassHint) as arg_renderPassHint:
            agcls.evaluate_hresult(self.__dict__["_SetCartographicWithOptionalParametersAndRenderPass"](arg_centralBody.COM_val, byref(arg_positions.COM_val), byref(arg_text.COM_val), arg_optionalParameters.COM_val, arg_renderPassHint.COM_val))

    def SetPartial(self, positions:list, text:list, indices:list) -> None:
        """Updates a subset of positions and/or text in a text batch."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(text) as arg_text, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices:
            agcls.evaluate_hresult(self.__dict__["_SetPartial"](byref(arg_positions.COM_val), byref(arg_text.COM_val), byref(arg_indices.COM_val)))

    def SetPartialWithIndicesOrder(self, positions:list, text:list, indices:list, indicesOrderHint:"AgEStkGraphicsIndicesOrderHint") -> None:
        """Updates a subset of positions and/or text in a text batch."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(text) as arg_text, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices, \
             agmarshall.AgEnum_arg(AgEStkGraphicsIndicesOrderHint, indicesOrderHint) as arg_indicesOrderHint:
            agcls.evaluate_hresult(self.__dict__["_SetPartialWithIndicesOrder"](byref(arg_positions.COM_val), byref(arg_text.COM_val), byref(arg_indices.COM_val), arg_indicesOrderHint.COM_val))

    def SetPartialWithOptionalParameters(self, positions:list, text:list, optionalParameters:"IAgStkGraphicsTextBatchPrimitiveOptionalParameters", indices:list) -> None:
        """Updates a subset of positions, text, and/or optional per-string parameters in a text batch."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(text) as arg_text, \
             agmarshall.AgInterface_in_arg(optionalParameters, IAgStkGraphicsTextBatchPrimitiveOptionalParameters) as arg_optionalParameters, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices:
            agcls.evaluate_hresult(self.__dict__["_SetPartialWithOptionalParameters"](byref(arg_positions.COM_val), byref(arg_text.COM_val), arg_optionalParameters.COM_val, byref(arg_indices.COM_val)))

    def SetPartialWithOptionalParametersIndicesOrderAndRenderPass(self, positions:list, text:list, optionalParameters:"IAgStkGraphicsTextBatchPrimitiveOptionalParameters", indices:list, indicesOrderHint:"AgEStkGraphicsIndicesOrderHint", renderPassHint:"AgEStkGraphicsRenderPassHint") -> None:
        """Updates a subset of positions, text, and/or optional per-string parameters in a text batch."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(text) as arg_text, \
             agmarshall.AgInterface_in_arg(optionalParameters, IAgStkGraphicsTextBatchPrimitiveOptionalParameters) as arg_optionalParameters, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices, \
             agmarshall.AgEnum_arg(AgEStkGraphicsIndicesOrderHint, indicesOrderHint) as arg_indicesOrderHint, \
             agmarshall.AgEnum_arg(AgEStkGraphicsRenderPassHint, renderPassHint) as arg_renderPassHint:
            agcls.evaluate_hresult(self.__dict__["_SetPartialWithOptionalParametersIndicesOrderAndRenderPass"](byref(arg_positions.COM_val), byref(arg_text.COM_val), arg_optionalParameters.COM_val, byref(arg_indices.COM_val), arg_indicesOrderHint.COM_val, arg_renderPassHint.COM_val))

    def SetPartialCartographic(self, centralBody:str, positions:list, text:list, indices:list) -> None:
        """For convenience. Updates a subset of positions and/or text in a text batch using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling SetPartial."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(text) as arg_text, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices:
            agcls.evaluate_hresult(self.__dict__["_SetPartialCartographic"](arg_centralBody.COM_val, byref(arg_positions.COM_val), byref(arg_text.COM_val), byref(arg_indices.COM_val)))

    def SetPartialCartographicWithIndicesOrder(self, centralBody:str, positions:list, text:list, indices:list, indicesOrderHint:"AgEStkGraphicsIndicesOrderHint") -> None:
        """For convenience. Updates a subset of positions and/or text in a text batch using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling SetPartial."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(text) as arg_text, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices, \
             agmarshall.AgEnum_arg(AgEStkGraphicsIndicesOrderHint, indicesOrderHint) as arg_indicesOrderHint:
            agcls.evaluate_hresult(self.__dict__["_SetPartialCartographicWithIndicesOrder"](arg_centralBody.COM_val, byref(arg_positions.COM_val), byref(arg_text.COM_val), byref(arg_indices.COM_val), arg_indicesOrderHint.COM_val))

    def SetPartialCartographicWithOptionalParameters(self, centralBody:str, positions:list, text:list, optionalParameters:"IAgStkGraphicsTextBatchPrimitiveOptionalParameters", indices:list) -> None:
        """For convenience. Updates a subset of positions, text, and/or per-string parameters in a text batch using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling SetPartial."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(text) as arg_text, \
             agmarshall.AgInterface_in_arg(optionalParameters, IAgStkGraphicsTextBatchPrimitiveOptionalParameters) as arg_optionalParameters, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices:
            agcls.evaluate_hresult(self.__dict__["_SetPartialCartographicWithOptionalParameters"](arg_centralBody.COM_val, byref(arg_positions.COM_val), byref(arg_text.COM_val), arg_optionalParameters.COM_val, byref(arg_indices.COM_val)))

    def SetPartialCartographicWithOptionalParametersIndicesOrderAndRenderPass(self, centralBody:str, positions:list, text:list, optionalParameters:"IAgStkGraphicsTextBatchPrimitiveOptionalParameters", indices:list, indicesOrderHint:"AgEStkGraphicsIndicesOrderHint", renderPassHint:"AgEStkGraphicsRenderPassHint") -> None:
        """For convenience. Updates a subset of positions, text, and/or per-string parameters in a text batch using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling SetPartial."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(text) as arg_text, \
             agmarshall.AgInterface_in_arg(optionalParameters, IAgStkGraphicsTextBatchPrimitiveOptionalParameters) as arg_optionalParameters, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices, \
             agmarshall.AgEnum_arg(AgEStkGraphicsIndicesOrderHint, indicesOrderHint) as arg_indicesOrderHint, \
             agmarshall.AgEnum_arg(AgEStkGraphicsRenderPassHint, renderPassHint) as arg_renderPassHint:
            agcls.evaluate_hresult(self.__dict__["_SetPartialCartographicWithOptionalParametersIndicesOrderAndRenderPass"](arg_centralBody.COM_val, byref(arg_positions.COM_val), byref(arg_text.COM_val), arg_optionalParameters.COM_val, byref(arg_indices.COM_val), arg_indicesOrderHint.COM_val, arg_renderPassHint.COM_val))

    @property
    def RenderInScreenSpace(self) -> bool:
        """Gets or sets whether the primitive is positioned and rendered in screen space coordinates."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetRenderInScreenSpace"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @RenderInScreenSpace.setter
    def RenderInScreenSpace(self, renderInScreenSpace:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(renderInScreenSpace) as arg_renderInScreenSpace:
            agcls.evaluate_hresult(self.__dict__["_SetRenderInScreenSpace"](arg_renderInScreenSpace.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{037722fb-c0e5-4052-b34d-60aa662b5d2b}", IAgStkGraphicsTextBatchPrimitive)
agcls.AgTypeNameMap["IAgStkGraphicsTextBatchPrimitive"] = IAgStkGraphicsTextBatchPrimitive
__all__.append("IAgStkGraphicsTextBatchPrimitive")

class IAgStkGraphicsTextBatchPrimitiveOptionalParameters(object):
    """Optional per-string and per-batch parameters for text batch primitive..."""
    _uuid = "{e18b012f-840d-4f32-8810-dd253c38ce7f}"
    _num_methods = 14
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetOrigin"] = _raise_uninitialized_error
        self.__dict__["_SetOrigin"] = _raise_uninitialized_error
        self.__dict__["_GetEyeOffset"] = _raise_uninitialized_error
        self.__dict__["_SetEyeOffset"] = _raise_uninitialized_error
        self.__dict__["_GetPixelOffset"] = _raise_uninitialized_error
        self.__dict__["_SetPixelOffset"] = _raise_uninitialized_error
        self.__dict__["_GetMaximumStringLength"] = _raise_uninitialized_error
        self.__dict__["_SetMaximumStringLength"] = _raise_uninitialized_error
        self.__dict__["_SetOrigins"] = _raise_uninitialized_error
        self.__dict__["_SetEyeOffsets"] = _raise_uninitialized_error
        self.__dict__["_SetPixelOffsets"] = _raise_uninitialized_error
        self.__dict__["_SetColors"] = _raise_uninitialized_error
        self.__dict__["_GetScreenSpaceRendering"] = _raise_uninitialized_error
        self.__dict__["_SetScreenSpaceRendering"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsTextBatchPrimitiveOptionalParameters._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsTextBatchPrimitiveOptionalParameters from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsTextBatchPrimitiveOptionalParameters = agcom.GUID(IAgStkGraphicsTextBatchPrimitiveOptionalParameters._uuid)
        vtable_offset_local = IAgStkGraphicsTextBatchPrimitiveOptionalParameters._vtable_offset - 1
        self.__dict__["_GetOrigin"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextBatchPrimitiveOptionalParameters, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetOrigin"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextBatchPrimitiveOptionalParameters, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetEyeOffset"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextBatchPrimitiveOptionalParameters, vtable_offset_local+3, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetEyeOffset"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextBatchPrimitiveOptionalParameters, vtable_offset_local+4, agcom.SAFEARRAY)
        self.__dict__["_GetPixelOffset"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextBatchPrimitiveOptionalParameters, vtable_offset_local+5, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetPixelOffset"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextBatchPrimitiveOptionalParameters, vtable_offset_local+6, agcom.SAFEARRAY)
        self.__dict__["_GetMaximumStringLength"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextBatchPrimitiveOptionalParameters, vtable_offset_local+7, POINTER(agcom.INT))
        self.__dict__["_SetMaximumStringLength"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextBatchPrimitiveOptionalParameters, vtable_offset_local+8, agcom.INT)
        self.__dict__["_SetOrigins"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextBatchPrimitiveOptionalParameters, vtable_offset_local+9, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetEyeOffsets"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextBatchPrimitiveOptionalParameters, vtable_offset_local+10, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetPixelOffsets"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextBatchPrimitiveOptionalParameters, vtable_offset_local+11, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetColors"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextBatchPrimitiveOptionalParameters, vtable_offset_local+12, POINTER(agcom.SAFEARRAY))
        self.__dict__["_GetScreenSpaceRendering"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextBatchPrimitiveOptionalParameters, vtable_offset_local+13, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetScreenSpaceRendering"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextBatchPrimitiveOptionalParameters, vtable_offset_local+14, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsTextBatchPrimitiveOptionalParameters.__dict__ and type(IAgStkGraphicsTextBatchPrimitiveOptionalParameters.__dict__[attrname]) == property:
            return IAgStkGraphicsTextBatchPrimitiveOptionalParameters.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsTextBatchPrimitiveOptionalParameters.")
    
    @property
    def Origin(self) -> "AgEStkGraphicsOrigin":
        """Gets or sets the per-batch origin, which is applied to each string in the text batch."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsOrigin) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetOrigin"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Origin.setter
    def Origin(self, origin:"AgEStkGraphicsOrigin") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsOrigin, origin) as arg_origin:
            agcls.evaluate_hresult(self.__dict__["_SetOrigin"](arg_origin.COM_val))

    @property
    def EyeOffset(self) -> list:
        """Gets or sets the per-batch eye offset, which is applied to each string in the text batch. The array contains the components of the offset arranged in the order x, y, z."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetEyeOffset"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @EyeOffset.setter
    def EyeOffset(self, eyeOffset:list) -> None:
        with agmarshall.SAFEARRAY_arg(eyeOffset) as arg_eyeOffset:
            agcls.evaluate_hresult(self.__dict__["_SetEyeOffset"](arg_eyeOffset.COM_val))

    @property
    def PixelOffset(self) -> list:
        """Gets or sets the per-batch pixel offset, which is applied to each string in the text batch. The array contains one x pixel offset followed by one y pixel offset."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPixelOffset"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @PixelOffset.setter
    def PixelOffset(self, pixelOffset:list) -> None:
        with agmarshall.SAFEARRAY_arg(pixelOffset) as arg_pixelOffset:
            agcls.evaluate_hresult(self.__dict__["_SetPixelOffset"](arg_pixelOffset.COM_val))

    @property
    def MaximumStringLength(self) -> int:
        """Gets or sets the maximum length of each string in the text batch."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaximumStringLength"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @MaximumStringLength.setter
    def MaximumStringLength(self, maximumStringLength:int) -> None:
        with agmarshall.INT_arg(maximumStringLength) as arg_maximumStringLength:
            agcls.evaluate_hresult(self.__dict__["_SetMaximumStringLength"](arg_maximumStringLength.COM_val))

    def SetOrigins(self, origins:list) -> None:
        """Defines a collection of origins, one for each string in the batch."""
        with agmarshall.SAFEARRAY_arg(origins) as arg_origins:
            agcls.evaluate_hresult(self.__dict__["_SetOrigins"](byref(arg_origins.COM_val)))

    def SetEyeOffsets(self, eyeOffsets:list) -> None:
        """Defines a collection of eye offsets, one for each string in the batch."""
        with agmarshall.SAFEARRAY_arg(eyeOffsets) as arg_eyeOffsets:
            agcls.evaluate_hresult(self.__dict__["_SetEyeOffsets"](byref(arg_eyeOffsets.COM_val)))

    def SetPixelOffsets(self, pixelOffsets:list) -> None:
        """Defines a collection of pixel offsets, one for each string in the batch."""
        with agmarshall.SAFEARRAY_arg(pixelOffsets) as arg_pixelOffsets:
            agcls.evaluate_hresult(self.__dict__["_SetPixelOffsets"](byref(arg_pixelOffsets.COM_val)))

    def SetColors(self, colors:list) -> None:
        """Defines a collection of colors, one for each string in the batch."""
        with agmarshall.SAFEARRAY_arg(colors) as arg_colors:
            agcls.evaluate_hresult(self.__dict__["_SetColors"](byref(arg_colors.COM_val)))

    @property
    def ScreenSpaceRendering(self) -> bool:
        """Gets or sets a flag that informs the CTextBatchPrimitive to use rendering optimized for screen space text."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetScreenSpaceRendering"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @ScreenSpaceRendering.setter
    def ScreenSpaceRendering(self, screenSpaceRendering:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(screenSpaceRendering) as arg_screenSpaceRendering:
            agcls.evaluate_hresult(self.__dict__["_SetScreenSpaceRendering"](arg_screenSpaceRendering.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{e18b012f-840d-4f32-8810-dd253c38ce7f}", IAgStkGraphicsTextBatchPrimitiveOptionalParameters)
agcls.AgTypeNameMap["IAgStkGraphicsTextBatchPrimitiveOptionalParameters"] = IAgStkGraphicsTextBatchPrimitiveOptionalParameters
__all__.append("IAgStkGraphicsTextBatchPrimitiveOptionalParameters")

class IAgStkGraphicsTextOverlay(object):
    """A rectangular overlay that contains text."""
    _uuid = "{7d847a28-dfe3-4f2c-923b-683f0250c491}"
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetText"] = _raise_uninitialized_error
        self.__dict__["_SetText"] = _raise_uninitialized_error
        self.__dict__["_GetOutlineColor"] = _raise_uninitialized_error
        self.__dict__["_SetOutlineColor"] = _raise_uninitialized_error
        self.__dict__["_GetFont"] = _raise_uninitialized_error
        self.__dict__["_SetFont"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsTextOverlay._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsTextOverlay from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsTextOverlay = agcom.GUID(IAgStkGraphicsTextOverlay._uuid)
        vtable_offset_local = IAgStkGraphicsTextOverlay._vtable_offset - 1
        self.__dict__["_GetText"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextOverlay, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetText"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextOverlay, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetOutlineColor"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextOverlay, vtable_offset_local+3, POINTER(agcom.OLE_COLOR))
        self.__dict__["_SetOutlineColor"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextOverlay, vtable_offset_local+4, agcom.OLE_COLOR)
        self.__dict__["_GetFont"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextOverlay, vtable_offset_local+5, POINTER(agcom.PVOID))
        self.__dict__["_SetFont"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextOverlay, vtable_offset_local+6, agcom.PVOID)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsTextOverlay.__dict__ and type(IAgStkGraphicsTextOverlay.__dict__[attrname]) == property:
            return IAgStkGraphicsTextOverlay.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsTextOverlay.")
    
    @property
    def Text(self) -> str:
        """Sets the Text to be rendered to an overlay. Newline characters ('\n') will mark the start of the next line in the text."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetText"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Text.setter
    def Text(self, text:str) -> None:
        with agmarshall.BSTR_arg(text) as arg_text:
            agcls.evaluate_hresult(self.__dict__["_SetText"](arg_text.COM_val))

    @property
    def OutlineColor(self) -> agcolor.Color:
        """Gets or sets the text's outline color."""
        with agmarshall.OLE_COLOR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetOutlineColor"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @OutlineColor.setter
    def OutlineColor(self, outlineColor:agcolor.Color) -> None:
        with agmarshall.OLE_COLOR_arg(outlineColor) as arg_outlineColor:
            agcls.evaluate_hresult(self.__dict__["_SetOutlineColor"](arg_outlineColor.COM_val))

    @property
    def Font(self) -> "IAgStkGraphicsGraphicsFont":
        """Get the graphics font used to style the text."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetFont"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @Font.setter
    def Font(self, font:"IAgStkGraphicsGraphicsFont") -> None:
        with agmarshall.AgInterface_in_arg(font, IAgStkGraphicsGraphicsFont) as arg_font:
            agcls.evaluate_hresult(self.__dict__["_SetFont"](arg_font.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{7d847a28-dfe3-4f2c-923b-683f0250c491}", IAgStkGraphicsTextOverlay)
agcls.AgTypeNameMap["IAgStkGraphicsTextOverlay"] = IAgStkGraphicsTextOverlay
__all__.append("IAgStkGraphicsTextOverlay")

class IAgStkGraphicsTextureMatrix(object):
    """A 4 by 4 matrix applied to a texture coordinate."""
    _uuid = "{0a4c4c8f-0131-466f-99a5-1f41f9db403b}"
    _num_methods = 16
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetM11"] = _raise_uninitialized_error
        self.__dict__["_GetM12"] = _raise_uninitialized_error
        self.__dict__["_GetM13"] = _raise_uninitialized_error
        self.__dict__["_GetM14"] = _raise_uninitialized_error
        self.__dict__["_GetM21"] = _raise_uninitialized_error
        self.__dict__["_GetM22"] = _raise_uninitialized_error
        self.__dict__["_GetM23"] = _raise_uninitialized_error
        self.__dict__["_GetM24"] = _raise_uninitialized_error
        self.__dict__["_GetM31"] = _raise_uninitialized_error
        self.__dict__["_GetM32"] = _raise_uninitialized_error
        self.__dict__["_GetM33"] = _raise_uninitialized_error
        self.__dict__["_GetM34"] = _raise_uninitialized_error
        self.__dict__["_GetM41"] = _raise_uninitialized_error
        self.__dict__["_GetM42"] = _raise_uninitialized_error
        self.__dict__["_GetM43"] = _raise_uninitialized_error
        self.__dict__["_GetM44"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsTextureMatrix._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsTextureMatrix from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsTextureMatrix = agcom.GUID(IAgStkGraphicsTextureMatrix._uuid)
        vtable_offset_local = IAgStkGraphicsTextureMatrix._vtable_offset - 1
        self.__dict__["_GetM11"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextureMatrix, vtable_offset_local+1, POINTER(agcom.FLOAT))
        self.__dict__["_GetM12"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextureMatrix, vtable_offset_local+2, POINTER(agcom.FLOAT))
        self.__dict__["_GetM13"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextureMatrix, vtable_offset_local+3, POINTER(agcom.FLOAT))
        self.__dict__["_GetM14"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextureMatrix, vtable_offset_local+4, POINTER(agcom.FLOAT))
        self.__dict__["_GetM21"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextureMatrix, vtable_offset_local+5, POINTER(agcom.FLOAT))
        self.__dict__["_GetM22"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextureMatrix, vtable_offset_local+6, POINTER(agcom.FLOAT))
        self.__dict__["_GetM23"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextureMatrix, vtable_offset_local+7, POINTER(agcom.FLOAT))
        self.__dict__["_GetM24"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextureMatrix, vtable_offset_local+8, POINTER(agcom.FLOAT))
        self.__dict__["_GetM31"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextureMatrix, vtable_offset_local+9, POINTER(agcom.FLOAT))
        self.__dict__["_GetM32"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextureMatrix, vtable_offset_local+10, POINTER(agcom.FLOAT))
        self.__dict__["_GetM33"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextureMatrix, vtable_offset_local+11, POINTER(agcom.FLOAT))
        self.__dict__["_GetM34"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextureMatrix, vtable_offset_local+12, POINTER(agcom.FLOAT))
        self.__dict__["_GetM41"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextureMatrix, vtable_offset_local+13, POINTER(agcom.FLOAT))
        self.__dict__["_GetM42"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextureMatrix, vtable_offset_local+14, POINTER(agcom.FLOAT))
        self.__dict__["_GetM43"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextureMatrix, vtable_offset_local+15, POINTER(agcom.FLOAT))
        self.__dict__["_GetM44"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextureMatrix, vtable_offset_local+16, POINTER(agcom.FLOAT))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsTextureMatrix.__dict__ and type(IAgStkGraphicsTextureMatrix.__dict__[attrname]) == property:
            return IAgStkGraphicsTextureMatrix.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsTextureMatrix.")
    
    @property
    def M11(self) -> float:
        """Gets the element in the first row, first column."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetM11"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def M12(self) -> float:
        """Gets the element in the first row, second column."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetM12"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def M13(self) -> float:
        """Gets the element in the first row, third column."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetM13"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def M14(self) -> float:
        """Gets the element in the first row, fourth column."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetM14"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def M21(self) -> float:
        """Gets the element in the second row, first column."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetM21"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def M22(self) -> float:
        """Gets the element in the second row, second column."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetM22"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def M23(self) -> float:
        """Gets the element in the second row, third column."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetM23"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def M24(self) -> float:
        """Gets the element in the second row, fourth column."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetM24"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def M31(self) -> float:
        """Gets the element in the third row, first column."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetM31"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def M32(self) -> float:
        """Gets the element in the third row, second column."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetM32"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def M33(self) -> float:
        """Gets the element in the third row, third column."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetM33"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def M34(self) -> float:
        """Gets the element in the third row, fourth column."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetM34"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def M41(self) -> float:
        """Gets the element in the fourth row, first column."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetM41"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def M42(self) -> float:
        """Gets the element in the fourth row, second column."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetM42"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def M43(self) -> float:
        """Gets the element in the fourth row, third column."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetM43"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def M44(self) -> float:
        """Gets the element in the fourth row, fourth column."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetM44"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{0a4c4c8f-0131-466f-99a5-1f41f9db403b}", IAgStkGraphicsTextureMatrix)
agcls.AgTypeNameMap["IAgStkGraphicsTextureMatrix"] = IAgStkGraphicsTextureMatrix
__all__.append("IAgStkGraphicsTextureMatrix")

class IAgStkGraphicsTextureScreenOverlay(object):
    """A rectangular overlay that can be assigned a texture."""
    _uuid = "{4d09eb77-14cf-40a7-b7bb-130f4ddd60c6}"
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetTexture"] = _raise_uninitialized_error
        self.__dict__["_SetTexture"] = _raise_uninitialized_error
        self.__dict__["_GetTextureFilter"] = _raise_uninitialized_error
        self.__dict__["_SetTextureFilter"] = _raise_uninitialized_error
        self.__dict__["_GetMaintainAspectRatio"] = _raise_uninitialized_error
        self.__dict__["_SetMaintainAspectRatio"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsTextureScreenOverlay._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsTextureScreenOverlay from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsTextureScreenOverlay = agcom.GUID(IAgStkGraphicsTextureScreenOverlay._uuid)
        vtable_offset_local = IAgStkGraphicsTextureScreenOverlay._vtable_offset - 1
        self.__dict__["_GetTexture"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextureScreenOverlay, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_SetTexture"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextureScreenOverlay, vtable_offset_local+2, agcom.PVOID)
        self.__dict__["_GetTextureFilter"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextureScreenOverlay, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_SetTextureFilter"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextureScreenOverlay, vtable_offset_local+4, agcom.PVOID)
        self.__dict__["_GetMaintainAspectRatio"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextureScreenOverlay, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetMaintainAspectRatio"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextureScreenOverlay, vtable_offset_local+6, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsTextureScreenOverlay.__dict__ and type(IAgStkGraphicsTextureScreenOverlay.__dict__[attrname]) == property:
            return IAgStkGraphicsTextureScreenOverlay.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsTextureScreenOverlay.")
    
    @property
    def Texture(self) -> "IAgStkGraphicsRendererTexture2D":
        """Gets or sets the texture (image) to be drawn on the overlay. Textures can be obtained from textures."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTexture"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @Texture.setter
    def Texture(self, texture:"IAgStkGraphicsRendererTexture2D") -> None:
        with agmarshall.AgInterface_in_arg(texture, IAgStkGraphicsRendererTexture2D) as arg_texture:
            agcls.evaluate_hresult(self.__dict__["_SetTexture"](arg_texture.COM_val))

    @property
    def TextureFilter(self) -> "IAgStkGraphicsTextureFilter2D":
        """Gets or sets the filter used for the texture associated with this overlay."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTextureFilter"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @TextureFilter.setter
    def TextureFilter(self, textureFilter:"IAgStkGraphicsTextureFilter2D") -> None:
        with agmarshall.AgInterface_in_arg(textureFilter, IAgStkGraphicsTextureFilter2D) as arg_textureFilter:
            agcls.evaluate_hresult(self.__dict__["_SetTextureFilter"](arg_textureFilter.COM_val))

    @property
    def MaintainAspectRatio(self) -> "AgEStkGraphicsMaintainAspectRatio":
        """Gets or sets a value indicating whether the aspect ratio of the texture screen overlay is maintained or not."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsMaintainAspectRatio) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaintainAspectRatio"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @MaintainAspectRatio.setter
    def MaintainAspectRatio(self, maintainAspectRatio:"AgEStkGraphicsMaintainAspectRatio") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsMaintainAspectRatio, maintainAspectRatio) as arg_maintainAspectRatio:
            agcls.evaluate_hresult(self.__dict__["_SetMaintainAspectRatio"](arg_maintainAspectRatio.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{4d09eb77-14cf-40a7-b7bb-130f4ddd60c6}", IAgStkGraphicsTextureScreenOverlay)
agcls.AgTypeNameMap["IAgStkGraphicsTextureScreenOverlay"] = IAgStkGraphicsTextureScreenOverlay
__all__.append("IAgStkGraphicsTextureScreenOverlay")

class IAgStkGraphicsTimeIntervalDisplayCondition(object):
    """Defines an inclusive time interval that determines when an object, such as a primitive, is rendered based on the current animation time ."""
    _uuid = "{2f0f3c32-c1d9-42a1-9422-8ecd2b9c1ad0}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetMinimumTime"] = _raise_uninitialized_error
        self.__dict__["_SetMinimumTime"] = _raise_uninitialized_error
        self.__dict__["_GetMaximumTime"] = _raise_uninitialized_error
        self.__dict__["_SetMaximumTime"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsTimeIntervalDisplayCondition._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsTimeIntervalDisplayCondition from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsTimeIntervalDisplayCondition = agcom.GUID(IAgStkGraphicsTimeIntervalDisplayCondition._uuid)
        vtable_offset_local = IAgStkGraphicsTimeIntervalDisplayCondition._vtable_offset - 1
        self.__dict__["_GetMinimumTime"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTimeIntervalDisplayCondition, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_SetMinimumTime"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTimeIntervalDisplayCondition, vtable_offset_local+2, agcom.PVOID)
        self.__dict__["_GetMaximumTime"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTimeIntervalDisplayCondition, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_SetMaximumTime"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTimeIntervalDisplayCondition, vtable_offset_local+4, agcom.PVOID)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsTimeIntervalDisplayCondition.__dict__ and type(IAgStkGraphicsTimeIntervalDisplayCondition.__dict__[attrname]) == property:
            return IAgStkGraphicsTimeIntervalDisplayCondition.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsTimeIntervalDisplayCondition.")
    
    @property
    def MinimumTime(self) -> "IAgDate":
        """Gets or sets the minimum time of the inclusive time interval."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinimumTime"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @MinimumTime.setter
    def MinimumTime(self, minimumTime:"IAgDate") -> None:
        with agmarshall.AgInterface_in_arg(minimumTime, IAgDate) as arg_minimumTime:
            agcls.evaluate_hresult(self.__dict__["_SetMinimumTime"](arg_minimumTime.COM_val))

    @property
    def MaximumTime(self) -> "IAgDate":
        """Gets or sets the maximum time of the inclusive time interval."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaximumTime"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @MaximumTime.setter
    def MaximumTime(self, maximumTime:"IAgDate") -> None:
        with agmarshall.AgInterface_in_arg(maximumTime, IAgDate) as arg_maximumTime:
            agcls.evaluate_hresult(self.__dict__["_SetMaximumTime"](arg_maximumTime.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{2f0f3c32-c1d9-42a1-9422-8ecd2b9c1ad0}", IAgStkGraphicsTimeIntervalDisplayCondition)
agcls.AgTypeNameMap["IAgStkGraphicsTimeIntervalDisplayCondition"] = IAgStkGraphicsTimeIntervalDisplayCondition
__all__.append("IAgStkGraphicsTimeIntervalDisplayCondition")

class IAgStkGraphicsTriangleMeshPrimitive(object):
    """Renders a triangle mesh in the 3D scene. Examples of triangle meshes includes polygons on the globe (e.g. states or countries), terrain and imagery extents, ellipses, and extrusions."""
    _uuid = "{b878e10c-0fc9-446e-88ba-1e1088970150}"
    _num_methods = 22
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetWireframe"] = _raise_uninitialized_error
        self.__dict__["_SetWireframe"] = _raise_uninitialized_error
        self.__dict__["_GetRenderBackThenFrontFaces"] = _raise_uninitialized_error
        self.__dict__["_SetRenderBackThenFrontFaces"] = _raise_uninitialized_error
        self.__dict__["_GetLighting"] = _raise_uninitialized_error
        self.__dict__["_SetLighting"] = _raise_uninitialized_error
        self.__dict__["_GetTriangleWindingOrder"] = _raise_uninitialized_error
        self.__dict__["_SetTriangleWindingOrder"] = _raise_uninitialized_error
        self.__dict__["_GetCullFace"] = _raise_uninitialized_error
        self.__dict__["_SetCullFace"] = _raise_uninitialized_error
        self.__dict__["_GetShadeModel"] = _raise_uninitialized_error
        self.__dict__["_SetShadeModel"] = _raise_uninitialized_error
        self.__dict__["_GetTexture"] = _raise_uninitialized_error
        self.__dict__["_SetTexture"] = _raise_uninitialized_error
        self.__dict__["_GetTextureFilter"] = _raise_uninitialized_error
        self.__dict__["_SetTextureFilter"] = _raise_uninitialized_error
        self.__dict__["_GetSetHint"] = _raise_uninitialized_error
        self.__dict__["_Set"] = _raise_uninitialized_error
        self.__dict__["_SetWithOptionalParameters"] = _raise_uninitialized_error
        self.__dict__["_SetTriangulator"] = _raise_uninitialized_error
        self.__dict__["_GetCentralBodyClipped"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBodyClipped"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsTriangleMeshPrimitive._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsTriangleMeshPrimitive from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsTriangleMeshPrimitive = agcom.GUID(IAgStkGraphicsTriangleMeshPrimitive._uuid)
        vtable_offset_local = IAgStkGraphicsTriangleMeshPrimitive._vtable_offset - 1
        self.__dict__["_GetWireframe"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTriangleMeshPrimitive, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetWireframe"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTriangleMeshPrimitive, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetRenderBackThenFrontFaces"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTriangleMeshPrimitive, vtable_offset_local+3, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetRenderBackThenFrontFaces"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTriangleMeshPrimitive, vtable_offset_local+4, agcom.VARIANT_BOOL)
        self.__dict__["_GetLighting"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTriangleMeshPrimitive, vtable_offset_local+5, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetLighting"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTriangleMeshPrimitive, vtable_offset_local+6, agcom.VARIANT_BOOL)
        self.__dict__["_GetTriangleWindingOrder"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTriangleMeshPrimitive, vtable_offset_local+7, POINTER(agcom.LONG))
        self.__dict__["_SetTriangleWindingOrder"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTriangleMeshPrimitive, vtable_offset_local+8, agcom.LONG)
        self.__dict__["_GetCullFace"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTriangleMeshPrimitive, vtable_offset_local+9, POINTER(agcom.LONG))
        self.__dict__["_SetCullFace"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTriangleMeshPrimitive, vtable_offset_local+10, agcom.LONG)
        self.__dict__["_GetShadeModel"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTriangleMeshPrimitive, vtable_offset_local+11, POINTER(agcom.LONG))
        self.__dict__["_SetShadeModel"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTriangleMeshPrimitive, vtable_offset_local+12, agcom.LONG)
        self.__dict__["_GetTexture"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTriangleMeshPrimitive, vtable_offset_local+13, POINTER(agcom.PVOID))
        self.__dict__["_SetTexture"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTriangleMeshPrimitive, vtable_offset_local+14, agcom.PVOID)
        self.__dict__["_GetTextureFilter"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTriangleMeshPrimitive, vtable_offset_local+15, POINTER(agcom.PVOID))
        self.__dict__["_SetTextureFilter"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTriangleMeshPrimitive, vtable_offset_local+16, agcom.PVOID)
        self.__dict__["_GetSetHint"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTriangleMeshPrimitive, vtable_offset_local+17, POINTER(agcom.LONG))
        self.__dict__["_Set"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTriangleMeshPrimitive, vtable_offset_local+18, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetWithOptionalParameters"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTriangleMeshPrimitive, vtable_offset_local+19, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.PVOID)
        self.__dict__["_SetTriangulator"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTriangleMeshPrimitive, vtable_offset_local+20, agcom.PVOID)
        self.__dict__["_GetCentralBodyClipped"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTriangleMeshPrimitive, vtable_offset_local+21, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetCentralBodyClipped"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTriangleMeshPrimitive, vtable_offset_local+22, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsTriangleMeshPrimitive.__dict__ and type(IAgStkGraphicsTriangleMeshPrimitive.__dict__[attrname]) == property:
            return IAgStkGraphicsTriangleMeshPrimitive.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsTriangleMeshPrimitive.")
    
    @property
    def Wireframe(self) -> bool:
        """Gets or sets whether the primitive is rendered in wireframe. This is useful for debugging."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetWireframe"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Wireframe.setter
    def Wireframe(self, wireframe:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(wireframe) as arg_wireframe:
            agcls.evaluate_hresult(self.__dict__["_SetWireframe"](arg_wireframe.COM_val))

    @property
    def RenderBackThenFrontFaces(self) -> bool:
        """Gets or sets whether the primitive is rendered in two passes to improve the visual quality for translucent, convex meshes."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetRenderBackThenFrontFaces"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @RenderBackThenFrontFaces.setter
    def RenderBackThenFrontFaces(self, renderBackThenFrontFaces:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(renderBackThenFrontFaces) as arg_renderBackThenFrontFaces:
            agcls.evaluate_hresult(self.__dict__["_SetRenderBackThenFrontFaces"](arg_renderBackThenFrontFaces.COM_val))

    @property
    def Lighting(self) -> bool:
        """Gets or sets whether the primitive is lit."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetLighting"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Lighting.setter
    def Lighting(self, lighting:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(lighting) as arg_lighting:
            agcls.evaluate_hresult(self.__dict__["_SetLighting"](arg_lighting.COM_val))

    @property
    def TriangleWindingOrder(self) -> "AgEStkGraphicsWindingOrder":
        """Gets or sets the orientation of front-facing triangles. This is used in combination with cull face for culling."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsWindingOrder) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTriangleWindingOrder"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @TriangleWindingOrder.setter
    def TriangleWindingOrder(self, triangleWindingOrder:"AgEStkGraphicsWindingOrder") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsWindingOrder, triangleWindingOrder) as arg_triangleWindingOrder:
            agcls.evaluate_hresult(self.__dict__["_SetTriangleWindingOrder"](arg_triangleWindingOrder.COM_val))

    @property
    def CullFace(self) -> "AgEStkGraphicsCullFace":
        """Gets or sets whether front and/or back-facing triangles may be culled. This is used in combination with triangle winding order for culling."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsCullFace) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCullFace"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @CullFace.setter
    def CullFace(self, cullFace:"AgEStkGraphicsCullFace") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsCullFace, cullFace) as arg_cullFace:
            agcls.evaluate_hresult(self.__dict__["_SetCullFace"](arg_cullFace.COM_val))

    @property
    def ShadeModel(self) -> "AgEStkGraphicsRendererShadeModel":
        """Gets or sets the shading model for the mesh."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsRendererShadeModel) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetShadeModel"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @ShadeModel.setter
    def ShadeModel(self, shadeModel:"AgEStkGraphicsRendererShadeModel") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsRendererShadeModel, shadeModel) as arg_shadeModel:
            agcls.evaluate_hresult(self.__dict__["_SetShadeModel"](arg_shadeModel.COM_val))

    @property
    def Texture(self) -> "IAgStkGraphicsRendererTexture2D":
        """Gets or sets the texture to be drawn on the triangle mesh. Textures can be obtained from textures."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTexture"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @Texture.setter
    def Texture(self, texture:"IAgStkGraphicsRendererTexture2D") -> None:
        with agmarshall.AgInterface_in_arg(texture, IAgStkGraphicsRendererTexture2D) as arg_texture:
            agcls.evaluate_hresult(self.__dict__["_SetTexture"](arg_texture.COM_val))

    @property
    def TextureFilter(self) -> "IAgStkGraphicsTextureFilter2D":
        """Gets or sets the filter used for the texture associated with this triangle mesh."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTextureFilter"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @TextureFilter.setter
    def TextureFilter(self, textureFilter:"IAgStkGraphicsTextureFilter2D") -> None:
        with agmarshall.AgInterface_in_arg(textureFilter, IAgStkGraphicsTextureFilter2D) as arg_textureFilter:
            agcls.evaluate_hresult(self.__dict__["_SetTextureFilter"](arg_textureFilter.COM_val))

    @property
    def SetHint(self) -> "AgEStkGraphicsSetHint":
        """Gets the primitive's set hint. See the Set Hint Performance Overview for selecting an appropriate value to construct the primitive with."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsSetHint) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSetHint"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def Set(self, positions:list, normals:list, indices:list) -> None:
        """Defines the triangle mesh using an indexed triangle list specified by positions, normals, and indices. The mesh is rendered in the primitive's reference frame."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(normals) as arg_normals, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices:
            agcls.evaluate_hresult(self.__dict__["_Set"](byref(arg_positions.COM_val), byref(arg_normals.COM_val), byref(arg_indices.COM_val)))

    def SetWithOptionalParameters(self, positions:list, normals:list, indices:list, optionalParameters:"IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters") -> None:
        """Defines the triangle mesh using an indexed triangle list specified by positions, normals, indices, and optionalParameters. The mesh is rendered in the primitive's reference frame."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(normals) as arg_normals, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices, \
             agmarshall.AgInterface_in_arg(optionalParameters, IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters) as arg_optionalParameters:
            agcls.evaluate_hresult(self.__dict__["_SetWithOptionalParameters"](byref(arg_positions.COM_val), byref(arg_normals.COM_val), byref(arg_indices.COM_val), arg_optionalParameters.COM_val))

    def SetTriangulator(self, triangulator:"IAgStkGraphicsTriangulatorResult") -> None:
        """Defines the triangle mesh using the specified triangulator. The mesh is rendered in the primitive's reference frame."""
        with agmarshall.AgInterface_in_arg(triangulator, IAgStkGraphicsTriangulatorResult) as arg_triangulator:
            agcls.evaluate_hresult(self.__dict__["_SetTriangulator"](arg_triangulator.COM_val))

    @property
    def CentralBodyClipped(self) -> bool:
        """Gets or sets whether individual points will be clipped by the central body."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyClipped"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @CentralBodyClipped.setter
    def CentralBodyClipped(self, centralBodyClipped:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(centralBodyClipped) as arg_centralBodyClipped:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBodyClipped"](arg_centralBodyClipped.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{b878e10c-0fc9-446e-88ba-1e1088970150}", IAgStkGraphicsTriangleMeshPrimitive)
agcls.AgTypeNameMap["IAgStkGraphicsTriangleMeshPrimitive"] = IAgStkGraphicsTriangleMeshPrimitive
__all__.append("IAgStkGraphicsTriangleMeshPrimitive")

class IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters(object):
    """Optional parameters for triangle mesh primitive..."""
    _uuid = "{881b260c-4a26-4fb7-9fec-779b3c540a94}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_SetTextureCoordinates"] = _raise_uninitialized_error
        self.__dict__["_SetPerVertexColors"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters = agcom.GUID(IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters._uuid)
        vtable_offset_local = IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters._vtable_offset - 1
        self.__dict__["_SetTextureCoordinates"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters, vtable_offset_local+1, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetPerVertexColors"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters, vtable_offset_local+2, POINTER(agcom.SAFEARRAY))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters.__dict__ and type(IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters.__dict__[attrname]) == property:
            return IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters.")
    
    def SetTextureCoordinates(self, textureCoordinates:list) -> None:
        """Defines a collection of texture coordinates."""
        with agmarshall.SAFEARRAY_arg(textureCoordinates) as arg_textureCoordinates:
            agcls.evaluate_hresult(self.__dict__["_SetTextureCoordinates"](byref(arg_textureCoordinates.COM_val)))

    def SetPerVertexColors(self, colors:list) -> None:
        """Defines a collection of colors."""
        with agmarshall.SAFEARRAY_arg(colors) as arg_colors:
            agcls.evaluate_hresult(self.__dict__["_SetPerVertexColors"](byref(arg_colors.COM_val)))


agcls.AgClassCatalog.add_catalog_entry("{881b260c-4a26-4fb7-9fec-779b3c540a94}", IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters)
agcls.AgTypeNameMap["IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters"] = IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters
__all__.append("IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters")

class IAgStkGraphicsVectorPrimitive(object):
    """Renders a vector in the 3D scene. A vector is defined by a source (given by an ISystem) and a direction (given by an IVector or IPoint). Length is auto-calculated or can be set separately."""
    _uuid = "{8244e37a-140a-40a8-9554-37dc0be9bd1b}"
    _num_methods = 28
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetLighting"] = _raise_uninitialized_error
        self.__dict__["_SetLighting"] = _raise_uninitialized_error
        self.__dict__["_GetLabel"] = _raise_uninitialized_error
        self.__dict__["_SetLabel"] = _raise_uninitialized_error
        self.__dict__["_GetDisplayLabel"] = _raise_uninitialized_error
        self.__dict__["_SetDisplayLabel"] = _raise_uninitialized_error
        self.__dict__["_GetDisplayMagnitude"] = _raise_uninitialized_error
        self.__dict__["_SetDisplayMagnitude"] = _raise_uninitialized_error
        self.__dict__["_GetDisplayRADec"] = _raise_uninitialized_error
        self.__dict__["_SetDisplayRADec"] = _raise_uninitialized_error
        self.__dict__["_GetDisplayTrace"] = _raise_uninitialized_error
        self.__dict__["_SetDisplayTrace"] = _raise_uninitialized_error
        self.__dict__["_GetDisplaySweep"] = _raise_uninitialized_error
        self.__dict__["_SetDisplaySweep"] = _raise_uninitialized_error
        self.__dict__["_GetDisplayLines"] = _raise_uninitialized_error
        self.__dict__["_SetDisplayLines"] = _raise_uninitialized_error
        self.__dict__["_GetPersistenceWidth"] = _raise_uninitialized_error
        self.__dict__["_SetPersistenceWidth"] = _raise_uninitialized_error
        self.__dict__["_GetFadePersistence"] = _raise_uninitialized_error
        self.__dict__["_SetFadePersistence"] = _raise_uninitialized_error
        self.__dict__["_GetPersistenceDuration"] = _raise_uninitialized_error
        self.__dict__["_SetPersistenceDuration"] = _raise_uninitialized_error
        self.__dict__["_GetLength"] = _raise_uninitialized_error
        self.__dict__["_SetLength"] = _raise_uninitialized_error
        self.__dict__["_GetWidth"] = _raise_uninitialized_error
        self.__dict__["_SetWidth"] = _raise_uninitialized_error
        self.__dict__["_GetTrueScale"] = _raise_uninitialized_error
        self.__dict__["_SetTrueScale"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsVectorPrimitive._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsVectorPrimitive from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsVectorPrimitive = agcom.GUID(IAgStkGraphicsVectorPrimitive._uuid)
        vtable_offset_local = IAgStkGraphicsVectorPrimitive._vtable_offset - 1
        self.__dict__["_GetLighting"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVectorPrimitive, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetLighting"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVectorPrimitive, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetLabel"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVectorPrimitive, vtable_offset_local+3, POINTER(agcom.BSTR))
        self.__dict__["_SetLabel"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVectorPrimitive, vtable_offset_local+4, agcom.BSTR)
        self.__dict__["_GetDisplayLabel"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVectorPrimitive, vtable_offset_local+5, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetDisplayLabel"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVectorPrimitive, vtable_offset_local+6, agcom.VARIANT_BOOL)
        self.__dict__["_GetDisplayMagnitude"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVectorPrimitive, vtable_offset_local+7, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetDisplayMagnitude"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVectorPrimitive, vtable_offset_local+8, agcom.VARIANT_BOOL)
        self.__dict__["_GetDisplayRADec"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVectorPrimitive, vtable_offset_local+9, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetDisplayRADec"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVectorPrimitive, vtable_offset_local+10, agcom.VARIANT_BOOL)
        self.__dict__["_GetDisplayTrace"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVectorPrimitive, vtable_offset_local+11, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetDisplayTrace"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVectorPrimitive, vtable_offset_local+12, agcom.VARIANT_BOOL)
        self.__dict__["_GetDisplaySweep"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVectorPrimitive, vtable_offset_local+13, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetDisplaySweep"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVectorPrimitive, vtable_offset_local+14, agcom.VARIANT_BOOL)
        self.__dict__["_GetDisplayLines"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVectorPrimitive, vtable_offset_local+15, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetDisplayLines"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVectorPrimitive, vtable_offset_local+16, agcom.VARIANT_BOOL)
        self.__dict__["_GetPersistenceWidth"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVectorPrimitive, vtable_offset_local+17, POINTER(agcom.DOUBLE))
        self.__dict__["_SetPersistenceWidth"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVectorPrimitive, vtable_offset_local+18, agcom.DOUBLE)
        self.__dict__["_GetFadePersistence"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVectorPrimitive, vtable_offset_local+19, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetFadePersistence"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVectorPrimitive, vtable_offset_local+20, agcom.VARIANT_BOOL)
        self.__dict__["_GetPersistenceDuration"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVectorPrimitive, vtable_offset_local+21, POINTER(agcom.DOUBLE))
        self.__dict__["_SetPersistenceDuration"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVectorPrimitive, vtable_offset_local+22, agcom.DOUBLE)
        self.__dict__["_GetLength"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVectorPrimitive, vtable_offset_local+23, POINTER(agcom.DOUBLE))
        self.__dict__["_SetLength"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVectorPrimitive, vtable_offset_local+24, agcom.DOUBLE)
        self.__dict__["_GetWidth"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVectorPrimitive, vtable_offset_local+25, POINTER(agcom.DOUBLE))
        self.__dict__["_SetWidth"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVectorPrimitive, vtable_offset_local+26, agcom.DOUBLE)
        self.__dict__["_GetTrueScale"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVectorPrimitive, vtable_offset_local+27, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetTrueScale"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVectorPrimitive, vtable_offset_local+28, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsVectorPrimitive.__dict__ and type(IAgStkGraphicsVectorPrimitive.__dict__[attrname]) == property:
            return IAgStkGraphicsVectorPrimitive.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsVectorPrimitive.")
    
    @property
    def Lighting(self) -> bool:
        """Gets or Sets whether the primitive is lit."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetLighting"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Lighting.setter
    def Lighting(self, lighting:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(lighting) as arg_lighting:
            agcls.evaluate_hresult(self.__dict__["_SetLighting"](arg_lighting.COM_val))

    @property
    def Label(self) -> str:
        """Gets or Sets the a user-defined label."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetLabel"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Label.setter
    def Label(self, label:str) -> None:
        with agmarshall.BSTR_arg(label) as arg_label:
            agcls.evaluate_hresult(self.__dict__["_SetLabel"](arg_label.COM_val))

    @property
    def DisplayLabel(self) -> bool:
        """Gets or Sets whether the vector's label is displayed."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDisplayLabel"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @DisplayLabel.setter
    def DisplayLabel(self, displayLabel:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(displayLabel) as arg_displayLabel:
            agcls.evaluate_hresult(self.__dict__["_SetDisplayLabel"](arg_displayLabel.COM_val))

    @property
    def DisplayMagnitude(self) -> bool:
        """Gets or Sets whether the vector's magnitude is displayed. Formatter controls unit conversions."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDisplayMagnitude"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @DisplayMagnitude.setter
    def DisplayMagnitude(self, displayMagnitude:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(displayMagnitude) as arg_displayMagnitude:
            agcls.evaluate_hresult(self.__dict__["_SetDisplayMagnitude"](arg_displayMagnitude.COM_val))

    @property
    def DisplayRADec(self) -> bool:
        """Gets or Sets whether the vector's RA-Dec is displayed. Formatter controls unit conversions."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDisplayRADec"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @DisplayRADec.setter
    def DisplayRADec(self, displayRADec:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(displayRADec) as arg_displayRADec:
            agcls.evaluate_hresult(self.__dict__["_SetDisplayRADec"](arg_displayRADec.COM_val))

    @property
    def DisplayTrace(self) -> bool:
        """Gets or Sets whether the persistence trace (points) is displayed."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDisplayTrace"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @DisplayTrace.setter
    def DisplayTrace(self, displayTrace:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(displayTrace) as arg_displayTrace:
            agcls.evaluate_hresult(self.__dict__["_SetDisplayTrace"](arg_displayTrace.COM_val))

    @property
    def DisplaySweep(self) -> bool:
        """Gets or Sets whether the persistence sweep (triangles) is displayed."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDisplaySweep"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @DisplaySweep.setter
    def DisplaySweep(self, displaySweep:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(displaySweep) as arg_displaySweep:
            agcls.evaluate_hresult(self.__dict__["_SetDisplaySweep"](arg_displaySweep.COM_val))

    @property
    def DisplayLines(self) -> bool:
        """Gets or Sets whether persistence lines are displayed."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDisplayLines"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @DisplayLines.setter
    def DisplayLines(self, displayLines:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(displayLines) as arg_displayLines:
            agcls.evaluate_hresult(self.__dict__["_SetDisplayLines"](arg_displayLines.COM_val))

    @property
    def PersistenceWidth(self) -> float:
        """Gets or Sets persistence point/line width."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPersistenceWidth"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @PersistenceWidth.setter
    def PersistenceWidth(self, persistenceWidth:float) -> None:
        with agmarshall.DOUBLE_arg(persistenceWidth) as arg_persistenceWidth:
            agcls.evaluate_hresult(self.__dict__["_SetPersistenceWidth"](arg_persistenceWidth.COM_val))

    @property
    def FadePersistence(self) -> bool:
        """Gets or Sets whether the persistence path should fade over time."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetFadePersistence"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @FadePersistence.setter
    def FadePersistence(self, fadePersistence:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(fadePersistence) as arg_fadePersistence:
            agcls.evaluate_hresult(self.__dict__["_SetFadePersistence"](arg_fadePersistence.COM_val))

    @property
    def PersistenceDuration(self) -> float:
        """Gets or Sets the maximum length (in seconds) of the persistence path."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPersistenceDuration"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @PersistenceDuration.setter
    def PersistenceDuration(self, persistenceDuration:float) -> None:
        with agmarshall.DOUBLE_arg(persistenceDuration) as arg_persistenceDuration:
            agcls.evaluate_hresult(self.__dict__["_SetPersistenceDuration"](arg_persistenceDuration.COM_val))

    @property
    def Length(self) -> float:
        """Gets or Sets the vector's source-to-arrow-tip length."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetLength"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Length.setter
    def Length(self, length:float) -> None:
        with agmarshall.DOUBLE_arg(length) as arg_length:
            agcls.evaluate_hresult(self.__dict__["_SetLength"](arg_length.COM_val))

    @property
    def Width(self) -> float:
        """Gets or Sets the vector's width in pixels. As the camera distances changes from this primitive, the geometry will autoscale to maintain this thickness."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetWidth"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Width.setter
    def Width(self, width:float) -> None:
        with agmarshall.DOUBLE_arg(width) as arg_width:
            agcls.evaluate_hresult(self.__dict__["_SetWidth"](arg_width.COM_val))

    @property
    def TrueScale(self) -> bool:
        """Gets or Sets whether vector's 'true scale' length (based on how the primitive was created) should be used."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTrueScale"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @TrueScale.setter
    def TrueScale(self, trueScale:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(trueScale) as arg_trueScale:
            agcls.evaluate_hresult(self.__dict__["_SetTrueScale"](arg_trueScale.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{8244e37a-140a-40a8-9554-37dc0be9bd1b}", IAgStkGraphicsVectorPrimitive)
agcls.AgTypeNameMap["IAgStkGraphicsVectorPrimitive"] = IAgStkGraphicsVectorPrimitive
__all__.append("IAgStkGraphicsVectorPrimitive")

class IAgStkGraphicsBoxTriangulatorInitializer(object):
    """Triangulates a box. It is recommended to visualize the box using a solid primitive. Although, if only the fill is desired for visualization, a triangle mesh primitive with render back then front faces set to true can be used..."""
    _uuid = "{3d49da39-dbe0-4ef9-b589-bc0cf5e78085}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Compute"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsBoxTriangulatorInitializer._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsBoxTriangulatorInitializer from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsBoxTriangulatorInitializer = agcom.GUID(IAgStkGraphicsBoxTriangulatorInitializer._uuid)
        vtable_offset_local = IAgStkGraphicsBoxTriangulatorInitializer._vtable_offset - 1
        self.__dict__["_Compute"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsBoxTriangulatorInitializer, vtable_offset_local+1, POINTER(agcom.SAFEARRAY), POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsBoxTriangulatorInitializer.__dict__ and type(IAgStkGraphicsBoxTriangulatorInitializer.__dict__[attrname]) == property:
            return IAgStkGraphicsBoxTriangulatorInitializer.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsBoxTriangulatorInitializer.")
    
    def Compute(self, size:list) -> "IAgStkGraphicsSolidTriangulatorResult":
        """Computes the triangulation for a box of the specified size, centered at the origin."""
        with agmarshall.SAFEARRAY_arg(size) as arg_size, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Compute"](byref(arg_size.COM_val), byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{3d49da39-dbe0-4ef9-b589-bc0cf5e78085}", IAgStkGraphicsBoxTriangulatorInitializer)
agcls.AgTypeNameMap["IAgStkGraphicsBoxTriangulatorInitializer"] = IAgStkGraphicsBoxTriangulatorInitializer
__all__.append("IAgStkGraphicsBoxTriangulatorInitializer")

class IAgStkGraphicsCylinderTriangulatorInitializer(object):
    """Triangulates a cylinder. It is recommended to visualize the cylinder using a solid primitive. Although, if only the fill is desired for visualization, a triangle mesh primitive with render back then front faces set to true can be used..."""
    _uuid = "{ee39d933-ce2c-4087-8c8a-f38ebe83842f}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_CreateSimple"] = _raise_uninitialized_error
        self.__dict__["_Compute"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsCylinderTriangulatorInitializer._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsCylinderTriangulatorInitializer from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsCylinderTriangulatorInitializer = agcom.GUID(IAgStkGraphicsCylinderTriangulatorInitializer._uuid)
        vtable_offset_local = IAgStkGraphicsCylinderTriangulatorInitializer._vtable_offset - 1
        self.__dict__["_CreateSimple"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCylinderTriangulatorInitializer, vtable_offset_local+1, agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID))
        self.__dict__["_Compute"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCylinderTriangulatorInitializer, vtable_offset_local+2, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, agcom.INT, agcom.LONG, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsCylinderTriangulatorInitializer.__dict__ and type(IAgStkGraphicsCylinderTriangulatorInitializer.__dict__[attrname]) == property:
            return IAgStkGraphicsCylinderTriangulatorInitializer.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsCylinderTriangulatorInitializer.")
    
    def CreateSimple(self, length:float, radius:float) -> "IAgStkGraphicsSolidTriangulatorResult":
        """Computes the triangulation for a cylinder centered at the origin."""
        with agmarshall.DOUBLE_arg(length) as arg_length, \
             agmarshall.DOUBLE_arg(radius) as arg_radius, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_CreateSimple"](arg_length.COM_val, arg_radius.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def Compute(self, length:float, bottomRadius:float, topRadius:float, slices:int, cylinderFill:"AgEStkGraphicsCylinderFill") -> "IAgStkGraphicsSolidTriangulatorResult":
        """Computes the triangulation for a cylinder centered at the origin."""
        with agmarshall.DOUBLE_arg(length) as arg_length, \
             agmarshall.DOUBLE_arg(bottomRadius) as arg_bottomRadius, \
             agmarshall.DOUBLE_arg(topRadius) as arg_topRadius, \
             agmarshall.INT_arg(slices) as arg_slices, \
             agmarshall.AgEnum_arg(AgEStkGraphicsCylinderFill, cylinderFill) as arg_cylinderFill, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Compute"](arg_length.COM_val, arg_bottomRadius.COM_val, arg_topRadius.COM_val, arg_slices.COM_val, arg_cylinderFill.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{ee39d933-ce2c-4087-8c8a-f38ebe83842f}", IAgStkGraphicsCylinderTriangulatorInitializer)
agcls.AgTypeNameMap["IAgStkGraphicsCylinderTriangulatorInitializer"] = IAgStkGraphicsCylinderTriangulatorInitializer
__all__.append("IAgStkGraphicsCylinderTriangulatorInitializer")

class IAgStkGraphicsEllipsoidTriangulatorInitializer(object):
    """Triangulates an ellipsoid. It is recommended to visualize the ellipsoid using a solid primitive. Although, if only the fill is desired for visualization, a triangle mesh primitive with render back then front faces set to true can be used..."""
    _uuid = "{8c50173b-e1e0-4321-aeac-5c75e4ef323f}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_ComputeSimple"] = _raise_uninitialized_error
        self.__dict__["_Compute"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsEllipsoidTriangulatorInitializer._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsEllipsoidTriangulatorInitializer from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsEllipsoidTriangulatorInitializer = agcom.GUID(IAgStkGraphicsEllipsoidTriangulatorInitializer._uuid)
        vtable_offset_local = IAgStkGraphicsEllipsoidTriangulatorInitializer._vtable_offset - 1
        self.__dict__["_ComputeSimple"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsEllipsoidTriangulatorInitializer, vtable_offset_local+1, POINTER(agcom.SAFEARRAY), POINTER(agcom.PVOID))
        self.__dict__["_Compute"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsEllipsoidTriangulatorInitializer, vtable_offset_local+2, POINTER(agcom.SAFEARRAY), agcom.INT, agcom.INT, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsEllipsoidTriangulatorInitializer.__dict__ and type(IAgStkGraphicsEllipsoidTriangulatorInitializer.__dict__[attrname]) == property:
            return IAgStkGraphicsEllipsoidTriangulatorInitializer.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsEllipsoidTriangulatorInitializer.")
    
    def ComputeSimple(self, radii:list) -> "IAgStkGraphicsSolidTriangulatorResult":
        """Computes the triangulation for an ellipsoid with the specified radii, centered at the origin, using 32 slices and 16 stacks."""
        with agmarshall.SAFEARRAY_arg(radii) as arg_radii, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_ComputeSimple"](byref(arg_radii.COM_val), byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def Compute(self, radii:list, slices:int, stacks:int) -> "IAgStkGraphicsSolidTriangulatorResult":
        """Computes the triangulation for an ellipsoid with the specified radii, centered at the origin."""
        with agmarshall.SAFEARRAY_arg(radii) as arg_radii, \
             agmarshall.INT_arg(slices) as arg_slices, \
             agmarshall.INT_arg(stacks) as arg_stacks, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Compute"](byref(arg_radii.COM_val), arg_slices.COM_val, arg_stacks.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{8c50173b-e1e0-4321-aeac-5c75e4ef323f}", IAgStkGraphicsEllipsoidTriangulatorInitializer)
agcls.AgTypeNameMap["IAgStkGraphicsEllipsoidTriangulatorInitializer"] = IAgStkGraphicsEllipsoidTriangulatorInitializer
__all__.append("IAgStkGraphicsEllipsoidTriangulatorInitializer")

class IAgStkGraphicsExtrudedPolylineTriangulatorInitializer(object):
    """Triangulates a polyline into an extrusion with bottom and top boundaries."""
    _uuid = "{b6b79988-0b1f-4b6e-8970-ff86b6d94b36}"
    _num_methods = 12
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Compute"] = _raise_uninitialized_error
        self.__dict__["_ComputeWithWindingOrder"] = _raise_uninitialized_error
        self.__dict__["_ComputeCartographic"] = _raise_uninitialized_error
        self.__dict__["_ComputeCartographicWithWindingOrder"] = _raise_uninitialized_error
        self.__dict__["_ComputeWithAltitudes"] = _raise_uninitialized_error
        self.__dict__["_ComputeWithAltitudesAndWindingOrder"] = _raise_uninitialized_error
        self.__dict__["_ComputeCartographicWithAltitudes"] = _raise_uninitialized_error
        self.__dict__["_ComputeCartographicWithAltitudesAndWindingOrder"] = _raise_uninitialized_error
        self.__dict__["_ComputeSingleConstantAltitude"] = _raise_uninitialized_error
        self.__dict__["_ComputeSingleConstantAltitudeWithWindingOrder"] = _raise_uninitialized_error
        self.__dict__["_ComputeSingleConstantAltitudeCartographic"] = _raise_uninitialized_error
        self.__dict__["_ComputeSingleConstantAltitudeCartographicWithWindingOrder"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsExtrudedPolylineTriangulatorInitializer._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsExtrudedPolylineTriangulatorInitializer from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsExtrudedPolylineTriangulatorInitializer = agcom.GUID(IAgStkGraphicsExtrudedPolylineTriangulatorInitializer._uuid)
        vtable_offset_local = IAgStkGraphicsExtrudedPolylineTriangulatorInitializer._vtable_offset - 1
        self.__dict__["_Compute"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsExtrudedPolylineTriangulatorInitializer, vtable_offset_local+1, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), POINTER(agcom.PVOID))
        self.__dict__["_ComputeWithWindingOrder"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsExtrudedPolylineTriangulatorInitializer, vtable_offset_local+2, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_ComputeCartographic"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsExtrudedPolylineTriangulatorInitializer, vtable_offset_local+3, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), POINTER(agcom.PVOID))
        self.__dict__["_ComputeCartographicWithWindingOrder"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsExtrudedPolylineTriangulatorInitializer, vtable_offset_local+4, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_ComputeWithAltitudes"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsExtrudedPolylineTriangulatorInitializer, vtable_offset_local+5, agcom.BSTR, POINTER(agcom.SAFEARRAY), agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID))
        self.__dict__["_ComputeWithAltitudesAndWindingOrder"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsExtrudedPolylineTriangulatorInitializer, vtable_offset_local+6, agcom.BSTR, POINTER(agcom.SAFEARRAY), agcom.DOUBLE, agcom.DOUBLE, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_ComputeCartographicWithAltitudes"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsExtrudedPolylineTriangulatorInitializer, vtable_offset_local+7, agcom.BSTR, POINTER(agcom.SAFEARRAY), agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID))
        self.__dict__["_ComputeCartographicWithAltitudesAndWindingOrder"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsExtrudedPolylineTriangulatorInitializer, vtable_offset_local+8, agcom.BSTR, POINTER(agcom.SAFEARRAY), agcom.DOUBLE, agcom.DOUBLE, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_ComputeSingleConstantAltitude"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsExtrudedPolylineTriangulatorInitializer, vtable_offset_local+9, agcom.BSTR, POINTER(agcom.SAFEARRAY), agcom.DOUBLE, POINTER(agcom.PVOID))
        self.__dict__["_ComputeSingleConstantAltitudeWithWindingOrder"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsExtrudedPolylineTriangulatorInitializer, vtable_offset_local+10, agcom.BSTR, POINTER(agcom.SAFEARRAY), agcom.DOUBLE, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_ComputeSingleConstantAltitudeCartographic"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsExtrudedPolylineTriangulatorInitializer, vtable_offset_local+11, agcom.BSTR, POINTER(agcom.SAFEARRAY), agcom.DOUBLE, POINTER(agcom.PVOID))
        self.__dict__["_ComputeSingleConstantAltitudeCartographicWithWindingOrder"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsExtrudedPolylineTriangulatorInitializer, vtable_offset_local+12, agcom.BSTR, POINTER(agcom.SAFEARRAY), agcom.DOUBLE, agcom.LONG, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsExtrudedPolylineTriangulatorInitializer.__dict__ and type(IAgStkGraphicsExtrudedPolylineTriangulatorInitializer.__dict__[attrname]) == property:
            return IAgStkGraphicsExtrudedPolylineTriangulatorInitializer.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsExtrudedPolylineTriangulatorInitializer.")
    
    def Compute(self, centralBody:str, bottomPositions:list, topPositions:list) -> "IAgStkGraphicsExtrudedPolylineTriangulatorResult":
        """Computes an extrusion between bottomPositions and topPositions on the specified centralBody. This is equivalent to calling Compute with a positionsWindingOrder of compute."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(bottomPositions) as arg_bottomPositions, \
             agmarshall.SAFEARRAY_arg(topPositions) as arg_topPositions, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Compute"](arg_centralBody.COM_val, byref(arg_bottomPositions.COM_val), byref(arg_topPositions.COM_val), byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def ComputeWithWindingOrder(self, centralBody:str, bottomPositions:list, topPositions:list, positionsWindingOrder:"AgEStkGraphicsWindingOrder") -> "IAgStkGraphicsExtrudedPolylineTriangulatorResult":
        """Computes an extrusion between bottomPositions and topPositions on the specified centralBody."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(bottomPositions) as arg_bottomPositions, \
             agmarshall.SAFEARRAY_arg(topPositions) as arg_topPositions, \
             agmarshall.AgEnum_arg(AgEStkGraphicsWindingOrder, positionsWindingOrder) as arg_positionsWindingOrder, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_ComputeWithWindingOrder"](arg_centralBody.COM_val, byref(arg_bottomPositions.COM_val), byref(arg_topPositions.COM_val), arg_positionsWindingOrder.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def ComputeCartographic(self, centralBody:str, bottomPositions:list, topPositions:list) -> "IAgStkGraphicsExtrudedPolylineTriangulatorResult":
        """For convenience. Computes an extrusion between bottomPositions and topPositions on the specified centralBody using cartographic positions. This is equivalent to converting each position in bottomPositions and topPositions to cartesian and calling Compute"""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(bottomPositions) as arg_bottomPositions, \
             agmarshall.SAFEARRAY_arg(topPositions) as arg_topPositions, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_ComputeCartographic"](arg_centralBody.COM_val, byref(arg_bottomPositions.COM_val), byref(arg_topPositions.COM_val), byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def ComputeCartographicWithWindingOrder(self, centralBody:str, bottomPositions:list, topPositions:list, positionsWindingOrder:"AgEStkGraphicsWindingOrder") -> "IAgStkGraphicsExtrudedPolylineTriangulatorResult":
        """For convenience. Computes an extrusion between bottomPositions and topPositions on the specified centralBody using cartographic positions. This is equivalent to converting each position in bottomPositions and topPositions to cartesian and calling Compute"""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(bottomPositions) as arg_bottomPositions, \
             agmarshall.SAFEARRAY_arg(topPositions) as arg_topPositions, \
             agmarshall.AgEnum_arg(AgEStkGraphicsWindingOrder, positionsWindingOrder) as arg_positionsWindingOrder, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_ComputeCartographicWithWindingOrder"](arg_centralBody.COM_val, byref(arg_bottomPositions.COM_val), byref(arg_topPositions.COM_val), arg_positionsWindingOrder.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def ComputeWithAltitudes(self, centralBody:str, positions:list, bottomAltitude:float, topAltitude:float) -> "IAgStkGraphicsExtrudedPolylineTriangulatorResult":
        """Computes an extrusion of positions on the specified centralBody with a constant bottomAltitude and topAltitude. This is equivalent to calling Compute with a positionsWindingOrder of compute."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.DOUBLE_arg(bottomAltitude) as arg_bottomAltitude, \
             agmarshall.DOUBLE_arg(topAltitude) as arg_topAltitude, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_ComputeWithAltitudes"](arg_centralBody.COM_val, byref(arg_positions.COM_val), arg_bottomAltitude.COM_val, arg_topAltitude.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def ComputeWithAltitudesAndWindingOrder(self, centralBody:str, positions:list, bottomAltitude:float, topAltitude:float, positionsWindingOrder:"AgEStkGraphicsWindingOrder") -> "IAgStkGraphicsExtrudedPolylineTriangulatorResult":
        """Computes an extrusion of positions on the specified centralBody with a constant bottomAltitude and topAltitude."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.DOUBLE_arg(bottomAltitude) as arg_bottomAltitude, \
             agmarshall.DOUBLE_arg(topAltitude) as arg_topAltitude, \
             agmarshall.AgEnum_arg(AgEStkGraphicsWindingOrder, positionsWindingOrder) as arg_positionsWindingOrder, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_ComputeWithAltitudesAndWindingOrder"](arg_centralBody.COM_val, byref(arg_positions.COM_val), arg_bottomAltitude.COM_val, arg_topAltitude.COM_val, arg_positionsWindingOrder.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def ComputeCartographicWithAltitudes(self, centralBody:str, positions:list, bottomAltitude:float, topAltitude:float) -> "IAgStkGraphicsExtrudedPolylineTriangulatorResult":
        """For convenience. Computes an extrusion of positions on the specified centralBody with a constant bottomAltitude and topAltitude using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling Compute"""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.DOUBLE_arg(bottomAltitude) as arg_bottomAltitude, \
             agmarshall.DOUBLE_arg(topAltitude) as arg_topAltitude, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_ComputeCartographicWithAltitudes"](arg_centralBody.COM_val, byref(arg_positions.COM_val), arg_bottomAltitude.COM_val, arg_topAltitude.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def ComputeCartographicWithAltitudesAndWindingOrder(self, centralBody:str, positions:list, bottomAltitude:float, topAltitude:float, positionsWindingOrder:"AgEStkGraphicsWindingOrder") -> "IAgStkGraphicsExtrudedPolylineTriangulatorResult":
        """For convenience. Computes an extrusion of positions on the specified centralBody with a constant bottomAltitude and topAltitude using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling Compute"""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.DOUBLE_arg(bottomAltitude) as arg_bottomAltitude, \
             agmarshall.DOUBLE_arg(topAltitude) as arg_topAltitude, \
             agmarshall.AgEnum_arg(AgEStkGraphicsWindingOrder, positionsWindingOrder) as arg_positionsWindingOrder, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_ComputeCartographicWithAltitudesAndWindingOrder"](arg_centralBody.COM_val, byref(arg_positions.COM_val), arg_bottomAltitude.COM_val, arg_topAltitude.COM_val, arg_positionsWindingOrder.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def ComputeSingleConstantAltitude(self, centralBody:str, positions:list, altitude:float) -> "IAgStkGraphicsExtrudedPolylineTriangulatorResult":
        """Computes an extrusion of positions on the specified centralBody. One side of the extrusion has a constant altitude and the other has the original altitudes from positions..."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.DOUBLE_arg(altitude) as arg_altitude, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_ComputeSingleConstantAltitude"](arg_centralBody.COM_val, byref(arg_positions.COM_val), arg_altitude.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def ComputeSingleConstantAltitudeWithWindingOrder(self, centralBody:str, positions:list, altitude:float, positionsWindingOrder:"AgEStkGraphicsWindingOrder") -> "IAgStkGraphicsExtrudedPolylineTriangulatorResult":
        """Computes an extrusion of positions on the specified centralBody. One side of the extrusion has a constant altitude and the other has the original altitudes from positions."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.DOUBLE_arg(altitude) as arg_altitude, \
             agmarshall.AgEnum_arg(AgEStkGraphicsWindingOrder, positionsWindingOrder) as arg_positionsWindingOrder, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_ComputeSingleConstantAltitudeWithWindingOrder"](arg_centralBody.COM_val, byref(arg_positions.COM_val), arg_altitude.COM_val, arg_positionsWindingOrder.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def ComputeSingleConstantAltitudeCartographic(self, centralBody:str, positions:list, altitude:float) -> "IAgStkGraphicsExtrudedPolylineTriangulatorResult":
        """For convenience. Computes an extrusion of positions on the specified centralBody using cartographic positions. One side of the extrusion has a constant altitude and the other has the original altitudes from positions..."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.DOUBLE_arg(altitude) as arg_altitude, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_ComputeSingleConstantAltitudeCartographic"](arg_centralBody.COM_val, byref(arg_positions.COM_val), arg_altitude.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def ComputeSingleConstantAltitudeCartographicWithWindingOrder(self, centralBody:str, positions:list, altitude:float, positionsWindingOrder:"AgEStkGraphicsWindingOrder") -> "IAgStkGraphicsExtrudedPolylineTriangulatorResult":
        """For convenience. Computes an extrusion of positions on the specified centralBody using cartographic positions. One side of the extrusion has a constant altitude and the other has the original altitudes from positions..."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.DOUBLE_arg(altitude) as arg_altitude, \
             agmarshall.AgEnum_arg(AgEStkGraphicsWindingOrder, positionsWindingOrder) as arg_positionsWindingOrder, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_ComputeSingleConstantAltitudeCartographicWithWindingOrder"](arg_centralBody.COM_val, byref(arg_positions.COM_val), arg_altitude.COM_val, arg_positionsWindingOrder.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{b6b79988-0b1f-4b6e-8970-ff86b6d94b36}", IAgStkGraphicsExtrudedPolylineTriangulatorInitializer)
agcls.AgTypeNameMap["IAgStkGraphicsExtrudedPolylineTriangulatorInitializer"] = IAgStkGraphicsExtrudedPolylineTriangulatorInitializer
__all__.append("IAgStkGraphicsExtrudedPolylineTriangulatorInitializer")

class IAgStkGraphicsSurfaceExtentTriangulatorInitializer(object):
    """Triangulates an extent on a central body into a triangle mesh and a surrounding boundary. The mesh is commonly visualized with the triangle mesh primitive or surface mesh primitive. The boundary is commonly visualized with the polyline primitive."""
    _uuid = "{74b85e21-b114-46b6-820d-2be8adc7ea7a}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_ComputeSimple"] = _raise_uninitialized_error
        self.__dict__["_Compute"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsSurfaceExtentTriangulatorInitializer._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsSurfaceExtentTriangulatorInitializer from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsSurfaceExtentTriangulatorInitializer = agcom.GUID(IAgStkGraphicsSurfaceExtentTriangulatorInitializer._uuid)
        vtable_offset_local = IAgStkGraphicsSurfaceExtentTriangulatorInitializer._vtable_offset - 1
        self.__dict__["_ComputeSimple"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSurfaceExtentTriangulatorInitializer, vtable_offset_local+1, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.PVOID))
        self.__dict__["_Compute"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSurfaceExtentTriangulatorInitializer, vtable_offset_local+2, agcom.BSTR, POINTER(agcom.SAFEARRAY), agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsSurfaceExtentTriangulatorInitializer.__dict__ and type(IAgStkGraphicsSurfaceExtentTriangulatorInitializer.__dict__[attrname]) == property:
            return IAgStkGraphicsSurfaceExtentTriangulatorInitializer.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsSurfaceExtentTriangulatorInitializer.")
    
    def ComputeSimple(self, centralBody:str, extent:list) -> "IAgStkGraphicsSurfaceTriangulatorResult":
        """Computes a triangulation on the specified centralBody for the specified extent. This is equivalent to calling Compute with an altitude of 0 and a granularity of 1 degree."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(extent) as arg_extent, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_ComputeSimple"](arg_centralBody.COM_val, byref(arg_extent.COM_val), byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def Compute(self, centralBody:str, extent:list, altitude:float, granularity:float) -> "IAgStkGraphicsSurfaceTriangulatorResult":
        """Computes a triangulation on the specified centralBody for the specified extent."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(extent) as arg_extent, \
             agmarshall.DOUBLE_arg(altitude) as arg_altitude, \
             agmarshall.DOUBLE_arg(granularity) as arg_granularity, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Compute"](arg_centralBody.COM_val, byref(arg_extent.COM_val), arg_altitude.COM_val, arg_granularity.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{74b85e21-b114-46b6-820d-2be8adc7ea7a}", IAgStkGraphicsSurfaceExtentTriangulatorInitializer)
agcls.AgTypeNameMap["IAgStkGraphicsSurfaceExtentTriangulatorInitializer"] = IAgStkGraphicsSurfaceExtentTriangulatorInitializer
__all__.append("IAgStkGraphicsSurfaceExtentTriangulatorInitializer")

class IAgStkGraphicsSurfacePolygonTriangulatorInitializer(object):
    """Triangulates a polygon, with an optional hole, on a central body, into a triangle mesh and a surrounding boundary. The mesh is commonly visualized with the triangle mesh primitive or surface mesh primitive..."""
    _uuid = "{52654c8a-3c27-415f-b346-c0e433241b49}"
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Compute"] = _raise_uninitialized_error
        self.__dict__["_ComputeCartographic"] = _raise_uninitialized_error
        self.__dict__["_ComputeWithHole"] = _raise_uninitialized_error
        self.__dict__["_ComputeWithHoleAltitudeAndGranularity"] = _raise_uninitialized_error
        self.__dict__["_ComputeWithAltitudeAndGranularity"] = _raise_uninitialized_error
        self.__dict__["_ComputeCartographicWithAltitudeAndGranularity"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsSurfacePolygonTriangulatorInitializer._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsSurfacePolygonTriangulatorInitializer from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsSurfacePolygonTriangulatorInitializer = agcom.GUID(IAgStkGraphicsSurfacePolygonTriangulatorInitializer._uuid)
        vtable_offset_local = IAgStkGraphicsSurfacePolygonTriangulatorInitializer._vtable_offset - 1
        self.__dict__["_Compute"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSurfacePolygonTriangulatorInitializer, vtable_offset_local+1, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.PVOID))
        self.__dict__["_ComputeCartographic"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSurfacePolygonTriangulatorInitializer, vtable_offset_local+2, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.PVOID))
        self.__dict__["_ComputeWithHole"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSurfacePolygonTriangulatorInitializer, vtable_offset_local+3, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), POINTER(agcom.PVOID))
        self.__dict__["_ComputeWithHoleAltitudeAndGranularity"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSurfacePolygonTriangulatorInitializer, vtable_offset_local+4, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID))
        self.__dict__["_ComputeWithAltitudeAndGranularity"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSurfacePolygonTriangulatorInitializer, vtable_offset_local+5, agcom.BSTR, POINTER(agcom.SAFEARRAY), agcom.DOUBLE, agcom.DOUBLE, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_ComputeCartographicWithAltitudeAndGranularity"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSurfacePolygonTriangulatorInitializer, vtable_offset_local+6, agcom.BSTR, POINTER(agcom.SAFEARRAY), agcom.DOUBLE, agcom.DOUBLE, agcom.LONG, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsSurfacePolygonTriangulatorInitializer.__dict__ and type(IAgStkGraphicsSurfacePolygonTriangulatorInitializer.__dict__[attrname]) == property:
            return IAgStkGraphicsSurfacePolygonTriangulatorInitializer.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsSurfacePolygonTriangulatorInitializer.")
    
    def Compute(self, centralBody:str, positions:list) -> "IAgStkGraphicsSurfaceTriangulatorResult":
        """Computes the triangulation on the specified centralBody for a polygon whose boundary is defined by the specified positions. This is equivalent to calling Compute with an altitude of 0, a granularity of 1 degree, and a positionsWindingOrder of compute."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Compute"](arg_centralBody.COM_val, byref(arg_positions.COM_val), byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def ComputeCartographic(self, centralBody:str, positions:list) -> "IAgStkGraphicsSurfaceTriangulatorResult":
        """For convenience. Computes the triangulation on the specified centralBody for a polygon whose boundary is defined by the specified cartographic positions. This is equivalent to converting each position in positions to cartesian and calling Compute"""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_ComputeCartographic"](arg_centralBody.COM_val, byref(arg_positions.COM_val), byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def ComputeWithHole(self, centralBody:str, positions:list, holePositions:list) -> "IAgStkGraphicsSurfaceTriangulatorResult":
        """Computes the triangulation on the specified centralBody for a polygon whose boundary is defined by the specified positions with a hole specified by holePositions. This is equivalent to calling Compute with an altitude of 0 and a granularity of 1 degree."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(holePositions) as arg_holePositions, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_ComputeWithHole"](arg_centralBody.COM_val, byref(arg_positions.COM_val), byref(arg_holePositions.COM_val), byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def ComputeWithHoleAltitudeAndGranularity(self, centralBody:str, positions:list, holePositions:list, altitude:float, granularity:float) -> "IAgStkGraphicsSurfaceTriangulatorResult":
        """Computes the triangulation on the specified centralBody for a polygon whose boundary is defined by the specified positions with a hole specified by holePositions."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(holePositions) as arg_holePositions, \
             agmarshall.DOUBLE_arg(altitude) as arg_altitude, \
             agmarshall.DOUBLE_arg(granularity) as arg_granularity, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_ComputeWithHoleAltitudeAndGranularity"](arg_centralBody.COM_val, byref(arg_positions.COM_val), byref(arg_holePositions.COM_val), arg_altitude.COM_val, arg_granularity.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def ComputeWithAltitudeAndGranularity(self, centralBody:str, positions:list, altitude:float, granularity:float, positionsWindingOrder:"AgEStkGraphicsWindingOrder") -> "IAgStkGraphicsSurfaceTriangulatorResult":
        """Computes the triangulation on the specified centralBody for a polygon whose boundary is defined by the specified positions."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.DOUBLE_arg(altitude) as arg_altitude, \
             agmarshall.DOUBLE_arg(granularity) as arg_granularity, \
             agmarshall.AgEnum_arg(AgEStkGraphicsWindingOrder, positionsWindingOrder) as arg_positionsWindingOrder, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_ComputeWithAltitudeAndGranularity"](arg_centralBody.COM_val, byref(arg_positions.COM_val), arg_altitude.COM_val, arg_granularity.COM_val, arg_positionsWindingOrder.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def ComputeCartographicWithAltitudeAndGranularity(self, centralBody:str, positions:list, altitude:float, granularity:float, positionsWindingOrder:"AgEStkGraphicsWindingOrder") -> "IAgStkGraphicsSurfaceTriangulatorResult":
        """For convenience. Computes the triangulation on the specified centralBody for a polygon whose boundary is defined by the specified cartographic positions. This is equivalent to converting each position in positions to cartesian and calling Compute"""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.DOUBLE_arg(altitude) as arg_altitude, \
             agmarshall.DOUBLE_arg(granularity) as arg_granularity, \
             agmarshall.AgEnum_arg(AgEStkGraphicsWindingOrder, positionsWindingOrder) as arg_positionsWindingOrder, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_ComputeCartographicWithAltitudeAndGranularity"](arg_centralBody.COM_val, byref(arg_positions.COM_val), arg_altitude.COM_val, arg_granularity.COM_val, arg_positionsWindingOrder.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{52654c8a-3c27-415f-b346-c0e433241b49}", IAgStkGraphicsSurfacePolygonTriangulatorInitializer)
agcls.AgTypeNameMap["IAgStkGraphicsSurfacePolygonTriangulatorInitializer"] = IAgStkGraphicsSurfacePolygonTriangulatorInitializer
__all__.append("IAgStkGraphicsSurfacePolygonTriangulatorInitializer")

class IAgStkGraphicsSurfaceShapesInitializer(object):
    """Computes boundary positions for shapes on the surface such as circles, ellipses, and sectors."""
    _uuid = "{8b711790-8bc2-4e20-8795-89a4863a0566}"
    _num_methods = 12
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_ComputeCircleWithGranularity"] = _raise_uninitialized_error
        self.__dict__["_ComputeCircle"] = _raise_uninitialized_error
        self.__dict__["_ComputeCircleCartographicWithGranularity"] = _raise_uninitialized_error
        self.__dict__["_ComputeCircleCartographic"] = _raise_uninitialized_error
        self.__dict__["_ComputeEllipseWithGranularity"] = _raise_uninitialized_error
        self.__dict__["_ComputeEllipse"] = _raise_uninitialized_error
        self.__dict__["_ComputeEllipseCartographicWithGranularity"] = _raise_uninitialized_error
        self.__dict__["_ComputeEllipseCartographic"] = _raise_uninitialized_error
        self.__dict__["_ComputeSectorWithGranularity"] = _raise_uninitialized_error
        self.__dict__["_ComputeSector"] = _raise_uninitialized_error
        self.__dict__["_ComputeSectorCartographicWithGranularity"] = _raise_uninitialized_error
        self.__dict__["_ComputeSectorCartographic"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsSurfaceShapesInitializer._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsSurfaceShapesInitializer from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsSurfaceShapesInitializer = agcom.GUID(IAgStkGraphicsSurfaceShapesInitializer._uuid)
        vtable_offset_local = IAgStkGraphicsSurfaceShapesInitializer._vtable_offset - 1
        self.__dict__["_ComputeCircleWithGranularity"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSurfaceShapesInitializer, vtable_offset_local+1, agcom.BSTR, POINTER(agcom.SAFEARRAY), agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID))
        self.__dict__["_ComputeCircle"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSurfaceShapesInitializer, vtable_offset_local+2, agcom.BSTR, POINTER(agcom.SAFEARRAY), agcom.DOUBLE, POINTER(agcom.PVOID))
        self.__dict__["_ComputeCircleCartographicWithGranularity"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSurfaceShapesInitializer, vtable_offset_local+3, agcom.BSTR, POINTER(agcom.SAFEARRAY), agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID))
        self.__dict__["_ComputeCircleCartographic"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSurfaceShapesInitializer, vtable_offset_local+4, agcom.BSTR, POINTER(agcom.SAFEARRAY), agcom.DOUBLE, POINTER(agcom.PVOID))
        self.__dict__["_ComputeEllipseWithGranularity"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSurfaceShapesInitializer, vtable_offset_local+5, agcom.BSTR, POINTER(agcom.SAFEARRAY), agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID))
        self.__dict__["_ComputeEllipse"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSurfaceShapesInitializer, vtable_offset_local+6, agcom.BSTR, POINTER(agcom.SAFEARRAY), agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID))
        self.__dict__["_ComputeEllipseCartographicWithGranularity"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSurfaceShapesInitializer, vtable_offset_local+7, agcom.BSTR, POINTER(agcom.SAFEARRAY), agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID))
        self.__dict__["_ComputeEllipseCartographic"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSurfaceShapesInitializer, vtable_offset_local+8, agcom.BSTR, POINTER(agcom.SAFEARRAY), agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID))
        self.__dict__["_ComputeSectorWithGranularity"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSurfaceShapesInitializer, vtable_offset_local+9, agcom.BSTR, POINTER(agcom.SAFEARRAY), agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID))
        self.__dict__["_ComputeSector"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSurfaceShapesInitializer, vtable_offset_local+10, agcom.BSTR, POINTER(agcom.SAFEARRAY), agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID))
        self.__dict__["_ComputeSectorCartographicWithGranularity"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSurfaceShapesInitializer, vtable_offset_local+11, agcom.BSTR, POINTER(agcom.SAFEARRAY), agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID))
        self.__dict__["_ComputeSectorCartographic"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSurfaceShapesInitializer, vtable_offset_local+12, agcom.BSTR, POINTER(agcom.SAFEARRAY), agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsSurfaceShapesInitializer.__dict__ and type(IAgStkGraphicsSurfaceShapesInitializer.__dict__[attrname]) == property:
            return IAgStkGraphicsSurfaceShapesInitializer.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsSurfaceShapesInitializer.")
    
    def ComputeCircleWithGranularity(self, centralBody:str, center:list, radius:float, granularity:float) -> "IAgStkGraphicsSurfaceShapesResult":
        """Computes boundary positions for a circle on the specified centralBody with the specified center, radius and granularity."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(center) as arg_center, \
             agmarshall.DOUBLE_arg(radius) as arg_radius, \
             agmarshall.DOUBLE_arg(granularity) as arg_granularity, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_ComputeCircleWithGranularity"](arg_centralBody.COM_val, byref(arg_center.COM_val), arg_radius.COM_val, arg_granularity.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def ComputeCircle(self, centralBody:str, center:list, radius:float) -> "IAgStkGraphicsSurfaceShapesResult":
        """Computes boundary positions for a circle on the specified centralBody with the specified center and radius. This is equivalent to calling ComputeCircle with a granularity of 1 degree."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(center) as arg_center, \
             agmarshall.DOUBLE_arg(radius) as arg_radius, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_ComputeCircle"](arg_centralBody.COM_val, byref(arg_center.COM_val), arg_radius.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def ComputeCircleCartographicWithGranularity(self, centralBody:str, center:list, radius:float, granularity:float) -> "IAgStkGraphicsSurfaceShapesResult":
        """For convenience. Computes boundary positions for a circle on the specified centralBody using a cartographic center. This is equivalent to converting center to cartesian and calling ComputeCircle"""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(center) as arg_center, \
             agmarshall.DOUBLE_arg(radius) as arg_radius, \
             agmarshall.DOUBLE_arg(granularity) as arg_granularity, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_ComputeCircleCartographicWithGranularity"](arg_centralBody.COM_val, byref(arg_center.COM_val), arg_radius.COM_val, arg_granularity.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def ComputeCircleCartographic(self, centralBody:str, center:list, radius:float) -> "IAgStkGraphicsSurfaceShapesResult":
        """For convenience. Computes boundary positions for a circle on the specified centralBody using a cartographic center. This is equivalent to converting center to cartesian and calling ComputeCircle"""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(center) as arg_center, \
             agmarshall.DOUBLE_arg(radius) as arg_radius, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_ComputeCircleCartographic"](arg_centralBody.COM_val, byref(arg_center.COM_val), arg_radius.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def ComputeEllipseWithGranularity(self, centralBody:str, center:list, majorAxisRadius:float, minorAxisRadius:float, bearing:float, granularity:float) -> "IAgStkGraphicsSurfaceShapesResult":
        """Computes boundary positions for an ellipse on the specified centralBody."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(center) as arg_center, \
             agmarshall.DOUBLE_arg(majorAxisRadius) as arg_majorAxisRadius, \
             agmarshall.DOUBLE_arg(minorAxisRadius) as arg_minorAxisRadius, \
             agmarshall.DOUBLE_arg(bearing) as arg_bearing, \
             agmarshall.DOUBLE_arg(granularity) as arg_granularity, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_ComputeEllipseWithGranularity"](arg_centralBody.COM_val, byref(arg_center.COM_val), arg_majorAxisRadius.COM_val, arg_minorAxisRadius.COM_val, arg_bearing.COM_val, arg_granularity.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def ComputeEllipse(self, centralBody:str, center:list, majorAxisRadius:float, minorAxisRadius:float, bearing:float) -> "IAgStkGraphicsSurfaceShapesResult":
        """Computes boundary positions for an ellipse on the specified centralBody This is equivalent to calling ComputeEllipse with a granularity of 1 degree."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(center) as arg_center, \
             agmarshall.DOUBLE_arg(majorAxisRadius) as arg_majorAxisRadius, \
             agmarshall.DOUBLE_arg(minorAxisRadius) as arg_minorAxisRadius, \
             agmarshall.DOUBLE_arg(bearing) as arg_bearing, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_ComputeEllipse"](arg_centralBody.COM_val, byref(arg_center.COM_val), arg_majorAxisRadius.COM_val, arg_minorAxisRadius.COM_val, arg_bearing.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def ComputeEllipseCartographicWithGranularity(self, centralBody:str, center:list, majorAxisRadius:float, minorAxisRadius:float, bearing:float, granularity:float) -> "IAgStkGraphicsSurfaceShapesResult":
        """For convenience. Computes boundary positions for an ellipse on the specified centralBody using a cartographic center. This is equivalent to converting center to cartesian and calling ComputeEllipse"""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(center) as arg_center, \
             agmarshall.DOUBLE_arg(majorAxisRadius) as arg_majorAxisRadius, \
             agmarshall.DOUBLE_arg(minorAxisRadius) as arg_minorAxisRadius, \
             agmarshall.DOUBLE_arg(bearing) as arg_bearing, \
             agmarshall.DOUBLE_arg(granularity) as arg_granularity, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_ComputeEllipseCartographicWithGranularity"](arg_centralBody.COM_val, byref(arg_center.COM_val), arg_majorAxisRadius.COM_val, arg_minorAxisRadius.COM_val, arg_bearing.COM_val, arg_granularity.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def ComputeEllipseCartographic(self, centralBody:str, center:list, majorAxisRadius:float, minorAxisRadius:float, bearing:float) -> "IAgStkGraphicsSurfaceShapesResult":
        """For convenience. Computes boundary positions for an ellipse on the specified centralBody using a cartographic center. This is equivalent to converting center to cartesian and calling ComputeEllipse"""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(center) as arg_center, \
             agmarshall.DOUBLE_arg(majorAxisRadius) as arg_majorAxisRadius, \
             agmarshall.DOUBLE_arg(minorAxisRadius) as arg_minorAxisRadius, \
             agmarshall.DOUBLE_arg(bearing) as arg_bearing, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_ComputeEllipseCartographic"](arg_centralBody.COM_val, byref(arg_center.COM_val), arg_majorAxisRadius.COM_val, arg_minorAxisRadius.COM_val, arg_bearing.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def ComputeSectorWithGranularity(self, centralBody:str, center:list, innerRadius:float, outerRadius:float, startBearing:float, endBearing:float, granularity:float) -> "IAgStkGraphicsSurfaceShapesResult":
        """Computes boundary positions for a sector on the specified centralBody."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(center) as arg_center, \
             agmarshall.DOUBLE_arg(innerRadius) as arg_innerRadius, \
             agmarshall.DOUBLE_arg(outerRadius) as arg_outerRadius, \
             agmarshall.DOUBLE_arg(startBearing) as arg_startBearing, \
             agmarshall.DOUBLE_arg(endBearing) as arg_endBearing, \
             agmarshall.DOUBLE_arg(granularity) as arg_granularity, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_ComputeSectorWithGranularity"](arg_centralBody.COM_val, byref(arg_center.COM_val), arg_innerRadius.COM_val, arg_outerRadius.COM_val, arg_startBearing.COM_val, arg_endBearing.COM_val, arg_granularity.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def ComputeSector(self, centralBody:str, center:list, innerRadius:float, outerRadius:float, startBearing:float, endBearing:float) -> "IAgStkGraphicsSurfaceShapesResult":
        """Computes boundary positions for a sector on the specified centralBody This is equivalent to calling ComputeSector with a granularity of 1 degree."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(center) as arg_center, \
             agmarshall.DOUBLE_arg(innerRadius) as arg_innerRadius, \
             agmarshall.DOUBLE_arg(outerRadius) as arg_outerRadius, \
             agmarshall.DOUBLE_arg(startBearing) as arg_startBearing, \
             agmarshall.DOUBLE_arg(endBearing) as arg_endBearing, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_ComputeSector"](arg_centralBody.COM_val, byref(arg_center.COM_val), arg_innerRadius.COM_val, arg_outerRadius.COM_val, arg_startBearing.COM_val, arg_endBearing.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def ComputeSectorCartographicWithGranularity(self, centralBody:str, center:list, innerRadius:float, outerRadius:float, startBearing:float, endBearing:float, granularity:float) -> "IAgStkGraphicsSurfaceShapesResult":
        """For convenience. Computes boundary positions for a sector on the specified centralBody using a cartographic center. This is equivalent to converting center to cartesian and calling ComputeSector"""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(center) as arg_center, \
             agmarshall.DOUBLE_arg(innerRadius) as arg_innerRadius, \
             agmarshall.DOUBLE_arg(outerRadius) as arg_outerRadius, \
             agmarshall.DOUBLE_arg(startBearing) as arg_startBearing, \
             agmarshall.DOUBLE_arg(endBearing) as arg_endBearing, \
             agmarshall.DOUBLE_arg(granularity) as arg_granularity, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_ComputeSectorCartographicWithGranularity"](arg_centralBody.COM_val, byref(arg_center.COM_val), arg_innerRadius.COM_val, arg_outerRadius.COM_val, arg_startBearing.COM_val, arg_endBearing.COM_val, arg_granularity.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def ComputeSectorCartographic(self, centralBody:str, center:list, innerRadius:float, outerRadius:float, startBearing:float, endBearing:float) -> "IAgStkGraphicsSurfaceShapesResult":
        """For convenience. Computes boundary positions for a sector on the specified centralBody using a cartographic center. This is equivalent to converting center to cartesian and calling ComputeSector"""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(center) as arg_center, \
             agmarshall.DOUBLE_arg(innerRadius) as arg_innerRadius, \
             agmarshall.DOUBLE_arg(outerRadius) as arg_outerRadius, \
             agmarshall.DOUBLE_arg(startBearing) as arg_startBearing, \
             agmarshall.DOUBLE_arg(endBearing) as arg_endBearing, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_ComputeSectorCartographic"](arg_centralBody.COM_val, byref(arg_center.COM_val), arg_innerRadius.COM_val, arg_outerRadius.COM_val, arg_startBearing.COM_val, arg_endBearing.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{8b711790-8bc2-4e20-8795-89a4863a0566}", IAgStkGraphicsSurfaceShapesInitializer)
agcls.AgTypeNameMap["IAgStkGraphicsSurfaceShapesInitializer"] = IAgStkGraphicsSurfaceShapesInitializer
__all__.append("IAgStkGraphicsSurfaceShapesInitializer")

class IAgStkGraphicsAGICustomTerrainOverlayFactory(object):
    """A terrain overlay for handling AGI Cesium Terrain."""
    _uuid = "{1af28259-1c26-45f4-8156-079012d5bce3}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_InitializeWithString"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsAGICustomTerrainOverlayFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsAGICustomTerrainOverlayFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsAGICustomTerrainOverlayFactory = agcom.GUID(IAgStkGraphicsAGICustomTerrainOverlayFactory._uuid)
        vtable_offset_local = IAgStkGraphicsAGICustomTerrainOverlayFactory._vtable_offset - 1
        self.__dict__["_InitializeWithString"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsAGICustomTerrainOverlayFactory, vtable_offset_local+1, agcom.BSTR, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsAGICustomTerrainOverlayFactory.__dict__ and type(IAgStkGraphicsAGICustomTerrainOverlayFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsAGICustomTerrainOverlayFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsAGICustomTerrainOverlayFactory.")
    
    def InitializeWithString(self, uri:str) -> "IAgStkGraphicsAGICustomTerrainOverlay":
        """Initializes an agi custom terrain overlay with the provided values."""
        with agmarshall.BSTR_arg(uri) as arg_uri, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithString"](arg_uri.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{1af28259-1c26-45f4-8156-079012d5bce3}", IAgStkGraphicsAGICustomTerrainOverlayFactory)
agcls.AgTypeNameMap["IAgStkGraphicsAGICustomTerrainOverlayFactory"] = IAgStkGraphicsAGICustomTerrainOverlayFactory
__all__.append("IAgStkGraphicsAGICustomTerrainOverlayFactory")

class IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory(object):
    """A globe image overlay for handling AGI Processed Image (PDTTX) files."""
    _uuid = "{0d8e18a4-cda4-4b24-9ab0-2f25c83eb32e}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_InitializeWithString"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory = agcom.GUID(IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory._uuid)
        vtable_offset_local = IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory._vtable_offset - 1
        self.__dict__["_InitializeWithString"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory, vtable_offset_local+1, agcom.BSTR, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory.__dict__ and type(IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory.")
    
    def InitializeWithString(self, uri:str) -> "IAgStkGraphicsAGIProcessedImageGlobeOverlay":
        """Initializes an agi processed image globe overlay with the provided values."""
        with agmarshall.BSTR_arg(uri) as arg_uri, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithString"](arg_uri.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{0d8e18a4-cda4-4b24-9ab0-2f25c83eb32e}", IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory)
agcls.AgTypeNameMap["IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory"] = IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory
__all__.append("IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory")

class IAgStkGraphicsAGIProcessedTerrainOverlayFactory(object):
    """A terrain overlay for handling AGI Processed Terrain (PDTT) files."""
    _uuid = "{dfeee7d8-cd40-43a5-b168-843f26b027ea}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_InitializeWithString"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsAGIProcessedTerrainOverlayFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsAGIProcessedTerrainOverlayFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsAGIProcessedTerrainOverlayFactory = agcom.GUID(IAgStkGraphicsAGIProcessedTerrainOverlayFactory._uuid)
        vtable_offset_local = IAgStkGraphicsAGIProcessedTerrainOverlayFactory._vtable_offset - 1
        self.__dict__["_InitializeWithString"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsAGIProcessedTerrainOverlayFactory, vtable_offset_local+1, agcom.BSTR, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsAGIProcessedTerrainOverlayFactory.__dict__ and type(IAgStkGraphicsAGIProcessedTerrainOverlayFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsAGIProcessedTerrainOverlayFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsAGIProcessedTerrainOverlayFactory.")
    
    def InitializeWithString(self, uri:str) -> "IAgStkGraphicsAGIProcessedTerrainOverlay":
        """Initializes an agi processed terrain overlay with the provided values."""
        with agmarshall.BSTR_arg(uri) as arg_uri, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithString"](arg_uri.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{dfeee7d8-cd40-43a5-b168-843f26b027ea}", IAgStkGraphicsAGIProcessedTerrainOverlayFactory)
agcls.AgTypeNameMap["IAgStkGraphicsAGIProcessedTerrainOverlayFactory"] = IAgStkGraphicsAGIProcessedTerrainOverlayFactory
__all__.append("IAgStkGraphicsAGIProcessedTerrainOverlayFactory")

class IAgStkGraphicsAGIRoamImageGlobeOverlayFactory(object):
    """A globe image overlay for handling ROAM (TXM/TXB) files."""
    _uuid = "{709d626f-1b45-448d-ad5c-1ff3cb17410e}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_InitializeWithString"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsAGIRoamImageGlobeOverlayFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsAGIRoamImageGlobeOverlayFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsAGIRoamImageGlobeOverlayFactory = agcom.GUID(IAgStkGraphicsAGIRoamImageGlobeOverlayFactory._uuid)
        vtable_offset_local = IAgStkGraphicsAGIRoamImageGlobeOverlayFactory._vtable_offset - 1
        self.__dict__["_InitializeWithString"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsAGIRoamImageGlobeOverlayFactory, vtable_offset_local+1, agcom.BSTR, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsAGIRoamImageGlobeOverlayFactory.__dict__ and type(IAgStkGraphicsAGIRoamImageGlobeOverlayFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsAGIRoamImageGlobeOverlayFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsAGIRoamImageGlobeOverlayFactory.")
    
    def InitializeWithString(self, uri:str) -> "IAgStkGraphicsAGIRoamImageGlobeOverlay":
        """Initializes an agi roam image globe overlay with the provided values."""
        with agmarshall.BSTR_arg(uri) as arg_uri, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithString"](arg_uri.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{709d626f-1b45-448d-ad5c-1ff3cb17410e}", IAgStkGraphicsAGIRoamImageGlobeOverlayFactory)
agcls.AgTypeNameMap["IAgStkGraphicsAGIRoamImageGlobeOverlayFactory"] = IAgStkGraphicsAGIRoamImageGlobeOverlayFactory
__all__.append("IAgStkGraphicsAGIRoamImageGlobeOverlayFactory")

class IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory(object):
    """The Activator class provides methods to load COM plugins that implement custom image globe overlays. For more information about custom image globe overlays, see the STK Programming Interface."""
    _uuid = "{c80d1ae6-db35-4f55-a9a4-131260022535}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory = agcom.GUID(IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory._uuid)
        vtable_offset_local = IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory.__dict__ and type(IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory.")
    
    def Initialize(self) -> "IAgStkGraphicsCustomImageGlobeOverlayPluginActivator":
        """Initializes a new instance of the Activator type."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{c80d1ae6-db35-4f55-a9a4-131260022535}", IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory)
agcls.AgTypeNameMap["IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory"] = IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory
__all__.append("IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory")

class IAgStkGraphicsGeospatialImageGlobeOverlayFactory(object):
    """A globe image overlay for handling <a href='http://www.jpeg.org/jpeg2000/'>JPEG 2000</a> (.jp2), ECW (.ecw), ECWP, and MrSid (.sid) image formats in the WGS84 geographic projection."""
    _uuid = "{77060b41-7b24-4118-ab48-22efb3007c76}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_InitializeWithString"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsGeospatialImageGlobeOverlayFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsGeospatialImageGlobeOverlayFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsGeospatialImageGlobeOverlayFactory = agcom.GUID(IAgStkGraphicsGeospatialImageGlobeOverlayFactory._uuid)
        vtable_offset_local = IAgStkGraphicsGeospatialImageGlobeOverlayFactory._vtable_offset - 1
        self.__dict__["_InitializeWithString"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsGeospatialImageGlobeOverlayFactory, vtable_offset_local+1, agcom.BSTR, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsGeospatialImageGlobeOverlayFactory.__dict__ and type(IAgStkGraphicsGeospatialImageGlobeOverlayFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsGeospatialImageGlobeOverlayFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsGeospatialImageGlobeOverlayFactory.")
    
    def InitializeWithString(self, uri:str) -> "IAgStkGraphicsGeospatialImageGlobeOverlay":
        """Initializes a geospatial image globe overlay with the provided values."""
        with agmarshall.BSTR_arg(uri) as arg_uri, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithString"](arg_uri.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{77060b41-7b24-4118-ab48-22efb3007c76}", IAgStkGraphicsGeospatialImageGlobeOverlayFactory)
agcls.AgTypeNameMap["IAgStkGraphicsGeospatialImageGlobeOverlayFactory"] = IAgStkGraphicsGeospatialImageGlobeOverlayFactory
__all__.append("IAgStkGraphicsGeospatialImageGlobeOverlayFactory")

class IAgStkGraphicsProjectedRasterOverlayFactory(object):
    """A globe image overlay which projects a raster onto the terrain or surface of the central body. You can also enable projection onto models by setting projected raster model projection to true for a Scene..."""
    _uuid = "{616abf78-55f7-41a7-a6b7-2da4ae822856}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_GetSupported"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsProjectedRasterOverlayFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsProjectedRasterOverlayFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsProjectedRasterOverlayFactory = agcom.GUID(IAgStkGraphicsProjectedRasterOverlayFactory._uuid)
        vtable_offset_local = IAgStkGraphicsProjectedRasterOverlayFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsProjectedRasterOverlayFactory, vtable_offset_local+1, agcom.PVOID, agcom.PVOID, POINTER(agcom.PVOID))
        self.__dict__["_GetSupported"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsProjectedRasterOverlayFactory, vtable_offset_local+2, POINTER(agcom.VARIANT_BOOL))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsProjectedRasterOverlayFactory.__dict__ and type(IAgStkGraphicsProjectedRasterOverlayFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsProjectedRasterOverlayFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsProjectedRasterOverlayFactory.")
    
    def Initialize(self, raster:"IAgStkGraphicsRaster", projection:"IAgStkGraphicsProjection") -> "IAgStkGraphicsProjectedRasterOverlay":
        """Initializes a new instance."""
        with agmarshall.AgInterface_in_arg(raster, IAgStkGraphicsRaster) as arg_raster, \
             agmarshall.AgInterface_in_arg(projection, IAgStkGraphicsProjection) as arg_projection, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](arg_raster.COM_val, arg_projection.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Supported(self) -> bool:
        """Gets whether or not the video card supports the projected raster overlay."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSupported"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{616abf78-55f7-41a7-a6b7-2da4ae822856}", IAgStkGraphicsProjectedRasterOverlayFactory)
agcls.AgTypeNameMap["IAgStkGraphicsProjectedRasterOverlayFactory"] = IAgStkGraphicsProjectedRasterOverlayFactory
__all__.append("IAgStkGraphicsProjectedRasterOverlayFactory")

class IAgStkGraphicsProjectionFactory(object):
    """A projection represents a simplified camera with a position, orientation, and field of view horizontal and field of view vertical..."""
    _uuid = "{db047d3d-5afd-4b64-b396-034fd95ec57a}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithData"] = _raise_uninitialized_error
        self.__dict__["_InitializeFromProjection"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsProjectionFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsProjectionFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsProjectionFactory = agcom.GUID(IAgStkGraphicsProjectionFactory._uuid)
        vtable_offset_local = IAgStkGraphicsProjectionFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsProjectionFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithData"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsProjectionFactory, vtable_offset_local+2, POINTER(agcom.SAFEARRAY), agcom.PVOID, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID))
        self.__dict__["_InitializeFromProjection"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsProjectionFactory, vtable_offset_local+3, agcom.PVOID, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsProjectionFactory.__dict__ and type(IAgStkGraphicsProjectionFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsProjectionFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsProjectionFactory.")
    
    def Initialize(self) -> "IAgStkGraphicsProjection":
        """Initializes a new instance."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithData(self, position:list, orientation:"IAgOrientation", fieldOfViewHorizontal:float, fieldOfViewVertical:float, nearPlane:float, farPlane:float) -> "IAgStkGraphicsProjection":
        """Initializes a new instance."""
        with agmarshall.SAFEARRAY_arg(position) as arg_position, \
             agmarshall.AgInterface_in_arg(orientation, IAgOrientation) as arg_orientation, \
             agmarshall.DOUBLE_arg(fieldOfViewHorizontal) as arg_fieldOfViewHorizontal, \
             agmarshall.DOUBLE_arg(fieldOfViewVertical) as arg_fieldOfViewVertical, \
             agmarshall.DOUBLE_arg(nearPlane) as arg_nearPlane, \
             agmarshall.DOUBLE_arg(farPlane) as arg_farPlane, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithData"](byref(arg_position.COM_val), arg_orientation.COM_val, arg_fieldOfViewHorizontal.COM_val, arg_fieldOfViewVertical.COM_val, arg_nearPlane.COM_val, arg_farPlane.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeFromProjection(self, projection:"IAgStkGraphicsProjection") -> "IAgStkGraphicsProjection":
        """Initializes a new instance from another projection."""
        with agmarshall.AgInterface_in_arg(projection, IAgStkGraphicsProjection) as arg_projection, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeFromProjection"](arg_projection.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{db047d3d-5afd-4b64-b396-034fd95ec57a}", IAgStkGraphicsProjectionFactory)
agcls.AgTypeNameMap["IAgStkGraphicsProjectionFactory"] = IAgStkGraphicsProjectionFactory
__all__.append("IAgStkGraphicsProjectionFactory")

class IAgStkGraphicsAltitudeDisplayConditionFactory(object):
    """Defines an inclusive altitude interval that determines when an object is rendered based on the camera's altitude relative to a central body."""
    _uuid = "{ee1efbf0-ddbf-41ff-9257-ff73e164d27a}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithAltitudes"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithCentralBodyAndAltitudes"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsAltitudeDisplayConditionFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsAltitudeDisplayConditionFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsAltitudeDisplayConditionFactory = agcom.GUID(IAgStkGraphicsAltitudeDisplayConditionFactory._uuid)
        vtable_offset_local = IAgStkGraphicsAltitudeDisplayConditionFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsAltitudeDisplayConditionFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithAltitudes"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsAltitudeDisplayConditionFactory, vtable_offset_local+2, agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithCentralBodyAndAltitudes"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsAltitudeDisplayConditionFactory, vtable_offset_local+3, agcom.BSTR, agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsAltitudeDisplayConditionFactory.__dict__ and type(IAgStkGraphicsAltitudeDisplayConditionFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsAltitudeDisplayConditionFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsAltitudeDisplayConditionFactory.")
    
    def Initialize(self) -> "IAgStkGraphicsAltitudeDisplayCondition":
        """Initializes a default altitude display condition. With this constructor, an object is always rendered regardless of the camera's altitude."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithAltitudes(self, minimumAltitude:float, maximumAltitude:float) -> "IAgStkGraphicsAltitudeDisplayCondition":
        """Initializes an altitude display condition with the inclusive altitude interval [minimumAltitude, maximumAltitude]..."""
        with agmarshall.DOUBLE_arg(minimumAltitude) as arg_minimumAltitude, \
             agmarshall.DOUBLE_arg(maximumAltitude) as arg_maximumAltitude, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithAltitudes"](arg_minimumAltitude.COM_val, arg_maximumAltitude.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithCentralBodyAndAltitudes(self, centralBody:str, minimumAltitude:float, maximumAltitude:float) -> "IAgStkGraphicsAltitudeDisplayCondition":
        """Initializes an altitude display condition with the inclusive altitude interval [minimumAltitude, maximumAltitude]..."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.DOUBLE_arg(minimumAltitude) as arg_minimumAltitude, \
             agmarshall.DOUBLE_arg(maximumAltitude) as arg_maximumAltitude, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithCentralBodyAndAltitudes"](arg_centralBody.COM_val, arg_minimumAltitude.COM_val, arg_maximumAltitude.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{ee1efbf0-ddbf-41ff-9257-ff73e164d27a}", IAgStkGraphicsAltitudeDisplayConditionFactory)
agcls.AgTypeNameMap["IAgStkGraphicsAltitudeDisplayConditionFactory"] = IAgStkGraphicsAltitudeDisplayConditionFactory
__all__.append("IAgStkGraphicsAltitudeDisplayConditionFactory")

class IAgStkGraphicsAxesPrimitiveFactory(object):
    """Renders an axes in the 3D scene."""
    _uuid = "{ff0a767c-8a84-47f9-a108-32cc0bff8366}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_InitializeWithDirection"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsAxesPrimitiveFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsAxesPrimitiveFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsAxesPrimitiveFactory = agcom.GUID(IAgStkGraphicsAxesPrimitiveFactory._uuid)
        vtable_offset_local = IAgStkGraphicsAxesPrimitiveFactory._vtable_offset - 1
        self.__dict__["_InitializeWithDirection"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsAxesPrimitiveFactory, vtable_offset_local+1, agcom.PVOID, agcom.PVOID, agcom.PVOID, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsAxesPrimitiveFactory.__dict__ and type(IAgStkGraphicsAxesPrimitiveFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsAxesPrimitiveFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsAxesPrimitiveFactory.")
    
    def InitializeWithDirection(self, sys:"IAgCrdnSystem", axes:"IAgCrdnAxes", font:"IAgStkGraphicsGraphicsFont") -> "IAgStkGraphicsAxesPrimitive":
        """Initializes an axes primitive with the specified ISystem sys as its source."""
        with agmarshall.AgInterface_in_arg(sys, IAgCrdnSystem) as arg_sys, \
             agmarshall.AgInterface_in_arg(axes, IAgCrdnAxes) as arg_axes, \
             agmarshall.AgInterface_in_arg(font, IAgStkGraphicsGraphicsFont) as arg_font, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithDirection"](arg_sys.COM_val, arg_axes.COM_val, arg_font.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{ff0a767c-8a84-47f9-a108-32cc0bff8366}", IAgStkGraphicsAxesPrimitiveFactory)
agcls.AgTypeNameMap["IAgStkGraphicsAxesPrimitiveFactory"] = IAgStkGraphicsAxesPrimitiveFactory
__all__.append("IAgStkGraphicsAxesPrimitiveFactory")

class IAgStkGraphicsCompositeDisplayConditionFactory(object):
    """A composite of display conditions combined using a binary logic operation. For example, several time interval display condition objects can be added to a composite..."""
    _uuid = "{a2ca541e-a860-4e47-b0e9-f0e973733e67}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsCompositeDisplayConditionFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsCompositeDisplayConditionFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsCompositeDisplayConditionFactory = agcom.GUID(IAgStkGraphicsCompositeDisplayConditionFactory._uuid)
        vtable_offset_local = IAgStkGraphicsCompositeDisplayConditionFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCompositeDisplayConditionFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsCompositeDisplayConditionFactory.__dict__ and type(IAgStkGraphicsCompositeDisplayConditionFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsCompositeDisplayConditionFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsCompositeDisplayConditionFactory.")
    
    def Initialize(self) -> "IAgStkGraphicsCompositeDisplayCondition":
        """Initializes an empty composite display condition."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{a2ca541e-a860-4e47-b0e9-f0e973733e67}", IAgStkGraphicsCompositeDisplayConditionFactory)
agcls.AgTypeNameMap["IAgStkGraphicsCompositeDisplayConditionFactory"] = IAgStkGraphicsCompositeDisplayConditionFactory
__all__.append("IAgStkGraphicsCompositeDisplayConditionFactory")

class IAgStkGraphicsCompositePrimitiveFactory(object):
    """ A primitive that is composed of multiple other primitives. Since composites can contain other composites, they are commonly used to build hierarchies of primitives to efficiently evaluate display conditions..."""
    _uuid = "{6828c6a1-7018-4b65-90af-8bb36f478a6d}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsCompositePrimitiveFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsCompositePrimitiveFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsCompositePrimitiveFactory = agcom.GUID(IAgStkGraphicsCompositePrimitiveFactory._uuid)
        vtable_offset_local = IAgStkGraphicsCompositePrimitiveFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsCompositePrimitiveFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsCompositePrimitiveFactory.__dict__ and type(IAgStkGraphicsCompositePrimitiveFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsCompositePrimitiveFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsCompositePrimitiveFactory.")
    
    def Initialize(self) -> "IAgStkGraphicsCompositePrimitive":
        """Initializes a default composite primitive."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{6828c6a1-7018-4b65-90af-8bb36f478a6d}", IAgStkGraphicsCompositePrimitiveFactory)
agcls.AgTypeNameMap["IAgStkGraphicsCompositePrimitiveFactory"] = IAgStkGraphicsCompositePrimitiveFactory
__all__.append("IAgStkGraphicsCompositePrimitiveFactory")

class IAgStkGraphicsConstantDisplayConditionFactory(object):
    """A display condition that evaluates to a user-defined value. This is commonly used to hide primitives by assigning to a primitive a display condition that always returns false."""
    _uuid = "{4c5226f9-a98e-4af0-a9a4-1e5926908d4c}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeDisplay"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsConstantDisplayConditionFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsConstantDisplayConditionFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsConstantDisplayConditionFactory = agcom.GUID(IAgStkGraphicsConstantDisplayConditionFactory._uuid)
        vtable_offset_local = IAgStkGraphicsConstantDisplayConditionFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsConstantDisplayConditionFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeDisplay"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsConstantDisplayConditionFactory, vtable_offset_local+2, agcom.VARIANT_BOOL, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsConstantDisplayConditionFactory.__dict__ and type(IAgStkGraphicsConstantDisplayConditionFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsConstantDisplayConditionFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsConstantDisplayConditionFactory.")
    
    def Initialize(self) -> "IAgStkGraphicsConstantDisplayCondition":
        """Initializes a default constant display condition. display is set to false so when this display condition is assigned to an object, such as a primitive, the object is not rendered."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeDisplay(self, display:bool) -> "IAgStkGraphicsConstantDisplayCondition":
        """Initializes a constant display condition with the value the display condition evaluates to."""
        with agmarshall.VARIANT_BOOL_arg(display) as arg_display, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeDisplay"](arg_display.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{4c5226f9-a98e-4af0-a9a4-1e5926908d4c}", IAgStkGraphicsConstantDisplayConditionFactory)
agcls.AgTypeNameMap["IAgStkGraphicsConstantDisplayConditionFactory"] = IAgStkGraphicsConstantDisplayConditionFactory
__all__.append("IAgStkGraphicsConstantDisplayConditionFactory")

class IAgStkGraphicsDistanceDisplayConditionFactory(object):
    """Defines an inclusive distance interval that determines when an object, such as a primitive, is rendered based on the distance from the camera to the object."""
    _uuid = "{d7dda546-31d2-4bbd-a44d-b9dc413a2412}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithDistances"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsDistanceDisplayConditionFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsDistanceDisplayConditionFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsDistanceDisplayConditionFactory = agcom.GUID(IAgStkGraphicsDistanceDisplayConditionFactory._uuid)
        vtable_offset_local = IAgStkGraphicsDistanceDisplayConditionFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsDistanceDisplayConditionFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithDistances"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsDistanceDisplayConditionFactory, vtable_offset_local+2, agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsDistanceDisplayConditionFactory.__dict__ and type(IAgStkGraphicsDistanceDisplayConditionFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsDistanceDisplayConditionFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsDistanceDisplayConditionFactory.")
    
    def Initialize(self) -> "IAgStkGraphicsDistanceDisplayCondition":
        """Initializes a default distance display condition. minimum distance is set to 0 and maximum distance is set to Double.MaxValue. With this interval, an object is always rendered regardless of its distance to the camera."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithDistances(self, minimumDistance:float, maximumDistance:float) -> "IAgStkGraphicsDistanceDisplayCondition":
        """Initializes a distance display condition with the inclusive distance interval [minimumDistance, maximumDistance]..."""
        with agmarshall.DOUBLE_arg(minimumDistance) as arg_minimumDistance, \
             agmarshall.DOUBLE_arg(maximumDistance) as arg_maximumDistance, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithDistances"](arg_minimumDistance.COM_val, arg_maximumDistance.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{d7dda546-31d2-4bbd-a44d-b9dc413a2412}", IAgStkGraphicsDistanceDisplayConditionFactory)
agcls.AgTypeNameMap["IAgStkGraphicsDistanceDisplayConditionFactory"] = IAgStkGraphicsDistanceDisplayConditionFactory
__all__.append("IAgStkGraphicsDistanceDisplayConditionFactory")

class IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory(object):
    """Defines an inclusive distance interval that determines when an object, such as a primitive, is rendered based on the distance from the camera to the globe overlay..."""
    _uuid = "{05bc2dbc-8533-467a-85d2-720c583f1c7e}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithDistances"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory = agcom.GUID(IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory._uuid)
        vtable_offset_local = IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithDistances"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory, vtable_offset_local+2, agcom.PVOID, agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory.__dict__ and type(IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory.")
    
    def Initialize(self) -> "IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition":
        """Initializes a default distance to globe overlay display condition. With this constructor, an object is always rendered regardless of the camera's distance to the globe overlay."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithDistances(self, globeOverlay:"IAgStkGraphicsGlobeOverlay", minimumDistance:float, maximumDistance:float) -> "IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition":
        """Initializes a distance display condition with the globe overlay and the inclusive distance interval [minimumDistance, maximumDistance]..."""
        with agmarshall.AgInterface_in_arg(globeOverlay, IAgStkGraphicsGlobeOverlay) as arg_globeOverlay, \
             agmarshall.DOUBLE_arg(minimumDistance) as arg_minimumDistance, \
             agmarshall.DOUBLE_arg(maximumDistance) as arg_maximumDistance, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithDistances"](arg_globeOverlay.COM_val, arg_minimumDistance.COM_val, arg_maximumDistance.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{05bc2dbc-8533-467a-85d2-720c583f1c7e}", IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory)
agcls.AgTypeNameMap["IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory"] = IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory
__all__.append("IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory")

class IAgStkGraphicsDistanceToPositionDisplayConditionFactory(object):
    """Defines an inclusive distance interval that determines when an object, such as a primitive, is rendered based on the distance from the camera to a position defined in the given reference frame."""
    _uuid = "{913dd9f7-a91b-4346-b233-180126a8d1bd}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithDistances"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithReferenceFrameAndDistances"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsDistanceToPositionDisplayConditionFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsDistanceToPositionDisplayConditionFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsDistanceToPositionDisplayConditionFactory = agcom.GUID(IAgStkGraphicsDistanceToPositionDisplayConditionFactory._uuid)
        vtable_offset_local = IAgStkGraphicsDistanceToPositionDisplayConditionFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsDistanceToPositionDisplayConditionFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithDistances"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsDistanceToPositionDisplayConditionFactory, vtable_offset_local+2, POINTER(agcom.SAFEARRAY), agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithReferenceFrameAndDistances"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsDistanceToPositionDisplayConditionFactory, vtable_offset_local+3, agcom.PVOID, POINTER(agcom.SAFEARRAY), agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsDistanceToPositionDisplayConditionFactory.__dict__ and type(IAgStkGraphicsDistanceToPositionDisplayConditionFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsDistanceToPositionDisplayConditionFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsDistanceToPositionDisplayConditionFactory.")
    
    def Initialize(self) -> "IAgStkGraphicsDistanceToPositionDisplayCondition":
        """Initializes a default distance to position display condition. With this constructor, an object is always rendered regardless of the camera's distance to the position."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithDistances(self, position:list, minimumDistance:float, maximumDistance:float) -> "IAgStkGraphicsDistanceToPositionDisplayCondition":
        """Initializes a distance display condition with the inclusive distance interval [minimumDistance, maximumDistance]..."""
        with agmarshall.SAFEARRAY_arg(position) as arg_position, \
             agmarshall.DOUBLE_arg(minimumDistance) as arg_minimumDistance, \
             agmarshall.DOUBLE_arg(maximumDistance) as arg_maximumDistance, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithDistances"](byref(arg_position.COM_val), arg_minimumDistance.COM_val, arg_maximumDistance.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithReferenceFrameAndDistances(self, referenceFrame:"IAgCrdnSystem", position:list, minimumDistance:float, maximumDistance:float) -> "IAgStkGraphicsDistanceToPositionDisplayCondition":
        """Initializes a distance display condition with the inclusive distance interval [minimumDistance, maximumDistance]..."""
        with agmarshall.AgInterface_in_arg(referenceFrame, IAgCrdnSystem) as arg_referenceFrame, \
             agmarshall.SAFEARRAY_arg(position) as arg_position, \
             agmarshall.DOUBLE_arg(minimumDistance) as arg_minimumDistance, \
             agmarshall.DOUBLE_arg(maximumDistance) as arg_maximumDistance, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithReferenceFrameAndDistances"](arg_referenceFrame.COM_val, byref(arg_position.COM_val), arg_minimumDistance.COM_val, arg_maximumDistance.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{913dd9f7-a91b-4346-b233-180126a8d1bd}", IAgStkGraphicsDistanceToPositionDisplayConditionFactory)
agcls.AgTypeNameMap["IAgStkGraphicsDistanceToPositionDisplayConditionFactory"] = IAgStkGraphicsDistanceToPositionDisplayConditionFactory
__all__.append("IAgStkGraphicsDistanceToPositionDisplayConditionFactory")

class IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory(object):
    """Defines an inclusive distance interval that determines when an object, such as a screen overlay, is rendered based on the distance from the camera to the primitive..."""
    _uuid = "{f103b596-f16c-4ad6-8242-bef8ecb83383}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithDistances"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory = agcom.GUID(IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory._uuid)
        vtable_offset_local = IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithDistances"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory, vtable_offset_local+2, agcom.PVOID, agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory.__dict__ and type(IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory.")
    
    def Initialize(self) -> "IAgStkGraphicsDistanceToPrimitiveDisplayCondition":
        """Initializes a default distance to primitive display condition. With this constructor, an object is always rendered regardless of the camera's distance to the primitive."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithDistances(self, primitive:"IAgStkGraphicsPrimitive", minimumDistance:float, maximumDistance:float) -> "IAgStkGraphicsDistanceToPrimitiveDisplayCondition":
        """Initializes a distance to primitive display condition with the inclusive distance interval [minimumDistance, maximumDistance]..."""
        with agmarshall.AgInterface_in_arg(primitive, IAgStkGraphicsPrimitive) as arg_primitive, \
             agmarshall.DOUBLE_arg(minimumDistance) as arg_minimumDistance, \
             agmarshall.DOUBLE_arg(maximumDistance) as arg_maximumDistance, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithDistances"](arg_primitive.COM_val, arg_minimumDistance.COM_val, arg_maximumDistance.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{f103b596-f16c-4ad6-8242-bef8ecb83383}", IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory)
agcls.AgTypeNameMap["IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory"] = IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory
__all__.append("IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory")

class IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory(object):
    """path primitive update policy that removes points from remove location after a given duration."""
    _uuid = "{4ea0bb3e-5620-4a74-b721-6b0000eafdc2}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithParameters"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory = agcom.GUID(IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory._uuid)
        vtable_offset_local = IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithParameters"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory, vtable_offset_local+2, agcom.DOUBLE, agcom.LONG, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory.__dict__ and type(IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory.")
    
    def Initialize(self) -> "IAgStkGraphicsDurationPathPrimitiveUpdatePolicy":
        """Constructs a default update policy. This is equivalent to constructing a policy with duration set to 0 and a remove location of Front."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithParameters(self, duration:float, removeLocation:"AgEStkGraphicsPathPrimitiveRemoveLocation") -> "IAgStkGraphicsDurationPathPrimitiveUpdatePolicy":
        """Initializes a policy with the specified duration and removeLocation."""
        with agmarshall.DOUBLE_arg(duration) as arg_duration, \
             agmarshall.AgEnum_arg(AgEStkGraphicsPathPrimitiveRemoveLocation, removeLocation) as arg_removeLocation, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithParameters"](arg_duration.COM_val, arg_removeLocation.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{4ea0bb3e-5620-4a74-b721-6b0000eafdc2}", IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory)
agcls.AgTypeNameMap["IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory"] = IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory
__all__.append("IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory")

class IAgStkGraphicsGlobeImageOverlayInitializer(object):
    """A globe overlay that shows an image."""
    _uuid = "{cf06dc51-75ad-45a2-a1ff-9e3b550be24f}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetMoreThanOneImageGlobeOverlaySupported"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsGlobeImageOverlayInitializer._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsGlobeImageOverlayInitializer from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsGlobeImageOverlayInitializer = agcom.GUID(IAgStkGraphicsGlobeImageOverlayInitializer._uuid)
        vtable_offset_local = IAgStkGraphicsGlobeImageOverlayInitializer._vtable_offset - 1
        self.__dict__["_GetMoreThanOneImageGlobeOverlaySupported"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsGlobeImageOverlayInitializer, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsGlobeImageOverlayInitializer.__dict__ and type(IAgStkGraphicsGlobeImageOverlayInitializer.__dict__[attrname]) == property:
            return IAgStkGraphicsGlobeImageOverlayInitializer.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsGlobeImageOverlayInitializer.")
    
    @property
    def MoreThanOneImageGlobeOverlaySupported(self) -> bool:
        """Gets whether or not the video card allows for more than one image globe overlay globe image overlay to be added."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMoreThanOneImageGlobeOverlaySupported"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{cf06dc51-75ad-45a2-a1ff-9e3b550be24f}", IAgStkGraphicsGlobeImageOverlayInitializer)
agcls.AgTypeNameMap["IAgStkGraphicsGlobeImageOverlayInitializer"] = IAgStkGraphicsGlobeImageOverlayInitializer
__all__.append("IAgStkGraphicsGlobeImageOverlayInitializer")

class IAgStkGraphicsGraphicsFontFactory(object):
    """A font that is suitable for use with the text batch primitive. For best performance, avoid creating duplicate font objects. Instead assign the same font object to several text batch primitives."""
    _uuid = "{1a87aeee-c00b-462b-bf99-90cb94ae1eb7}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_InitializeWithNameSizeFontStyleOutline"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithNameSize"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsGraphicsFontFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsGraphicsFontFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsGraphicsFontFactory = agcom.GUID(IAgStkGraphicsGraphicsFontFactory._uuid)
        vtable_offset_local = IAgStkGraphicsGraphicsFontFactory._vtable_offset - 1
        self.__dict__["_InitializeWithNameSizeFontStyleOutline"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsGraphicsFontFactory, vtable_offset_local+1, agcom.BSTR, agcom.INT, agcom.LONG, agcom.VARIANT_BOOL, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithNameSize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsGraphicsFontFactory, vtable_offset_local+2, agcom.BSTR, agcom.INT, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsGraphicsFontFactory.__dict__ and type(IAgStkGraphicsGraphicsFontFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsGraphicsFontFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsGraphicsFontFactory.")
    
    def InitializeWithNameSizeFontStyleOutline(self, name:str, size:int, fontStyle:"AgEStkGraphicsFontStyle", outline:bool) -> "IAgStkGraphicsGraphicsFont":
        """Initializes a graphics font with the given arguments."""
        with agmarshall.BSTR_arg(name) as arg_name, \
             agmarshall.INT_arg(size) as arg_size, \
             agmarshall.AgEnum_arg(AgEStkGraphicsFontStyle, fontStyle) as arg_fontStyle, \
             agmarshall.VARIANT_BOOL_arg(outline) as arg_outline, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithNameSizeFontStyleOutline"](arg_name.COM_val, arg_size.COM_val, arg_fontStyle.COM_val, arg_outline.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithNameSize(self, name:str, size:int) -> "IAgStkGraphicsGraphicsFont":
        """Initializes a graphics font with the typeface name and size."""
        with agmarshall.BSTR_arg(name) as arg_name, \
             agmarshall.INT_arg(size) as arg_size, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithNameSize"](arg_name.COM_val, arg_size.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{1a87aeee-c00b-462b-bf99-90cb94ae1eb7}", IAgStkGraphicsGraphicsFontFactory)
agcls.AgTypeNameMap["IAgStkGraphicsGraphicsFontFactory"] = IAgStkGraphicsGraphicsFontFactory
__all__.append("IAgStkGraphicsGraphicsFontFactory")

class IAgStkGraphicsGreatArcInterpolatorFactory(object):
    """The great arc interpolator computes interpolated positions along a great arc. A great arc is the shortest path between two positions on an ellipsoid."""
    _uuid = "{35afb348-117f-4db0-87ec-643b4b0364dd}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithCentralBody"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithCentralBodyAndGranularity"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsGreatArcInterpolatorFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsGreatArcInterpolatorFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsGreatArcInterpolatorFactory = agcom.GUID(IAgStkGraphicsGreatArcInterpolatorFactory._uuid)
        vtable_offset_local = IAgStkGraphicsGreatArcInterpolatorFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsGreatArcInterpolatorFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithCentralBody"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsGreatArcInterpolatorFactory, vtable_offset_local+2, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithCentralBodyAndGranularity"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsGreatArcInterpolatorFactory, vtable_offset_local+3, agcom.BSTR, agcom.DOUBLE, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsGreatArcInterpolatorFactory.__dict__ and type(IAgStkGraphicsGreatArcInterpolatorFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsGreatArcInterpolatorFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsGreatArcInterpolatorFactory.")
    
    def Initialize(self) -> "IAgStkGraphicsGreatArcInterpolator":
        """Initializes a default great arc interpolator. This is equivalent to constructing a great arc interpolator with a central body equal to an instance of earth central body and a granularity of 1 degree."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithCentralBody(self, centralBody:str) -> "IAgStkGraphicsGreatArcInterpolator":
        """Initializes a great arc interpolator with the specified centralBody and a granularity of 1 degree."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithCentralBody"](arg_centralBody.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithCentralBodyAndGranularity(self, centralBody:str, granularity:float) -> "IAgStkGraphicsGreatArcInterpolator":
        """Initializes a great arc interpolator with the specified centralBody and granularity."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.DOUBLE_arg(granularity) as arg_granularity, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithCentralBodyAndGranularity"](arg_centralBody.COM_val, arg_granularity.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{35afb348-117f-4db0-87ec-643b4b0364dd}", IAgStkGraphicsGreatArcInterpolatorFactory)
agcls.AgTypeNameMap["IAgStkGraphicsGreatArcInterpolatorFactory"] = IAgStkGraphicsGreatArcInterpolatorFactory
__all__.append("IAgStkGraphicsGreatArcInterpolatorFactory")

class IAgStkGraphicsAlphaFromLuminanceFilterFactory(object):
    """Adds an alpha band to the source raster derived from the luminance of the raster's color bands."""
    _uuid = "{2317f609-231f-4266-b38c-f4fa812a0306}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsAlphaFromLuminanceFilterFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsAlphaFromLuminanceFilterFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsAlphaFromLuminanceFilterFactory = agcom.GUID(IAgStkGraphicsAlphaFromLuminanceFilterFactory._uuid)
        vtable_offset_local = IAgStkGraphicsAlphaFromLuminanceFilterFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsAlphaFromLuminanceFilterFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsAlphaFromLuminanceFilterFactory.__dict__ and type(IAgStkGraphicsAlphaFromLuminanceFilterFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsAlphaFromLuminanceFilterFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsAlphaFromLuminanceFilterFactory.")
    
    def Initialize(self) -> "IAgStkGraphicsAlphaFromLuminanceFilter":
        """Initializes a new instance."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{2317f609-231f-4266-b38c-f4fa812a0306}", IAgStkGraphicsAlphaFromLuminanceFilterFactory)
agcls.AgTypeNameMap["IAgStkGraphicsAlphaFromLuminanceFilterFactory"] = IAgStkGraphicsAlphaFromLuminanceFilterFactory
__all__.append("IAgStkGraphicsAlphaFromLuminanceFilterFactory")

class IAgStkGraphicsAlphaFromPixelFilterFactory(object):
    """Adds an alpha band to the source raster based on the value of its first pixel. All pixels in the source raster that are the same color as the first pixel will be made transparent."""
    _uuid = "{f9802000-aea6-453d-b797-d68fae4a491b}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsAlphaFromPixelFilterFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsAlphaFromPixelFilterFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsAlphaFromPixelFilterFactory = agcom.GUID(IAgStkGraphicsAlphaFromPixelFilterFactory._uuid)
        vtable_offset_local = IAgStkGraphicsAlphaFromPixelFilterFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsAlphaFromPixelFilterFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsAlphaFromPixelFilterFactory.__dict__ and type(IAgStkGraphicsAlphaFromPixelFilterFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsAlphaFromPixelFilterFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsAlphaFromPixelFilterFactory.")
    
    def Initialize(self) -> "IAgStkGraphicsAlphaFromPixelFilter":
        """Initializes a new instance."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{f9802000-aea6-453d-b797-d68fae4a491b}", IAgStkGraphicsAlphaFromPixelFilterFactory)
agcls.AgTypeNameMap["IAgStkGraphicsAlphaFromPixelFilterFactory"] = IAgStkGraphicsAlphaFromPixelFilterFactory
__all__.append("IAgStkGraphicsAlphaFromPixelFilterFactory")

class IAgStkGraphicsAlphaFromRasterFilterFactory(object):
    """Adds an alpha band to the source raster derived from the color bands or alpha of another raster. This filter can be used to apply an alpha mask to the source raster."""
    _uuid = "{f7139fc1-f8f8-4bd2-a33f-9e06fdb4f63c}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithRaster"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsAlphaFromRasterFilterFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsAlphaFromRasterFilterFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsAlphaFromRasterFilterFactory = agcom.GUID(IAgStkGraphicsAlphaFromRasterFilterFactory._uuid)
        vtable_offset_local = IAgStkGraphicsAlphaFromRasterFilterFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsAlphaFromRasterFilterFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithRaster"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsAlphaFromRasterFilterFactory, vtable_offset_local+2, agcom.PVOID, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsAlphaFromRasterFilterFactory.__dict__ and type(IAgStkGraphicsAlphaFromRasterFilterFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsAlphaFromRasterFilterFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsAlphaFromRasterFilterFactory.")
    
    def Initialize(self) -> "IAgStkGraphicsAlphaFromRasterFilter":
        """Initializes a new instance."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithRaster(self, raster:"IAgStkGraphicsRaster") -> "IAgStkGraphicsAlphaFromRasterFilter":
        """Initializes a new instance with the raster that the source raster will use to derive an alpha band."""
        with agmarshall.AgInterface_in_arg(raster, IAgStkGraphicsRaster) as arg_raster, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithRaster"](arg_raster.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{f7139fc1-f8f8-4bd2-a33f-9e06fdb4f63c}", IAgStkGraphicsAlphaFromRasterFilterFactory)
agcls.AgTypeNameMap["IAgStkGraphicsAlphaFromRasterFilterFactory"] = IAgStkGraphicsAlphaFromRasterFilterFactory
__all__.append("IAgStkGraphicsAlphaFromRasterFilterFactory")

class IAgStkGraphicsBandExtractFilterFactory(object):
    """Extracts a band or set of bands from the source raster. The extract format property specifies the bands and the order of the bands that will be extracted."""
    _uuid = "{76a65e3a-1868-4312-8a66-8e16a525effd}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithBand"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithFormat"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsBandExtractFilterFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsBandExtractFilterFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsBandExtractFilterFactory = agcom.GUID(IAgStkGraphicsBandExtractFilterFactory._uuid)
        vtable_offset_local = IAgStkGraphicsBandExtractFilterFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsBandExtractFilterFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithBand"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsBandExtractFilterFactory, vtable_offset_local+2, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithFormat"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsBandExtractFilterFactory, vtable_offset_local+3, agcom.LONG, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsBandExtractFilterFactory.__dict__ and type(IAgStkGraphicsBandExtractFilterFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsBandExtractFilterFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsBandExtractFilterFactory.")
    
    def Initialize(self) -> "IAgStkGraphicsBandExtractFilter":
        """Initializes a new instance."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithBand(self, rasterBand:"AgEStkGraphicsRasterBand") -> "IAgStkGraphicsBandExtractFilter":
        """Initializes a new instance with the raster band to be extracted from the source raster."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsRasterBand, rasterBand) as arg_rasterBand, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithBand"](arg_rasterBand.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithFormat(self, rasterFormat:"AgEStkGraphicsRasterFormat") -> "IAgStkGraphicsBandExtractFilter":
        """Initializes a new instance with the raster format containing the bands to be extracted from the source raster."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsRasterFormat, rasterFormat) as arg_rasterFormat, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithFormat"](arg_rasterFormat.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{76a65e3a-1868-4312-8a66-8e16a525effd}", IAgStkGraphicsBandExtractFilterFactory)
agcls.AgTypeNameMap["IAgStkGraphicsBandExtractFilterFactory"] = IAgStkGraphicsBandExtractFilterFactory
__all__.append("IAgStkGraphicsBandExtractFilterFactory")

class IAgStkGraphicsBandOrderFilterFactory(object):
    """Reorders or swizzles the bands of the source raster to match the band order of the raster format specified by the band order property. When maintain raster format is true, the source raster's format is maintained after swizzling."""
    _uuid = "{1bfcf1dd-1ada-47b7-829b-ea60fc04b61d}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithOrder"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithOrderAndBool"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsBandOrderFilterFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsBandOrderFilterFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsBandOrderFilterFactory = agcom.GUID(IAgStkGraphicsBandOrderFilterFactory._uuid)
        vtable_offset_local = IAgStkGraphicsBandOrderFilterFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsBandOrderFilterFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithOrder"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsBandOrderFilterFactory, vtable_offset_local+2, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithOrderAndBool"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsBandOrderFilterFactory, vtable_offset_local+3, agcom.LONG, agcom.VARIANT_BOOL, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsBandOrderFilterFactory.__dict__ and type(IAgStkGraphicsBandOrderFilterFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsBandOrderFilterFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsBandOrderFilterFactory.")
    
    def Initialize(self) -> "IAgStkGraphicsBandOrderFilter":
        """Initializes a new instance."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithOrder(self, bandOrder:"AgEStkGraphicsRasterFormat") -> "IAgStkGraphicsBandOrderFilter":
        """Initializes a new instance with a raster format indicating the desired order of the bands in the source raster."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsRasterFormat, bandOrder) as arg_bandOrder, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithOrder"](arg_bandOrder.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithOrderAndBool(self, bandOrder:"AgEStkGraphicsRasterFormat", maintainImageFormat:bool) -> "IAgStkGraphicsBandOrderFilter":
        """Initializes a new instance with a raster format indicating the desired order of the bands in the source raster, and whether to maintain the source raster's format after swizzling."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsRasterFormat, bandOrder) as arg_bandOrder, \
             agmarshall.VARIANT_BOOL_arg(maintainImageFormat) as arg_maintainImageFormat, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithOrderAndBool"](arg_bandOrder.COM_val, arg_maintainImageFormat.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{1bfcf1dd-1ada-47b7-829b-ea60fc04b61d}", IAgStkGraphicsBandOrderFilterFactory)
agcls.AgTypeNameMap["IAgStkGraphicsBandOrderFilterFactory"] = IAgStkGraphicsBandOrderFilterFactory
__all__.append("IAgStkGraphicsBandOrderFilterFactory")

class IAgStkGraphicsBlurFilterFactory(object):
    """Applies a convolution filter to blur or smooth the source raster. Can be used to reduce noise in the raster."""
    _uuid = "{99188b11-f0f6-4452-b2e9-c53472860aa1}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithMethod"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsBlurFilterFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsBlurFilterFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsBlurFilterFactory = agcom.GUID(IAgStkGraphicsBlurFilterFactory._uuid)
        vtable_offset_local = IAgStkGraphicsBlurFilterFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsBlurFilterFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithMethod"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsBlurFilterFactory, vtable_offset_local+2, agcom.LONG, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsBlurFilterFactory.__dict__ and type(IAgStkGraphicsBlurFilterFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsBlurFilterFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsBlurFilterFactory.")
    
    def Initialize(self) -> "IAgStkGraphicsBlurFilter":
        """Initializes a new instance."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithMethod(self, method:"AgEStkGraphicsBlurMethod") -> "IAgStkGraphicsBlurFilter":
        """Initialize a new instance with the specified blur method."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsBlurMethod, method) as arg_method, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithMethod"](arg_method.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{99188b11-f0f6-4452-b2e9-c53472860aa1}", IAgStkGraphicsBlurFilterFactory)
agcls.AgTypeNameMap["IAgStkGraphicsBlurFilterFactory"] = IAgStkGraphicsBlurFilterFactory
__all__.append("IAgStkGraphicsBlurFilterFactory")

class IAgStkGraphicsBrightnessFilterFactory(object):
    """Adjusts the brightness of the source raster's color bands. The adjustment to brightness is a value between -1 and 1, corresponding to least bright to most bright."""
    _uuid = "{85e2696a-638c-4151-8ba4-e1fdef462598}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithAdjustment"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsBrightnessFilterFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsBrightnessFilterFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsBrightnessFilterFactory = agcom.GUID(IAgStkGraphicsBrightnessFilterFactory._uuid)
        vtable_offset_local = IAgStkGraphicsBrightnessFilterFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsBrightnessFilterFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithAdjustment"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsBrightnessFilterFactory, vtable_offset_local+2, agcom.DOUBLE, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsBrightnessFilterFactory.__dict__ and type(IAgStkGraphicsBrightnessFilterFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsBrightnessFilterFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsBrightnessFilterFactory.")
    
    def Initialize(self) -> "IAgStkGraphicsBrightnessFilter":
        """Initializes a new instance."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithAdjustment(self, adjustment:float) -> "IAgStkGraphicsBrightnessFilter":
        """Initializes a new instance with the adjustment to brightness."""
        with agmarshall.DOUBLE_arg(adjustment) as arg_adjustment, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithAdjustment"](arg_adjustment.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{85e2696a-638c-4151-8ba4-e1fdef462598}", IAgStkGraphicsBrightnessFilterFactory)
agcls.AgTypeNameMap["IAgStkGraphicsBrightnessFilterFactory"] = IAgStkGraphicsBrightnessFilterFactory
__all__.append("IAgStkGraphicsBrightnessFilterFactory")

class IAgStkGraphicsColorToLuminanceFilterFactory(object):
    """Extracts a luminance band derived from the color bands of the source raster."""
    _uuid = "{361263b5-d7ef-468a-9804-c1c9342ffeb8}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsColorToLuminanceFilterFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsColorToLuminanceFilterFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsColorToLuminanceFilterFactory = agcom.GUID(IAgStkGraphicsColorToLuminanceFilterFactory._uuid)
        vtable_offset_local = IAgStkGraphicsColorToLuminanceFilterFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsColorToLuminanceFilterFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsColorToLuminanceFilterFactory.__dict__ and type(IAgStkGraphicsColorToLuminanceFilterFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsColorToLuminanceFilterFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsColorToLuminanceFilterFactory.")
    
    def Initialize(self) -> "IAgStkGraphicsColorToLuminanceFilter":
        """Initializes a new instance."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{361263b5-d7ef-468a-9804-c1c9342ffeb8}", IAgStkGraphicsColorToLuminanceFilterFactory)
agcls.AgTypeNameMap["IAgStkGraphicsColorToLuminanceFilterFactory"] = IAgStkGraphicsColorToLuminanceFilterFactory
__all__.append("IAgStkGraphicsColorToLuminanceFilterFactory")

class IAgStkGraphicsContrastFilterFactory(object):
    """Adjusts the contrast of the source raster. The adjustment to contrast is a value between -1 and 1, corresponding to least contrast to most contrast."""
    _uuid = "{d78a7285-c3ff-47b5-b5af-ea67faffae92}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithAdjustment"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsContrastFilterFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsContrastFilterFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsContrastFilterFactory = agcom.GUID(IAgStkGraphicsContrastFilterFactory._uuid)
        vtable_offset_local = IAgStkGraphicsContrastFilterFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsContrastFilterFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithAdjustment"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsContrastFilterFactory, vtable_offset_local+2, agcom.DOUBLE, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsContrastFilterFactory.__dict__ and type(IAgStkGraphicsContrastFilterFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsContrastFilterFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsContrastFilterFactory.")
    
    def Initialize(self) -> "IAgStkGraphicsContrastFilter":
        """Initializes a new instance."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithAdjustment(self, adjustment:float) -> "IAgStkGraphicsContrastFilter":
        """Initializes a new instance with the adjustment to contrast."""
        with agmarshall.DOUBLE_arg(adjustment) as arg_adjustment, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithAdjustment"](arg_adjustment.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{d78a7285-c3ff-47b5-b5af-ea67faffae92}", IAgStkGraphicsContrastFilterFactory)
agcls.AgTypeNameMap["IAgStkGraphicsContrastFilterFactory"] = IAgStkGraphicsContrastFilterFactory
__all__.append("IAgStkGraphicsContrastFilterFactory")

class IAgStkGraphicsConvolutionFilterFactory(object):
    """Applies convolution to the source raster. Convolution is the modification of a pixel's value based on the values of its surrounding pixels. The kernel is the numerical matrix that is applied to each pixel in this process..."""
    _uuid = "{f262f8e7-74a5-440e-9754-d3c8a4196abf}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithKernel"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithKernelAndDivisor"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithKernelDivisorAndOffset"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsConvolutionFilterFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsConvolutionFilterFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsConvolutionFilterFactory = agcom.GUID(IAgStkGraphicsConvolutionFilterFactory._uuid)
        vtable_offset_local = IAgStkGraphicsConvolutionFilterFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsConvolutionFilterFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithKernel"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsConvolutionFilterFactory, vtable_offset_local+2, POINTER(agcom.SAFEARRAY), POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithKernelAndDivisor"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsConvolutionFilterFactory, vtable_offset_local+3, POINTER(agcom.SAFEARRAY), agcom.DOUBLE, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithKernelDivisorAndOffset"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsConvolutionFilterFactory, vtable_offset_local+4, POINTER(agcom.SAFEARRAY), agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsConvolutionFilterFactory.__dict__ and type(IAgStkGraphicsConvolutionFilterFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsConvolutionFilterFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsConvolutionFilterFactory.")
    
    def Initialize(self) -> "IAgStkGraphicsConvolutionFilter":
        """Initializes a new instance."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithKernel(self, kernel:list) -> "IAgStkGraphicsConvolutionFilter":
        """Initializes a new instance with the specified kernel."""
        with agmarshall.SAFEARRAY_arg(kernel) as arg_kernel, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithKernel"](byref(arg_kernel.COM_val), byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithKernelAndDivisor(self, kernel:list, divisor:float) -> "IAgStkGraphicsConvolutionFilter":
        """Initializes a new instance with the specified kernel and divisor."""
        with agmarshall.SAFEARRAY_arg(kernel) as arg_kernel, \
             agmarshall.DOUBLE_arg(divisor) as arg_divisor, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithKernelAndDivisor"](byref(arg_kernel.COM_val), arg_divisor.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithKernelDivisorAndOffset(self, kernel:list, divisor:float, offset:float) -> "IAgStkGraphicsConvolutionFilter":
        """Initializes a new instance with the specified kernel, divisor, and offset."""
        with agmarshall.SAFEARRAY_arg(kernel) as arg_kernel, \
             agmarshall.DOUBLE_arg(divisor) as arg_divisor, \
             agmarshall.DOUBLE_arg(offset) as arg_offset, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithKernelDivisorAndOffset"](byref(arg_kernel.COM_val), arg_divisor.COM_val, arg_offset.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{f262f8e7-74a5-440e-9754-d3c8a4196abf}", IAgStkGraphicsConvolutionFilterFactory)
agcls.AgTypeNameMap["IAgStkGraphicsConvolutionFilterFactory"] = IAgStkGraphicsConvolutionFilterFactory
__all__.append("IAgStkGraphicsConvolutionFilterFactory")

class IAgStkGraphicsEdgeDetectFilterFactory(object):
    """Applies a convolution filter to detect edges in the source raster."""
    _uuid = "{d471ae80-2bf6-40d7-9c5b-48c08d0e3819}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithMethod"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsEdgeDetectFilterFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsEdgeDetectFilterFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsEdgeDetectFilterFactory = agcom.GUID(IAgStkGraphicsEdgeDetectFilterFactory._uuid)
        vtable_offset_local = IAgStkGraphicsEdgeDetectFilterFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsEdgeDetectFilterFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithMethod"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsEdgeDetectFilterFactory, vtable_offset_local+2, agcom.LONG, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsEdgeDetectFilterFactory.__dict__ and type(IAgStkGraphicsEdgeDetectFilterFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsEdgeDetectFilterFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsEdgeDetectFilterFactory.")
    
    def Initialize(self) -> "IAgStkGraphicsEdgeDetectFilter":
        """Initializes a new instance."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithMethod(self, method:"AgEStkGraphicsEdgeDetectMethod") -> "IAgStkGraphicsEdgeDetectFilter":
        """Initializes a new instance with the specified edge detect method."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsEdgeDetectMethod, method) as arg_method, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithMethod"](arg_method.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{d471ae80-2bf6-40d7-9c5b-48c08d0e3819}", IAgStkGraphicsEdgeDetectFilterFactory)
agcls.AgTypeNameMap["IAgStkGraphicsEdgeDetectFilterFactory"] = IAgStkGraphicsEdgeDetectFilterFactory
__all__.append("IAgStkGraphicsEdgeDetectFilterFactory")

class IAgStkGraphicsFilteringRasterStreamFactory(object):
    """A class decorator for applying a raster filter to each update of a raster stream. Can be used to apply filters to videos and other raster streams as they are updated."""
    _uuid = "{3c0a84bb-9330-422b-808e-6f9cf0aa3055}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsFilteringRasterStreamFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsFilteringRasterStreamFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsFilteringRasterStreamFactory = agcom.GUID(IAgStkGraphicsFilteringRasterStreamFactory._uuid)
        vtable_offset_local = IAgStkGraphicsFilteringRasterStreamFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFilteringRasterStreamFactory, vtable_offset_local+1, agcom.PVOID, agcom.PVOID, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsFilteringRasterStreamFactory.__dict__ and type(IAgStkGraphicsFilteringRasterStreamFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsFilteringRasterStreamFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsFilteringRasterStreamFactory.")
    
    def Initialize(self, rasterStream:"IAgStkGraphicsRasterStream", filter:"IAgStkGraphicsRasterFilter") -> "IAgStkGraphicsFilteringRasterStream":
        """Initializes a new instance with a raster stream and the raster filter that will be applied to each update of that stream."""
        with agmarshall.AgInterface_in_arg(rasterStream, IAgStkGraphicsRasterStream) as arg_rasterStream, \
             agmarshall.AgInterface_in_arg(filter, IAgStkGraphicsRasterFilter) as arg_filter, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](arg_rasterStream.COM_val, arg_filter.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{3c0a84bb-9330-422b-808e-6f9cf0aa3055}", IAgStkGraphicsFilteringRasterStreamFactory)
agcls.AgTypeNameMap["IAgStkGraphicsFilteringRasterStreamFactory"] = IAgStkGraphicsFilteringRasterStreamFactory
__all__.append("IAgStkGraphicsFilteringRasterStreamFactory")

class IAgStkGraphicsFlipFilterFactory(object):
    """Flips the source raster along the given flip axis."""
    _uuid = "{0f7bc6a1-42ac-41f0-8f42-d915fba6b859}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithFlipAxis"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsFlipFilterFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsFlipFilterFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsFlipFilterFactory = agcom.GUID(IAgStkGraphicsFlipFilterFactory._uuid)
        vtable_offset_local = IAgStkGraphicsFlipFilterFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFlipFilterFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithFlipAxis"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsFlipFilterFactory, vtable_offset_local+2, agcom.LONG, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsFlipFilterFactory.__dict__ and type(IAgStkGraphicsFlipFilterFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsFlipFilterFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsFlipFilterFactory.")
    
    def Initialize(self) -> "IAgStkGraphicsFlipFilter":
        """Initializes a new instance."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithFlipAxis(self, flipAxis:"AgEStkGraphicsFlipAxis") -> "IAgStkGraphicsFlipFilter":
        """Initializes a new instance with the specified flip axis."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsFlipAxis, flipAxis) as arg_flipAxis, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithFlipAxis"](arg_flipAxis.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{0f7bc6a1-42ac-41f0-8f42-d915fba6b859}", IAgStkGraphicsFlipFilterFactory)
agcls.AgTypeNameMap["IAgStkGraphicsFlipFilterFactory"] = IAgStkGraphicsFlipFilterFactory
__all__.append("IAgStkGraphicsFlipFilterFactory")

class IAgStkGraphicsGammaCorrectionFilterFactory(object):
    """Applies gamma correction to the source raster. The gamma is a value between .2 and 5. The default gamma value is 2.2."""
    _uuid = "{4e0be3d1-f9ca-47b6-bc7b-31fd98c824a6}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithGamma"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsGammaCorrectionFilterFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsGammaCorrectionFilterFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsGammaCorrectionFilterFactory = agcom.GUID(IAgStkGraphicsGammaCorrectionFilterFactory._uuid)
        vtable_offset_local = IAgStkGraphicsGammaCorrectionFilterFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsGammaCorrectionFilterFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithGamma"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsGammaCorrectionFilterFactory, vtable_offset_local+2, agcom.DOUBLE, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsGammaCorrectionFilterFactory.__dict__ and type(IAgStkGraphicsGammaCorrectionFilterFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsGammaCorrectionFilterFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsGammaCorrectionFilterFactory.")
    
    def Initialize(self) -> "IAgStkGraphicsGammaCorrectionFilter":
        """Initializes a new instance."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithGamma(self, gamma:float) -> "IAgStkGraphicsGammaCorrectionFilter":
        """Initializes a new instance with the specified gamma."""
        with agmarshall.DOUBLE_arg(gamma) as arg_gamma, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithGamma"](arg_gamma.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{4e0be3d1-f9ca-47b6-bc7b-31fd98c824a6}", IAgStkGraphicsGammaCorrectionFilterFactory)
agcls.AgTypeNameMap["IAgStkGraphicsGammaCorrectionFilterFactory"] = IAgStkGraphicsGammaCorrectionFilterFactory
__all__.append("IAgStkGraphicsGammaCorrectionFilterFactory")

class IAgStkGraphicsGaussianBlurFilterFactory(object):
    """Applies a convolution filter to blur the source raster using the Gaussian function."""
    _uuid = "{c4f3b576-0d25-4b06-9a79-773821d5c97b}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsGaussianBlurFilterFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsGaussianBlurFilterFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsGaussianBlurFilterFactory = agcom.GUID(IAgStkGraphicsGaussianBlurFilterFactory._uuid)
        vtable_offset_local = IAgStkGraphicsGaussianBlurFilterFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsGaussianBlurFilterFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsGaussianBlurFilterFactory.__dict__ and type(IAgStkGraphicsGaussianBlurFilterFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsGaussianBlurFilterFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsGaussianBlurFilterFactory.")
    
    def Initialize(self) -> "IAgStkGraphicsGaussianBlurFilter":
        """Initializes a new instance."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{c4f3b576-0d25-4b06-9a79-773821d5c97b}", IAgStkGraphicsGaussianBlurFilterFactory)
agcls.AgTypeNameMap["IAgStkGraphicsGaussianBlurFilterFactory"] = IAgStkGraphicsGaussianBlurFilterFactory
__all__.append("IAgStkGraphicsGaussianBlurFilterFactory")

class IAgStkGraphicsGradientDetectFilterFactory(object):
    """Applies a convolution filter to detect gradients in the source raster."""
    _uuid = "{ab421e7c-80f3-4503-a29c-5becb2178d44}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithMethod"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsGradientDetectFilterFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsGradientDetectFilterFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsGradientDetectFilterFactory = agcom.GUID(IAgStkGraphicsGradientDetectFilterFactory._uuid)
        vtable_offset_local = IAgStkGraphicsGradientDetectFilterFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsGradientDetectFilterFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithMethod"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsGradientDetectFilterFactory, vtable_offset_local+2, agcom.LONG, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsGradientDetectFilterFactory.__dict__ and type(IAgStkGraphicsGradientDetectFilterFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsGradientDetectFilterFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsGradientDetectFilterFactory.")
    
    def Initialize(self) -> "IAgStkGraphicsGradientDetectFilter":
        """Initializes a new instance."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithMethod(self, method:"AgEStkGraphicsGradientDetectMethod") -> "IAgStkGraphicsGradientDetectFilter":
        """Initializes a new instance with specified gradient detect method."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsGradientDetectMethod, method) as arg_method, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithMethod"](arg_method.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{ab421e7c-80f3-4503-a29c-5becb2178d44}", IAgStkGraphicsGradientDetectFilterFactory)
agcls.AgTypeNameMap["IAgStkGraphicsGradientDetectFilterFactory"] = IAgStkGraphicsGradientDetectFilterFactory
__all__.append("IAgStkGraphicsGradientDetectFilterFactory")

class IAgStkGraphicsJpeg2000WriterInitializer(object):
    """Converts an image, such as a BMP, to a GeoJP2 file that can be used as an image globe overlay."""
    _uuid = "{e2227905-c4e6-46ab-a89f-6d53e201e1a3}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_WriteString"] = _raise_uninitialized_error
        self.__dict__["_WriteExtentString"] = _raise_uninitialized_error
        self.__dict__["_WriteExtentAndSubExtentString"] = _raise_uninitialized_error
        self.__dict__["_WriteExtentAndSubExtentTransparentColorString"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsJpeg2000WriterInitializer._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsJpeg2000WriterInitializer from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsJpeg2000WriterInitializer = agcom.GUID(IAgStkGraphicsJpeg2000WriterInitializer._uuid)
        vtable_offset_local = IAgStkGraphicsJpeg2000WriterInitializer._vtable_offset - 1
        self.__dict__["_WriteString"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsJpeg2000WriterInitializer, vtable_offset_local+1, agcom.BSTR, agcom.LONG, agcom.INT, agcom.BSTR, agcom.VARIANT_BOOL)
        self.__dict__["_WriteExtentString"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsJpeg2000WriterInitializer, vtable_offset_local+2, agcom.BSTR, POINTER(agcom.SAFEARRAY), agcom.LONG, agcom.INT, agcom.BSTR, agcom.VARIANT_BOOL)
        self.__dict__["_WriteExtentAndSubExtentString"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsJpeg2000WriterInitializer, vtable_offset_local+3, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.LONG, agcom.INT, agcom.BSTR, agcom.VARIANT_BOOL)
        self.__dict__["_WriteExtentAndSubExtentTransparentColorString"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsJpeg2000WriterInitializer, vtable_offset_local+4, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.LONG, agcom.INT, agcom.BSTR, agcom.VARIANT_BOOL, agcom.OLE_COLOR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsJpeg2000WriterInitializer.__dict__ and type(IAgStkGraphicsJpeg2000WriterInitializer.__dict__[attrname]) == property:
            return IAgStkGraphicsJpeg2000WriterInitializer.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsJpeg2000WriterInitializer.")
    
    def WriteString(self, imageUri:str, compressionProfile:"AgEStkGraphicsJpeg2000CompressionProfile", compressionRate:int, jpeg2000Uri:str, overwriteExistingFile:bool) -> None:
        """Converts an image, such as a BMP, to a GeoJP2 file that can be used as an image globe overlay. The extent of the image must be in the image, as in a GeoTIFF."""
        with agmarshall.BSTR_arg(imageUri) as arg_imageUri, \
             agmarshall.AgEnum_arg(AgEStkGraphicsJpeg2000CompressionProfile, compressionProfile) as arg_compressionProfile, \
             agmarshall.INT_arg(compressionRate) as arg_compressionRate, \
             agmarshall.BSTR_arg(jpeg2000Uri) as arg_jpeg2000Uri, \
             agmarshall.VARIANT_BOOL_arg(overwriteExistingFile) as arg_overwriteExistingFile:
            agcls.evaluate_hresult(self.__dict__["_WriteString"](arg_imageUri.COM_val, arg_compressionProfile.COM_val, arg_compressionRate.COM_val, arg_jpeg2000Uri.COM_val, arg_overwriteExistingFile.COM_val))

    def WriteExtentString(self, imageUri:str, extent:list, compressionProfile:"AgEStkGraphicsJpeg2000CompressionProfile", compressionRate:int, jpeg2000Uri:str, overwriteExistingFile:bool) -> None:
        """Converts an image, such as a BMP, to a GeoJP2 file that can be used as an image globe overlay. The extent of the image can be defined as an input parameter if necessary."""
        with agmarshall.BSTR_arg(imageUri) as arg_imageUri, \
             agmarshall.SAFEARRAY_arg(extent) as arg_extent, \
             agmarshall.AgEnum_arg(AgEStkGraphicsJpeg2000CompressionProfile, compressionProfile) as arg_compressionProfile, \
             agmarshall.INT_arg(compressionRate) as arg_compressionRate, \
             agmarshall.BSTR_arg(jpeg2000Uri) as arg_jpeg2000Uri, \
             agmarshall.VARIANT_BOOL_arg(overwriteExistingFile) as arg_overwriteExistingFile:
            agcls.evaluate_hresult(self.__dict__["_WriteExtentString"](arg_imageUri.COM_val, byref(arg_extent.COM_val), arg_compressionProfile.COM_val, arg_compressionRate.COM_val, arg_jpeg2000Uri.COM_val, arg_overwriteExistingFile.COM_val))

    def WriteExtentAndSubExtentString(self, imageUri:str, extent:list, subExtent:list, compressionProfile:"AgEStkGraphicsJpeg2000CompressionProfile", compressionRate:int, jpeg2000Uri:str, overwriteExistingFile:bool) -> None:
        """Converts an image, such as a BMP, to a GeoJP2 file that can be used as an image globe overlay. The extent of the image can be defined as an input parameter if necessary."""
        with agmarshall.BSTR_arg(imageUri) as arg_imageUri, \
             agmarshall.SAFEARRAY_arg(extent) as arg_extent, \
             agmarshall.SAFEARRAY_arg(subExtent) as arg_subExtent, \
             agmarshall.AgEnum_arg(AgEStkGraphicsJpeg2000CompressionProfile, compressionProfile) as arg_compressionProfile, \
             agmarshall.INT_arg(compressionRate) as arg_compressionRate, \
             agmarshall.BSTR_arg(jpeg2000Uri) as arg_jpeg2000Uri, \
             agmarshall.VARIANT_BOOL_arg(overwriteExistingFile) as arg_overwriteExistingFile:
            agcls.evaluate_hresult(self.__dict__["_WriteExtentAndSubExtentString"](arg_imageUri.COM_val, byref(arg_extent.COM_val), byref(arg_subExtent.COM_val), arg_compressionProfile.COM_val, arg_compressionRate.COM_val, arg_jpeg2000Uri.COM_val, arg_overwriteExistingFile.COM_val))

    def WriteExtentAndSubExtentTransparentColorString(self, imageUri:str, extent:list, subExtent:list, compressionProfile:"AgEStkGraphicsJpeg2000CompressionProfile", compressionRate:int, jpeg2000Uri:str, overwriteExistingFile:bool, transparentColor:agcolor.Color) -> None:
        """Converts an image, such as a BMP, to a GeoJP2 file that can be used as an image globe overlay. The extent of the image can be defined as an input parameter if necessary."""
        with agmarshall.BSTR_arg(imageUri) as arg_imageUri, \
             agmarshall.SAFEARRAY_arg(extent) as arg_extent, \
             agmarshall.SAFEARRAY_arg(subExtent) as arg_subExtent, \
             agmarshall.AgEnum_arg(AgEStkGraphicsJpeg2000CompressionProfile, compressionProfile) as arg_compressionProfile, \
             agmarshall.INT_arg(compressionRate) as arg_compressionRate, \
             agmarshall.BSTR_arg(jpeg2000Uri) as arg_jpeg2000Uri, \
             agmarshall.VARIANT_BOOL_arg(overwriteExistingFile) as arg_overwriteExistingFile, \
             agmarshall.OLE_COLOR_arg(transparentColor) as arg_transparentColor:
            agcls.evaluate_hresult(self.__dict__["_WriteExtentAndSubExtentTransparentColorString"](arg_imageUri.COM_val, byref(arg_extent.COM_val), byref(arg_subExtent.COM_val), arg_compressionProfile.COM_val, arg_compressionRate.COM_val, arg_jpeg2000Uri.COM_val, arg_overwriteExistingFile.COM_val, arg_transparentColor.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{e2227905-c4e6-46ab-a89f-6d53e201e1a3}", IAgStkGraphicsJpeg2000WriterInitializer)
agcls.AgTypeNameMap["IAgStkGraphicsJpeg2000WriterInitializer"] = IAgStkGraphicsJpeg2000WriterInitializer
__all__.append("IAgStkGraphicsJpeg2000WriterInitializer")

class IAgStkGraphicsLevelsFilterFactory(object):
    """Adjusts the band levels of the source raster linearly."""
    _uuid = "{30236afe-b593-4e6c-9e61-099216f14db1}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsLevelsFilterFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsLevelsFilterFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsLevelsFilterFactory = agcom.GUID(IAgStkGraphicsLevelsFilterFactory._uuid)
        vtable_offset_local = IAgStkGraphicsLevelsFilterFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsLevelsFilterFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsLevelsFilterFactory.__dict__ and type(IAgStkGraphicsLevelsFilterFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsLevelsFilterFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsLevelsFilterFactory.")
    
    def Initialize(self) -> "IAgStkGraphicsLevelsFilter":
        """Initializes a new instance."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{30236afe-b593-4e6c-9e61-099216f14db1}", IAgStkGraphicsLevelsFilterFactory)
agcls.AgTypeNameMap["IAgStkGraphicsLevelsFilterFactory"] = IAgStkGraphicsLevelsFilterFactory
__all__.append("IAgStkGraphicsLevelsFilterFactory")

class IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory(object):
    """The Activator class provides methods to load COM plugins that implement projection and raster streaming. For more information about the projection and raster plugins, see the STK Programming Interface."""
    _uuid = "{d7df6203-7dc8-4f07-8211-78e6d3c268a1}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory = agcom.GUID(IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory._uuid)
        vtable_offset_local = IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory.__dict__ and type(IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory.")
    
    def Initialize(self) -> "IAgStkGraphicsProjectionRasterStreamPluginActivator":
        """Initializes a new instance of the Activator type."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{d7df6203-7dc8-4f07-8211-78e6d3c268a1}", IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory)
agcls.AgTypeNameMap["IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory"] = IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory
__all__.append("IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory")

class IAgStkGraphicsRasterFactory(object):
    """A raster dataset. A raster consists of one or more bands, or sets of values, which are most commonly associated with colors when the raster represents an image..."""
    _uuid = "{b4777c93-7685-452a-87df-8fd8bfd10e6f}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_InitializeWithStringUri"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithStringUriXYWidthAndHeight"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithRaster"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsRasterFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsRasterFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsRasterFactory = agcom.GUID(IAgStkGraphicsRasterFactory._uuid)
        vtable_offset_local = IAgStkGraphicsRasterFactory._vtable_offset - 1
        self.__dict__["_InitializeWithStringUri"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsRasterFactory, vtable_offset_local+1, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithStringUriXYWidthAndHeight"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsRasterFactory, vtable_offset_local+2, agcom.BSTR, agcom.INT, agcom.INT, agcom.INT, agcom.INT, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithRaster"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsRasterFactory, vtable_offset_local+3, agcom.PVOID, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsRasterFactory.__dict__ and type(IAgStkGraphicsRasterFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsRasterFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsRasterFactory.")
    
    def InitializeWithStringUri(self, uri:str) -> "IAgStkGraphicsRaster":
        """Initializes a raster from a Uri, which can be a file, HTTP, HTTPS, or FTP source. See raster for a list of supported formats."""
        with agmarshall.BSTR_arg(uri) as arg_uri, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithStringUri"](arg_uri.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithStringUriXYWidthAndHeight(self, uri:str, x:int, y:int, width:int, height:int) -> "IAgStkGraphicsRaster":
        """Initializes a raster from a Uri. Only the specified subsection of the raster is read. See raster for a list of supported formats."""
        with agmarshall.BSTR_arg(uri) as arg_uri, \
             agmarshall.INT_arg(x) as arg_x, \
             agmarshall.INT_arg(y) as arg_y, \
             agmarshall.INT_arg(width) as arg_width, \
             agmarshall.INT_arg(height) as arg_height, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithStringUriXYWidthAndHeight"](arg_uri.COM_val, arg_x.COM_val, arg_y.COM_val, arg_width.COM_val, arg_height.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithRaster(self, raster:"IAgStkGraphicsRaster") -> "IAgStkGraphicsRaster":
        """Initializes a raster from another raster."""
        with agmarshall.AgInterface_in_arg(raster, IAgStkGraphicsRaster) as arg_raster, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithRaster"](arg_raster.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{b4777c93-7685-452a-87df-8fd8bfd10e6f}", IAgStkGraphicsRasterFactory)
agcls.AgTypeNameMap["IAgStkGraphicsRasterFactory"] = IAgStkGraphicsRasterFactory
__all__.append("IAgStkGraphicsRasterFactory")

class IAgStkGraphicsRasterAttributesFactory(object):
    """The attributes describing a raster dataset. raster attributes define the memory layout of a raster, and includes properties defining the order of each raster band that the raster contains, as specified by the raster format..."""
    _uuid = "{5e2aeff9-22ff-4a0f-984d-dc0d92d738c9}"
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_InitializeWithFormat"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithFormatAndType"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithFormatTypeAndOrientation"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithFormatTypeOrientationAndAlignment"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithFormatTypeOrientationAlignmentAndRatio"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithRaster"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsRasterAttributesFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsRasterAttributesFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsRasterAttributesFactory = agcom.GUID(IAgStkGraphicsRasterAttributesFactory._uuid)
        vtable_offset_local = IAgStkGraphicsRasterAttributesFactory._vtable_offset - 1
        self.__dict__["_InitializeWithFormat"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsRasterAttributesFactory, vtable_offset_local+1, agcom.INT, agcom.INT, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithFormatAndType"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsRasterAttributesFactory, vtable_offset_local+2, agcom.INT, agcom.INT, agcom.LONG, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithFormatTypeAndOrientation"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsRasterAttributesFactory, vtable_offset_local+3, agcom.INT, agcom.INT, agcom.LONG, agcom.LONG, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithFormatTypeOrientationAndAlignment"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsRasterAttributesFactory, vtable_offset_local+4, agcom.INT, agcom.INT, agcom.LONG, agcom.LONG, agcom.LONG, agcom.INT, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithFormatTypeOrientationAlignmentAndRatio"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsRasterAttributesFactory, vtable_offset_local+5, agcom.INT, agcom.INT, agcom.LONG, agcom.LONG, agcom.LONG, agcom.INT, agcom.DOUBLE, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithRaster"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsRasterAttributesFactory, vtable_offset_local+6, agcom.PVOID, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsRasterAttributesFactory.__dict__ and type(IAgStkGraphicsRasterAttributesFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsRasterAttributesFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsRasterAttributesFactory.")
    
    def InitializeWithFormat(self, width:int, height:int, rasterFormat:"AgEStkGraphicsRasterFormat") -> "IAgStkGraphicsRasterAttributes":
        """Initializes a new instance with the width and height of the raster in pixels, and the given raster format."""
        with agmarshall.INT_arg(width) as arg_width, \
             agmarshall.INT_arg(height) as arg_height, \
             agmarshall.AgEnum_arg(AgEStkGraphicsRasterFormat, rasterFormat) as arg_rasterFormat, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithFormat"](arg_width.COM_val, arg_height.COM_val, arg_rasterFormat.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithFormatAndType(self, width:int, height:int, rasterFormat:"AgEStkGraphicsRasterFormat", rasterType:"AgEStkGraphicsRasterType") -> "IAgStkGraphicsRasterAttributes":
        """Initializes a new instance with the width and height of the raster in pixels, and the given raster format and raster type."""
        with agmarshall.INT_arg(width) as arg_width, \
             agmarshall.INT_arg(height) as arg_height, \
             agmarshall.AgEnum_arg(AgEStkGraphicsRasterFormat, rasterFormat) as arg_rasterFormat, \
             agmarshall.AgEnum_arg(AgEStkGraphicsRasterType, rasterType) as arg_rasterType, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithFormatAndType"](arg_width.COM_val, arg_height.COM_val, arg_rasterFormat.COM_val, arg_rasterType.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithFormatTypeAndOrientation(self, width:int, height:int, rasterFormat:"AgEStkGraphicsRasterFormat", rasterType:"AgEStkGraphicsRasterType", rasterOrientation:"AgEStkGraphicsRasterOrientation") -> "IAgStkGraphicsRasterAttributes":
        """Initializes a new instance with the width and height of the raster in pixels, and the given raster format, raster type, and raster orientation."""
        with agmarshall.INT_arg(width) as arg_width, \
             agmarshall.INT_arg(height) as arg_height, \
             agmarshall.AgEnum_arg(AgEStkGraphicsRasterFormat, rasterFormat) as arg_rasterFormat, \
             agmarshall.AgEnum_arg(AgEStkGraphicsRasterType, rasterType) as arg_rasterType, \
             agmarshall.AgEnum_arg(AgEStkGraphicsRasterOrientation, rasterOrientation) as arg_rasterOrientation, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithFormatTypeAndOrientation"](arg_width.COM_val, arg_height.COM_val, arg_rasterFormat.COM_val, arg_rasterType.COM_val, arg_rasterOrientation.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithFormatTypeOrientationAndAlignment(self, width:int, height:int, rasterFormat:"AgEStkGraphicsRasterFormat", rasterType:"AgEStkGraphicsRasterType", rasterOrientation:"AgEStkGraphicsRasterOrientation", rowAlignment:int) -> "IAgStkGraphicsRasterAttributes":
        """Initializes a new instance with the width and height of the raster in pixels, and the given raster format, raster type, raster orientation, and row alignment."""
        with agmarshall.INT_arg(width) as arg_width, \
             agmarshall.INT_arg(height) as arg_height, \
             agmarshall.AgEnum_arg(AgEStkGraphicsRasterFormat, rasterFormat) as arg_rasterFormat, \
             agmarshall.AgEnum_arg(AgEStkGraphicsRasterType, rasterType) as arg_rasterType, \
             agmarshall.AgEnum_arg(AgEStkGraphicsRasterOrientation, rasterOrientation) as arg_rasterOrientation, \
             agmarshall.INT_arg(rowAlignment) as arg_rowAlignment, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithFormatTypeOrientationAndAlignment"](arg_width.COM_val, arg_height.COM_val, arg_rasterFormat.COM_val, arg_rasterType.COM_val, arg_rasterOrientation.COM_val, arg_rowAlignment.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithFormatTypeOrientationAlignmentAndRatio(self, width:int, height:int, rasterFormat:"AgEStkGraphicsRasterFormat", rasterType:"AgEStkGraphicsRasterType", rasterOrientation:"AgEStkGraphicsRasterOrientation", rowAlignment:int, pixelAspectRatio:float) -> "IAgStkGraphicsRasterAttributes":
        """Initializes a new instance with the width and height of the raster in pixels, and the given raster format, raster type, raster orientation, row alignment, and pixel aspect ratio."""
        with agmarshall.INT_arg(width) as arg_width, \
             agmarshall.INT_arg(height) as arg_height, \
             agmarshall.AgEnum_arg(AgEStkGraphicsRasterFormat, rasterFormat) as arg_rasterFormat, \
             agmarshall.AgEnum_arg(AgEStkGraphicsRasterType, rasterType) as arg_rasterType, \
             agmarshall.AgEnum_arg(AgEStkGraphicsRasterOrientation, rasterOrientation) as arg_rasterOrientation, \
             agmarshall.INT_arg(rowAlignment) as arg_rowAlignment, \
             agmarshall.DOUBLE_arg(pixelAspectRatio) as arg_pixelAspectRatio, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithFormatTypeOrientationAlignmentAndRatio"](arg_width.COM_val, arg_height.COM_val, arg_rasterFormat.COM_val, arg_rasterType.COM_val, arg_rasterOrientation.COM_val, arg_rowAlignment.COM_val, arg_pixelAspectRatio.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithRaster(self, raster:"IAgStkGraphicsRaster") -> "IAgStkGraphicsRasterAttributes":
        """Initializes a new instance with the attributes of the specified raster"""
        with agmarshall.AgInterface_in_arg(raster, IAgStkGraphicsRaster) as arg_raster, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithRaster"](arg_raster.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{5e2aeff9-22ff-4a0f-984d-dc0d92d738c9}", IAgStkGraphicsRasterAttributesFactory)
agcls.AgTypeNameMap["IAgStkGraphicsRasterAttributesFactory"] = IAgStkGraphicsRasterAttributesFactory
__all__.append("IAgStkGraphicsRasterAttributesFactory")

class IAgStkGraphicsRotateFilterFactory(object):
    """Rotates the source raster clockwise by the specified angle."""
    _uuid = "{413b5f7f-9fa5-48ba-bb49-d57948acc6ed}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithAngle"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsRotateFilterFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsRotateFilterFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsRotateFilterFactory = agcom.GUID(IAgStkGraphicsRotateFilterFactory._uuid)
        vtable_offset_local = IAgStkGraphicsRotateFilterFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsRotateFilterFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithAngle"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsRotateFilterFactory, vtable_offset_local+2, agcom.DOUBLE, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsRotateFilterFactory.__dict__ and type(IAgStkGraphicsRotateFilterFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsRotateFilterFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsRotateFilterFactory.")
    
    def Initialize(self) -> "IAgStkGraphicsRotateFilter":
        """Initializes a new instance."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithAngle(self, rotateAngle:float) -> "IAgStkGraphicsRotateFilter":
        """Initializes a new instance with a counterclockwise rotation angle."""
        with agmarshall.DOUBLE_arg(rotateAngle) as arg_rotateAngle, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithAngle"](arg_rotateAngle.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{413b5f7f-9fa5-48ba-bb49-d57948acc6ed}", IAgStkGraphicsRotateFilterFactory)
agcls.AgTypeNameMap["IAgStkGraphicsRotateFilterFactory"] = IAgStkGraphicsRotateFilterFactory
__all__.append("IAgStkGraphicsRotateFilterFactory")

class IAgStkGraphicsSequenceFilterFactory(object):
    """Applies a sequence of filters to the source raster in the order in which they were added. When continue on failure is set to true, subsequent filters will still be applied to the source raster even if one or more filters in the sequence cannot be applied."""
    _uuid = "{b3f075e4-7de5-4d8c-adbe-89862537e530}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsSequenceFilterFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsSequenceFilterFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsSequenceFilterFactory = agcom.GUID(IAgStkGraphicsSequenceFilterFactory._uuid)
        vtable_offset_local = IAgStkGraphicsSequenceFilterFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSequenceFilterFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsSequenceFilterFactory.__dict__ and type(IAgStkGraphicsSequenceFilterFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsSequenceFilterFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsSequenceFilterFactory.")
    
    def Initialize(self) -> "IAgStkGraphicsSequenceFilter":
        """Initializes a new instance."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{b3f075e4-7de5-4d8c-adbe-89862537e530}", IAgStkGraphicsSequenceFilterFactory)
agcls.AgTypeNameMap["IAgStkGraphicsSequenceFilterFactory"] = IAgStkGraphicsSequenceFilterFactory
__all__.append("IAgStkGraphicsSequenceFilterFactory")

class IAgStkGraphicsSharpenFilterFactory(object):
    """Applies a convolution filter to increase the sharpness of the source raster."""
    _uuid = "{953f907c-8223-40fa-9827-cb08278d5af4}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithMethod"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsSharpenFilterFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsSharpenFilterFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsSharpenFilterFactory = agcom.GUID(IAgStkGraphicsSharpenFilterFactory._uuid)
        vtable_offset_local = IAgStkGraphicsSharpenFilterFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSharpenFilterFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithMethod"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSharpenFilterFactory, vtable_offset_local+2, agcom.LONG, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsSharpenFilterFactory.__dict__ and type(IAgStkGraphicsSharpenFilterFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsSharpenFilterFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsSharpenFilterFactory.")
    
    def Initialize(self) -> "IAgStkGraphicsSharpenFilter":
        """Initialize a new instance."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithMethod(self, method:"AgEStkGraphicsSharpenMethod") -> "IAgStkGraphicsSharpenFilter":
        """Initialize a new instance with the specified sharpen method."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsSharpenMethod, method) as arg_method, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithMethod"](arg_method.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{953f907c-8223-40fa-9827-cb08278d5af4}", IAgStkGraphicsSharpenFilterFactory)
agcls.AgTypeNameMap["IAgStkGraphicsSharpenFilterFactory"] = IAgStkGraphicsSharpenFilterFactory
__all__.append("IAgStkGraphicsSharpenFilterFactory")

class IAgStkGraphicsVideoStreamFactory(object):
    """A raster stream that streams from a video. The video can be read from a file, or streamed from an HTTP, RTP, UDP, or TCP source. See the Video Streams Overview for a list of supported video formats and Uri usage."""
    _uuid = "{fbde7847-ccff-4c4e-83cf-5f7b05468709}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_InitializeWithStringUri"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithStringUriAndAudio"] = _raise_uninitialized_error
        self.__dict__["_InitializeAudioVideoWithStringUri"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsVideoStreamFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsVideoStreamFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsVideoStreamFactory = agcom.GUID(IAgStkGraphicsVideoStreamFactory._uuid)
        vtable_offset_local = IAgStkGraphicsVideoStreamFactory._vtable_offset - 1
        self.__dict__["_InitializeWithStringUri"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVideoStreamFactory, vtable_offset_local+1, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithStringUriAndAudio"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVideoStreamFactory, vtable_offset_local+2, agcom.BSTR, agcom.VARIANT_BOOL, POINTER(agcom.PVOID))
        self.__dict__["_InitializeAudioVideoWithStringUri"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVideoStreamFactory, vtable_offset_local+3, agcom.BSTR, agcom.BSTR, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsVideoStreamFactory.__dict__ and type(IAgStkGraphicsVideoStreamFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsVideoStreamFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsVideoStreamFactory.")
    
    def InitializeWithStringUri(self, uri:str) -> "IAgStkGraphicsVideoStream":
        """Initializes the video stream from a Uri, which can be a file, HTTP, RTP, UDP, or TCP source. See the Video Streams Overview for a list of supported video formats and Uri usage."""
        with agmarshall.BSTR_arg(uri) as arg_uri, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithStringUri"](arg_uri.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithStringUriAndAudio(self, uri:str, loadAudio:bool) -> "IAgStkGraphicsVideoStream":
        """Initializes the video stream from a Uri, which can be a file, HTTP, RTP, UDP, or TCP source. See the Video Streams Overview for a list of supported video formats and Uri usage."""
        with agmarshall.BSTR_arg(uri) as arg_uri, \
             agmarshall.VARIANT_BOOL_arg(loadAudio) as arg_loadAudio, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithStringUriAndAudio"](arg_uri.COM_val, arg_loadAudio.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeAudioVideoWithStringUri(self, uri:str, audioUri:str) -> "IAgStkGraphicsVideoStream":
        """Initializes the video stream from a Uri, which can be a file, HTTP, RTP, UDP, or TCP source. See the Video Streams Overview for a list of supported video formats and Uri usage."""
        with agmarshall.BSTR_arg(uri) as arg_uri, \
             agmarshall.BSTR_arg(audioUri) as arg_audioUri, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeAudioVideoWithStringUri"](arg_uri.COM_val, arg_audioUri.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{fbde7847-ccff-4c4e-83cf-5f7b05468709}", IAgStkGraphicsVideoStreamFactory)
agcls.AgTypeNameMap["IAgStkGraphicsVideoStreamFactory"] = IAgStkGraphicsVideoStreamFactory
__all__.append("IAgStkGraphicsVideoStreamFactory")

class IAgStkGraphicsMarkerBatchPrimitiveFactory(object):
    """ Renders one or more markers in the 3D scene. Markers are 2D images that always face the viewer which can be sized in pixels or meters. Markers are also referred to as sprites or billboards..."""
    _uuid = "{02a33d9e-cfb3-41c8-be66-e452ae1b7ac3}"
    _num_methods = 7
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithSetHint"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithSizeSource"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithSizeSourceAndSortOrder"] = _raise_uninitialized_error
        self.__dict__["_InitializeSizeSourceSortOrderAndSetHint"] = _raise_uninitialized_error
        self.__dict__["_InitializeSizeSourceSortOrderSetHintAndRenderingMethod"] = _raise_uninitialized_error
        self.__dict__["_Supported"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsMarkerBatchPrimitiveFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsMarkerBatchPrimitiveFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsMarkerBatchPrimitiveFactory = agcom.GUID(IAgStkGraphicsMarkerBatchPrimitiveFactory._uuid)
        vtable_offset_local = IAgStkGraphicsMarkerBatchPrimitiveFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitiveFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithSetHint"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitiveFactory, vtable_offset_local+2, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithSizeSource"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitiveFactory, vtable_offset_local+3, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithSizeSourceAndSortOrder"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitiveFactory, vtable_offset_local+4, agcom.LONG, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_InitializeSizeSourceSortOrderAndSetHint"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitiveFactory, vtable_offset_local+5, agcom.LONG, agcom.LONG, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_InitializeSizeSourceSortOrderSetHintAndRenderingMethod"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitiveFactory, vtable_offset_local+6, agcom.LONG, agcom.LONG, agcom.LONG, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_Supported"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitiveFactory, vtable_offset_local+7, agcom.LONG, POINTER(agcom.VARIANT_BOOL))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsMarkerBatchPrimitiveFactory.__dict__ and type(IAgStkGraphicsMarkerBatchPrimitiveFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsMarkerBatchPrimitiveFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsMarkerBatchPrimitiveFactory.")
    
    def Initialize(self) -> "IAgStkGraphicsMarkerBatchPrimitive":
        """Initializes a default marker batch primitive..."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithSetHint(self, setHint:"AgEStkGraphicsSetHint") -> "IAgStkGraphicsMarkerBatchPrimitive":
        """Initializes a marker batch primitive with the specified setHint..."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsSetHint, setHint) as arg_setHint, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithSetHint"](arg_setHint.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithSizeSource(self, sizeSource:"AgEStkGraphicsMarkerBatchSizeSource") -> "IAgStkGraphicsMarkerBatchPrimitive":
        """Initializes a marker batch primitive with the specified sizeSource..."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsMarkerBatchSizeSource, sizeSource) as arg_sizeSource, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithSizeSource"](arg_sizeSource.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithSizeSourceAndSortOrder(self, sizeSource:"AgEStkGraphicsMarkerBatchSizeSource", sortOrder:"AgEStkGraphicsMarkerBatchSortOrder") -> "IAgStkGraphicsMarkerBatchPrimitive":
        """Initializes a marker batch primitive with the specified sizeSource and sortOrder..."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsMarkerBatchSizeSource, sizeSource) as arg_sizeSource, \
             agmarshall.AgEnum_arg(AgEStkGraphicsMarkerBatchSortOrder, sortOrder) as arg_sortOrder, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithSizeSourceAndSortOrder"](arg_sizeSource.COM_val, arg_sortOrder.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeSizeSourceSortOrderAndSetHint(self, sizeSource:"AgEStkGraphicsMarkerBatchSizeSource", sortOrder:"AgEStkGraphicsMarkerBatchSortOrder", setHint:"AgEStkGraphicsSetHint") -> "IAgStkGraphicsMarkerBatchPrimitive":
        """Initializes a marker batch primitive with the specified sizeSource, sortOrder, and setHint. This is equivalent to constructing a marker batch with the specified arguments and a marker batch rendering method of Automatic."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsMarkerBatchSizeSource, sizeSource) as arg_sizeSource, \
             agmarshall.AgEnum_arg(AgEStkGraphicsMarkerBatchSortOrder, sortOrder) as arg_sortOrder, \
             agmarshall.AgEnum_arg(AgEStkGraphicsSetHint, setHint) as arg_setHint, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeSizeSourceSortOrderAndSetHint"](arg_sizeSource.COM_val, arg_sortOrder.COM_val, arg_setHint.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeSizeSourceSortOrderSetHintAndRenderingMethod(self, sizeSource:"AgEStkGraphicsMarkerBatchSizeSource", sortOrder:"AgEStkGraphicsMarkerBatchSortOrder", setHint:"AgEStkGraphicsSetHint", renderingMethod:"AgEStkGraphicsMarkerBatchRenderingMethod") -> "IAgStkGraphicsMarkerBatchPrimitive":
        """Initializes a marker batch primitive with the specified arguments."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsMarkerBatchSizeSource, sizeSource) as arg_sizeSource, \
             agmarshall.AgEnum_arg(AgEStkGraphicsMarkerBatchSortOrder, sortOrder) as arg_sortOrder, \
             agmarshall.AgEnum_arg(AgEStkGraphicsSetHint, setHint) as arg_setHint, \
             agmarshall.AgEnum_arg(AgEStkGraphicsMarkerBatchRenderingMethod, renderingMethod) as arg_renderingMethod, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeSizeSourceSortOrderSetHintAndRenderingMethod"](arg_sizeSource.COM_val, arg_sortOrder.COM_val, arg_setHint.COM_val, arg_renderingMethod.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def Supported(self, renderingMethod:"AgEStkGraphicsMarkerBatchRenderingMethod") -> bool:
        """Determines whether or not the video card supports the marker batch primitive with the given renderingMethod."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsMarkerBatchRenderingMethod, renderingMethod) as arg_renderingMethod, \
             agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_Supported"](arg_renderingMethod.COM_val, byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{02a33d9e-cfb3-41c8-be66-e452ae1b7ac3}", IAgStkGraphicsMarkerBatchPrimitiveFactory)
agcls.AgTypeNameMap["IAgStkGraphicsMarkerBatchPrimitiveFactory"] = IAgStkGraphicsMarkerBatchPrimitiveFactory
__all__.append("IAgStkGraphicsMarkerBatchPrimitiveFactory")

class IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory(object):
    """Optional per-marker parameters for marker batch primitive that overrides the marker batch's per-batch parameters..."""
    _uuid = "{9b29c9ab-8fd6-4f2b-8183-b504e319617e}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory = agcom.GUID(IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory._uuid)
        vtable_offset_local = IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory.__dict__ and type(IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory.")
    
    def Initialize(self) -> "IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters":
        """Initializes default marker batch primitive optional parameters. All per-marker parameters are initially empty."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{9b29c9ab-8fd6-4f2b-8183-b504e319617e}", IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory)
agcls.AgTypeNameMap["IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory"] = IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory
__all__.append("IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory")

class IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory(object):
    """path primitive update policy that removes points from remove location when the number of points in the path exceeds maximum count."""
    _uuid = "{046383cc-b5b9-4ff5-b662-701e694170ba}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithParameters"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory = agcom.GUID(IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory._uuid)
        vtable_offset_local = IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithParameters"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory, vtable_offset_local+2, agcom.INT, agcom.LONG, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory.__dict__ and type(IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory.")
    
    def Initialize(self) -> "IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy":
        """Constructs a default update policy. This is equivalent to constructing a policy with maximum count set to 0 and a remove location of Front."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithParameters(self, maximumCount:int, removeLocation:"AgEStkGraphicsPathPrimitiveRemoveLocation") -> "IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy":
        """Initializes a policy with the specified maximumCount and removeLocation."""
        with agmarshall.INT_arg(maximumCount) as arg_maximumCount, \
             agmarshall.AgEnum_arg(AgEStkGraphicsPathPrimitiveRemoveLocation, removeLocation) as arg_removeLocation, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithParameters"](arg_maximumCount.COM_val, arg_removeLocation.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{046383cc-b5b9-4ff5-b662-701e694170ba}", IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory)
agcls.AgTypeNameMap["IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory"] = IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory
__all__.append("IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory")

class IAgStkGraphicsModelPrimitiveFactory(object):
    """The model primitive loads and renders <a href='http://www.collada.org/'>COLLADA</a> (DAE) and AGI <a href='https://support.agi.com/3d-models'>MDL</a> (MDL) models."""
    _uuid = "{93ea79ef-8da7-4992-b8fa-81d372d4258a}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithStringUri"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithStringUriAndUpAxis"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsModelPrimitiveFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsModelPrimitiveFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsModelPrimitiveFactory = agcom.GUID(IAgStkGraphicsModelPrimitiveFactory._uuid)
        vtable_offset_local = IAgStkGraphicsModelPrimitiveFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsModelPrimitiveFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithStringUri"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsModelPrimitiveFactory, vtable_offset_local+2, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithStringUriAndUpAxis"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsModelPrimitiveFactory, vtable_offset_local+3, agcom.BSTR, agcom.LONG, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsModelPrimitiveFactory.__dict__ and type(IAgStkGraphicsModelPrimitiveFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsModelPrimitiveFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsModelPrimitiveFactory.")
    
    def Initialize(self) -> "IAgStkGraphicsModelPrimitive":
        """Initializes a default model primitive."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithStringUri(self, uri:str) -> "IAgStkGraphicsModelPrimitive":
        """For convenience. Initializes a model primitive with the specified file path."""
        with agmarshall.BSTR_arg(uri) as arg_uri, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithStringUri"](arg_uri.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithStringUriAndUpAxis(self, uri:str, upAxis:"AgEStkGraphicsModelUpAxis") -> "IAgStkGraphicsModelPrimitive":
        """For convenience. Initializes a model primitive with the specified file path and up axis."""
        with agmarshall.BSTR_arg(uri) as arg_uri, \
             agmarshall.AgEnum_arg(AgEStkGraphicsModelUpAxis, upAxis) as arg_upAxis, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithStringUriAndUpAxis"](arg_uri.COM_val, arg_upAxis.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{93ea79ef-8da7-4992-b8fa-81d372d4258a}", IAgStkGraphicsModelPrimitiveFactory)
agcls.AgTypeNameMap["IAgStkGraphicsModelPrimitiveFactory"] = IAgStkGraphicsModelPrimitiveFactory
__all__.append("IAgStkGraphicsModelPrimitiveFactory")

class IAgStkGraphicsPathPrimitiveFactory(object):
    """Renders a line to the 3D scene. Similar to the polyline primitive; however, the PathPrimitive was designed for the efficient addition/removal of points to/from the front or back of the line."""
    _uuid = "{2b9b98c4-17d2-4b72-a6cf-c9bc87eb11e8}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithCapacity"] = _raise_uninitialized_error
        self.__dict__["_GetMinimumWidthSupported"] = _raise_uninitialized_error
        self.__dict__["_GetMaximumWidthSupported"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsPathPrimitiveFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsPathPrimitiveFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsPathPrimitiveFactory = agcom.GUID(IAgStkGraphicsPathPrimitiveFactory._uuid)
        vtable_offset_local = IAgStkGraphicsPathPrimitiveFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPathPrimitiveFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithCapacity"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPathPrimitiveFactory, vtable_offset_local+2, agcom.INT, POINTER(agcom.PVOID))
        self.__dict__["_GetMinimumWidthSupported"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPathPrimitiveFactory, vtable_offset_local+3, POINTER(agcom.FLOAT))
        self.__dict__["_GetMaximumWidthSupported"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPathPrimitiveFactory, vtable_offset_local+4, POINTER(agcom.FLOAT))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsPathPrimitiveFactory.__dict__ and type(IAgStkGraphicsPathPrimitiveFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsPathPrimitiveFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsPathPrimitiveFactory.")
    
    def Initialize(self) -> "IAgStkGraphicsPathPrimitive":
        """Initializes a default path primitive. This is equivalent to constructing a path primitive with an initial capacity of 16."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithCapacity(self, capacity:int) -> "IAgStkGraphicsPathPrimitive":
        """Initializes a path primitive with the specified capacity."""
        with agmarshall.INT_arg(capacity) as arg_capacity, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithCapacity"](arg_capacity.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def MinimumWidthSupported(self) -> float:
        """Gets the minimum width, in pixels, supported by the video card."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinimumWidthSupported"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def MaximumWidthSupported(self) -> float:
        """Gets the maximum width, in pixels, supported by the video card."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaximumWidthSupported"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{2b9b98c4-17d2-4b72-a6cf-c9bc87eb11e8}", IAgStkGraphicsPathPrimitiveFactory)
agcls.AgTypeNameMap["IAgStkGraphicsPathPrimitiveFactory"] = IAgStkGraphicsPathPrimitiveFactory
__all__.append("IAgStkGraphicsPathPrimitiveFactory")

class IAgStkGraphicsPixelSizeDisplayConditionFactory(object):
    """Defines an inclusive interval, in pixels, that determines when an object, such as a primitive, is rendered based on the number of pixels the object's bounding sphere (or in the case of screen overlays, bounding rectangle) covers on the screen..."""
    _uuid = "{2c7bb493-89f9-40f9-b562-feed771d08b7}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithPixelSizes"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsPixelSizeDisplayConditionFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsPixelSizeDisplayConditionFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsPixelSizeDisplayConditionFactory = agcom.GUID(IAgStkGraphicsPixelSizeDisplayConditionFactory._uuid)
        vtable_offset_local = IAgStkGraphicsPixelSizeDisplayConditionFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPixelSizeDisplayConditionFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithPixelSizes"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPixelSizeDisplayConditionFactory, vtable_offset_local+2, agcom.INT, agcom.INT, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsPixelSizeDisplayConditionFactory.__dict__ and type(IAgStkGraphicsPixelSizeDisplayConditionFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsPixelSizeDisplayConditionFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsPixelSizeDisplayConditionFactory.")
    
    def Initialize(self) -> "IAgStkGraphicsPixelSizeDisplayCondition":
        """Initializes a default pixel size display condition. minimum pixel size is set to 0 and maximum pixel size is set to Int32.MaxValue. With this interval, an object is always rendered regardless of how many pixels its bounding sphere or rectangle covers."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithPixelSizes(self, minimumPixelSize:int, maximumPixelSize:int) -> "IAgStkGraphicsPixelSizeDisplayCondition":
        """Initializes a pixel size display condition with the inclusive interval [minimumPixelSize, maximumPixelSize]..."""
        with agmarshall.INT_arg(minimumPixelSize) as arg_minimumPixelSize, \
             agmarshall.INT_arg(maximumPixelSize) as arg_maximumPixelSize, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithPixelSizes"](arg_minimumPixelSize.COM_val, arg_maximumPixelSize.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{2c7bb493-89f9-40f9-b562-feed771d08b7}", IAgStkGraphicsPixelSizeDisplayConditionFactory)
agcls.AgTypeNameMap["IAgStkGraphicsPixelSizeDisplayConditionFactory"] = IAgStkGraphicsPixelSizeDisplayConditionFactory
__all__.append("IAgStkGraphicsPixelSizeDisplayConditionFactory")

class IAgStkGraphicsPointBatchPrimitiveFactory(object):
    """ Renders one or more points in the 3D scene. Each point in the batch has a unique position and an optional color. All points in the batch share the same pixel size. For best performance, avoid creating lots of batches with only a few points each..."""
    _uuid = "{5dd03481-3541-486c-973f-f079eb35973c}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithSetHint"] = _raise_uninitialized_error
        self.__dict__["_GetMinimumPixelSizeSupported"] = _raise_uninitialized_error
        self.__dict__["_GetMaximumPixelSizeSupported"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsPointBatchPrimitiveFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsPointBatchPrimitiveFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsPointBatchPrimitiveFactory = agcom.GUID(IAgStkGraphicsPointBatchPrimitiveFactory._uuid)
        vtable_offset_local = IAgStkGraphicsPointBatchPrimitiveFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPointBatchPrimitiveFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithSetHint"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPointBatchPrimitiveFactory, vtable_offset_local+2, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_GetMinimumPixelSizeSupported"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPointBatchPrimitiveFactory, vtable_offset_local+3, POINTER(agcom.FLOAT))
        self.__dict__["_GetMaximumPixelSizeSupported"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPointBatchPrimitiveFactory, vtable_offset_local+4, POINTER(agcom.FLOAT))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsPointBatchPrimitiveFactory.__dict__ and type(IAgStkGraphicsPointBatchPrimitiveFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsPointBatchPrimitiveFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsPointBatchPrimitiveFactory.")
    
    def Initialize(self) -> "IAgStkGraphicsPointBatchPrimitive":
        """Initializes a default point batch primitive. This is equivalent to constructing a point batch with a set hint of Frequent."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithSetHint(self, setHint:"AgEStkGraphicsSetHint") -> "IAgStkGraphicsPointBatchPrimitive":
        """Initializes a new instance of a point batch primitive with the specified set hint."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsSetHint, setHint) as arg_setHint, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithSetHint"](arg_setHint.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def MinimumPixelSizeSupported(self) -> float:
        """Gets the minimum pixel size supported by the video card."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinimumPixelSizeSupported"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def MaximumPixelSizeSupported(self) -> float:
        """Gets the maximum pixel size supported by the video card."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaximumPixelSizeSupported"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{5dd03481-3541-486c-973f-f079eb35973c}", IAgStkGraphicsPointBatchPrimitiveFactory)
agcls.AgTypeNameMap["IAgStkGraphicsPointBatchPrimitiveFactory"] = IAgStkGraphicsPointBatchPrimitiveFactory
__all__.append("IAgStkGraphicsPointBatchPrimitiveFactory")

class IAgStkGraphicsPolylinePrimitiveFactory(object):
    """Renders a polyline in the 3D scene. Each line segment may have a different color. A polyline can be constructed with a position interpolator to render great arcs or rhumb lines."""
    _uuid = "{16a27023-42d5-4994-9ace-165e027e72d8}"
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithInterpolatorAndSetHint"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithTypeAndHint"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithInterpolator"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithHint"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithType"] = _raise_uninitialized_error
        self.__dict__["_GetMinimumWidthSupported"] = _raise_uninitialized_error
        self.__dict__["_GetMaximumWidthSupported"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsPolylinePrimitiveFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsPolylinePrimitiveFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsPolylinePrimitiveFactory = agcom.GUID(IAgStkGraphicsPolylinePrimitiveFactory._uuid)
        vtable_offset_local = IAgStkGraphicsPolylinePrimitiveFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPolylinePrimitiveFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithInterpolatorAndSetHint"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPolylinePrimitiveFactory, vtable_offset_local+2, agcom.PVOID, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithTypeAndHint"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPolylinePrimitiveFactory, vtable_offset_local+3, agcom.LONG, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithInterpolator"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPolylinePrimitiveFactory, vtable_offset_local+4, agcom.PVOID, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithHint"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPolylinePrimitiveFactory, vtable_offset_local+5, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithType"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPolylinePrimitiveFactory, vtable_offset_local+6, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_GetMinimumWidthSupported"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPolylinePrimitiveFactory, vtable_offset_local+7, POINTER(agcom.FLOAT))
        self.__dict__["_GetMaximumWidthSupported"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPolylinePrimitiveFactory, vtable_offset_local+8, POINTER(agcom.FLOAT))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsPolylinePrimitiveFactory.__dict__ and type(IAgStkGraphicsPolylinePrimitiveFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsPolylinePrimitiveFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsPolylinePrimitiveFactory.")
    
    def Initialize(self) -> "IAgStkGraphicsPolylinePrimitive":
        """Initializes a default polyline primitive. This is equivalent to constructing a polyline with a set hint of Frequent and a polyline type of LineStrip."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithInterpolatorAndSetHint(self, interpolator:"IAgStkGraphicsPositionInterpolator", setHint:"AgEStkGraphicsSetHint") -> "IAgStkGraphicsPolylinePrimitive":
        """Initializes a polyline primitive with the specified interpolator and setHint."""
        with agmarshall.AgInterface_in_arg(interpolator, IAgStkGraphicsPositionInterpolator) as arg_interpolator, \
             agmarshall.AgEnum_arg(AgEStkGraphicsSetHint, setHint) as arg_setHint, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithInterpolatorAndSetHint"](arg_interpolator.COM_val, arg_setHint.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithTypeAndHint(self, polylineType:"AgEStkGraphicsPolylineType", setHint:"AgEStkGraphicsSetHint") -> "IAgStkGraphicsPolylinePrimitive":
        """Initializes a new instance of a polyline primitive with the specified polylineType and setHint."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsPolylineType, polylineType) as arg_polylineType, \
             agmarshall.AgEnum_arg(AgEStkGraphicsSetHint, setHint) as arg_setHint, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithTypeAndHint"](arg_polylineType.COM_val, arg_setHint.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithInterpolator(self, interpolator:"IAgStkGraphicsPositionInterpolator") -> "IAgStkGraphicsPolylinePrimitive":
        """Initializes a polyline primitive with the specified interpolator. This is equivalent to constructing a polyline with the specified interpolator and a set hint of Frequent."""
        with agmarshall.AgInterface_in_arg(interpolator, IAgStkGraphicsPositionInterpolator) as arg_interpolator, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithInterpolator"](arg_interpolator.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithHint(self, setHint:"AgEStkGraphicsSetHint") -> "IAgStkGraphicsPolylinePrimitive":
        """Initializes a new instance of a polyline primitive with the specified set hint. This is equivalent to constructing a polyline with a polyline type of LineStrip and the specified set hint."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsSetHint, setHint) as arg_setHint, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithHint"](arg_setHint.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithType(self, polylineType:"AgEStkGraphicsPolylineType") -> "IAgStkGraphicsPolylinePrimitive":
        """Initializes a polyline primitive with the specified polylineType. This is equivalent to constructing a polyline with the specified polylineType and a set hint of Frequent."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsPolylineType, polylineType) as arg_polylineType, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithType"](arg_polylineType.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def MinimumWidthSupported(self) -> float:
        """Gets the minimum width, in pixels, supported by the video card."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinimumWidthSupported"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def MaximumWidthSupported(self) -> float:
        """Gets the maximum width, in pixels, supported by the video card."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaximumWidthSupported"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{16a27023-42d5-4994-9ace-165e027e72d8}", IAgStkGraphicsPolylinePrimitiveFactory)
agcls.AgTypeNameMap["IAgStkGraphicsPolylinePrimitiveFactory"] = IAgStkGraphicsPolylinePrimitiveFactory
__all__.append("IAgStkGraphicsPolylinePrimitiveFactory")

class IAgStkGraphicsPolylinePrimitiveOptionalParametersFactory(object):
    """Optional per-point or per-segment parameters for polyline primitive that overrides the polyline primitive's global parameters..."""
    _uuid = "{7f416edb-d9ac-41bd-8216-893ca9ccc16b}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsPolylinePrimitiveOptionalParametersFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsPolylinePrimitiveOptionalParametersFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsPolylinePrimitiveOptionalParametersFactory = agcom.GUID(IAgStkGraphicsPolylinePrimitiveOptionalParametersFactory._uuid)
        vtable_offset_local = IAgStkGraphicsPolylinePrimitiveOptionalParametersFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsPolylinePrimitiveOptionalParametersFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsPolylinePrimitiveOptionalParametersFactory.__dict__ and type(IAgStkGraphicsPolylinePrimitiveOptionalParametersFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsPolylinePrimitiveOptionalParametersFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsPolylinePrimitiveOptionalParametersFactory.")
    
    def Initialize(self) -> "IAgStkGraphicsPolylinePrimitiveOptionalParameters":
        """Initializes default polyline primitive optional parameters. All per-segment parameters are initially empty."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{7f416edb-d9ac-41bd-8216-893ca9ccc16b}", IAgStkGraphicsPolylinePrimitiveOptionalParametersFactory)
agcls.AgTypeNameMap["IAgStkGraphicsPolylinePrimitiveOptionalParametersFactory"] = IAgStkGraphicsPolylinePrimitiveOptionalParametersFactory
__all__.append("IAgStkGraphicsPolylinePrimitiveOptionalParametersFactory")

class IAgStkGraphicsRasterImageGlobeOverlayFactory(object):
    """A globe image overlay for handling rasters."""
    _uuid = "{00a01c47-a9d0-4020-a469-fd874b219713}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_InitializeWithString"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithColor"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithRaster"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsRasterImageGlobeOverlayFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsRasterImageGlobeOverlayFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsRasterImageGlobeOverlayFactory = agcom.GUID(IAgStkGraphicsRasterImageGlobeOverlayFactory._uuid)
        vtable_offset_local = IAgStkGraphicsRasterImageGlobeOverlayFactory._vtable_offset - 1
        self.__dict__["_InitializeWithString"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsRasterImageGlobeOverlayFactory, vtable_offset_local+1, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithColor"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsRasterImageGlobeOverlayFactory, vtable_offset_local+2, agcom.OLE_COLOR, POINTER(agcom.SAFEARRAY), POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithRaster"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsRasterImageGlobeOverlayFactory, vtable_offset_local+3, agcom.PVOID, POINTER(agcom.SAFEARRAY), POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsRasterImageGlobeOverlayFactory.__dict__ and type(IAgStkGraphicsRasterImageGlobeOverlayFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsRasterImageGlobeOverlayFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsRasterImageGlobeOverlayFactory.")
    
    def InitializeWithString(self, uri:str, extent:list) -> "IAgStkGraphicsRasterImageGlobeOverlay":
        """Initializes a raster image globe overlay with the provided values."""
        with agmarshall.BSTR_arg(uri) as arg_uri, \
             agmarshall.SAFEARRAY_arg(extent) as arg_extent, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithString"](arg_uri.COM_val, byref(arg_extent.COM_val), byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithColor(self, color:agcolor.Color, extent:list) -> "IAgStkGraphicsRasterImageGlobeOverlay":
        """Initializes a raster image globe overlay with the provided values."""
        with agmarshall.OLE_COLOR_arg(color) as arg_color, \
             agmarshall.SAFEARRAY_arg(extent) as arg_extent, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithColor"](arg_color.COM_val, byref(arg_extent.COM_val), byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithRaster(self, raster:"IAgStkGraphicsRaster", extent:list) -> "IAgStkGraphicsRasterImageGlobeOverlay":
        """Initializes a raster image globe overlay with the provided values."""
        with agmarshall.AgInterface_in_arg(raster, IAgStkGraphicsRaster) as arg_raster, \
             agmarshall.SAFEARRAY_arg(extent) as arg_extent, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithRaster"](arg_raster.COM_val, byref(arg_extent.COM_val), byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{00a01c47-a9d0-4020-a469-fd874b219713}", IAgStkGraphicsRasterImageGlobeOverlayFactory)
agcls.AgTypeNameMap["IAgStkGraphicsRasterImageGlobeOverlayFactory"] = IAgStkGraphicsRasterImageGlobeOverlayFactory
__all__.append("IAgStkGraphicsRasterImageGlobeOverlayFactory")

class IAgStkGraphicsRhumbLineInterpolatorFactory(object):
    """The rhumb line interpolator computes interpolated positions along a rhumb line. Rhumb lines are lines of constant bearing. They appear as straight lines on a Mercator 2D map projection and are well suited to navigation."""
    _uuid = "{1cf08578-668b-431a-9df2-8bb329e3fdf5}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithCentralBody"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithCentralBodyAndGranularity"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsRhumbLineInterpolatorFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsRhumbLineInterpolatorFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsRhumbLineInterpolatorFactory = agcom.GUID(IAgStkGraphicsRhumbLineInterpolatorFactory._uuid)
        vtable_offset_local = IAgStkGraphicsRhumbLineInterpolatorFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsRhumbLineInterpolatorFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithCentralBody"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsRhumbLineInterpolatorFactory, vtable_offset_local+2, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithCentralBodyAndGranularity"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsRhumbLineInterpolatorFactory, vtable_offset_local+3, agcom.BSTR, agcom.DOUBLE, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsRhumbLineInterpolatorFactory.__dict__ and type(IAgStkGraphicsRhumbLineInterpolatorFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsRhumbLineInterpolatorFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsRhumbLineInterpolatorFactory.")
    
    def Initialize(self) -> "IAgStkGraphicsRhumbLineInterpolator":
        """Initializes a default rhumb line interpolator. This is equivalent to constructing a rhumb line interpolator with a central body equal to an instance of earth central body and a granularity of 1 degree."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithCentralBody(self, centralBody:str) -> "IAgStkGraphicsRhumbLineInterpolator":
        """Initializes a rhumb line interpolator with the specified centralBody and a granularity of 1 degree."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithCentralBody"](arg_centralBody.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithCentralBodyAndGranularity(self, centralBody:str, granularity:float) -> "IAgStkGraphicsRhumbLineInterpolator":
        """Initializes a rhumb line interpolator with the specified centralBody and granularity."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.DOUBLE_arg(granularity) as arg_granularity, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithCentralBodyAndGranularity"](arg_centralBody.COM_val, arg_granularity.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{1cf08578-668b-431a-9df2-8bb329e3fdf5}", IAgStkGraphicsRhumbLineInterpolatorFactory)
agcls.AgTypeNameMap["IAgStkGraphicsRhumbLineInterpolatorFactory"] = IAgStkGraphicsRhumbLineInterpolatorFactory
__all__.append("IAgStkGraphicsRhumbLineInterpolatorFactory")

class IAgStkGraphicsSceneDisplayConditionFactory(object):
    """A display condition used to control what scene or scenes an object, such as a primitive, is rendered in. This is used to show an object in some scenes and hide it in others."""
    _uuid = "{930929f7-1d93-4575-a18f-b376e9a16cf7}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsSceneDisplayConditionFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsSceneDisplayConditionFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsSceneDisplayConditionFactory = agcom.GUID(IAgStkGraphicsSceneDisplayConditionFactory._uuid)
        vtable_offset_local = IAgStkGraphicsSceneDisplayConditionFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSceneDisplayConditionFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsSceneDisplayConditionFactory.__dict__ and type(IAgStkGraphicsSceneDisplayConditionFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsSceneDisplayConditionFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsSceneDisplayConditionFactory.")
    
    def Initialize(self) -> "IAgStkGraphicsSceneDisplayCondition":
        """Initializes a default scene display condition. When this display condition is assigned to an object, such as a primitive, the object can be restricted to only render in certain scenes. Call set display in scene or display only in scene to limit the scenes."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{930929f7-1d93-4575-a18f-b376e9a16cf7}", IAgStkGraphicsSceneDisplayConditionFactory)
agcls.AgTypeNameMap["IAgStkGraphicsSceneDisplayConditionFactory"] = IAgStkGraphicsSceneDisplayConditionFactory
__all__.append("IAgStkGraphicsSceneDisplayConditionFactory")

class IAgStkGraphicsSceneManagerInitializer(object):
    """The static scene manager class provides global properties and functionality that apply to all scenes and thus affect the rendering of every globe control..."""
    _uuid = "{dd3adf22-21f0-4220-8f3f-bda974157d48}"
    _num_methods = 7
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetPrimitives"] = _raise_uninitialized_error
        self.__dict__["_GetScreenOverlays"] = _raise_uninitialized_error
        self.__dict__["_GetTextures"] = _raise_uninitialized_error
        self.__dict__["_GetGlobeOverlaySettings"] = _raise_uninitialized_error
        self.__dict__["_GetScenes"] = _raise_uninitialized_error
        self.__dict__["_Render"] = _raise_uninitialized_error
        self.__dict__["_GetFrameRate"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsSceneManagerInitializer._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsSceneManagerInitializer from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsSceneManagerInitializer = agcom.GUID(IAgStkGraphicsSceneManagerInitializer._uuid)
        vtable_offset_local = IAgStkGraphicsSceneManagerInitializer._vtable_offset - 1
        self.__dict__["_GetPrimitives"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSceneManagerInitializer, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetScreenOverlays"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSceneManagerInitializer, vtable_offset_local+2, POINTER(agcom.PVOID))
        self.__dict__["_GetTextures"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSceneManagerInitializer, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_GetGlobeOverlaySettings"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSceneManagerInitializer, vtable_offset_local+4, POINTER(agcom.PVOID))
        self.__dict__["_GetScenes"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSceneManagerInitializer, vtable_offset_local+5, POINTER(agcom.PVOID))
        self.__dict__["_Render"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSceneManagerInitializer, vtable_offset_local+6, )
        self.__dict__["_GetFrameRate"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSceneManagerInitializer, vtable_offset_local+7, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsSceneManagerInitializer.__dict__ and type(IAgStkGraphicsSceneManagerInitializer.__dict__[attrname]) == property:
            return IAgStkGraphicsSceneManagerInitializer.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsSceneManagerInitializer.")
    
    @property
    def Primitives(self) -> "IAgStkGraphicsPrimitiveManager":
        """Gets the primitive manager, which is used to add primitives to your scenes."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPrimitives"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def ScreenOverlays(self) -> "IAgStkGraphicsScreenOverlayManager":
        """Gets the screen overlay manager, which is used to add screen overlays to your scenes."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetScreenOverlays"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Textures(self) -> "IAgStkGraphicsTexture2DFactory":
        """Gets the texture 2d factory, which can be used to create textures from various sources."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTextures"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def GlobeOverlaySettings(self) -> "IAgStkGraphicsGlobeOverlaySettings":
        """Gets the globe overlay settings, which are used to set global settings for all globe overlays."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetGlobeOverlaySettings"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Scenes(self) -> "IAgStkGraphicsSceneCollection":
        """Gets a read-only collection of scenes that are associated with the scene manager."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetScenes"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def Render(self) -> None:
        """Renders all scenes within an application. To render a specific scene, use the Render method."""
        agcls.evaluate_hresult(self.__dict__["_Render"]())

    @property
    def FrameRate(self) -> "IAgStkGraphicsFrameRate":
        """Gets the frame rate class, which can be used to keep track of how fast scenes are being <see ref='Render'>rendered</see>."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetFrameRate"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{dd3adf22-21f0-4220-8f3f-bda974157d48}", IAgStkGraphicsSceneManagerInitializer)
agcls.AgTypeNameMap["IAgStkGraphicsSceneManagerInitializer"] = IAgStkGraphicsSceneManagerInitializer
__all__.append("IAgStkGraphicsSceneManagerInitializer")

class IAgStkGraphicsScreenOverlayFactory(object):
    """A visible element drawn in screen space. Overlays are useful for floating logos, heads up displays, and integrating user interfaces into the 3D window."""
    _uuid = "{45754d2a-e83f-4c32-9792-c90d9620a83a}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithPosAndSize"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsScreenOverlayFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsScreenOverlayFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsScreenOverlayFactory = agcom.GUID(IAgStkGraphicsScreenOverlayFactory._uuid)
        vtable_offset_local = IAgStkGraphicsScreenOverlayFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsScreenOverlayFactory, vtable_offset_local+1, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithPosAndSize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsScreenOverlayFactory, vtable_offset_local+2, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsScreenOverlayFactory.__dict__ and type(IAgStkGraphicsScreenOverlayFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsScreenOverlayFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsScreenOverlayFactory.")
    
    def Initialize(self, xPixels:float, yPixels:float, widthPixels:float, heightPixels:float) -> "IAgStkGraphicsScreenOverlay":
        """Initializes the overlay with the specified x position, y position, width, and height, all specified in pixels."""
        with agmarshall.DOUBLE_arg(xPixels) as arg_xPixels, \
             agmarshall.DOUBLE_arg(yPixels) as arg_yPixels, \
             agmarshall.DOUBLE_arg(widthPixels) as arg_widthPixels, \
             agmarshall.DOUBLE_arg(heightPixels) as arg_heightPixels, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](arg_xPixels.COM_val, arg_yPixels.COM_val, arg_widthPixels.COM_val, arg_heightPixels.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithPosAndSize(self, position:list, size:list) -> "IAgStkGraphicsScreenOverlay":
        """Initializes the overlay with the specified position and size."""
        with agmarshall.SAFEARRAY_arg(position) as arg_position, \
             agmarshall.SAFEARRAY_arg(size) as arg_size, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithPosAndSize"](byref(arg_position.COM_val), byref(arg_size.COM_val), byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{45754d2a-e83f-4c32-9792-c90d9620a83a}", IAgStkGraphicsScreenOverlayFactory)
agcls.AgTypeNameMap["IAgStkGraphicsScreenOverlayFactory"] = IAgStkGraphicsScreenOverlayFactory
__all__.append("IAgStkGraphicsScreenOverlayFactory")

class IAgStkGraphicsSolidPrimitiveFactory(object):
    """Renders filled solid objects and their outlines. Example solids include boxes and ellipsoids. Various effects are supported, such as displaying the solid's silhouette, and hiding the outline of the backside of the solid..."""
    _uuid = "{b76858bc-4b6c-41c0-928a-2ae8fe8d6e03}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithHint"] = _raise_uninitialized_error
        self.__dict__["_GetMinimumSilhouetteWidthSupported"] = _raise_uninitialized_error
        self.__dict__["_GetMaximumSilhouetteWidthSupported"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsSolidPrimitiveFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsSolidPrimitiveFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsSolidPrimitiveFactory = agcom.GUID(IAgStkGraphicsSolidPrimitiveFactory._uuid)
        vtable_offset_local = IAgStkGraphicsSolidPrimitiveFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSolidPrimitiveFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithHint"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSolidPrimitiveFactory, vtable_offset_local+2, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_GetMinimumSilhouetteWidthSupported"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSolidPrimitiveFactory, vtable_offset_local+3, POINTER(agcom.FLOAT))
        self.__dict__["_GetMaximumSilhouetteWidthSupported"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSolidPrimitiveFactory, vtable_offset_local+4, POINTER(agcom.FLOAT))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsSolidPrimitiveFactory.__dict__ and type(IAgStkGraphicsSolidPrimitiveFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsSolidPrimitiveFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsSolidPrimitiveFactory.")
    
    def Initialize(self) -> "IAgStkGraphicsSolidPrimitive":
        """Initializes a default solid primitive. This is equivalent to constructing a solid primitive with a set hint of Frequent."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithHint(self, setHint:"AgEStkGraphicsSetHint") -> "IAgStkGraphicsSolidPrimitive":
        """Initializes a solid primitive with the specified setHint."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsSetHint, setHint) as arg_setHint, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithHint"](arg_setHint.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def MinimumSilhouetteWidthSupported(self) -> float:
        """Gets the minimum silhouette width, in pixels, supported by the video card."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinimumSilhouetteWidthSupported"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def MaximumSilhouetteWidthSupported(self) -> float:
        """Gets the maximum silhouette width, in pixels, supported by the video card."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaximumSilhouetteWidthSupported"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{b76858bc-4b6c-41c0-928a-2ae8fe8d6e03}", IAgStkGraphicsSolidPrimitiveFactory)
agcls.AgTypeNameMap["IAgStkGraphicsSolidPrimitiveFactory"] = IAgStkGraphicsSolidPrimitiveFactory
__all__.append("IAgStkGraphicsSolidPrimitiveFactory")

class IAgStkGraphicsSurfaceMeshPrimitiveFactory(object):
    """A triangle mesh primitive for meshes on the surface that need to conform to terrain."""
    _uuid = "{08c3d10b-0cf0-41e9-93d0-e73b9d25e329}"
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithSetHint"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithSetHintAndRenderingMethod"] = _raise_uninitialized_error
        self.__dict__["_Supported"] = _raise_uninitialized_error
        self.__dict__["_SupportedWithDefaultRenderingMethod"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsSurfaceMeshPrimitiveFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsSurfaceMeshPrimitiveFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsSurfaceMeshPrimitiveFactory = agcom.GUID(IAgStkGraphicsSurfaceMeshPrimitiveFactory._uuid)
        vtable_offset_local = IAgStkGraphicsSurfaceMeshPrimitiveFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSurfaceMeshPrimitiveFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithSetHint"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSurfaceMeshPrimitiveFactory, vtable_offset_local+2, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithSetHintAndRenderingMethod"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSurfaceMeshPrimitiveFactory, vtable_offset_local+3, agcom.LONG, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_Supported"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSurfaceMeshPrimitiveFactory, vtable_offset_local+4, agcom.LONG, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SupportedWithDefaultRenderingMethod"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsSurfaceMeshPrimitiveFactory, vtable_offset_local+5, POINTER(agcom.VARIANT_BOOL))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsSurfaceMeshPrimitiveFactory.__dict__ and type(IAgStkGraphicsSurfaceMeshPrimitiveFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsSurfaceMeshPrimitiveFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsSurfaceMeshPrimitiveFactory.")
    
    def Initialize(self) -> "IAgStkGraphicsSurfaceMeshPrimitive":
        """Initializes a default surface mesh primitive. This is equivalent to constructing a surface mesh with a set hint of Frequent and a surface mesh rendering method of Automatic."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithSetHint(self, setHint:"AgEStkGraphicsSetHint") -> "IAgStkGraphicsSurfaceMeshPrimitive":
        """Initializes a surface mesh primitive with the specified setHint. This is equivalent to constructing a surface mesh with the specified setHint and a surface mesh rendering method of Automatic."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsSetHint, setHint) as arg_setHint, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithSetHint"](arg_setHint.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithSetHintAndRenderingMethod(self, setHint:"AgEStkGraphicsSetHint", renderingMethod:"AgEStkGraphicsSurfaceMeshRenderingMethod") -> "IAgStkGraphicsSurfaceMeshPrimitive":
        """Initializes a surface mesh primitive with the specified setHint and renderingMethod."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsSetHint, setHint) as arg_setHint, \
             agmarshall.AgEnum_arg(AgEStkGraphicsSurfaceMeshRenderingMethod, renderingMethod) as arg_renderingMethod, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithSetHintAndRenderingMethod"](arg_setHint.COM_val, arg_renderingMethod.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def Supported(self, renderingMethod:"AgEStkGraphicsSurfaceMeshRenderingMethod") -> bool:
        """Determines whether or not the video card supports the surface mesh primitive with the given renderingMethod."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsSurfaceMeshRenderingMethod, renderingMethod) as arg_renderingMethod, \
             agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_Supported"](arg_renderingMethod.COM_val, byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def SupportedWithDefaultRenderingMethod(self) -> bool:
        """Determines whether or not the video card supports the surface mesh primitive. This is equivalent to calling Supported with automatic."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_SupportedWithDefaultRenderingMethod"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{08c3d10b-0cf0-41e9-93d0-e73b9d25e329}", IAgStkGraphicsSurfaceMeshPrimitiveFactory)
agcls.AgTypeNameMap["IAgStkGraphicsSurfaceMeshPrimitiveFactory"] = IAgStkGraphicsSurfaceMeshPrimitiveFactory
__all__.append("IAgStkGraphicsSurfaceMeshPrimitiveFactory")

class IAgStkGraphicsTerrainOverlayInitializer(object):
    """A globe overlay which shows terrain."""
    _uuid = "{74c0acde-8d75-49df-87c1-2c39e3240283}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetSupported"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsTerrainOverlayInitializer._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsTerrainOverlayInitializer from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsTerrainOverlayInitializer = agcom.GUID(IAgStkGraphicsTerrainOverlayInitializer._uuid)
        vtable_offset_local = IAgStkGraphicsTerrainOverlayInitializer._vtable_offset - 1
        self.__dict__["_GetSupported"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTerrainOverlayInitializer, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsTerrainOverlayInitializer.__dict__ and type(IAgStkGraphicsTerrainOverlayInitializer.__dict__[attrname]) == property:
            return IAgStkGraphicsTerrainOverlayInitializer.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsTerrainOverlayInitializer.")
    
    @property
    def Supported(self) -> bool:
        """Gets whether the video card supports adding terrain overlay objects. Video cards that support OpenGL 1.2 or higher support terrain overlay objects."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSupported"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{74c0acde-8d75-49df-87c1-2c39e3240283}", IAgStkGraphicsTerrainOverlayInitializer)
agcls.AgTypeNameMap["IAgStkGraphicsTerrainOverlayInitializer"] = IAgStkGraphicsTerrainOverlayInitializer
__all__.append("IAgStkGraphicsTerrainOverlayInitializer")

class IAgStkGraphicsTextBatchPrimitiveFactory(object):
    """ Renders one or more strings in the 3D scene.  For best performance, avoid creating lots of batches with only a few strings each. See the Batching Performance Overview. """
    _uuid = "{dfcc32bb-e95a-46c5-a1e4-ed3acf184d3a}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_InitializeWithGraphicsFont"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithGraphicsFontAndSetHint"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithGraphicsFontAndSetHint2d"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsTextBatchPrimitiveFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsTextBatchPrimitiveFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsTextBatchPrimitiveFactory = agcom.GUID(IAgStkGraphicsTextBatchPrimitiveFactory._uuid)
        vtable_offset_local = IAgStkGraphicsTextBatchPrimitiveFactory._vtable_offset - 1
        self.__dict__["_InitializeWithGraphicsFont"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextBatchPrimitiveFactory, vtable_offset_local+1, agcom.PVOID, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithGraphicsFontAndSetHint"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextBatchPrimitiveFactory, vtable_offset_local+2, agcom.PVOID, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithGraphicsFontAndSetHint2d"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextBatchPrimitiveFactory, vtable_offset_local+3, agcom.PVOID, agcom.LONG, agcom.VARIANT_BOOL, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsTextBatchPrimitiveFactory.__dict__ and type(IAgStkGraphicsTextBatchPrimitiveFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsTextBatchPrimitiveFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsTextBatchPrimitiveFactory.")
    
    def InitializeWithGraphicsFont(self, font:"IAgStkGraphicsGraphicsFont") -> "IAgStkGraphicsTextBatchPrimitive":
        """Initializes a marker batch primitive with the specified font. This is equivalent to constructing a text batch with the specified font and a set hint of Frequent."""
        with agmarshall.AgInterface_in_arg(font, IAgStkGraphicsGraphicsFont) as arg_font, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithGraphicsFont"](arg_font.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithGraphicsFontAndSetHint(self, font:"IAgStkGraphicsGraphicsFont", setHint:"AgEStkGraphicsSetHint") -> "IAgStkGraphicsTextBatchPrimitive":
        """Initializes a marker batch primitive with the specified font and setHint."""
        with agmarshall.AgInterface_in_arg(font, IAgStkGraphicsGraphicsFont) as arg_font, \
             agmarshall.AgEnum_arg(AgEStkGraphicsSetHint, setHint) as arg_setHint, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithGraphicsFontAndSetHint"](arg_font.COM_val, arg_setHint.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithGraphicsFontAndSetHint2d(self, font:"IAgStkGraphicsGraphicsFont", setHint:"AgEStkGraphicsSetHint", renderInScreenSpace:bool) -> "IAgStkGraphicsTextBatchPrimitive":
        """Initializes a text batch primitive with the specified font and setHint, optimized for 2d screen space rendering."""
        with agmarshall.AgInterface_in_arg(font, IAgStkGraphicsGraphicsFont) as arg_font, \
             agmarshall.AgEnum_arg(AgEStkGraphicsSetHint, setHint) as arg_setHint, \
             agmarshall.VARIANT_BOOL_arg(renderInScreenSpace) as arg_renderInScreenSpace, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithGraphicsFontAndSetHint2d"](arg_font.COM_val, arg_setHint.COM_val, arg_renderInScreenSpace.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{dfcc32bb-e95a-46c5-a1e4-ed3acf184d3a}", IAgStkGraphicsTextBatchPrimitiveFactory)
agcls.AgTypeNameMap["IAgStkGraphicsTextBatchPrimitiveFactory"] = IAgStkGraphicsTextBatchPrimitiveFactory
__all__.append("IAgStkGraphicsTextBatchPrimitiveFactory")

class IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory(object):
    """Optional per-string and per-batch parameters for text batch primitive..."""
    _uuid = "{03511893-3980-4c0e-9b99-7f86398acadf}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory = agcom.GUID(IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory._uuid)
        vtable_offset_local = IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory.__dict__ and type(IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory.")
    
    def Initialize(self) -> "IAgStkGraphicsTextBatchPrimitiveOptionalParameters":
        """Initializes default text batch primitive optional parameters."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{03511893-3980-4c0e-9b99-7f86398acadf}", IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory)
agcls.AgTypeNameMap["IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory"] = IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory
__all__.append("IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory")

class IAgStkGraphicsTextOverlayFactory(object):
    """A rectangular overlay that contains text."""
    _uuid = "{183a48a5-a123-493a-9e6e-688775a7ca79}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithXYWidthHeight"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithPositionSize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithWidthHeightUnits"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsTextOverlayFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsTextOverlayFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsTextOverlayFactory = agcom.GUID(IAgStkGraphicsTextOverlayFactory._uuid)
        vtable_offset_local = IAgStkGraphicsTextOverlayFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextOverlayFactory, vtable_offset_local+1, agcom.PVOID, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithXYWidthHeight"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextOverlayFactory, vtable_offset_local+2, agcom.PVOID, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithPositionSize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextOverlayFactory, vtable_offset_local+3, agcom.PVOID, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithWidthHeightUnits"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextOverlayFactory, vtable_offset_local+4, agcom.PVOID, agcom.DOUBLE, agcom.LONG, agcom.DOUBLE, agcom.LONG, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsTextOverlayFactory.__dict__ and type(IAgStkGraphicsTextOverlayFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsTextOverlayFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsTextOverlayFactory.")
    
    def Initialize(self, font:"IAgStkGraphicsGraphicsFont") -> "IAgStkGraphicsTextOverlay":
        """Initializes the overlay with a position of (0, 0), a width of 100 pixels, and a height of 50 pixels. <param name='font'>The graphics font that defines how text is drawn.</param>"""
        with agmarshall.AgInterface_in_arg(font, IAgStkGraphicsGraphicsFont) as arg_font, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](arg_font.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithXYWidthHeight(self, font:"IAgStkGraphicsGraphicsFont", xPixels:float, yPixels:float, widthPixels:float, heightPixels:float) -> "IAgStkGraphicsTextOverlay":
        """Initializes the overlay with the specified x position, y position, width, and height, all specified in pixels."""
        with agmarshall.AgInterface_in_arg(font, IAgStkGraphicsGraphicsFont) as arg_font, \
             agmarshall.DOUBLE_arg(xPixels) as arg_xPixels, \
             agmarshall.DOUBLE_arg(yPixels) as arg_yPixels, \
             agmarshall.DOUBLE_arg(widthPixels) as arg_widthPixels, \
             agmarshall.DOUBLE_arg(heightPixels) as arg_heightPixels, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithXYWidthHeight"](arg_font.COM_val, arg_xPixels.COM_val, arg_yPixels.COM_val, arg_widthPixels.COM_val, arg_heightPixels.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithPositionSize(self, font:"IAgStkGraphicsGraphicsFont", position:list, size:list) -> "IAgStkGraphicsTextOverlay":
        """Initializes the overlay with the specified position and size."""
        with agmarshall.AgInterface_in_arg(font, IAgStkGraphicsGraphicsFont) as arg_font, \
             agmarshall.SAFEARRAY_arg(position) as arg_position, \
             agmarshall.SAFEARRAY_arg(size) as arg_size, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithPositionSize"](arg_font.COM_val, byref(arg_position.COM_val), byref(arg_size.COM_val), byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithWidthHeightUnits(self, font:"IAgStkGraphicsGraphicsFont", width:float, widthUnit:"AgEStkGraphicsScreenOverlayUnit", height:float, heightUnit:"AgEStkGraphicsScreenOverlayUnit") -> "IAgStkGraphicsTextOverlay":
        """Initializes the overlay with the specified position and size."""
        with agmarshall.AgInterface_in_arg(font, IAgStkGraphicsGraphicsFont) as arg_font, \
             agmarshall.DOUBLE_arg(width) as arg_width, \
             agmarshall.AgEnum_arg(AgEStkGraphicsScreenOverlayUnit, widthUnit) as arg_widthUnit, \
             agmarshall.DOUBLE_arg(height) as arg_height, \
             agmarshall.AgEnum_arg(AgEStkGraphicsScreenOverlayUnit, heightUnit) as arg_heightUnit, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithWidthHeightUnits"](arg_font.COM_val, arg_width.COM_val, arg_widthUnit.COM_val, arg_height.COM_val, arg_heightUnit.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{183a48a5-a123-493a-9e6e-688775a7ca79}", IAgStkGraphicsTextOverlayFactory)
agcls.AgTypeNameMap["IAgStkGraphicsTextOverlayFactory"] = IAgStkGraphicsTextOverlayFactory
__all__.append("IAgStkGraphicsTextOverlayFactory")

class IAgStkGraphicsTextureMatrixFactory(object):
    """A 4 by 4 matrix applied to a texture coordinate."""
    _uuid = "{d4fcc6c9-d53a-4988-a09e-3edc080936d4}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeByValues"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithAffineTransform"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithRectangles"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsTextureMatrixFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsTextureMatrixFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsTextureMatrixFactory = agcom.GUID(IAgStkGraphicsTextureMatrixFactory._uuid)
        vtable_offset_local = IAgStkGraphicsTextureMatrixFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextureMatrixFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeByValues"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextureMatrixFactory, vtable_offset_local+2, agcom.FLOAT, agcom.FLOAT, agcom.FLOAT, agcom.FLOAT, agcom.FLOAT, agcom.FLOAT, agcom.FLOAT, agcom.FLOAT, agcom.FLOAT, agcom.FLOAT, agcom.FLOAT, agcom.FLOAT, agcom.FLOAT, agcom.FLOAT, agcom.FLOAT, agcom.FLOAT, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithAffineTransform"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextureMatrixFactory, vtable_offset_local+3, POINTER(agcom.SAFEARRAY), POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithRectangles"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextureMatrixFactory, vtable_offset_local+4, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsTextureMatrixFactory.__dict__ and type(IAgStkGraphicsTextureMatrixFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsTextureMatrixFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsTextureMatrixFactory.")
    
    def Initialize(self) -> "IAgStkGraphicsTextureMatrix":
        """Initializes a texture matrix to the identity matrix."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeByValues(self, m11:float, m12:float, m13:float, m14:float, m21:float, m22:float, m23:float, m24:float, m31:float, m32:float, m33:float, m34:float, m41:float, m42:float, m43:float, m44:float) -> "IAgStkGraphicsTextureMatrix":
        """Initializes a texture matrix. The subscripts define [row][column]."""
        with agmarshall.FLOAT_arg(m11) as arg_m11, \
             agmarshall.FLOAT_arg(m12) as arg_m12, \
             agmarshall.FLOAT_arg(m13) as arg_m13, \
             agmarshall.FLOAT_arg(m14) as arg_m14, \
             agmarshall.FLOAT_arg(m21) as arg_m21, \
             agmarshall.FLOAT_arg(m22) as arg_m22, \
             agmarshall.FLOAT_arg(m23) as arg_m23, \
             agmarshall.FLOAT_arg(m24) as arg_m24, \
             agmarshall.FLOAT_arg(m31) as arg_m31, \
             agmarshall.FLOAT_arg(m32) as arg_m32, \
             agmarshall.FLOAT_arg(m33) as arg_m33, \
             agmarshall.FLOAT_arg(m34) as arg_m34, \
             agmarshall.FLOAT_arg(m41) as arg_m41, \
             agmarshall.FLOAT_arg(m42) as arg_m42, \
             agmarshall.FLOAT_arg(m43) as arg_m43, \
             agmarshall.FLOAT_arg(m44) as arg_m44, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeByValues"](arg_m11.COM_val, arg_m12.COM_val, arg_m13.COM_val, arg_m14.COM_val, arg_m21.COM_val, arg_m22.COM_val, arg_m23.COM_val, arg_m24.COM_val, arg_m31.COM_val, arg_m32.COM_val, arg_m33.COM_val, arg_m34.COM_val, arg_m41.COM_val, arg_m42.COM_val, arg_m43.COM_val, arg_m44.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithAffineTransform(self, matrix:list) -> "IAgStkGraphicsTextureMatrix":
        """Initializes a texture matrix from a matrix. The upper left 2x2 matrix defines rotation and scaling. The top two elements of the last column define translation."""
        with agmarshall.SAFEARRAY_arg(matrix) as arg_matrix, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithAffineTransform"](byref(arg_matrix.COM_val), byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithRectangles(self, corner0:list, corner1:list, corner2:list, corner3:list) -> "IAgStkGraphicsTextureMatrix":
        """Initializes a texture matrix from texture corner points. Normally, a texture is mapped such that the lower left corner is texture coordinate (0, 0), the lower right is (1, 0), the upper right is (1, 1), and the upper left is (0, 1)..."""
        with agmarshall.SAFEARRAY_arg(corner0) as arg_corner0, \
             agmarshall.SAFEARRAY_arg(corner1) as arg_corner1, \
             agmarshall.SAFEARRAY_arg(corner2) as arg_corner2, \
             agmarshall.SAFEARRAY_arg(corner3) as arg_corner3, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithRectangles"](byref(arg_corner0.COM_val), byref(arg_corner1.COM_val), byref(arg_corner2.COM_val), byref(arg_corner3.COM_val), byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{d4fcc6c9-d53a-4988-a09e-3edc080936d4}", IAgStkGraphicsTextureMatrixFactory)
agcls.AgTypeNameMap["IAgStkGraphicsTextureMatrixFactory"] = IAgStkGraphicsTextureMatrixFactory
__all__.append("IAgStkGraphicsTextureMatrixFactory")

class IAgStkGraphicsTextureScreenOverlayFactory(object):
    """A rectangular overlay that can be assigned a texture."""
    _uuid = "{d68b862b-50c5-4803-9a98-d404c0aa967a}"
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithXYWidthHeight"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithPositionSize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithXYTexture"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithPositionTexture"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsTextureScreenOverlayFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsTextureScreenOverlayFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsTextureScreenOverlayFactory = agcom.GUID(IAgStkGraphicsTextureScreenOverlayFactory._uuid)
        vtable_offset_local = IAgStkGraphicsTextureScreenOverlayFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextureScreenOverlayFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithXYWidthHeight"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextureScreenOverlayFactory, vtable_offset_local+2, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithPositionSize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextureScreenOverlayFactory, vtable_offset_local+3, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithXYTexture"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextureScreenOverlayFactory, vtable_offset_local+4, agcom.DOUBLE, agcom.DOUBLE, agcom.PVOID, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithPositionTexture"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTextureScreenOverlayFactory, vtable_offset_local+5, POINTER(agcom.SAFEARRAY), agcom.PVOID, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsTextureScreenOverlayFactory.__dict__ and type(IAgStkGraphicsTextureScreenOverlayFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsTextureScreenOverlayFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsTextureScreenOverlayFactory.")
    
    def Initialize(self) -> "IAgStkGraphicsTextureScreenOverlay":
        """Initializes the overlay with a position of (0, 0), a width of 100 pixels, and a height of 50 pixels."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithXYWidthHeight(self, xPixels:float, yPixels:float, widthPixels:float, heightPixels:float) -> "IAgStkGraphicsTextureScreenOverlay":
        """Initializes the overlay with the specified x position, y position, width, and height, all specified in pixels."""
        with agmarshall.DOUBLE_arg(xPixels) as arg_xPixels, \
             agmarshall.DOUBLE_arg(yPixels) as arg_yPixels, \
             agmarshall.DOUBLE_arg(widthPixels) as arg_widthPixels, \
             agmarshall.DOUBLE_arg(heightPixels) as arg_heightPixels, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithXYWidthHeight"](arg_xPixels.COM_val, arg_yPixels.COM_val, arg_widthPixels.COM_val, arg_heightPixels.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithPositionSize(self, position:list, size:list) -> "IAgStkGraphicsTextureScreenOverlay":
        """Initializes the overlay with the specified position and size."""
        with agmarshall.SAFEARRAY_arg(position) as arg_position, \
             agmarshall.SAFEARRAY_arg(size) as arg_size, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithPositionSize"](byref(arg_position.COM_val), byref(arg_size.COM_val), byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithXYTexture(self, xPixels:float, yPixels:float, texture:"IAgStkGraphicsRendererTexture2D") -> "IAgStkGraphicsTextureScreenOverlay":
        """Initializes the overlay with a specified background texture. The size of the overlay will be the same as the size of the texture."""
        with agmarshall.DOUBLE_arg(xPixels) as arg_xPixels, \
             agmarshall.DOUBLE_arg(yPixels) as arg_yPixels, \
             agmarshall.AgInterface_in_arg(texture, IAgStkGraphicsRendererTexture2D) as arg_texture, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithXYTexture"](arg_xPixels.COM_val, arg_yPixels.COM_val, arg_texture.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithPositionTexture(self, position:list, texture:"IAgStkGraphicsRendererTexture2D") -> "IAgStkGraphicsTextureScreenOverlay":
        """Initializes the overlay with a specified background texture. The size of the overlay will be the same as the size of the texture."""
        with agmarshall.SAFEARRAY_arg(position) as arg_position, \
             agmarshall.AgInterface_in_arg(texture, IAgStkGraphicsRendererTexture2D) as arg_texture, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithPositionTexture"](byref(arg_position.COM_val), arg_texture.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{d68b862b-50c5-4803-9a98-d404c0aa967a}", IAgStkGraphicsTextureScreenOverlayFactory)
agcls.AgTypeNameMap["IAgStkGraphicsTextureScreenOverlayFactory"] = IAgStkGraphicsTextureScreenOverlayFactory
__all__.append("IAgStkGraphicsTextureScreenOverlayFactory")

class IAgStkGraphicsTimeIntervalDisplayConditionFactory(object):
    """Defines an inclusive time interval that determines when an object, such as a primitive, is rendered based on the current animation time ."""
    _uuid = "{99ca1422-3ae0-4620-9046-d0bc4ca2bee5}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithTimes"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithTimeInterval"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsTimeIntervalDisplayConditionFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsTimeIntervalDisplayConditionFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsTimeIntervalDisplayConditionFactory = agcom.GUID(IAgStkGraphicsTimeIntervalDisplayConditionFactory._uuid)
        vtable_offset_local = IAgStkGraphicsTimeIntervalDisplayConditionFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTimeIntervalDisplayConditionFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithTimes"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTimeIntervalDisplayConditionFactory, vtable_offset_local+2, agcom.PVOID, agcom.PVOID, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithTimeInterval"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTimeIntervalDisplayConditionFactory, vtable_offset_local+3, POINTER(agcom.SAFEARRAY), POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsTimeIntervalDisplayConditionFactory.__dict__ and type(IAgStkGraphicsTimeIntervalDisplayConditionFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsTimeIntervalDisplayConditionFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsTimeIntervalDisplayConditionFactory.")
    
    def Initialize(self) -> "IAgStkGraphicsTimeIntervalDisplayCondition":
        """Initializes a default time display condition. minimum time is set to JulianDate.MinValue and maximum time is set to JulianDate.MaxValue. With this interval, an object is always rendered regardless of the current animation time."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithTimes(self, minimumTime:"IAgDate", maximumTime:"IAgDate") -> "IAgStkGraphicsTimeIntervalDisplayCondition":
        """Initializes a time display condition with the inclusive time interval [minimumTime, maximumTime]..."""
        with agmarshall.AgInterface_in_arg(minimumTime, IAgDate) as arg_minimumTime, \
             agmarshall.AgInterface_in_arg(maximumTime, IAgDate) as arg_maximumTime, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithTimes"](arg_minimumTime.COM_val, arg_maximumTime.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithTimeInterval(self, timeInterval:list) -> "IAgStkGraphicsTimeIntervalDisplayCondition":
        """Initializes a time display condition with a time interval."""
        with agmarshall.SAFEARRAY_arg(timeInterval) as arg_timeInterval, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithTimeInterval"](byref(arg_timeInterval.COM_val), byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{99ca1422-3ae0-4620-9046-d0bc4ca2bee5}", IAgStkGraphicsTimeIntervalDisplayConditionFactory)
agcls.AgTypeNameMap["IAgStkGraphicsTimeIntervalDisplayConditionFactory"] = IAgStkGraphicsTimeIntervalDisplayConditionFactory
__all__.append("IAgStkGraphicsTimeIntervalDisplayConditionFactory")

class IAgStkGraphicsTriangleMeshPrimitiveFactory(object):
    """Renders a triangle mesh in the 3D scene. Examples of triangle meshes includes polygons on the globe (e.g. states or countries), terrain and imagery extents, ellipses, and extrusions."""
    _uuid = "{efd9ac8c-e2f0-4a06-9e92-15ebe59d5c38}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithSetHint"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsTriangleMeshPrimitiveFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsTriangleMeshPrimitiveFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsTriangleMeshPrimitiveFactory = agcom.GUID(IAgStkGraphicsTriangleMeshPrimitiveFactory._uuid)
        vtable_offset_local = IAgStkGraphicsTriangleMeshPrimitiveFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTriangleMeshPrimitiveFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithSetHint"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTriangleMeshPrimitiveFactory, vtable_offset_local+2, agcom.LONG, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsTriangleMeshPrimitiveFactory.__dict__ and type(IAgStkGraphicsTriangleMeshPrimitiveFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsTriangleMeshPrimitiveFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsTriangleMeshPrimitiveFactory.")
    
    def Initialize(self) -> "IAgStkGraphicsTriangleMeshPrimitive":
        """Initializes a default triangle mesh primitive. This is equivalent to constructing a triangle mesh with a set hint of Frequent."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithSetHint(self, setHint:"AgEStkGraphicsSetHint") -> "IAgStkGraphicsTriangleMeshPrimitive":
        """Initializes a triangle mesh primitive with the specified setHint ."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsSetHint, setHint) as arg_setHint, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithSetHint"](arg_setHint.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{efd9ac8c-e2f0-4a06-9e92-15ebe59d5c38}", IAgStkGraphicsTriangleMeshPrimitiveFactory)
agcls.AgTypeNameMap["IAgStkGraphicsTriangleMeshPrimitiveFactory"] = IAgStkGraphicsTriangleMeshPrimitiveFactory
__all__.append("IAgStkGraphicsTriangleMeshPrimitiveFactory")

class IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory(object):
    """Optional parameters for triangle mesh primitive..."""
    _uuid = "{dab0d95c-d51e-4152-9f63-01441ca43ad9}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory = agcom.GUID(IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory._uuid)
        vtable_offset_local = IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory.__dict__ and type(IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory.")
    
    def Initialize(self) -> "IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters":
        """Initializes default triangle mesh primitive optional parameters."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{dab0d95c-d51e-4152-9f63-01441ca43ad9}", IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory)
agcls.AgTypeNameMap["IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory"] = IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory
__all__.append("IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory")

class IAgStkGraphicsVectorPrimitiveFactory(object):
    """Renders a vector in the 3D scene. A vector is defined by a source (given by an ISystem) and a direction (given by an IVector or IPoint). Length is auto-calculated or can be set separately."""
    _uuid = "{a7013a6a-64ea-43b6-807f-4f789df05438}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_InitializeWithDirection"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgStkGraphicsVectorPrimitiveFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgStkGraphicsVectorPrimitiveFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgStkGraphicsVectorPrimitiveFactory = agcom.GUID(IAgStkGraphicsVectorPrimitiveFactory._uuid)
        vtable_offset_local = IAgStkGraphicsVectorPrimitiveFactory._vtable_offset - 1
        self.__dict__["_InitializeWithDirection"] = IAGFUNCTYPE(pUnk, IID_IAgStkGraphicsVectorPrimitiveFactory, vtable_offset_local+1, agcom.PVOID, agcom.PVOID, agcom.PVOID, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgStkGraphicsVectorPrimitiveFactory.__dict__ and type(IAgStkGraphicsVectorPrimitiveFactory.__dict__[attrname]) == property:
            return IAgStkGraphicsVectorPrimitiveFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgStkGraphicsVectorPrimitiveFactory.")
    
    def InitializeWithDirection(self, sys:"IAgCrdnSystem", dir:"IAgCrdnVector", font:"IAgStkGraphicsGraphicsFont") -> "IAgStkGraphicsVectorPrimitive":
        """Initializes a vector primitive with the specified ISystem sys as its source and pointing in direction dir."""
        with agmarshall.AgInterface_in_arg(sys, IAgCrdnSystem) as arg_sys, \
             agmarshall.AgInterface_in_arg(dir, IAgCrdnVector) as arg_dir, \
             agmarshall.AgInterface_in_arg(font, IAgStkGraphicsGraphicsFont) as arg_font, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithDirection"](arg_sys.COM_val, arg_dir.COM_val, arg_font.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{a7013a6a-64ea-43b6-807f-4f789df05438}", IAgStkGraphicsVectorPrimitiveFactory)
agcls.AgTypeNameMap["IAgStkGraphicsVectorPrimitiveFactory"] = IAgStkGraphicsVectorPrimitiveFactory
__all__.append("IAgStkGraphicsVectorPrimitiveFactory")



class AgStkGraphicsPathPoint(IAgStkGraphicsPathPoint):
    """Represents a path point used in conjunction with the Path Primitive."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsPathPoint.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsPathPoint._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsPathPoint._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPathPoint._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsPathPoint.")
        
agcls.AgClassCatalog.add_catalog_entry("{4C86EAB3-9C30-4D1B-9391-A27010590176}", AgStkGraphicsPathPoint)
__all__.append("AgStkGraphicsPathPoint")


class AgStkGraphicsPathPointFactory(IAgStkGraphicsPathPointFactory):
    """Factory creates path points."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsPathPointFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsPathPointFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsPathPointFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPathPointFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsPathPointFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{997C56C5-C114-4C2E-A25A-4D4860FA913F}", AgStkGraphicsPathPointFactory)
__all__.append("AgStkGraphicsPathPointFactory")


class AgStkGraphicsBoundingSphere(IAgStkGraphicsBoundingSphere):
    """A sphere that encapsulates an object."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsBoundingSphere.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsBoundingSphere._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsBoundingSphere._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsBoundingSphere._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsBoundingSphere.")
        
agcls.AgClassCatalog.add_catalog_entry("{40BA7967-5508-4D2C-9048-76EA16351F61}", AgStkGraphicsBoundingSphere)
__all__.append("AgStkGraphicsBoundingSphere")


class AgStkGraphicsBoundingSphereFactory(IAgStkGraphicsBoundingSphereFactory):
    """Creates bounding spheres."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsBoundingSphereFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsBoundingSphereFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsBoundingSphereFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsBoundingSphereFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsBoundingSphereFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{4CAEE1FD-33BB-4928-8363-39237A62C150}", AgStkGraphicsBoundingSphereFactory)
__all__.append("AgStkGraphicsBoundingSphereFactory")


class AgStkGraphicsTextureFilter2D(IAgStkGraphicsTextureFilter2D):
    """A texture filter."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsTextureFilter2D.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsTextureFilter2D._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsTextureFilter2D._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsTextureFilter2D._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsTextureFilter2D.")
        
agcls.AgClassCatalog.add_catalog_entry("{DAE13DA7-D678-4F1F-9F87-F584DF78B8FE}", AgStkGraphicsTextureFilter2D)
__all__.append("AgStkGraphicsTextureFilter2D")


class AgStkGraphicsTextureFilter2DFactory(IAgStkGraphicsTextureFilter2DFactory):
    """Create texture filters."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsTextureFilter2DFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsTextureFilter2DFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsTextureFilter2DFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsTextureFilter2DFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsTextureFilter2DFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{C17EDE04-6594-4662-975E-795B7623414B}", AgStkGraphicsTextureFilter2DFactory)
__all__.append("AgStkGraphicsTextureFilter2DFactory")


class AgStkGraphicsRendererTexture2D(IAgStkGraphicsRendererTexture2D):
    """A 2D Texture. A texture represents an image that is ready for use by objects such as primitives and overlays. Textures typically reside in video memory."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsRendererTexture2D.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsRendererTexture2D._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsRendererTexture2D._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRendererTexture2D._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsRendererTexture2D.")
        
agcls.AgClassCatalog.add_catalog_entry("{295B9996-B4D8-4AAD-B612-CB0348444732}", AgStkGraphicsRendererTexture2D)
__all__.append("AgStkGraphicsRendererTexture2D")


class AgStkGraphicsRendererTextureTemplate2D(IAgStkGraphicsRendererTextureTemplate2D):
    """Template object containing attributes required to create a 2D texture."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsRendererTextureTemplate2D.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsRendererTextureTemplate2D._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsRendererTextureTemplate2D._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRendererTextureTemplate2D._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsRendererTextureTemplate2D.")
        
agcls.AgClassCatalog.add_catalog_entry("{0192E348-0FD1-440D-881D-EF3B882D7190}", AgStkGraphicsRendererTextureTemplate2D)
__all__.append("AgStkGraphicsRendererTextureTemplate2D")


class AgStkGraphicsPathPointCollection(IAgStkGraphicsPathPointCollection):
    """A collection of path points."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsPathPointCollection.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsPathPointCollection._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsPathPointCollection._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPathPointCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsPathPointCollection.")
        
agcls.AgClassCatalog.add_catalog_entry("{B1EBC1AA-0D8C-417B-BD4B-3A1489C8D39E}", AgStkGraphicsPathPointCollection)
__all__.append("AgStkGraphicsPathPointCollection")


class AgStkGraphicsObjectCollection(IAgStkGraphicsObjectCollection):
    """A collection of objects."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsObjectCollection.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsObjectCollection._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsObjectCollection._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsObjectCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsObjectCollection.")
        
agcls.AgClassCatalog.add_catalog_entry("{EEFF034B-5D72-4EF4-A76D-A25AEBD04B1E}", AgStkGraphicsObjectCollection)
__all__.append("AgStkGraphicsObjectCollection")


class AgStkGraphicsSceneCollection(IAgStkGraphicsSceneCollection):
    """A collection of scenes."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsSceneCollection.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsSceneCollection._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsSceneCollection._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsSceneCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsSceneCollection.")
        
agcls.AgClassCatalog.add_catalog_entry("{1F9129CC-D135-4993-8E14-0AA4B8402AC8}", AgStkGraphicsSceneCollection)
__all__.append("AgStkGraphicsSceneCollection")


class AgStkGraphicsScreenOverlayPickResultCollection(IAgStkGraphicsScreenOverlayPickResultCollection):
    """A collection of pick results."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsScreenOverlayPickResultCollection.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsScreenOverlayPickResultCollection._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsScreenOverlayPickResultCollection._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsScreenOverlayPickResultCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsScreenOverlayPickResultCollection.")
        
agcls.AgClassCatalog.add_catalog_entry("{566B0B55-437E-40E9-BB0C-1119BC58C3A4}", AgStkGraphicsScreenOverlayPickResultCollection)
__all__.append("AgStkGraphicsScreenOverlayPickResultCollection")


class AgStkGraphicsGlobeImageOverlayAddCompleteEventArgs(IAgStkGraphicsGlobeImageOverlayAddCompleteEventArgs):
    """The event is raised when the globe image overlay is displayed for the first time after being added using AddAsync."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsGlobeImageOverlayAddCompleteEventArgs.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsGlobeImageOverlayAddCompleteEventArgs._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsGlobeImageOverlayAddCompleteEventArgs._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsGlobeImageOverlayAddCompleteEventArgs._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsGlobeImageOverlayAddCompleteEventArgs.")
        
agcls.AgClassCatalog.add_catalog_entry("{817BEFE9-18ED-489B-952E-8088AF90331D}", AgStkGraphicsGlobeImageOverlayAddCompleteEventArgs)
__all__.append("AgStkGraphicsGlobeImageOverlayAddCompleteEventArgs")


class AgStkGraphicsTerrainOverlayAddCompleteEventArgs(IAgStkGraphicsTerrainOverlayAddCompleteEventArgs):
    """The event is raised when the terrain overlay is displayed for the first time after having been added using AddAsync."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsTerrainOverlayAddCompleteEventArgs.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsTerrainOverlayAddCompleteEventArgs._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsTerrainOverlayAddCompleteEventArgs._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsTerrainOverlayAddCompleteEventArgs._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsTerrainOverlayAddCompleteEventArgs.")
        
agcls.AgClassCatalog.add_catalog_entry("{589B5FC6-D8FE-4387-8E3E-188F6C6704C8}", AgStkGraphicsTerrainOverlayAddCompleteEventArgs)
__all__.append("AgStkGraphicsTerrainOverlayAddCompleteEventArgs")


class AgStkGraphicsPickResultCollection(IAgStkGraphicsPickResultCollection):
    """A collection of picked objects."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsPickResultCollection.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsPickResultCollection._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsPickResultCollection._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPickResultCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsPickResultCollection.")
        
agcls.AgClassCatalog.add_catalog_entry("{E6DDBF58-AB3C-4F46-AA2F-4D9A2E0884F8}", AgStkGraphicsPickResultCollection)
__all__.append("AgStkGraphicsPickResultCollection")


class AgStkGraphicsRenderingEventArgs(IAgStkGraphicsRenderingEventArgs):
    """The event is raised when the scene is rendered."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsRenderingEventArgs.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsRenderingEventArgs._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsRenderingEventArgs._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRenderingEventArgs._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsRenderingEventArgs.")
        
agcls.AgClassCatalog.add_catalog_entry("{46B2FD61-672F-4AD5-8588-F635D1EFB00C}", AgStkGraphicsRenderingEventArgs)
__all__.append("AgStkGraphicsRenderingEventArgs")


class AgStkGraphicsBatchPrimitiveIndex(IAgStkGraphicsBatchPrimitiveIndex):
    """Represents an individual item index that is associated with a batch primitive. Provides the Index of the individual item and the Primitive that contains that index..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsBatchPrimitiveIndex.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsBatchPrimitiveIndex._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsBatchPrimitiveIndex._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsBatchPrimitiveIndex._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsBatchPrimitiveIndex.")
        
agcls.AgClassCatalog.add_catalog_entry("{1AC81969-B283-482A-89A3-AE66819F864E}", AgStkGraphicsBatchPrimitiveIndex)
__all__.append("AgStkGraphicsBatchPrimitiveIndex")


class AgStkGraphicsKmlDocumentCollection(IAgStkGraphicsKmlDocumentCollection):
    """A collection of KML documents."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsKmlDocumentCollection.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsKmlDocumentCollection._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsKmlDocumentCollection._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsKmlDocumentCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsKmlDocumentCollection.")
        
agcls.AgClassCatalog.add_catalog_entry("{2FB2F974-55DD-4862-B78F-8D9AA8B9167C}", AgStkGraphicsKmlDocumentCollection)
__all__.append("AgStkGraphicsKmlDocumentCollection")


class AgStkGraphicsKmlFeatureCollection(IAgStkGraphicsKmlFeatureCollection):
    """A collection of KML features."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsKmlFeatureCollection.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsKmlFeatureCollection._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsKmlFeatureCollection._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsKmlFeatureCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsKmlFeatureCollection.")
        
agcls.AgClassCatalog.add_catalog_entry("{11C36E9E-AB1B-4F7A-B5CD-75B5E1F9DCA7}", AgStkGraphicsKmlFeatureCollection)
__all__.append("AgStkGraphicsKmlFeatureCollection")


class AgStkGraphicsKmlDocumentLoadedEventArgs(IAgStkGraphicsKmlDocumentLoadedEventArgs):
    """The event is raised when a KML document has been loaded."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsKmlDocumentLoadedEventArgs.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsKmlDocumentLoadedEventArgs._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsKmlDocumentLoadedEventArgs._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsKmlDocumentLoadedEventArgs._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsKmlDocumentLoadedEventArgs.")
        
agcls.AgClassCatalog.add_catalog_entry("{77E26868-F894-4E5D-AE27-3D259B9763E3}", AgStkGraphicsKmlDocumentLoadedEventArgs)
__all__.append("AgStkGraphicsKmlDocumentLoadedEventArgs")


class AgStkGraphicsFactoryAndInitializers(IAgStkGraphicsFactoryAndInitializers):
    """Methods and properties are used to initialize new primitives, display conditions, screen overlays, textures and many other types; compute and retrieve triangulator results and access global properties (what's known as static properties, static methods a..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsFactoryAndInitializers.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsFactoryAndInitializers._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsFactoryAndInitializers._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsFactoryAndInitializers._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsFactoryAndInitializers.")
        
agcls.AgClassCatalog.add_catalog_entry("{06756FC9-1EF3-45CD-8A1F-CE6652BEA6C1}", AgStkGraphicsFactoryAndInitializers)
__all__.append("AgStkGraphicsFactoryAndInitializers")


class AgStkGraphicsExtrudedPolylineTriangulatorResult(IAgStkGraphicsExtrudedPolylineTriangulatorResult, IAgStkGraphicsTriangulatorResult):
    """The result from extruded polyline triangulation: a triangle mesh defined using an indexed triangle list with top and bottom boundary positions. The mesh is commonly visualized with the triangle mesh primitive or surface mesh primitive..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsExtrudedPolylineTriangulatorResult.__init__(self, sourceObject)
        IAgStkGraphicsTriangulatorResult.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsExtrudedPolylineTriangulatorResult._private_init(self, pUnk)
        IAgStkGraphicsTriangulatorResult._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsExtrudedPolylineTriangulatorResult._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsExtrudedPolylineTriangulatorResult._get_property(self, attrname)
        if IAgStkGraphicsTriangulatorResult._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsTriangulatorResult._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsExtrudedPolylineTriangulatorResult.")
        
agcls.AgClassCatalog.add_catalog_entry("{BD7096DB-7447-43A4-B1D7-7E831565C909}", AgStkGraphicsExtrudedPolylineTriangulatorResult)
__all__.append("AgStkGraphicsExtrudedPolylineTriangulatorResult")


class AgStkGraphicsSolidTriangulatorResult(IAgStkGraphicsSolidTriangulatorResult, IAgStkGraphicsTriangulatorResult):
    """The result from a triangulation of a solid: a triangle mesh defined using an indexed triangle list and positions outlining the solid. It is recommended to visualize the solid using a solid primitive..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsSolidTriangulatorResult.__init__(self, sourceObject)
        IAgStkGraphicsTriangulatorResult.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsSolidTriangulatorResult._private_init(self, pUnk)
        IAgStkGraphicsTriangulatorResult._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsSolidTriangulatorResult._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsSolidTriangulatorResult._get_property(self, attrname)
        if IAgStkGraphicsTriangulatorResult._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsTriangulatorResult._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsSolidTriangulatorResult.")
        
agcls.AgClassCatalog.add_catalog_entry("{D97A5AF7-129F-4972-9DFB-B894D917B328}", AgStkGraphicsSolidTriangulatorResult)
__all__.append("AgStkGraphicsSolidTriangulatorResult")


class AgStkGraphicsSurfaceShapesResult(IAgStkGraphicsSurfaceShapesResult):
    """Represents the boundary positions of a shape on the surface computed from by a surface shapes method."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsSurfaceShapesResult.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsSurfaceShapesResult._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsSurfaceShapesResult._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsSurfaceShapesResult._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsSurfaceShapesResult.")
        
agcls.AgClassCatalog.add_catalog_entry("{627EC36E-26FE-4D33-81B1-3A4CE5955DED}", AgStkGraphicsSurfaceShapesResult)
__all__.append("AgStkGraphicsSurfaceShapesResult")


class AgStkGraphicsSurfaceTriangulatorResult(IAgStkGraphicsSurfaceTriangulatorResult, IAgStkGraphicsTriangulatorResult):
    """The result from a triangulation on the surface of a central body: a triangle mesh defined using an indexed triangle list and boundary positions surrounding the mesh..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsSurfaceTriangulatorResult.__init__(self, sourceObject)
        IAgStkGraphicsTriangulatorResult.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsSurfaceTriangulatorResult._private_init(self, pUnk)
        IAgStkGraphicsTriangulatorResult._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsSurfaceTriangulatorResult._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsSurfaceTriangulatorResult._get_property(self, attrname)
        if IAgStkGraphicsTriangulatorResult._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsTriangulatorResult._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsSurfaceTriangulatorResult.")
        
agcls.AgClassCatalog.add_catalog_entry("{484F03DF-F617-49CC-A3AD-6AB09C86C400}", AgStkGraphicsSurfaceTriangulatorResult)
__all__.append("AgStkGraphicsSurfaceTriangulatorResult")


class AgStkGraphicsTriangulatorResult(IAgStkGraphicsTriangulatorResult):
    """The result from triangulation: a triangle mesh defined using an indexed triangle list. This is commonly visualized with the triangle mesh primitive or surface mesh primitive."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsTriangulatorResult.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsTriangulatorResult._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsTriangulatorResult._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsTriangulatorResult._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsTriangulatorResult.")
        
agcls.AgClassCatalog.add_catalog_entry("{1981E859-F957-4752-9B11-76A77512222B}", AgStkGraphicsTriangulatorResult)
__all__.append("AgStkGraphicsTriangulatorResult")


class AgStkGraphicsAGICustomTerrainOverlay(IAgStkGraphicsAGICustomTerrainOverlay, IAgStkGraphicsTerrainOverlay, IAgStkGraphicsGlobeOverlay):
    """A terrain overlay for handling AGI Cesium Terrain."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsAGICustomTerrainOverlay.__init__(self, sourceObject)
        IAgStkGraphicsTerrainOverlay.__init__(self, sourceObject)
        IAgStkGraphicsGlobeOverlay.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsAGICustomTerrainOverlay._private_init(self, pUnk)
        IAgStkGraphicsTerrainOverlay._private_init(self, pUnk)
        IAgStkGraphicsGlobeOverlay._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsAGICustomTerrainOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsAGICustomTerrainOverlay._get_property(self, attrname)
        if IAgStkGraphicsTerrainOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsTerrainOverlay._get_property(self, attrname)
        if IAgStkGraphicsGlobeOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsGlobeOverlay._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsAGICustomTerrainOverlay.")
        
agcls.AgClassCatalog.add_catalog_entry("{474FD730-8942-48A2-B5C1-F84E6E5B112E}", AgStkGraphicsAGICustomTerrainOverlay)
__all__.append("AgStkGraphicsAGICustomTerrainOverlay")


class AgStkGraphicsAGIProcessedImageGlobeOverlay(IAgStkGraphicsAGIProcessedImageGlobeOverlay, IAgStkGraphicsGlobeImageOverlay, IAgStkGraphicsGlobeOverlay):
    """A globe image overlay for handling AGI Processed Image (PDTTX) files."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsAGIProcessedImageGlobeOverlay.__init__(self, sourceObject)
        IAgStkGraphicsGlobeImageOverlay.__init__(self, sourceObject)
        IAgStkGraphicsGlobeOverlay.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsAGIProcessedImageGlobeOverlay._private_init(self, pUnk)
        IAgStkGraphicsGlobeImageOverlay._private_init(self, pUnk)
        IAgStkGraphicsGlobeOverlay._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsAGIProcessedImageGlobeOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsAGIProcessedImageGlobeOverlay._get_property(self, attrname)
        if IAgStkGraphicsGlobeImageOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsGlobeImageOverlay._get_property(self, attrname)
        if IAgStkGraphicsGlobeOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsGlobeOverlay._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsAGIProcessedImageGlobeOverlay.")
        
agcls.AgClassCatalog.add_catalog_entry("{26895086-F748-4134-8B1E-E51EF358363D}", AgStkGraphicsAGIProcessedImageGlobeOverlay)
__all__.append("AgStkGraphicsAGIProcessedImageGlobeOverlay")


class AgStkGraphicsAGIProcessedTerrainOverlay(IAgStkGraphicsAGIProcessedTerrainOverlay, IAgStkGraphicsTerrainOverlay, IAgStkGraphicsGlobeOverlay):
    """A terrain overlay for handling AGI Processed Terrain (PDTT) files."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsAGIProcessedTerrainOverlay.__init__(self, sourceObject)
        IAgStkGraphicsTerrainOverlay.__init__(self, sourceObject)
        IAgStkGraphicsGlobeOverlay.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsAGIProcessedTerrainOverlay._private_init(self, pUnk)
        IAgStkGraphicsTerrainOverlay._private_init(self, pUnk)
        IAgStkGraphicsGlobeOverlay._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsAGIProcessedTerrainOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsAGIProcessedTerrainOverlay._get_property(self, attrname)
        if IAgStkGraphicsTerrainOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsTerrainOverlay._get_property(self, attrname)
        if IAgStkGraphicsGlobeOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsGlobeOverlay._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsAGIProcessedTerrainOverlay.")
        
agcls.AgClassCatalog.add_catalog_entry("{8B835120-12BD-4D18-AD78-2C507068F582}", AgStkGraphicsAGIProcessedTerrainOverlay)
__all__.append("AgStkGraphicsAGIProcessedTerrainOverlay")


class AgStkGraphicsAGIRoamImageGlobeOverlay(IAgStkGraphicsAGIRoamImageGlobeOverlay, IAgStkGraphicsGlobeImageOverlay, IAgStkGraphicsGlobeOverlay):
    """A globe image overlay for handling ROAM (TXM/TXB) files."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsAGIRoamImageGlobeOverlay.__init__(self, sourceObject)
        IAgStkGraphicsGlobeImageOverlay.__init__(self, sourceObject)
        IAgStkGraphicsGlobeOverlay.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsAGIRoamImageGlobeOverlay._private_init(self, pUnk)
        IAgStkGraphicsGlobeImageOverlay._private_init(self, pUnk)
        IAgStkGraphicsGlobeOverlay._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsAGIRoamImageGlobeOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsAGIRoamImageGlobeOverlay._get_property(self, attrname)
        if IAgStkGraphicsGlobeImageOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsGlobeImageOverlay._get_property(self, attrname)
        if IAgStkGraphicsGlobeOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsGlobeOverlay._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsAGIRoamImageGlobeOverlay.")
        
agcls.AgClassCatalog.add_catalog_entry("{278C21A7-3D85-48C1-B934-BE89B25019CE}", AgStkGraphicsAGIRoamImageGlobeOverlay)
__all__.append("AgStkGraphicsAGIRoamImageGlobeOverlay")


class AgStkGraphicsCameraSnapshot(IAgStkGraphicsCameraSnapshot):
    """Takes snapshots of the 3D window."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsCameraSnapshot.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsCameraSnapshot._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsCameraSnapshot._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsCameraSnapshot._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsCameraSnapshot.")
        
agcls.AgClassCatalog.add_catalog_entry("{27A8C9DC-6AF7-436A-80B0-7B426D85EAB1}", AgStkGraphicsCameraSnapshot)
__all__.append("AgStkGraphicsCameraSnapshot")


class AgStkGraphicsCameraVideoRecording(IAgStkGraphicsCameraVideoRecording):
    """Records the 3D window to either a movie file or to consecutively ordered image files each time the scene is rendered."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsCameraVideoRecording.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsCameraVideoRecording._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsCameraVideoRecording._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsCameraVideoRecording._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsCameraVideoRecording.")
        
agcls.AgClassCatalog.add_catalog_entry("{BBACA9D4-20A3-44B1-BF0F-174652805D72}", AgStkGraphicsCameraVideoRecording)
__all__.append("AgStkGraphicsCameraVideoRecording")


class AgStkGraphicsCentralBodyGraphicsIndexer(IAgStkGraphicsCentralBodyGraphicsIndexer):
    """An indexer into the central body graphics for a particular central body, which provides graphical properties such as showing or hiding the central body in the scene, and working with terrain and imagery for the specified central body."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsCentralBodyGraphicsIndexer.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsCentralBodyGraphicsIndexer._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsCentralBodyGraphicsIndexer._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsCentralBodyGraphicsIndexer._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsCentralBodyGraphicsIndexer.")
        
agcls.AgClassCatalog.add_catalog_entry("{55BA55ED-B236-40BB-9F77-F7C32F3679FD}", AgStkGraphicsCentralBodyGraphicsIndexer)
__all__.append("AgStkGraphicsCentralBodyGraphicsIndexer")


class AgStkGraphicsCustomImageGlobeOverlay(IAgStkGraphicsCustomImageGlobeOverlay, IAgStkGraphicsGlobeImageOverlay, IAgStkGraphicsGlobeOverlay):
    """A globe image overlay that allows for a user defined image to be specified."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsCustomImageGlobeOverlay.__init__(self, sourceObject)
        IAgStkGraphicsGlobeImageOverlay.__init__(self, sourceObject)
        IAgStkGraphicsGlobeOverlay.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsCustomImageGlobeOverlay._private_init(self, pUnk)
        IAgStkGraphicsGlobeImageOverlay._private_init(self, pUnk)
        IAgStkGraphicsGlobeOverlay._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsCustomImageGlobeOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsCustomImageGlobeOverlay._get_property(self, attrname)
        if IAgStkGraphicsGlobeImageOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsGlobeImageOverlay._get_property(self, attrname)
        if IAgStkGraphicsGlobeOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsGlobeOverlay._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsCustomImageGlobeOverlay.")
        
agcls.AgClassCatalog.add_catalog_entry("{FAFB3856-9989-4712-8355-8047D169B49F}", AgStkGraphicsCustomImageGlobeOverlay)
__all__.append("AgStkGraphicsCustomImageGlobeOverlay")


class AgStkGraphicsCustomImageGlobeOverlayPluginActivator(IAgStkGraphicsCustomImageGlobeOverlayPluginActivator):
    """The Activator class provides methods to load COM plugins that implement custom image globe overlays. For more information about custom image globe overlays, see the STK Programming Interface."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsCustomImageGlobeOverlayPluginActivator.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsCustomImageGlobeOverlayPluginActivator._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsCustomImageGlobeOverlayPluginActivator._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsCustomImageGlobeOverlayPluginActivator._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsCustomImageGlobeOverlayPluginActivator.")
        
agcls.AgClassCatalog.add_catalog_entry("{06EE5B12-485C-4AFE-8D16-B1516F3D6BFE}", AgStkGraphicsCustomImageGlobeOverlayPluginActivator)
__all__.append("AgStkGraphicsCustomImageGlobeOverlayPluginActivator")


class AgStkGraphicsCustomImageGlobeOverlayPluginProxy(IAgStkGraphicsCustomImageGlobeOverlayPluginProxy):
    """A proxy class provides access to a custom image globe overlay implemented by a plugin. Proxies are instantiated using custom image globe overlay plugin activator."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsCustomImageGlobeOverlayPluginProxy.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsCustomImageGlobeOverlayPluginProxy._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsCustomImageGlobeOverlayPluginProxy._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsCustomImageGlobeOverlayPluginProxy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsCustomImageGlobeOverlayPluginProxy.")
        
agcls.AgClassCatalog.add_catalog_entry("{1A2C5F92-FEFD-4961-B840-D940D30D3637}", AgStkGraphicsCustomImageGlobeOverlayPluginProxy)
__all__.append("AgStkGraphicsCustomImageGlobeOverlayPluginProxy")


class AgStkGraphicsGeospatialImageGlobeOverlay(IAgStkGraphicsGeospatialImageGlobeOverlay, IAgStkGraphicsGlobeImageOverlay, IAgStkGraphicsGlobeOverlay):
    """A globe image overlay for handling <a href='http://www.jpeg.org/jpeg2000/'>JPEG 2000</a> (.jp2), ECW (.ecw), ECWP, and MrSid (.sid) image formats in the WGS84 geographic projection."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsGeospatialImageGlobeOverlay.__init__(self, sourceObject)
        IAgStkGraphicsGlobeImageOverlay.__init__(self, sourceObject)
        IAgStkGraphicsGlobeOverlay.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsGeospatialImageGlobeOverlay._private_init(self, pUnk)
        IAgStkGraphicsGlobeImageOverlay._private_init(self, pUnk)
        IAgStkGraphicsGlobeOverlay._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsGeospatialImageGlobeOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsGeospatialImageGlobeOverlay._get_property(self, attrname)
        if IAgStkGraphicsGlobeImageOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsGlobeImageOverlay._get_property(self, attrname)
        if IAgStkGraphicsGlobeOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsGlobeOverlay._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsGeospatialImageGlobeOverlay.")
        
agcls.AgClassCatalog.add_catalog_entry("{B2C72817-48CC-498A-BAF5-71CBDEEE4BD2}", AgStkGraphicsGeospatialImageGlobeOverlay)
__all__.append("AgStkGraphicsGeospatialImageGlobeOverlay")


class AgStkGraphicsGlobeOverlay(IAgStkGraphicsGlobeOverlay):
    """The base class of all terrain overlay and globe image overlay objects."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsGlobeOverlay.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsGlobeOverlay._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsGlobeOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsGlobeOverlay._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsGlobeOverlay.")
        
agcls.AgClassCatalog.add_catalog_entry("{4D2E94A8-DE1F-4382-AF9D-5664313F3E49}", AgStkGraphicsGlobeOverlay)
__all__.append("AgStkGraphicsGlobeOverlay")


class AgStkGraphicsGlobeOverlaySettings(IAgStkGraphicsGlobeOverlaySettings):
    """Settings used by globe overlay objects. These setting affect all scenes."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsGlobeOverlaySettings.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsGlobeOverlaySettings._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsGlobeOverlaySettings._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsGlobeOverlaySettings._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsGlobeOverlaySettings.")
        
agcls.AgClassCatalog.add_catalog_entry("{0F326F62-7A92-46B9-8CD4-F73A14B32A42}", AgStkGraphicsGlobeOverlaySettings)
__all__.append("AgStkGraphicsGlobeOverlaySettings")


class AgStkGraphicsLighting(IAgStkGraphicsLighting):
    """Lighting in the 3D scene."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsLighting.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsLighting._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsLighting._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsLighting._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsLighting.")
        
agcls.AgClassCatalog.add_catalog_entry("{29C20830-2D8B-4E6B-854A-FDE514F4396A}", AgStkGraphicsLighting)
__all__.append("AgStkGraphicsLighting")


class AgStkGraphicsPathPrimitiveUpdatePolicy(IAgStkGraphicsPathPrimitiveUpdatePolicy):
    """A class that encapsulates the update logic for a path primitive. Derived classes must implement the Update method."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsPathPrimitiveUpdatePolicy.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsPathPrimitiveUpdatePolicy._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsPathPrimitiveUpdatePolicy._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPathPrimitiveUpdatePolicy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsPathPrimitiveUpdatePolicy.")
        
agcls.AgClassCatalog.add_catalog_entry("{E1D3DA5F-ABD5-4C2D-891B-AB5A0FCE78A6}", AgStkGraphicsPathPrimitiveUpdatePolicy)
__all__.append("AgStkGraphicsPathPrimitiveUpdatePolicy")


class AgStkGraphicsProjectedRasterOverlay(IAgStkGraphicsProjectedRasterOverlay, IAgStkGraphicsGlobeImageOverlay, IAgStkGraphicsGlobeOverlay):
    """A globe image overlay which projects a raster onto the terrain or surface of the central body. You can also enable projection onto models by setting projected raster model projection to true for a Scene..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsProjectedRasterOverlay.__init__(self, sourceObject)
        IAgStkGraphicsGlobeImageOverlay.__init__(self, sourceObject)
        IAgStkGraphicsGlobeOverlay.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsProjectedRasterOverlay._private_init(self, pUnk)
        IAgStkGraphicsGlobeImageOverlay._private_init(self, pUnk)
        IAgStkGraphicsGlobeOverlay._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsProjectedRasterOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsProjectedRasterOverlay._get_property(self, attrname)
        if IAgStkGraphicsGlobeImageOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsGlobeImageOverlay._get_property(self, attrname)
        if IAgStkGraphicsGlobeOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsGlobeOverlay._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsProjectedRasterOverlay.")
        
agcls.AgClassCatalog.add_catalog_entry("{ED508BB0-4EF1-412D-BEC2-46CF8F9BC5E2}", AgStkGraphicsProjectedRasterOverlay)
__all__.append("AgStkGraphicsProjectedRasterOverlay")


class AgStkGraphicsProjection(IAgStkGraphicsProjection):
    """A projection represents a simplified camera with a position, orientation, and field of view horizontal and field of view vertical..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsProjection.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsProjection._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsProjection._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsProjection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsProjection.")
        
agcls.AgClassCatalog.add_catalog_entry("{3C06C59D-E24C-4145-9634-15ABB16CF69F}", AgStkGraphicsProjection)
__all__.append("AgStkGraphicsProjection")


class AgStkGraphicsProjectionStream(IAgStkGraphicsProjectionStream, IAgStkGraphicsProjection):
    """A projection that is updated dynamically at the specified update delta. The class can be used to stream projection data to projection clients, like projected raster overlay..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsProjectionStream.__init__(self, sourceObject)
        IAgStkGraphicsProjection.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsProjectionStream._private_init(self, pUnk)
        IAgStkGraphicsProjection._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsProjectionStream._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsProjectionStream._get_property(self, attrname)
        if IAgStkGraphicsProjection._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsProjection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsProjectionStream.")
        
agcls.AgClassCatalog.add_catalog_entry("{02371735-0B2F-48AA-A51E-53DAEC21903D}", AgStkGraphicsProjectionStream)
__all__.append("AgStkGraphicsProjectionStream")


class AgStkGraphicsSceneGlobeOverlaySettings(IAgStkGraphicsSceneGlobeOverlaySettings):
    """Settings used by globe overlay objects. These settings only affect the scene."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsSceneGlobeOverlaySettings.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsSceneGlobeOverlaySettings._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsSceneGlobeOverlaySettings._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsSceneGlobeOverlaySettings._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsSceneGlobeOverlaySettings.")
        
agcls.AgClassCatalog.add_catalog_entry("{AA19929F-DE78-4CDB-90C5-12D89532D4C4}", AgStkGraphicsSceneGlobeOverlaySettings)
__all__.append("AgStkGraphicsSceneGlobeOverlaySettings")


class AgStkGraphicsScreenOverlayCollectionBase(IAgStkGraphicsScreenOverlayCollectionBase):
    """The common base class for collections of overlays held by screen overlay and by screen overlay manager."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsScreenOverlayCollectionBase.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsScreenOverlayCollectionBase._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsScreenOverlayCollectionBase._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsScreenOverlayCollectionBase._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsScreenOverlayCollectionBase.")
        
agcls.AgClassCatalog.add_catalog_entry("{B1764146-8986-45CB-A5B9-426988A9F289}", AgStkGraphicsScreenOverlayCollectionBase)
__all__.append("AgStkGraphicsScreenOverlayCollectionBase")


class AgStkGraphicsTexture2DFactory(IAgStkGraphicsTexture2DFactory):
    """A factory for creating texture 2d objects from various sources."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsTexture2DFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsTexture2DFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsTexture2DFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsTexture2DFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsTexture2DFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{1BA44C8C-0CFB-4A7C-B687-788BD4D49AB2}", AgStkGraphicsTexture2DFactory)
__all__.append("AgStkGraphicsTexture2DFactory")


class AgStkGraphicsVisualEffects(IAgStkGraphicsVisualEffects):
    """Controls various post processing effects that can be applied to the scene."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsVisualEffects.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsVisualEffects._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsVisualEffects._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsVisualEffects._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsVisualEffects.")
        
agcls.AgClassCatalog.add_catalog_entry("{901f26d9-644b-4513-a3e9-d4d1f4c3df48}", AgStkGraphicsVisualEffects)
__all__.append("AgStkGraphicsVisualEffects")


class AgStkGraphicsAltitudeDisplayCondition(IAgStkGraphicsAltitudeDisplayCondition, IAgStkGraphicsDisplayCondition):
    """Defines an inclusive altitude interval that determines when an object is rendered based on the camera's altitude relative to a central body."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsAltitudeDisplayCondition.__init__(self, sourceObject)
        IAgStkGraphicsDisplayCondition.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsAltitudeDisplayCondition._private_init(self, pUnk)
        IAgStkGraphicsDisplayCondition._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsAltitudeDisplayCondition._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsAltitudeDisplayCondition._get_property(self, attrname)
        if IAgStkGraphicsDisplayCondition._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsDisplayCondition._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsAltitudeDisplayCondition.")
        
agcls.AgClassCatalog.add_catalog_entry("{E5AFCA9A-2850-44C4-BE11-930BB559872B}", AgStkGraphicsAltitudeDisplayCondition)
__all__.append("AgStkGraphicsAltitudeDisplayCondition")


class AgStkGraphicsAxesPrimitive(IAgStkGraphicsAxesPrimitive, IAgStkGraphicsPrimitive):
    """Renders an axes in the 3D scene."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsAxesPrimitive.__init__(self, sourceObject)
        IAgStkGraphicsPrimitive.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsAxesPrimitive._private_init(self, pUnk)
        IAgStkGraphicsPrimitive._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsAxesPrimitive._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsAxesPrimitive._get_property(self, attrname)
        if IAgStkGraphicsPrimitive._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPrimitive._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsAxesPrimitive.")
        
agcls.AgClassCatalog.add_catalog_entry("{AE8A4146-1A03-4D94-95E4-4D1C67D5501F}", AgStkGraphicsAxesPrimitive)
__all__.append("AgStkGraphicsAxesPrimitive")


class AgStkGraphicsCamera(IAgStkGraphicsCamera):
    """Implemented by the scene camera. Contains operations to manipulate the camera position, view direction and orientation in the scene."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsCamera.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsCamera._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsCamera._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsCamera._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsCamera.")
        
agcls.AgClassCatalog.add_catalog_entry("{B11DEE46-76FD-46E6-9476-AEA896C1E2AF}", AgStkGraphicsCamera)
__all__.append("AgStkGraphicsCamera")


class AgStkGraphicsCentralBodyGraphics(IAgStkGraphicsCentralBodyGraphics):
    """The graphical properties associated with a particular central body. Changing the central body graphics will affect how the associated central body is rendered in a scene. For instance, to show or hide the central body, use the show property..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsCentralBodyGraphics.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsCentralBodyGraphics._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsCentralBodyGraphics._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsCentralBodyGraphics._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsCentralBodyGraphics.")
        
agcls.AgClassCatalog.add_catalog_entry("{47858749-2CF1-48AF-ADCA-426C6E87B7EB}", AgStkGraphicsCentralBodyGraphics)
__all__.append("AgStkGraphicsCentralBodyGraphics")


class AgStkGraphicsClouds(IAgStkGraphicsClouds):
    """Load, show and hide clouds in the scene."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsClouds.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsClouds._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsClouds._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsClouds._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsClouds.")
        
agcls.AgClassCatalog.add_catalog_entry("{a98d31c3-daf0-40dd-ba64-0ceb18f0e522}", AgStkGraphicsClouds)
__all__.append("AgStkGraphicsClouds")


class AgStkGraphicsCompositeDisplayCondition(IAgStkGraphicsCompositeDisplayCondition, IAgStkGraphicsDisplayCondition):
    """A composite of display conditions combined using a binary logic operation. For example, several time interval display condition objects can be added to a composite..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsCompositeDisplayCondition.__init__(self, sourceObject)
        IAgStkGraphicsDisplayCondition.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsCompositeDisplayCondition._private_init(self, pUnk)
        IAgStkGraphicsDisplayCondition._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsCompositeDisplayCondition._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsCompositeDisplayCondition._get_property(self, attrname)
        if IAgStkGraphicsDisplayCondition._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsDisplayCondition._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsCompositeDisplayCondition.")
        
agcls.AgClassCatalog.add_catalog_entry("{B59D2316-7712-462C-BB2F-3C882D18388E}", AgStkGraphicsCompositeDisplayCondition)
__all__.append("AgStkGraphicsCompositeDisplayCondition")


class AgStkGraphicsCompositePrimitive(IAgStkGraphicsCompositePrimitive, IAgStkGraphicsPrimitive):
    """ A primitive that is composed of multiple other primitives. Since composites can contain other composites, they are commonly used to build hierarchies of primitives to efficiently evaluate display conditions..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsCompositePrimitive.__init__(self, sourceObject)
        IAgStkGraphicsPrimitive.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsCompositePrimitive._private_init(self, pUnk)
        IAgStkGraphicsPrimitive._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsCompositePrimitive._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsCompositePrimitive._get_property(self, attrname)
        if IAgStkGraphicsPrimitive._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPrimitive._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsCompositePrimitive.")
        
agcls.AgClassCatalog.add_catalog_entry("{8F6F69B8-80C9-40F2-BC5B-BCEE656C8917}", AgStkGraphicsCompositePrimitive)
__all__.append("AgStkGraphicsCompositePrimitive")


class AgStkGraphicsConstantDisplayCondition(IAgStkGraphicsConstantDisplayCondition, IAgStkGraphicsDisplayCondition):
    """A display condition that evaluates to a user-defined value. This is commonly used to hide primitives by assigning to a primitive a display condition that always returns false."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsConstantDisplayCondition.__init__(self, sourceObject)
        IAgStkGraphicsDisplayCondition.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsConstantDisplayCondition._private_init(self, pUnk)
        IAgStkGraphicsDisplayCondition._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsConstantDisplayCondition._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsConstantDisplayCondition._get_property(self, attrname)
        if IAgStkGraphicsDisplayCondition._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsDisplayCondition._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsConstantDisplayCondition.")
        
agcls.AgClassCatalog.add_catalog_entry("{C21814A8-7591-412D-9390-A6CE73468CA3}", AgStkGraphicsConstantDisplayCondition)
__all__.append("AgStkGraphicsConstantDisplayCondition")


class AgStkGraphicsDisplayCondition(IAgStkGraphicsDisplayCondition):
    """When assigned to objects, such as primitives or globe overlays, display conditions are evaluated to determine if the object should be rendered."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsDisplayCondition.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsDisplayCondition._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsDisplayCondition._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsDisplayCondition._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsDisplayCondition.")
        
agcls.AgClassCatalog.add_catalog_entry("{CEC5D5EB-5AF8-4CCD-BD3D-EFF95DC04F26}", AgStkGraphicsDisplayCondition)
__all__.append("AgStkGraphicsDisplayCondition")


class AgStkGraphicsDistanceDisplayCondition(IAgStkGraphicsDistanceDisplayCondition, IAgStkGraphicsDisplayCondition):
    """Defines an inclusive distance interval that determines when an object, such as a primitive, is rendered based on the distance from the camera to the object."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsDistanceDisplayCondition.__init__(self, sourceObject)
        IAgStkGraphicsDisplayCondition.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsDistanceDisplayCondition._private_init(self, pUnk)
        IAgStkGraphicsDisplayCondition._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsDistanceDisplayCondition._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsDistanceDisplayCondition._get_property(self, attrname)
        if IAgStkGraphicsDisplayCondition._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsDisplayCondition._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsDistanceDisplayCondition.")
        
agcls.AgClassCatalog.add_catalog_entry("{0B5589C8-51E7-4191-BD54-8326BFF56CE2}", AgStkGraphicsDistanceDisplayCondition)
__all__.append("AgStkGraphicsDistanceDisplayCondition")


class AgStkGraphicsDistanceToGlobeOverlayDisplayCondition(IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition, IAgStkGraphicsDisplayCondition):
    """Defines an inclusive distance interval that determines when an object, such as a primitive, is rendered based on the distance from the camera to the globe overlay..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition.__init__(self, sourceObject)
        IAgStkGraphicsDisplayCondition.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition._private_init(self, pUnk)
        IAgStkGraphicsDisplayCondition._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition._get_property(self, attrname)
        if IAgStkGraphicsDisplayCondition._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsDisplayCondition._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsDistanceToGlobeOverlayDisplayCondition.")
        
agcls.AgClassCatalog.add_catalog_entry("{E9C27719-711F-4E36-9FF9-DEF15D35581E}", AgStkGraphicsDistanceToGlobeOverlayDisplayCondition)
__all__.append("AgStkGraphicsDistanceToGlobeOverlayDisplayCondition")


class AgStkGraphicsDistanceToPositionDisplayCondition(IAgStkGraphicsDistanceToPositionDisplayCondition, IAgStkGraphicsDisplayCondition):
    """Defines an inclusive distance interval that determines when an object, such as a primitive, is rendered based on the distance from the camera to a position defined in the given reference frame."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsDistanceToPositionDisplayCondition.__init__(self, sourceObject)
        IAgStkGraphicsDisplayCondition.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsDistanceToPositionDisplayCondition._private_init(self, pUnk)
        IAgStkGraphicsDisplayCondition._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsDistanceToPositionDisplayCondition._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsDistanceToPositionDisplayCondition._get_property(self, attrname)
        if IAgStkGraphicsDisplayCondition._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsDisplayCondition._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsDistanceToPositionDisplayCondition.")
        
agcls.AgClassCatalog.add_catalog_entry("{ACD2A88B-E930-4994-AA0A-D37AEDB51182}", AgStkGraphicsDistanceToPositionDisplayCondition)
__all__.append("AgStkGraphicsDistanceToPositionDisplayCondition")


class AgStkGraphicsDistanceToPrimitiveDisplayCondition(IAgStkGraphicsDistanceToPrimitiveDisplayCondition, IAgStkGraphicsDisplayCondition):
    """Defines an inclusive distance interval that determines when an object, such as a screen overlay, is rendered based on the distance from the camera to the primitive..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsDistanceToPrimitiveDisplayCondition.__init__(self, sourceObject)
        IAgStkGraphicsDisplayCondition.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsDistanceToPrimitiveDisplayCondition._private_init(self, pUnk)
        IAgStkGraphicsDisplayCondition._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsDistanceToPrimitiveDisplayCondition._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsDistanceToPrimitiveDisplayCondition._get_property(self, attrname)
        if IAgStkGraphicsDisplayCondition._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsDisplayCondition._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsDistanceToPrimitiveDisplayCondition.")
        
agcls.AgClassCatalog.add_catalog_entry("{90A5B7AD-6FE1-4387-96B1-66A17A54FDA2}", AgStkGraphicsDistanceToPrimitiveDisplayCondition)
__all__.append("AgStkGraphicsDistanceToPrimitiveDisplayCondition")


class AgStkGraphicsDurationPathPrimitiveUpdatePolicy(IAgStkGraphicsDurationPathPrimitiveUpdatePolicy, IAgStkGraphicsPathPrimitiveUpdatePolicy):
    """path primitive update policy that removes points from remove location after a given duration."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsDurationPathPrimitiveUpdatePolicy.__init__(self, sourceObject)
        IAgStkGraphicsPathPrimitiveUpdatePolicy.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsDurationPathPrimitiveUpdatePolicy._private_init(self, pUnk)
        IAgStkGraphicsPathPrimitiveUpdatePolicy._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsDurationPathPrimitiveUpdatePolicy._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsDurationPathPrimitiveUpdatePolicy._get_property(self, attrname)
        if IAgStkGraphicsPathPrimitiveUpdatePolicy._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPathPrimitiveUpdatePolicy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsDurationPathPrimitiveUpdatePolicy.")
        
agcls.AgClassCatalog.add_catalog_entry("{8628CCF8-7803-4528-B013-66116C059454}", AgStkGraphicsDurationPathPrimitiveUpdatePolicy)
__all__.append("AgStkGraphicsDurationPathPrimitiveUpdatePolicy")


class AgStkGraphicsFrameRate(IAgStkGraphicsFrameRate):
    """Keeps track of how many times the scenes are rendered per second."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsFrameRate.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsFrameRate._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsFrameRate._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsFrameRate._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsFrameRate.")
        
agcls.AgClassCatalog.add_catalog_entry("{EB82B58B-6E32-4E91-92A8-E8008A5C4B77}", AgStkGraphicsFrameRate)
__all__.append("AgStkGraphicsFrameRate")


class AgStkGraphicsGlobeImageOverlay(IAgStkGraphicsGlobeImageOverlay, IAgStkGraphicsGlobeOverlay):
    """A globe overlay that shows an image."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsGlobeImageOverlay.__init__(self, sourceObject)
        IAgStkGraphicsGlobeOverlay.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsGlobeImageOverlay._private_init(self, pUnk)
        IAgStkGraphicsGlobeOverlay._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsGlobeImageOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsGlobeImageOverlay._get_property(self, attrname)
        if IAgStkGraphicsGlobeOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsGlobeOverlay._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsGlobeImageOverlay.")
        
agcls.AgClassCatalog.add_catalog_entry("{5316E632-3018-4625-866F-E56F29FFBC05}", AgStkGraphicsGlobeImageOverlay)
__all__.append("AgStkGraphicsGlobeImageOverlay")


class AgStkGraphicsGraphicsFont(IAgStkGraphicsGraphicsFont):
    """A font that is suitable for use with the text batch primitive. For best performance, avoid creating duplicate font objects. Instead assign the same font object to several text batch primitives."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsGraphicsFont.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsGraphicsFont._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsGraphicsFont._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsGraphicsFont._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsGraphicsFont.")
        
agcls.AgClassCatalog.add_catalog_entry("{C48AD7DF-40C9-4A57-86CD-E7B0E4BFCF52}", AgStkGraphicsGraphicsFont)
__all__.append("AgStkGraphicsGraphicsFont")


class AgStkGraphicsGreatArcInterpolator(IAgStkGraphicsGreatArcInterpolator, IAgStkGraphicsPositionInterpolator):
    """The great arc interpolator computes interpolated positions along a great arc. A great arc is the shortest path between two positions on an ellipsoid."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsGreatArcInterpolator.__init__(self, sourceObject)
        IAgStkGraphicsPositionInterpolator.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsGreatArcInterpolator._private_init(self, pUnk)
        IAgStkGraphicsPositionInterpolator._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsGreatArcInterpolator._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsGreatArcInterpolator._get_property(self, attrname)
        if IAgStkGraphicsPositionInterpolator._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPositionInterpolator._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsGreatArcInterpolator.")
        
agcls.AgClassCatalog.add_catalog_entry("{A91AC76D-7326-4103-996E-DE20EB349A61}", AgStkGraphicsGreatArcInterpolator)
__all__.append("AgStkGraphicsGreatArcInterpolator")


class AgStkGraphicsImageCollection(IAgStkGraphicsImageCollection):
    """A collection of globe image overlay objects."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsImageCollection.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsImageCollection._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsImageCollection._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsImageCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsImageCollection.")
        
agcls.AgClassCatalog.add_catalog_entry("{26812ED6-0AB2-4554-A01F-A1E52687763D}", AgStkGraphicsImageCollection)
__all__.append("AgStkGraphicsImageCollection")


class AgStkGraphicsAlphaFromLuminanceFilter(IAgStkGraphicsAlphaFromLuminanceFilter, IAgStkGraphicsRasterFilter):
    """Adds an alpha band to the source raster derived from the luminance of the raster's color bands."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsAlphaFromLuminanceFilter.__init__(self, sourceObject)
        IAgStkGraphicsRasterFilter.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsAlphaFromLuminanceFilter._private_init(self, pUnk)
        IAgStkGraphicsRasterFilter._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsAlphaFromLuminanceFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsAlphaFromLuminanceFilter._get_property(self, attrname)
        if IAgStkGraphicsRasterFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRasterFilter._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsAlphaFromLuminanceFilter.")
        
agcls.AgClassCatalog.add_catalog_entry("{7D660FC7-F1D2-4189-A5C7-B2BFD97E1B4E}", AgStkGraphicsAlphaFromLuminanceFilter)
__all__.append("AgStkGraphicsAlphaFromLuminanceFilter")


class AgStkGraphicsAlphaFromPixelFilter(IAgStkGraphicsAlphaFromPixelFilter, IAgStkGraphicsRasterFilter):
    """Adds an alpha band to the source raster based on the value of its first pixel. All pixels in the source raster that are the same color as the first pixel will be made transparent."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsAlphaFromPixelFilter.__init__(self, sourceObject)
        IAgStkGraphicsRasterFilter.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsAlphaFromPixelFilter._private_init(self, pUnk)
        IAgStkGraphicsRasterFilter._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsAlphaFromPixelFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsAlphaFromPixelFilter._get_property(self, attrname)
        if IAgStkGraphicsRasterFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRasterFilter._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsAlphaFromPixelFilter.")
        
agcls.AgClassCatalog.add_catalog_entry("{B2D2B3A3-9FA8-4B58-9CA5-89705663DEDB}", AgStkGraphicsAlphaFromPixelFilter)
__all__.append("AgStkGraphicsAlphaFromPixelFilter")


class AgStkGraphicsAlphaFromRasterFilter(IAgStkGraphicsAlphaFromRasterFilter, IAgStkGraphicsRasterFilter):
    """Adds an alpha band to the source raster derived from the color bands or alpha of another raster. This filter can be used to apply an alpha mask to the source raster."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsAlphaFromRasterFilter.__init__(self, sourceObject)
        IAgStkGraphicsRasterFilter.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsAlphaFromRasterFilter._private_init(self, pUnk)
        IAgStkGraphicsRasterFilter._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsAlphaFromRasterFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsAlphaFromRasterFilter._get_property(self, attrname)
        if IAgStkGraphicsRasterFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRasterFilter._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsAlphaFromRasterFilter.")
        
agcls.AgClassCatalog.add_catalog_entry("{5E83A2AD-0A40-4CFC-823A-311AC8B034B3}", AgStkGraphicsAlphaFromRasterFilter)
__all__.append("AgStkGraphicsAlphaFromRasterFilter")


class AgStkGraphicsBandExtractFilter(IAgStkGraphicsBandExtractFilter, IAgStkGraphicsRasterFilter):
    """Extracts a band or set of bands from the source raster. The extract format property specifies the bands and the order of the bands that will be extracted."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsBandExtractFilter.__init__(self, sourceObject)
        IAgStkGraphicsRasterFilter.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsBandExtractFilter._private_init(self, pUnk)
        IAgStkGraphicsRasterFilter._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsBandExtractFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsBandExtractFilter._get_property(self, attrname)
        if IAgStkGraphicsRasterFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRasterFilter._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsBandExtractFilter.")
        
agcls.AgClassCatalog.add_catalog_entry("{DC9176BE-3DBD-40D1-A0BC-CEDE39C747E2}", AgStkGraphicsBandExtractFilter)
__all__.append("AgStkGraphicsBandExtractFilter")


class AgStkGraphicsBandOrderFilter(IAgStkGraphicsBandOrderFilter, IAgStkGraphicsRasterFilter):
    """Reorders or swizzles the bands of the source raster to match the band order of the raster format specified by the band order property. When maintain raster format is true, the source raster's format is maintained after swizzling."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsBandOrderFilter.__init__(self, sourceObject)
        IAgStkGraphicsRasterFilter.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsBandOrderFilter._private_init(self, pUnk)
        IAgStkGraphicsRasterFilter._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsBandOrderFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsBandOrderFilter._get_property(self, attrname)
        if IAgStkGraphicsRasterFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRasterFilter._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsBandOrderFilter.")
        
agcls.AgClassCatalog.add_catalog_entry("{91749CD4-8503-4C71-AD42-DB5AAF1BC240}", AgStkGraphicsBandOrderFilter)
__all__.append("AgStkGraphicsBandOrderFilter")


class AgStkGraphicsBlurFilter(IAgStkGraphicsBlurFilter, IAgStkGraphicsConvolutionFilter, IAgStkGraphicsRasterFilter):
    """Applies a convolution filter to blur or smooth the source raster. Can be used to reduce noise in the raster."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsBlurFilter.__init__(self, sourceObject)
        IAgStkGraphicsConvolutionFilter.__init__(self, sourceObject)
        IAgStkGraphicsRasterFilter.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsBlurFilter._private_init(self, pUnk)
        IAgStkGraphicsConvolutionFilter._private_init(self, pUnk)
        IAgStkGraphicsRasterFilter._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsBlurFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsBlurFilter._get_property(self, attrname)
        if IAgStkGraphicsConvolutionFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsConvolutionFilter._get_property(self, attrname)
        if IAgStkGraphicsRasterFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRasterFilter._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsBlurFilter.")
        
agcls.AgClassCatalog.add_catalog_entry("{A3E1128F-DE2D-4A57-AC68-C7C938480BF2}", AgStkGraphicsBlurFilter)
__all__.append("AgStkGraphicsBlurFilter")


class AgStkGraphicsBrightnessFilter(IAgStkGraphicsBrightnessFilter, IAgStkGraphicsRasterFilter):
    """Adjusts the brightness of the source raster's color bands. The adjustment to brightness is a value between -1 and 1, corresponding to least bright to most bright."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsBrightnessFilter.__init__(self, sourceObject)
        IAgStkGraphicsRasterFilter.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsBrightnessFilter._private_init(self, pUnk)
        IAgStkGraphicsRasterFilter._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsBrightnessFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsBrightnessFilter._get_property(self, attrname)
        if IAgStkGraphicsRasterFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRasterFilter._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsBrightnessFilter.")
        
agcls.AgClassCatalog.add_catalog_entry("{E6FF496E-64E8-41CA-BED7-8FEBDDB6B9C9}", AgStkGraphicsBrightnessFilter)
__all__.append("AgStkGraphicsBrightnessFilter")


class AgStkGraphicsColorToLuminanceFilter(IAgStkGraphicsColorToLuminanceFilter, IAgStkGraphicsRasterFilter):
    """Extracts a luminance band derived from the color bands of the source raster."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsColorToLuminanceFilter.__init__(self, sourceObject)
        IAgStkGraphicsRasterFilter.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsColorToLuminanceFilter._private_init(self, pUnk)
        IAgStkGraphicsRasterFilter._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsColorToLuminanceFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsColorToLuminanceFilter._get_property(self, attrname)
        if IAgStkGraphicsRasterFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRasterFilter._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsColorToLuminanceFilter.")
        
agcls.AgClassCatalog.add_catalog_entry("{BE472786-A17B-490A-8DE7-4831AC3FEEDE}", AgStkGraphicsColorToLuminanceFilter)
__all__.append("AgStkGraphicsColorToLuminanceFilter")


class AgStkGraphicsContrastFilter(IAgStkGraphicsContrastFilter, IAgStkGraphicsRasterFilter):
    """Adjusts the contrast of the source raster. The adjustment to contrast is a value between -1 and 1, corresponding to least contrast to most contrast."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsContrastFilter.__init__(self, sourceObject)
        IAgStkGraphicsRasterFilter.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsContrastFilter._private_init(self, pUnk)
        IAgStkGraphicsRasterFilter._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsContrastFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsContrastFilter._get_property(self, attrname)
        if IAgStkGraphicsRasterFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRasterFilter._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsContrastFilter.")
        
agcls.AgClassCatalog.add_catalog_entry("{20FA2A78-30D4-4DDE-84D7-EBF001730166}", AgStkGraphicsContrastFilter)
__all__.append("AgStkGraphicsContrastFilter")


class AgStkGraphicsConvolutionFilter(IAgStkGraphicsConvolutionFilter, IAgStkGraphicsRasterFilter):
    """Applies convolution to the source raster. Convolution is the modification of a pixel's value based on the values of its surrounding pixels. The kernel is the numerical matrix that is applied to each pixel in this process..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsConvolutionFilter.__init__(self, sourceObject)
        IAgStkGraphicsRasterFilter.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsConvolutionFilter._private_init(self, pUnk)
        IAgStkGraphicsRasterFilter._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsConvolutionFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsConvolutionFilter._get_property(self, attrname)
        if IAgStkGraphicsRasterFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRasterFilter._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsConvolutionFilter.")
        
agcls.AgClassCatalog.add_catalog_entry("{113D939E-C5B0-49BD-A38B-53DD961CAC5B}", AgStkGraphicsConvolutionFilter)
__all__.append("AgStkGraphicsConvolutionFilter")


class AgStkGraphicsEdgeDetectFilter(IAgStkGraphicsEdgeDetectFilter, IAgStkGraphicsConvolutionFilter, IAgStkGraphicsRasterFilter):
    """Applies a convolution filter to detect edges in the source raster."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsEdgeDetectFilter.__init__(self, sourceObject)
        IAgStkGraphicsConvolutionFilter.__init__(self, sourceObject)
        IAgStkGraphicsRasterFilter.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsEdgeDetectFilter._private_init(self, pUnk)
        IAgStkGraphicsConvolutionFilter._private_init(self, pUnk)
        IAgStkGraphicsRasterFilter._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsEdgeDetectFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsEdgeDetectFilter._get_property(self, attrname)
        if IAgStkGraphicsConvolutionFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsConvolutionFilter._get_property(self, attrname)
        if IAgStkGraphicsRasterFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRasterFilter._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsEdgeDetectFilter.")
        
agcls.AgClassCatalog.add_catalog_entry("{04E73117-38A1-4EE3-854D-253934DE9B54}", AgStkGraphicsEdgeDetectFilter)
__all__.append("AgStkGraphicsEdgeDetectFilter")


class AgStkGraphicsFilteringRasterStream(IAgStkGraphicsFilteringRasterStream, IAgStkGraphicsRasterStream, IAgStkGraphicsRaster):
    """A class decorator for applying a raster filter to each update of a raster stream. Can be used to apply filters to videos and other raster streams as they are updated."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsFilteringRasterStream.__init__(self, sourceObject)
        IAgStkGraphicsRasterStream.__init__(self, sourceObject)
        IAgStkGraphicsRaster.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsFilteringRasterStream._private_init(self, pUnk)
        IAgStkGraphicsRasterStream._private_init(self, pUnk)
        IAgStkGraphicsRaster._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsFilteringRasterStream._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsFilteringRasterStream._get_property(self, attrname)
        if IAgStkGraphicsRasterStream._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRasterStream._get_property(self, attrname)
        if IAgStkGraphicsRaster._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRaster._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsFilteringRasterStream.")
        
agcls.AgClassCatalog.add_catalog_entry("{9D59ED29-9EF8-4D85-BE0F-9E244736C814}", AgStkGraphicsFilteringRasterStream)
__all__.append("AgStkGraphicsFilteringRasterStream")


class AgStkGraphicsFlipFilter(IAgStkGraphicsFlipFilter, IAgStkGraphicsRasterFilter):
    """Flips the source raster along the given flip axis."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsFlipFilter.__init__(self, sourceObject)
        IAgStkGraphicsRasterFilter.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsFlipFilter._private_init(self, pUnk)
        IAgStkGraphicsRasterFilter._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsFlipFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsFlipFilter._get_property(self, attrname)
        if IAgStkGraphicsRasterFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRasterFilter._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsFlipFilter.")
        
agcls.AgClassCatalog.add_catalog_entry("{08E0C45D-A187-4B74-93AE-BF29B39D50C3}", AgStkGraphicsFlipFilter)
__all__.append("AgStkGraphicsFlipFilter")


class AgStkGraphicsGammaCorrectionFilter(IAgStkGraphicsGammaCorrectionFilter, IAgStkGraphicsRasterFilter):
    """Applies gamma correction to the source raster. The gamma is a value between .2 and 5. The default gamma value is 2.2."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsGammaCorrectionFilter.__init__(self, sourceObject)
        IAgStkGraphicsRasterFilter.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsGammaCorrectionFilter._private_init(self, pUnk)
        IAgStkGraphicsRasterFilter._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsGammaCorrectionFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsGammaCorrectionFilter._get_property(self, attrname)
        if IAgStkGraphicsRasterFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRasterFilter._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsGammaCorrectionFilter.")
        
agcls.AgClassCatalog.add_catalog_entry("{A560ACC2-4642-44FD-A5FC-BD3AB7A0FC2F}", AgStkGraphicsGammaCorrectionFilter)
__all__.append("AgStkGraphicsGammaCorrectionFilter")


class AgStkGraphicsGaussianBlurFilter(IAgStkGraphicsGaussianBlurFilter, IAgStkGraphicsConvolutionFilter, IAgStkGraphicsRasterFilter):
    """Applies a convolution filter to blur the source raster using the Gaussian function."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsGaussianBlurFilter.__init__(self, sourceObject)
        IAgStkGraphicsConvolutionFilter.__init__(self, sourceObject)
        IAgStkGraphicsRasterFilter.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsGaussianBlurFilter._private_init(self, pUnk)
        IAgStkGraphicsConvolutionFilter._private_init(self, pUnk)
        IAgStkGraphicsRasterFilter._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsGaussianBlurFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsGaussianBlurFilter._get_property(self, attrname)
        if IAgStkGraphicsConvolutionFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsConvolutionFilter._get_property(self, attrname)
        if IAgStkGraphicsRasterFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRasterFilter._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsGaussianBlurFilter.")
        
agcls.AgClassCatalog.add_catalog_entry("{BCEE5F1C-66D8-48C6-8485-8435260855DE}", AgStkGraphicsGaussianBlurFilter)
__all__.append("AgStkGraphicsGaussianBlurFilter")


class AgStkGraphicsGradientDetectFilter(IAgStkGraphicsGradientDetectFilter, IAgStkGraphicsConvolutionFilter, IAgStkGraphicsRasterFilter):
    """Applies a convolution filter to detect gradients in the source raster."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsGradientDetectFilter.__init__(self, sourceObject)
        IAgStkGraphicsConvolutionFilter.__init__(self, sourceObject)
        IAgStkGraphicsRasterFilter.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsGradientDetectFilter._private_init(self, pUnk)
        IAgStkGraphicsConvolutionFilter._private_init(self, pUnk)
        IAgStkGraphicsRasterFilter._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsGradientDetectFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsGradientDetectFilter._get_property(self, attrname)
        if IAgStkGraphicsConvolutionFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsConvolutionFilter._get_property(self, attrname)
        if IAgStkGraphicsRasterFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRasterFilter._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsGradientDetectFilter.")
        
agcls.AgClassCatalog.add_catalog_entry("{7F410D2F-C209-4F22-A906-5F8BA0C8CA40}", AgStkGraphicsGradientDetectFilter)
__all__.append("AgStkGraphicsGradientDetectFilter")


class AgStkGraphicsLevelsFilter(IAgStkGraphicsLevelsFilter, IAgStkGraphicsRasterFilter):
    """Adjusts the band levels of the source raster linearly."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsLevelsFilter.__init__(self, sourceObject)
        IAgStkGraphicsRasterFilter.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsLevelsFilter._private_init(self, pUnk)
        IAgStkGraphicsRasterFilter._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsLevelsFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsLevelsFilter._get_property(self, attrname)
        if IAgStkGraphicsRasterFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRasterFilter._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsLevelsFilter.")
        
agcls.AgClassCatalog.add_catalog_entry("{C21CE0FC-3E94-47C9-9E21-C8478A46E75C}", AgStkGraphicsLevelsFilter)
__all__.append("AgStkGraphicsLevelsFilter")


class AgStkGraphicsProjectionRasterStreamPluginActivator(IAgStkGraphicsProjectionRasterStreamPluginActivator):
    """The Activator class provides methods to load COM plugins that implement projection and raster streaming. For more information about the projection and raster plugins, see the STK Programming Interface."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsProjectionRasterStreamPluginActivator.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsProjectionRasterStreamPluginActivator._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsProjectionRasterStreamPluginActivator._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsProjectionRasterStreamPluginActivator._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsProjectionRasterStreamPluginActivator.")
        
agcls.AgClassCatalog.add_catalog_entry("{5365D424-8630-4D9D-B209-F946D5116080}", AgStkGraphicsProjectionRasterStreamPluginActivator)
__all__.append("AgStkGraphicsProjectionRasterStreamPluginActivator")


class AgStkGraphicsProjectionRasterStreamPluginProxy(IAgStkGraphicsProjectionRasterStreamPluginProxy):
    """A proxy class provides access to the raster and projection streams implemented by a plugin. Proxies are instantiated using projection raster stream plugin activator."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsProjectionRasterStreamPluginProxy.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsProjectionRasterStreamPluginProxy._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsProjectionRasterStreamPluginProxy._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsProjectionRasterStreamPluginProxy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsProjectionRasterStreamPluginProxy.")
        
agcls.AgClassCatalog.add_catalog_entry("{82E6B1F4-DC2D-40C3-8251-8207F218B820}", AgStkGraphicsProjectionRasterStreamPluginProxy)
__all__.append("AgStkGraphicsProjectionRasterStreamPluginProxy")


class AgStkGraphicsRaster(IAgStkGraphicsRaster):
    """A raster dataset. A raster consists of one or more bands, or sets of values, which are most commonly associated with colors when the raster represents an image..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsRaster.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsRaster._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsRaster._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRaster._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsRaster.")
        
agcls.AgClassCatalog.add_catalog_entry("{50AB6A3A-54CA-4619-9B99-FB7BD497EA92}", AgStkGraphicsRaster)
__all__.append("AgStkGraphicsRaster")


class AgStkGraphicsRasterAttributes(IAgStkGraphicsRasterAttributes):
    """The attributes describing a raster dataset. raster attributes define the memory layout of a raster, and includes properties defining the order of each raster band that the raster contains, as specified by the raster format..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsRasterAttributes.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsRasterAttributes._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsRasterAttributes._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRasterAttributes._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsRasterAttributes.")
        
agcls.AgClassCatalog.add_catalog_entry("{32DEB10A-1039-43AF-AA36-BA94F8CC8531}", AgStkGraphicsRasterAttributes)
__all__.append("AgStkGraphicsRasterAttributes")


class AgStkGraphicsRasterFilter(IAgStkGraphicsRasterFilter):
    """A filter for processing raster datasets. RasterFilter is the base class for all raster filters..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsRasterFilter.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsRasterFilter._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsRasterFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRasterFilter._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsRasterFilter.")
        
agcls.AgClassCatalog.add_catalog_entry("{0345FD5E-C6A6-42D3-AEA9-57A7444BFF42}", AgStkGraphicsRasterFilter)
__all__.append("AgStkGraphicsRasterFilter")


class AgStkGraphicsRasterStream(IAgStkGraphicsRasterStream, IAgStkGraphicsRaster):
    """A raster, the data of which, is updated dynamically at the specified update delta. The class can be used to stream video and other dynamic raster data to textures and other raster clients..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsRasterStream.__init__(self, sourceObject)
        IAgStkGraphicsRaster.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsRasterStream._private_init(self, pUnk)
        IAgStkGraphicsRaster._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsRasterStream._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRasterStream._get_property(self, attrname)
        if IAgStkGraphicsRaster._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRaster._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsRasterStream.")
        
agcls.AgClassCatalog.add_catalog_entry("{CAFADC5E-933C-46AC-BD09-18B089E86346}", AgStkGraphicsRasterStream)
__all__.append("AgStkGraphicsRasterStream")


class AgStkGraphicsRotateFilter(IAgStkGraphicsRotateFilter, IAgStkGraphicsRasterFilter):
    """Rotates the source raster clockwise by the specified angle."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsRotateFilter.__init__(self, sourceObject)
        IAgStkGraphicsRasterFilter.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsRotateFilter._private_init(self, pUnk)
        IAgStkGraphicsRasterFilter._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsRotateFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRotateFilter._get_property(self, attrname)
        if IAgStkGraphicsRasterFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRasterFilter._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsRotateFilter.")
        
agcls.AgClassCatalog.add_catalog_entry("{AEDFA944-E740-4D19-9819-CB179C43E060}", AgStkGraphicsRotateFilter)
__all__.append("AgStkGraphicsRotateFilter")


class AgStkGraphicsSequenceFilter(IAgStkGraphicsSequenceFilter, IAgStkGraphicsRasterFilter):
    """Applies a sequence of filters to the source raster in the order in which they were added. When continue on failure is set to true, subsequent filters will still be applied to the source raster even if one or more filters in the sequence cannot be applied."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsSequenceFilter.__init__(self, sourceObject)
        IAgStkGraphicsRasterFilter.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsSequenceFilter._private_init(self, pUnk)
        IAgStkGraphicsRasterFilter._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsSequenceFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsSequenceFilter._get_property(self, attrname)
        if IAgStkGraphicsRasterFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRasterFilter._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsSequenceFilter.")
        
agcls.AgClassCatalog.add_catalog_entry("{37330024-90FE-47DD-9548-C13089A085FC}", AgStkGraphicsSequenceFilter)
__all__.append("AgStkGraphicsSequenceFilter")


class AgStkGraphicsSharpenFilter(IAgStkGraphicsSharpenFilter, IAgStkGraphicsConvolutionFilter, IAgStkGraphicsRasterFilter):
    """Applies a convolution filter to increase the sharpness of the source raster."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsSharpenFilter.__init__(self, sourceObject)
        IAgStkGraphicsConvolutionFilter.__init__(self, sourceObject)
        IAgStkGraphicsRasterFilter.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsSharpenFilter._private_init(self, pUnk)
        IAgStkGraphicsConvolutionFilter._private_init(self, pUnk)
        IAgStkGraphicsRasterFilter._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsSharpenFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsSharpenFilter._get_property(self, attrname)
        if IAgStkGraphicsConvolutionFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsConvolutionFilter._get_property(self, attrname)
        if IAgStkGraphicsRasterFilter._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRasterFilter._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsSharpenFilter.")
        
agcls.AgClassCatalog.add_catalog_entry("{0F6FC309-D30E-41AD-A7B6-E70039313B6E}", AgStkGraphicsSharpenFilter)
__all__.append("AgStkGraphicsSharpenFilter")


class AgStkGraphicsVideoStream(IAgStkGraphicsVideoStream, IAgStkGraphicsRasterStream, IAgStkGraphicsRaster):
    """A raster stream that streams from a video. The video can be read from a file, or streamed from an HTTP, RTP, UDP, or TCP source. See the Video Streams Overview for a list of supported video formats and Uri usage."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsVideoStream.__init__(self, sourceObject)
        IAgStkGraphicsRasterStream.__init__(self, sourceObject)
        IAgStkGraphicsRaster.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsVideoStream._private_init(self, pUnk)
        IAgStkGraphicsRasterStream._private_init(self, pUnk)
        IAgStkGraphicsRaster._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsVideoStream._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsVideoStream._get_property(self, attrname)
        if IAgStkGraphicsRasterStream._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRasterStream._get_property(self, attrname)
        if IAgStkGraphicsRaster._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRaster._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsVideoStream.")
        
agcls.AgClassCatalog.add_catalog_entry("{80D82D96-D87B-4910-B8BB-1FBE9E121A4F}", AgStkGraphicsVideoStream)
__all__.append("AgStkGraphicsVideoStream")


class AgStkGraphicsKmlContainer(IAgStkGraphicsKmlContainer, IAgStkGraphicsKmlFeature):
    """A KmlContainer contains a collection of children kml features."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsKmlContainer.__init__(self, sourceObject)
        IAgStkGraphicsKmlFeature.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsKmlContainer._private_init(self, pUnk)
        IAgStkGraphicsKmlFeature._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsKmlContainer._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsKmlContainer._get_property(self, attrname)
        if IAgStkGraphicsKmlFeature._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsKmlFeature._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsKmlContainer.")
        
agcls.AgClassCatalog.add_catalog_entry("{24AA1395-417E-4845-A9D2-61C4D59BCABF}", AgStkGraphicsKmlContainer)
__all__.append("AgStkGraphicsKmlContainer")


class AgStkGraphicsKmlDocument(IAgStkGraphicsKmlDocument, IAgStkGraphicsKmlContainer, IAgStkGraphicsKmlFeature):
    """A KML document."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsKmlDocument.__init__(self, sourceObject)
        IAgStkGraphicsKmlContainer.__init__(self, sourceObject)
        IAgStkGraphicsKmlFeature.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsKmlDocument._private_init(self, pUnk)
        IAgStkGraphicsKmlContainer._private_init(self, pUnk)
        IAgStkGraphicsKmlFeature._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsKmlDocument._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsKmlDocument._get_property(self, attrname)
        if IAgStkGraphicsKmlContainer._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsKmlContainer._get_property(self, attrname)
        if IAgStkGraphicsKmlFeature._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsKmlFeature._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsKmlDocument.")
        
agcls.AgClassCatalog.add_catalog_entry("{130689C0-43C6-4C34-9AC7-252E155E9F66}", AgStkGraphicsKmlDocument)
__all__.append("AgStkGraphicsKmlDocument")


class AgStkGraphicsKmlFeature(IAgStkGraphicsKmlFeature):
    """A KML feature."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsKmlFeature.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsKmlFeature._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsKmlFeature._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsKmlFeature._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsKmlFeature.")
        
agcls.AgClassCatalog.add_catalog_entry("{20C290F8-9102-4960-AD19-F5EFC321F796}", AgStkGraphicsKmlFeature)
__all__.append("AgStkGraphicsKmlFeature")


class AgStkGraphicsKmlFolder(IAgStkGraphicsKmlFolder, IAgStkGraphicsKmlContainer, IAgStkGraphicsKmlFeature):
    """A KML folder."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsKmlFolder.__init__(self, sourceObject)
        IAgStkGraphicsKmlContainer.__init__(self, sourceObject)
        IAgStkGraphicsKmlFeature.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsKmlFolder._private_init(self, pUnk)
        IAgStkGraphicsKmlContainer._private_init(self, pUnk)
        IAgStkGraphicsKmlFeature._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsKmlFolder._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsKmlFolder._get_property(self, attrname)
        if IAgStkGraphicsKmlContainer._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsKmlContainer._get_property(self, attrname)
        if IAgStkGraphicsKmlFeature._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsKmlFeature._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsKmlFolder.")
        
agcls.AgClassCatalog.add_catalog_entry("{C7BE1A8D-28BF-4298-AE7D-656B40FFB3D0}", AgStkGraphicsKmlFolder)
__all__.append("AgStkGraphicsKmlFolder")


class AgStkGraphicsKmlGraphics(IAgStkGraphicsKmlGraphics):
    """Provides loading and unloading of kml documents for a particular central body."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsKmlGraphics.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsKmlGraphics._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsKmlGraphics._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsKmlGraphics._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsKmlGraphics.")
        
agcls.AgClassCatalog.add_catalog_entry("{A094F5DE-8BF2-4079-8009-0450D2E4EF11}", AgStkGraphicsKmlGraphics)
__all__.append("AgStkGraphicsKmlGraphics")


class AgStkGraphicsKmlNetworkLink(IAgStkGraphicsKmlNetworkLink, IAgStkGraphicsKmlFeature):
    """A KML network link."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsKmlNetworkLink.__init__(self, sourceObject)
        IAgStkGraphicsKmlFeature.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsKmlNetworkLink._private_init(self, pUnk)
        IAgStkGraphicsKmlFeature._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsKmlNetworkLink._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsKmlNetworkLink._get_property(self, attrname)
        if IAgStkGraphicsKmlFeature._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsKmlFeature._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsKmlNetworkLink.")
        
agcls.AgClassCatalog.add_catalog_entry("{BD2ECA7D-919B-4C64-8AA1-E503A80EF3EA}", AgStkGraphicsKmlNetworkLink)
__all__.append("AgStkGraphicsKmlNetworkLink")


class AgStkGraphicsMarkerBatchPrimitive(IAgStkGraphicsMarkerBatchPrimitive, IAgStkGraphicsPrimitive):
    """ Renders one or more markers in the 3D scene. Markers are 2D images that always face the viewer which can be sized in pixels or meters. Markers are also referred to as sprites or billboards..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsMarkerBatchPrimitive.__init__(self, sourceObject)
        IAgStkGraphicsPrimitive.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsMarkerBatchPrimitive._private_init(self, pUnk)
        IAgStkGraphicsPrimitive._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsMarkerBatchPrimitive._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsMarkerBatchPrimitive._get_property(self, attrname)
        if IAgStkGraphicsPrimitive._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPrimitive._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsMarkerBatchPrimitive.")
        
agcls.AgClassCatalog.add_catalog_entry("{C7F4992D-BBE2-4C68-BB4E-51BB8CD2D124}", AgStkGraphicsMarkerBatchPrimitive)
__all__.append("AgStkGraphicsMarkerBatchPrimitive")


class AgStkGraphicsMarkerBatchPrimitiveOptionalParameters(IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters):
    """Optional per-marker parameters for marker batch primitive that overrides the marker batch's per-batch parameters..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsMarkerBatchPrimitiveOptionalParameters.")
        
agcls.AgClassCatalog.add_catalog_entry("{24750753-2036-4221-83F0-F9045DCA0A5D}", AgStkGraphicsMarkerBatchPrimitiveOptionalParameters)
__all__.append("AgStkGraphicsMarkerBatchPrimitiveOptionalParameters")


class AgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy(IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy, IAgStkGraphicsPathPrimitiveUpdatePolicy):
    """path primitive update policy that removes points from remove location when the number of points in the path exceeds maximum count."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy.__init__(self, sourceObject)
        IAgStkGraphicsPathPrimitiveUpdatePolicy.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy._private_init(self, pUnk)
        IAgStkGraphicsPathPrimitiveUpdatePolicy._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy._get_property(self, attrname)
        if IAgStkGraphicsPathPrimitiveUpdatePolicy._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPathPrimitiveUpdatePolicy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy.")
        
agcls.AgClassCatalog.add_catalog_entry("{4D41C220-2CE4-4CA1-942A-9AF4F7F34C4A}", AgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy)
__all__.append("AgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy")


class AgStkGraphicsModelArticulation(IAgStkGraphicsModelArticulation):
    """A model articulation identifies geometry on the model and is a collection of transformations that can be applied to that geometry."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsModelArticulation.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsModelArticulation._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsModelArticulation._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsModelArticulation._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsModelArticulation.")
        
agcls.AgClassCatalog.add_catalog_entry("{A9E72E72-17D6-4D7C-A4EF-5A970232ED93}", AgStkGraphicsModelArticulation)
__all__.append("AgStkGraphicsModelArticulation")


class AgStkGraphicsModelArticulationCollection(IAgStkGraphicsModelArticulationCollection):
    """A collection containing a model primitive's available articulations. A model articulation identifies geometry on the model and is a collection of transformations that can be applied to that geometry."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsModelArticulationCollection.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsModelArticulationCollection._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsModelArticulationCollection._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsModelArticulationCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsModelArticulationCollection.")
        
agcls.AgClassCatalog.add_catalog_entry("{ACC4920A-6D6B-4374-937F-2469F439ABA8}", AgStkGraphicsModelArticulationCollection)
__all__.append("AgStkGraphicsModelArticulationCollection")


class AgStkGraphicsModelPrimitive(IAgStkGraphicsModelPrimitive, IAgStkGraphicsPrimitive):
    """The model primitive loads and renders <a href='http://www.collada.org/'>COLLADA</a> (DAE) and AGI <a href='https://support.agi.com/3d-models'>MDL</a> (MDL) models."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsModelPrimitive.__init__(self, sourceObject)
        IAgStkGraphicsPrimitive.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsModelPrimitive._private_init(self, pUnk)
        IAgStkGraphicsPrimitive._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsModelPrimitive._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsModelPrimitive._get_property(self, attrname)
        if IAgStkGraphicsPrimitive._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPrimitive._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsModelPrimitive.")
        
agcls.AgClassCatalog.add_catalog_entry("{FD89B6D8-F106-4929-889A-3304A9CDBE97}", AgStkGraphicsModelPrimitive)
__all__.append("AgStkGraphicsModelPrimitive")


class AgStkGraphicsModelTransformation(IAgStkGraphicsModelTransformation):
    """A model transformation defines a transformation that is applied to geometry on a model primitive. That geometry is identified by the model articulation which contains the transformation..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsModelTransformation.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsModelTransformation._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsModelTransformation._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsModelTransformation._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsModelTransformation.")
        
agcls.AgClassCatalog.add_catalog_entry("{BC56F0E9-D0F3-4C3E-9AAA-AB5AB255927C}", AgStkGraphicsModelTransformation)
__all__.append("AgStkGraphicsModelTransformation")


class AgStkGraphicsOverlay(IAgStkGraphicsOverlay, IAgStkGraphicsScreenOverlayContainer):
    """A visible element drawn in screen space. Overlays are useful for floating logos, heads up displays, and integrating user interfaces into the 3D window."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsOverlay.__init__(self, sourceObject)
        IAgStkGraphicsScreenOverlayContainer.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsOverlay._private_init(self, pUnk)
        IAgStkGraphicsScreenOverlayContainer._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsOverlay._get_property(self, attrname)
        if IAgStkGraphicsScreenOverlayContainer._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsScreenOverlayContainer._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsOverlay.")
        
agcls.AgClassCatalog.add_catalog_entry("{6D9C8A3B-0EC8-428F-BC05-1F30315E92DC}", AgStkGraphicsOverlay)
__all__.append("AgStkGraphicsOverlay")


class AgStkGraphicsPathPrimitive(IAgStkGraphicsPathPrimitive, IAgStkGraphicsPrimitive):
    """Renders a line to the 3D scene. Similar to the polyline primitive; however, the PathPrimitive was designed for the efficient addition/removal of points to/from the front or back of the line."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsPathPrimitive.__init__(self, sourceObject)
        IAgStkGraphicsPrimitive.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsPathPrimitive._private_init(self, pUnk)
        IAgStkGraphicsPrimitive._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsPathPrimitive._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPathPrimitive._get_property(self, attrname)
        if IAgStkGraphicsPrimitive._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPrimitive._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsPathPrimitive.")
        
agcls.AgClassCatalog.add_catalog_entry("{AFDCAA13-BE39-4E17-9AC5-06C08933A910}", AgStkGraphicsPathPrimitive)
__all__.append("AgStkGraphicsPathPrimitive")


class AgStkGraphicsPickResult(IAgStkGraphicsPickResult):
    """A single result from Pick."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsPickResult.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsPickResult._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsPickResult._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPickResult._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsPickResult.")
        
agcls.AgClassCatalog.add_catalog_entry("{E007C42E-13D7-4006-992A-B996CEA3BE49}", AgStkGraphicsPickResult)
__all__.append("AgStkGraphicsPickResult")


class AgStkGraphicsPixelSizeDisplayCondition(IAgStkGraphicsPixelSizeDisplayCondition, IAgStkGraphicsDisplayCondition):
    """Defines an inclusive interval, in pixels, that determines when an object, such as a primitive, is rendered based on the number of pixels the object's bounding sphere (or in the case of screen overlays, bounding rectangle) covers on the screen..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsPixelSizeDisplayCondition.__init__(self, sourceObject)
        IAgStkGraphicsDisplayCondition.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsPixelSizeDisplayCondition._private_init(self, pUnk)
        IAgStkGraphicsDisplayCondition._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsPixelSizeDisplayCondition._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPixelSizeDisplayCondition._get_property(self, attrname)
        if IAgStkGraphicsDisplayCondition._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsDisplayCondition._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsPixelSizeDisplayCondition.")
        
agcls.AgClassCatalog.add_catalog_entry("{26B1DA4F-DA20-4E44-A98D-D54CC67821B8}", AgStkGraphicsPixelSizeDisplayCondition)
__all__.append("AgStkGraphicsPixelSizeDisplayCondition")


class AgStkGraphicsPointBatchPrimitive(IAgStkGraphicsPointBatchPrimitive, IAgStkGraphicsPrimitive):
    """ Renders one or more points in the 3D scene. Each point in the batch has a unique position and an optional color. All points in the batch share the same pixel size. For best performance, avoid creating lots of batches with only a few points each..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsPointBatchPrimitive.__init__(self, sourceObject)
        IAgStkGraphicsPrimitive.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsPointBatchPrimitive._private_init(self, pUnk)
        IAgStkGraphicsPrimitive._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsPointBatchPrimitive._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPointBatchPrimitive._get_property(self, attrname)
        if IAgStkGraphicsPrimitive._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPrimitive._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsPointBatchPrimitive.")
        
agcls.AgClassCatalog.add_catalog_entry("{D8019323-F9C3-4238-BB4C-CD917C83E0F6}", AgStkGraphicsPointBatchPrimitive)
__all__.append("AgStkGraphicsPointBatchPrimitive")


class AgStkGraphicsPolylinePrimitive(IAgStkGraphicsPolylinePrimitive, IAgStkGraphicsPrimitive):
    """Renders a polyline in the 3D scene. Each line segment may have a different color. A polyline can be constructed with a position interpolator to render great arcs or rhumb lines."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsPolylinePrimitive.__init__(self, sourceObject)
        IAgStkGraphicsPrimitive.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsPolylinePrimitive._private_init(self, pUnk)
        IAgStkGraphicsPrimitive._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsPolylinePrimitive._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPolylinePrimitive._get_property(self, attrname)
        if IAgStkGraphicsPrimitive._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPrimitive._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsPolylinePrimitive.")
        
agcls.AgClassCatalog.add_catalog_entry("{F6E930C1-39F1-471B-A6F3-AFE651B00A95}", AgStkGraphicsPolylinePrimitive)
__all__.append("AgStkGraphicsPolylinePrimitive")


class AgStkGraphicsPolylinePrimitiveOptionalParameters(IAgStkGraphicsPolylinePrimitiveOptionalParameters):
    """Optional per-point or per-segment parameters for polyline primitive that overrides the polyline primitive's global parameters..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsPolylinePrimitiveOptionalParameters.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsPolylinePrimitiveOptionalParameters._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsPolylinePrimitiveOptionalParameters._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPolylinePrimitiveOptionalParameters._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsPolylinePrimitiveOptionalParameters.")
        
agcls.AgClassCatalog.add_catalog_entry("{eee51ba6-73ae-4626-9fac-62a0f82cb3d1}", AgStkGraphicsPolylinePrimitiveOptionalParameters)
__all__.append("AgStkGraphicsPolylinePrimitiveOptionalParameters")


class AgStkGraphicsPositionInterpolator(IAgStkGraphicsPositionInterpolator):
    """Position interpolators compute positions based on a collection of input positions. Position interpolators are used in conjunction with the polyline primitive to render things such as great arcs and rhumb lines."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsPositionInterpolator.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsPositionInterpolator._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsPositionInterpolator._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPositionInterpolator._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsPositionInterpolator.")
        
agcls.AgClassCatalog.add_catalog_entry("{3D14E044-4128-4F60-9F08-797AA09205B5}", AgStkGraphicsPositionInterpolator)
__all__.append("AgStkGraphicsPositionInterpolator")


class AgStkGraphicsPrimitive(IAgStkGraphicsPrimitive):
    """Primitives represent objects rendered in the 3D scene."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsPrimitive.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsPrimitive._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsPrimitive._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPrimitive._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsPrimitive.")
        
agcls.AgClassCatalog.add_catalog_entry("{0BE64D00-03FF-41C1-8F8E-DCDB5D260FCE}", AgStkGraphicsPrimitive)
__all__.append("AgStkGraphicsPrimitive")


class AgStkGraphicsPrimitiveManager(IAgStkGraphicsPrimitiveManager):
    """The primitive manager contains spatial data structures used to efficiently render primitives. Once a primitive is constructed, it must be added to the primitive manager before it will be rendered."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsPrimitiveManager.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsPrimitiveManager._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsPrimitiveManager._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPrimitiveManager._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsPrimitiveManager.")
        
agcls.AgClassCatalog.add_catalog_entry("{29884E1F-F498-4FED-9B83-AFC57A4BB09B}", AgStkGraphicsPrimitiveManager)
__all__.append("AgStkGraphicsPrimitiveManager")


class AgStkGraphicsRasterImageGlobeOverlay(IAgStkGraphicsRasterImageGlobeOverlay, IAgStkGraphicsGlobeImageOverlay, IAgStkGraphicsGlobeOverlay):
    """A globe image overlay for handling rasters."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsRasterImageGlobeOverlay.__init__(self, sourceObject)
        IAgStkGraphicsGlobeImageOverlay.__init__(self, sourceObject)
        IAgStkGraphicsGlobeOverlay.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsRasterImageGlobeOverlay._private_init(self, pUnk)
        IAgStkGraphicsGlobeImageOverlay._private_init(self, pUnk)
        IAgStkGraphicsGlobeOverlay._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsRasterImageGlobeOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRasterImageGlobeOverlay._get_property(self, attrname)
        if IAgStkGraphicsGlobeImageOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsGlobeImageOverlay._get_property(self, attrname)
        if IAgStkGraphicsGlobeOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsGlobeOverlay._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsRasterImageGlobeOverlay.")
        
agcls.AgClassCatalog.add_catalog_entry("{49EC3E96-9494-4D95-A9C2-C722C46197FC}", AgStkGraphicsRasterImageGlobeOverlay)
__all__.append("AgStkGraphicsRasterImageGlobeOverlay")


class AgStkGraphicsRhumbLineInterpolator(IAgStkGraphicsRhumbLineInterpolator, IAgStkGraphicsPositionInterpolator):
    """The rhumb line interpolator computes interpolated positions along a rhumb line. Rhumb lines are lines of constant bearing. They appear as straight lines on a Mercator 2D map projection and are well suited to navigation."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsRhumbLineInterpolator.__init__(self, sourceObject)
        IAgStkGraphicsPositionInterpolator.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsRhumbLineInterpolator._private_init(self, pUnk)
        IAgStkGraphicsPositionInterpolator._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsRhumbLineInterpolator._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRhumbLineInterpolator._get_property(self, attrname)
        if IAgStkGraphicsPositionInterpolator._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPositionInterpolator._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsRhumbLineInterpolator.")
        
agcls.AgClassCatalog.add_catalog_entry("{E791A602-85BA-4413-9C8D-479D1692254C}", AgStkGraphicsRhumbLineInterpolator)
__all__.append("AgStkGraphicsRhumbLineInterpolator")


class AgStkGraphicsScene(IAgStkGraphicsScene):
    """A scene provides properties and functionality that are reflected in the rendering of the globe control that it is associated with. An globe control's scene is available from the scene property..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsScene.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsScene._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsScene._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsScene._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsScene.")
        
agcls.AgClassCatalog.add_catalog_entry("{E664A9F1-8A89-4B4C-9AA2-E5BEB603AF3C}", AgStkGraphicsScene)
__all__.append("AgStkGraphicsScene")


class AgStkGraphicsSceneDisplayCondition(IAgStkGraphicsSceneDisplayCondition, IAgStkGraphicsDisplayCondition):
    """A display condition used to control what scene or scenes an object, such as a primitive, is rendered in. This is used to show an object in some scenes and hide it in others."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsSceneDisplayCondition.__init__(self, sourceObject)
        IAgStkGraphicsDisplayCondition.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsSceneDisplayCondition._private_init(self, pUnk)
        IAgStkGraphicsDisplayCondition._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsSceneDisplayCondition._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsSceneDisplayCondition._get_property(self, attrname)
        if IAgStkGraphicsDisplayCondition._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsDisplayCondition._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsSceneDisplayCondition.")
        
agcls.AgClassCatalog.add_catalog_entry("{8074B463-1740-4C65-870C-E231589EE5CE}", AgStkGraphicsSceneDisplayCondition)
__all__.append("AgStkGraphicsSceneDisplayCondition")


class AgStkGraphicsSceneManager(IAgStkGraphicsSceneManager):
    """The static scene manager class provides global properties and functionality that apply to all scenes and thus affect the rendering of every globe control..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsSceneManager.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsSceneManager._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsSceneManager._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsSceneManager._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsSceneManager.")
        
agcls.AgClassCatalog.add_catalog_entry("{B671433F-CA75-4628-B84D-4878A247AFC3}", AgStkGraphicsSceneManager)
__all__.append("AgStkGraphicsSceneManager")


class AgStkGraphicsScreenOverlay(IAgStkGraphicsScreenOverlay, IAgStkGraphicsOverlay, IAgStkGraphicsScreenOverlayContainer):
    """A visible element drawn in screen space. Overlays are useful for floating logos, heads up displays, and integrating user interfaces into the 3D window."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsScreenOverlay.__init__(self, sourceObject)
        IAgStkGraphicsOverlay.__init__(self, sourceObject)
        IAgStkGraphicsScreenOverlayContainer.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsScreenOverlay._private_init(self, pUnk)
        IAgStkGraphicsOverlay._private_init(self, pUnk)
        IAgStkGraphicsScreenOverlayContainer._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsScreenOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsScreenOverlay._get_property(self, attrname)
        if IAgStkGraphicsOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsOverlay._get_property(self, attrname)
        if IAgStkGraphicsScreenOverlayContainer._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsScreenOverlayContainer._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsScreenOverlay.")
        
agcls.AgClassCatalog.add_catalog_entry("{B50A73BA-5299-4746-B30B-EEB80699546E}", AgStkGraphicsScreenOverlay)
__all__.append("AgStkGraphicsScreenOverlay")


class AgStkGraphicsScreenOverlayCollection(IAgStkGraphicsScreenOverlayCollection, IAgStkGraphicsScreenOverlayCollectionBase):
    """A collection of screen overlays."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsScreenOverlayCollection.__init__(self, sourceObject)
        IAgStkGraphicsScreenOverlayCollectionBase.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsScreenOverlayCollection._private_init(self, pUnk)
        IAgStkGraphicsScreenOverlayCollectionBase._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsScreenOverlayCollection._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsScreenOverlayCollection._get_property(self, attrname)
        if IAgStkGraphicsScreenOverlayCollectionBase._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsScreenOverlayCollectionBase._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsScreenOverlayCollection.")
        
agcls.AgClassCatalog.add_catalog_entry("{F75B7693-A40E-4B54-AB6F-EE8F974D2E6C}", AgStkGraphicsScreenOverlayCollection)
__all__.append("AgStkGraphicsScreenOverlayCollection")


class AgStkGraphicsScreenOverlayManager(IAgStkGraphicsScreenOverlayManager, IAgStkGraphicsScreenOverlayCollectionBase, IAgStkGraphicsScreenOverlayContainer):
    """The top-level container for screen overlays. All child screen overlays that are added to this container are specified relative to the overall globe control."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsScreenOverlayManager.__init__(self, sourceObject)
        IAgStkGraphicsScreenOverlayCollectionBase.__init__(self, sourceObject)
        IAgStkGraphicsScreenOverlayContainer.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsScreenOverlayManager._private_init(self, pUnk)
        IAgStkGraphicsScreenOverlayCollectionBase._private_init(self, pUnk)
        IAgStkGraphicsScreenOverlayContainer._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsScreenOverlayManager._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsScreenOverlayManager._get_property(self, attrname)
        if IAgStkGraphicsScreenOverlayCollectionBase._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsScreenOverlayCollectionBase._get_property(self, attrname)
        if IAgStkGraphicsScreenOverlayContainer._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsScreenOverlayContainer._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsScreenOverlayManager.")
        
agcls.AgClassCatalog.add_catalog_entry("{9853EC1E-531C-4494-B308-BC6644CF672C}", AgStkGraphicsScreenOverlayManager)
__all__.append("AgStkGraphicsScreenOverlayManager")


class AgStkGraphicsScreenOverlayPickResult(IAgStkGraphicsScreenOverlayPickResult):
    """Describes a picked screen overlay as a result of a call to pick screen overlays."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsScreenOverlayPickResult.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsScreenOverlayPickResult._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsScreenOverlayPickResult._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsScreenOverlayPickResult._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsScreenOverlayPickResult.")
        
agcls.AgClassCatalog.add_catalog_entry("{6E7F318E-F7E5-4B19-A532-50EC60EF09FA}", AgStkGraphicsScreenOverlayPickResult)
__all__.append("AgStkGraphicsScreenOverlayPickResult")


class AgStkGraphicsSolidPrimitive(IAgStkGraphicsSolidPrimitive, IAgStkGraphicsPrimitive):
    """Renders filled solid objects and their outlines. Example solids include boxes and ellipsoids. Various effects are supported, such as displaying the solid's silhouette, and hiding the outline of the backside of the solid..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsSolidPrimitive.__init__(self, sourceObject)
        IAgStkGraphicsPrimitive.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsSolidPrimitive._private_init(self, pUnk)
        IAgStkGraphicsPrimitive._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsSolidPrimitive._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsSolidPrimitive._get_property(self, attrname)
        if IAgStkGraphicsPrimitive._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPrimitive._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsSolidPrimitive.")
        
agcls.AgClassCatalog.add_catalog_entry("{12343DC0-99FF-48B6-9D93-9B7A2CE34DB9}", AgStkGraphicsSolidPrimitive)
__all__.append("AgStkGraphicsSolidPrimitive")


class AgStkGraphicsStereoscopic(IAgStkGraphicsStereoscopic):
    """Gets the stereoscopic options for all Scenes. To use a particular stereoscopic display mode, ensure that your system supports the feature and that it is enabled."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsStereoscopic.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsStereoscopic._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsStereoscopic._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsStereoscopic._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsStereoscopic.")
        
agcls.AgClassCatalog.add_catalog_entry("{5FDA997C-0450-4574-BFD9-D803A3AA6167}", AgStkGraphicsStereoscopic)
__all__.append("AgStkGraphicsStereoscopic")


class AgStkGraphicsSurfaceMeshPrimitive(IAgStkGraphicsSurfaceMeshPrimitive, IAgStkGraphicsPrimitive):
    """A triangle mesh primitive for meshes on the surface that need to conform to terrain."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsSurfaceMeshPrimitive.__init__(self, sourceObject)
        IAgStkGraphicsPrimitive.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsSurfaceMeshPrimitive._private_init(self, pUnk)
        IAgStkGraphicsPrimitive._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsSurfaceMeshPrimitive._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsSurfaceMeshPrimitive._get_property(self, attrname)
        if IAgStkGraphicsPrimitive._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPrimitive._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsSurfaceMeshPrimitive.")
        
agcls.AgClassCatalog.add_catalog_entry("{C4B2DB74-EBA8-4B18-8BE4-372FCA665F5D}", AgStkGraphicsSurfaceMeshPrimitive)
__all__.append("AgStkGraphicsSurfaceMeshPrimitive")


class AgStkGraphicsTerrainCollection(IAgStkGraphicsTerrainCollection):
    """A collection of terrain overlay objects."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsTerrainCollection.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsTerrainCollection._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsTerrainCollection._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsTerrainCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsTerrainCollection.")
        
agcls.AgClassCatalog.add_catalog_entry("{168D1247-7208-45C3-AF31-7E4009DE2EA7}", AgStkGraphicsTerrainCollection)
__all__.append("AgStkGraphicsTerrainCollection")


class AgStkGraphicsTerrainOverlay(IAgStkGraphicsTerrainOverlay, IAgStkGraphicsGlobeOverlay):
    """A globe overlay which shows terrain."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsTerrainOverlay.__init__(self, sourceObject)
        IAgStkGraphicsGlobeOverlay.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsTerrainOverlay._private_init(self, pUnk)
        IAgStkGraphicsGlobeOverlay._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsTerrainOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsTerrainOverlay._get_property(self, attrname)
        if IAgStkGraphicsGlobeOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsGlobeOverlay._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsTerrainOverlay.")
        
agcls.AgClassCatalog.add_catalog_entry("{C1640FF1-07BB-4584-940C-50BDD48CFE14}", AgStkGraphicsTerrainOverlay)
__all__.append("AgStkGraphicsTerrainOverlay")


class AgStkGraphicsTextBatchPrimitive(IAgStkGraphicsTextBatchPrimitive, IAgStkGraphicsPrimitive):
    """ Renders one or more strings in the 3D scene.  For best performance, avoid creating lots of batches with only a few strings each. See the Batching Performance Overview. """
    def __init__(self, sourceObject=None):
        IAgStkGraphicsTextBatchPrimitive.__init__(self, sourceObject)
        IAgStkGraphicsPrimitive.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsTextBatchPrimitive._private_init(self, pUnk)
        IAgStkGraphicsPrimitive._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsTextBatchPrimitive._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsTextBatchPrimitive._get_property(self, attrname)
        if IAgStkGraphicsPrimitive._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPrimitive._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsTextBatchPrimitive.")
        
agcls.AgClassCatalog.add_catalog_entry("{EEE49615-F2F3-4810-B877-4C7729F56DD1}", AgStkGraphicsTextBatchPrimitive)
__all__.append("AgStkGraphicsTextBatchPrimitive")


class AgStkGraphicsTextBatchPrimitiveOptionalParameters(IAgStkGraphicsTextBatchPrimitiveOptionalParameters):
    """Optional per-string and per-batch parameters for text batch primitive..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsTextBatchPrimitiveOptionalParameters.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsTextBatchPrimitiveOptionalParameters._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsTextBatchPrimitiveOptionalParameters._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsTextBatchPrimitiveOptionalParameters._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsTextBatchPrimitiveOptionalParameters.")
        
agcls.AgClassCatalog.add_catalog_entry("{D68422E0-31FC-4E61-9A7C-6E4BCB261A9D}", AgStkGraphicsTextBatchPrimitiveOptionalParameters)
__all__.append("AgStkGraphicsTextBatchPrimitiveOptionalParameters")


class AgStkGraphicsTextOverlay(IAgStkGraphicsTextOverlay, IAgStkGraphicsScreenOverlay, IAgStkGraphicsOverlay, IAgStkGraphicsScreenOverlayContainer):
    """A rectangular overlay that contains text."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsTextOverlay.__init__(self, sourceObject)
        IAgStkGraphicsScreenOverlay.__init__(self, sourceObject)
        IAgStkGraphicsOverlay.__init__(self, sourceObject)
        IAgStkGraphicsScreenOverlayContainer.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsTextOverlay._private_init(self, pUnk)
        IAgStkGraphicsScreenOverlay._private_init(self, pUnk)
        IAgStkGraphicsOverlay._private_init(self, pUnk)
        IAgStkGraphicsScreenOverlayContainer._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsTextOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsTextOverlay._get_property(self, attrname)
        if IAgStkGraphicsScreenOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsScreenOverlay._get_property(self, attrname)
        if IAgStkGraphicsOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsOverlay._get_property(self, attrname)
        if IAgStkGraphicsScreenOverlayContainer._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsScreenOverlayContainer._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsTextOverlay.")
        
agcls.AgClassCatalog.add_catalog_entry("{46BE31F3-1A5B-4B51-AA77-27CCA844F5CD}", AgStkGraphicsTextOverlay)
__all__.append("AgStkGraphicsTextOverlay")


class AgStkGraphicsTextureMatrix(IAgStkGraphicsTextureMatrix):
    """A 4 by 4 matrix applied to a texture coordinate."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsTextureMatrix.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsTextureMatrix._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsTextureMatrix._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsTextureMatrix._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsTextureMatrix.")
        
agcls.AgClassCatalog.add_catalog_entry("{E05D3E06-18C5-49DE-B9AC-B2245C83E62B}", AgStkGraphicsTextureMatrix)
__all__.append("AgStkGraphicsTextureMatrix")


class AgStkGraphicsTextureScreenOverlay(IAgStkGraphicsTextureScreenOverlay, IAgStkGraphicsScreenOverlay, IAgStkGraphicsOverlay, IAgStkGraphicsScreenOverlayContainer):
    """A rectangular overlay that can be assigned a texture."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsTextureScreenOverlay.__init__(self, sourceObject)
        IAgStkGraphicsScreenOverlay.__init__(self, sourceObject)
        IAgStkGraphicsOverlay.__init__(self, sourceObject)
        IAgStkGraphicsScreenOverlayContainer.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsTextureScreenOverlay._private_init(self, pUnk)
        IAgStkGraphicsScreenOverlay._private_init(self, pUnk)
        IAgStkGraphicsOverlay._private_init(self, pUnk)
        IAgStkGraphicsScreenOverlayContainer._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsTextureScreenOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsTextureScreenOverlay._get_property(self, attrname)
        if IAgStkGraphicsScreenOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsScreenOverlay._get_property(self, attrname)
        if IAgStkGraphicsOverlay._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsOverlay._get_property(self, attrname)
        if IAgStkGraphicsScreenOverlayContainer._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsScreenOverlayContainer._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsTextureScreenOverlay.")
        
agcls.AgClassCatalog.add_catalog_entry("{51136098-508C-4DD3-B39C-D342235E58BD}", AgStkGraphicsTextureScreenOverlay)
__all__.append("AgStkGraphicsTextureScreenOverlay")


class AgStkGraphicsTimeIntervalDisplayCondition(IAgStkGraphicsTimeIntervalDisplayCondition, IAgStkGraphicsDisplayCondition):
    """Defines an inclusive time interval that determines when an object, such as a primitive, is rendered based on the current animation time ."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsTimeIntervalDisplayCondition.__init__(self, sourceObject)
        IAgStkGraphicsDisplayCondition.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsTimeIntervalDisplayCondition._private_init(self, pUnk)
        IAgStkGraphicsDisplayCondition._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsTimeIntervalDisplayCondition._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsTimeIntervalDisplayCondition._get_property(self, attrname)
        if IAgStkGraphicsDisplayCondition._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsDisplayCondition._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsTimeIntervalDisplayCondition.")
        
agcls.AgClassCatalog.add_catalog_entry("{256AACC3-3E56-4BA6-80F9-15BD968C3863}", AgStkGraphicsTimeIntervalDisplayCondition)
__all__.append("AgStkGraphicsTimeIntervalDisplayCondition")


class AgStkGraphicsTriangleMeshPrimitive(IAgStkGraphicsTriangleMeshPrimitive, IAgStkGraphicsPrimitive):
    """Renders a triangle mesh in the 3D scene. Examples of triangle meshes includes polygons on the globe (e.g. states or countries), terrain and imagery extents, ellipses, and extrusions."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsTriangleMeshPrimitive.__init__(self, sourceObject)
        IAgStkGraphicsPrimitive.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsTriangleMeshPrimitive._private_init(self, pUnk)
        IAgStkGraphicsPrimitive._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsTriangleMeshPrimitive._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsTriangleMeshPrimitive._get_property(self, attrname)
        if IAgStkGraphicsPrimitive._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPrimitive._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsTriangleMeshPrimitive.")
        
agcls.AgClassCatalog.add_catalog_entry("{DA3D4743-D0D9-49B8-8037-3DDC3075170E}", AgStkGraphicsTriangleMeshPrimitive)
__all__.append("AgStkGraphicsTriangleMeshPrimitive")


class AgStkGraphicsTriangleMeshPrimitiveOptionalParameters(IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters):
    """Optional parameters for triangle mesh primitive..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsTriangleMeshPrimitiveOptionalParameters.")
        
agcls.AgClassCatalog.add_catalog_entry("{07985409-9BA1-406C-8A91-D4E99DDB406F}", AgStkGraphicsTriangleMeshPrimitiveOptionalParameters)
__all__.append("AgStkGraphicsTriangleMeshPrimitiveOptionalParameters")


class AgStkGraphicsVectorPrimitive(IAgStkGraphicsVectorPrimitive, IAgStkGraphicsPrimitive):
    """Renders a vector in the 3D scene. A vector is defined by a source (given by an ISystem) and a direction (given by an IVector or IPoint). Length is auto-calculated or can be set separately."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsVectorPrimitive.__init__(self, sourceObject)
        IAgStkGraphicsPrimitive.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsVectorPrimitive._private_init(self, pUnk)
        IAgStkGraphicsPrimitive._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsVectorPrimitive._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsVectorPrimitive._get_property(self, attrname)
        if IAgStkGraphicsPrimitive._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPrimitive._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsVectorPrimitive.")
        
agcls.AgClassCatalog.add_catalog_entry("{8DE433D5-0E13-44ED-B3CF-DF380B8BEA7D}", AgStkGraphicsVectorPrimitive)
__all__.append("AgStkGraphicsVectorPrimitive")


class AgStkGraphicsBoxTriangulatorInitializer(IAgStkGraphicsBoxTriangulatorInitializer):
    """Triangulates a box. It is recommended to visualize the box using a solid primitive. Although, if only the fill is desired for visualization, a triangle mesh primitive with render back then front faces set to true can be used..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsBoxTriangulatorInitializer.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsBoxTriangulatorInitializer._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsBoxTriangulatorInitializer._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsBoxTriangulatorInitializer._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsBoxTriangulatorInitializer.")
        
agcls.AgClassCatalog.add_catalog_entry("{F5AA6E13-2989-46FD-8BA7-341870EE56CB}", AgStkGraphicsBoxTriangulatorInitializer)
__all__.append("AgStkGraphicsBoxTriangulatorInitializer")


class AgStkGraphicsCylinderTriangulatorInitializer(IAgStkGraphicsCylinderTriangulatorInitializer):
    """Triangulates a cylinder. It is recommended to visualize the cylinder using a solid primitive. Although, if only the fill is desired for visualization, a triangle mesh primitive with render back then front faces set to true can be used..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsCylinderTriangulatorInitializer.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsCylinderTriangulatorInitializer._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsCylinderTriangulatorInitializer._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsCylinderTriangulatorInitializer._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsCylinderTriangulatorInitializer.")
        
agcls.AgClassCatalog.add_catalog_entry("{351F63E3-5430-4B7C-8811-1353D7FDBA79}", AgStkGraphicsCylinderTriangulatorInitializer)
__all__.append("AgStkGraphicsCylinderTriangulatorInitializer")


class AgStkGraphicsEllipsoidTriangulatorInitializer(IAgStkGraphicsEllipsoidTriangulatorInitializer):
    """Triangulates an ellipsoid. It is recommended to visualize the ellipsoid using a solid primitive. Although, if only the fill is desired for visualization, a triangle mesh primitive with render back then front faces set to true can be used..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsEllipsoidTriangulatorInitializer.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsEllipsoidTriangulatorInitializer._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsEllipsoidTriangulatorInitializer._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsEllipsoidTriangulatorInitializer._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsEllipsoidTriangulatorInitializer.")
        
agcls.AgClassCatalog.add_catalog_entry("{DEBC2954-C0E9-4562-8AD6-A93E7EDD3E82}", AgStkGraphicsEllipsoidTriangulatorInitializer)
__all__.append("AgStkGraphicsEllipsoidTriangulatorInitializer")


class AgStkGraphicsExtrudedPolylineTriangulatorInitializer(IAgStkGraphicsExtrudedPolylineTriangulatorInitializer):
    """Triangulates a polyline into an extrusion with bottom and top boundaries."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsExtrudedPolylineTriangulatorInitializer.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsExtrudedPolylineTriangulatorInitializer._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsExtrudedPolylineTriangulatorInitializer._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsExtrudedPolylineTriangulatorInitializer._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsExtrudedPolylineTriangulatorInitializer.")
        
agcls.AgClassCatalog.add_catalog_entry("{9DD61791-420A-401D-8C10-251999CA274B}", AgStkGraphicsExtrudedPolylineTriangulatorInitializer)
__all__.append("AgStkGraphicsExtrudedPolylineTriangulatorInitializer")


class AgStkGraphicsSurfaceExtentTriangulatorInitializer(IAgStkGraphicsSurfaceExtentTriangulatorInitializer):
    """Triangulates an extent on a central body into a triangle mesh and a surrounding boundary. The mesh is commonly visualized with the triangle mesh primitive or surface mesh primitive. The boundary is commonly visualized with the polyline primitive."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsSurfaceExtentTriangulatorInitializer.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsSurfaceExtentTriangulatorInitializer._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsSurfaceExtentTriangulatorInitializer._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsSurfaceExtentTriangulatorInitializer._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsSurfaceExtentTriangulatorInitializer.")
        
agcls.AgClassCatalog.add_catalog_entry("{F86CAF5F-4B95-4CD0-9E8A-7C04AF8B7E9B}", AgStkGraphicsSurfaceExtentTriangulatorInitializer)
__all__.append("AgStkGraphicsSurfaceExtentTriangulatorInitializer")


class AgStkGraphicsSurfacePolygonTriangulatorInitializer(IAgStkGraphicsSurfacePolygonTriangulatorInitializer):
    """Triangulates a polygon, with an optional hole, on a central body, into a triangle mesh and a surrounding boundary. The mesh is commonly visualized with the triangle mesh primitive or surface mesh primitive..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsSurfacePolygonTriangulatorInitializer.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsSurfacePolygonTriangulatorInitializer._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsSurfacePolygonTriangulatorInitializer._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsSurfacePolygonTriangulatorInitializer._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsSurfacePolygonTriangulatorInitializer.")
        
agcls.AgClassCatalog.add_catalog_entry("{FB4D2919-C9DB-4C93-A64B-35A9EB884E6B}", AgStkGraphicsSurfacePolygonTriangulatorInitializer)
__all__.append("AgStkGraphicsSurfacePolygonTriangulatorInitializer")


class AgStkGraphicsSurfaceShapesInitializer(IAgStkGraphicsSurfaceShapesInitializer):
    """Computes boundary positions for shapes on the surface such as circles, ellipses, and sectors."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsSurfaceShapesInitializer.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsSurfaceShapesInitializer._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsSurfaceShapesInitializer._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsSurfaceShapesInitializer._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsSurfaceShapesInitializer.")
        
agcls.AgClassCatalog.add_catalog_entry("{2B227F07-5BB0-43E5-9AE2-7288A73856BC}", AgStkGraphicsSurfaceShapesInitializer)
__all__.append("AgStkGraphicsSurfaceShapesInitializer")


class AgStkGraphicsAGICustomTerrainOverlayFactory(IAgStkGraphicsAGICustomTerrainOverlayFactory):
    """A terrain overlay for handling AGI Cesium Terrain."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsAGICustomTerrainOverlayFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsAGICustomTerrainOverlayFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsAGICustomTerrainOverlayFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsAGICustomTerrainOverlayFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsAGICustomTerrainOverlayFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{3B6233AF-5A82-45AB-8371-0C1430585060}", AgStkGraphicsAGICustomTerrainOverlayFactory)
__all__.append("AgStkGraphicsAGICustomTerrainOverlayFactory")


class AgStkGraphicsAGIProcessedImageGlobeOverlayFactory(IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory):
    """A globe image overlay for handling AGI Processed Image (PDTTX) files."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsAGIProcessedImageGlobeOverlayFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{668251C7-6113-4243-B563-8F58F25A9281}", AgStkGraphicsAGIProcessedImageGlobeOverlayFactory)
__all__.append("AgStkGraphicsAGIProcessedImageGlobeOverlayFactory")


class AgStkGraphicsAGIProcessedTerrainOverlayFactory(IAgStkGraphicsAGIProcessedTerrainOverlayFactory):
    """A terrain overlay for handling AGI Processed Terrain (PDTT) files."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsAGIProcessedTerrainOverlayFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsAGIProcessedTerrainOverlayFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsAGIProcessedTerrainOverlayFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsAGIProcessedTerrainOverlayFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsAGIProcessedTerrainOverlayFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{AD84EB3C-79EC-43F8-B042-0B9180B94D75}", AgStkGraphicsAGIProcessedTerrainOverlayFactory)
__all__.append("AgStkGraphicsAGIProcessedTerrainOverlayFactory")


class AgStkGraphicsAGIRoamImageGlobeOverlayFactory(IAgStkGraphicsAGIRoamImageGlobeOverlayFactory):
    """A globe image overlay for handling ROAM (TXM/TXB) files."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsAGIRoamImageGlobeOverlayFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsAGIRoamImageGlobeOverlayFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsAGIRoamImageGlobeOverlayFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsAGIRoamImageGlobeOverlayFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsAGIRoamImageGlobeOverlayFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{BB6E5A38-778A-4E22-91FB-7B4E63F40D6E}", AgStkGraphicsAGIRoamImageGlobeOverlayFactory)
__all__.append("AgStkGraphicsAGIRoamImageGlobeOverlayFactory")


class AgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory(IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory):
    """The Activator class provides methods to load COM plugins that implement custom image globe overlays. For more information about custom image globe overlays, see the STK Programming Interface."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{2B0D7F25-8A54-40C5-BD10-75EB00788704}", AgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory)
__all__.append("AgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory")


class AgStkGraphicsGeospatialImageGlobeOverlayFactory(IAgStkGraphicsGeospatialImageGlobeOverlayFactory):
    """A globe image overlay for handling <a href='http://www.jpeg.org/jpeg2000/'>JPEG 2000</a> (.jp2), ECW (.ecw), ECWP, and MrSid (.sid) image formats in the WGS84 geographic projection."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsGeospatialImageGlobeOverlayFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsGeospatialImageGlobeOverlayFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsGeospatialImageGlobeOverlayFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsGeospatialImageGlobeOverlayFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsGeospatialImageGlobeOverlayFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{636E2A9D-49B9-4673-8BD5-4DF7E06A696E}", AgStkGraphicsGeospatialImageGlobeOverlayFactory)
__all__.append("AgStkGraphicsGeospatialImageGlobeOverlayFactory")


class AgStkGraphicsProjectedRasterOverlayFactory(IAgStkGraphicsProjectedRasterOverlayFactory):
    """A globe image overlay which projects a raster onto the terrain or surface of the central body. You can also enable projection onto models by setting projected raster model projection to true for a Scene..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsProjectedRasterOverlayFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsProjectedRasterOverlayFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsProjectedRasterOverlayFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsProjectedRasterOverlayFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsProjectedRasterOverlayFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{FDAAFAF9-B61B-4DB8-8157-96EF4D476457}", AgStkGraphicsProjectedRasterOverlayFactory)
__all__.append("AgStkGraphicsProjectedRasterOverlayFactory")


class AgStkGraphicsProjectionFactory(IAgStkGraphicsProjectionFactory):
    """A projection represents a simplified camera with a position, orientation, and field of view horizontal and field of view vertical..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsProjectionFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsProjectionFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsProjectionFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsProjectionFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsProjectionFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{C22AAF01-98CE-41E1-8A98-E164A61D40CC}", AgStkGraphicsProjectionFactory)
__all__.append("AgStkGraphicsProjectionFactory")


class AgStkGraphicsAltitudeDisplayConditionFactory(IAgStkGraphicsAltitudeDisplayConditionFactory):
    """Defines an inclusive altitude interval that determines when an object is rendered based on the camera's altitude relative to a central body."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsAltitudeDisplayConditionFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsAltitudeDisplayConditionFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsAltitudeDisplayConditionFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsAltitudeDisplayConditionFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsAltitudeDisplayConditionFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{75D5CF9A-FBCE-482C-9520-7811D9E71EC1}", AgStkGraphicsAltitudeDisplayConditionFactory)
__all__.append("AgStkGraphicsAltitudeDisplayConditionFactory")


class AgStkGraphicsAxesPrimitiveFactory(IAgStkGraphicsAxesPrimitiveFactory):
    """Renders an axes in the 3D scene."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsAxesPrimitiveFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsAxesPrimitiveFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsAxesPrimitiveFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsAxesPrimitiveFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsAxesPrimitiveFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{166D78CD-1000-4EDC-B031-AAB1B1B45E8D}", AgStkGraphicsAxesPrimitiveFactory)
__all__.append("AgStkGraphicsAxesPrimitiveFactory")


class AgStkGraphicsCompositeDisplayConditionFactory(IAgStkGraphicsCompositeDisplayConditionFactory):
    """A composite of display conditions combined using a binary logic operation. For example, several time interval display condition objects can be added to a composite..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsCompositeDisplayConditionFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsCompositeDisplayConditionFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsCompositeDisplayConditionFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsCompositeDisplayConditionFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsCompositeDisplayConditionFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{375A535B-557C-4E7B-A2AD-0905381BA46F}", AgStkGraphicsCompositeDisplayConditionFactory)
__all__.append("AgStkGraphicsCompositeDisplayConditionFactory")


class AgStkGraphicsCompositePrimitiveFactory(IAgStkGraphicsCompositePrimitiveFactory):
    """ A primitive that is composed of multiple other primitives. Since composites can contain other composites, they are commonly used to build hierarchies of primitives to efficiently evaluate display conditions..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsCompositePrimitiveFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsCompositePrimitiveFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsCompositePrimitiveFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsCompositePrimitiveFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsCompositePrimitiveFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{7F9D1191-7973-4B59-B2E6-9A4D4F19A222}", AgStkGraphicsCompositePrimitiveFactory)
__all__.append("AgStkGraphicsCompositePrimitiveFactory")


class AgStkGraphicsConstantDisplayConditionFactory(IAgStkGraphicsConstantDisplayConditionFactory):
    """A display condition that evaluates to a user-defined value. This is commonly used to hide primitives by assigning to a primitive a display condition that always returns false."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsConstantDisplayConditionFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsConstantDisplayConditionFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsConstantDisplayConditionFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsConstantDisplayConditionFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsConstantDisplayConditionFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{84B6B505-833D-4A3B-BD6B-99266C8C5284}", AgStkGraphicsConstantDisplayConditionFactory)
__all__.append("AgStkGraphicsConstantDisplayConditionFactory")


class AgStkGraphicsDistanceDisplayConditionFactory(IAgStkGraphicsDistanceDisplayConditionFactory):
    """Defines an inclusive distance interval that determines when an object, such as a primitive, is rendered based on the distance from the camera to the object."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsDistanceDisplayConditionFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsDistanceDisplayConditionFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsDistanceDisplayConditionFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsDistanceDisplayConditionFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsDistanceDisplayConditionFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{F8A027DC-AE3B-464A-A5C4-39AA37368ED7}", AgStkGraphicsDistanceDisplayConditionFactory)
__all__.append("AgStkGraphicsDistanceDisplayConditionFactory")


class AgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory(IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory):
    """Defines an inclusive distance interval that determines when an object, such as a primitive, is rendered based on the distance from the camera to the globe overlay..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{0BF7DA00-8B06-41FA-A580-15D898A0837F}", AgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory)
__all__.append("AgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory")


class AgStkGraphicsDistanceToPositionDisplayConditionFactory(IAgStkGraphicsDistanceToPositionDisplayConditionFactory):
    """Defines an inclusive distance interval that determines when an object, such as a primitive, is rendered based on the distance from the camera to a position defined in the given reference frame."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsDistanceToPositionDisplayConditionFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsDistanceToPositionDisplayConditionFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsDistanceToPositionDisplayConditionFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsDistanceToPositionDisplayConditionFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsDistanceToPositionDisplayConditionFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{F19A2CB9-BF83-4F3F-9B76-82794467A872}", AgStkGraphicsDistanceToPositionDisplayConditionFactory)
__all__.append("AgStkGraphicsDistanceToPositionDisplayConditionFactory")


class AgStkGraphicsDistanceToPrimitiveDisplayConditionFactory(IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory):
    """Defines an inclusive distance interval that determines when an object, such as a screen overlay, is rendered based on the distance from the camera to the primitive..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsDistanceToPrimitiveDisplayConditionFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{8D977F6C-359B-4353-AD7A-B1317BE7136E}", AgStkGraphicsDistanceToPrimitiveDisplayConditionFactory)
__all__.append("AgStkGraphicsDistanceToPrimitiveDisplayConditionFactory")


class AgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory(IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory):
    """path primitive update policy that removes points from remove location after a given duration."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{D10A5794-C75B-43DA-8277-FAA18D9C988A}", AgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory)
__all__.append("AgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory")


class AgStkGraphicsGlobeImageOverlayInitializer(IAgStkGraphicsGlobeImageOverlayInitializer):
    """A globe overlay that shows an image."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsGlobeImageOverlayInitializer.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsGlobeImageOverlayInitializer._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsGlobeImageOverlayInitializer._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsGlobeImageOverlayInitializer._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsGlobeImageOverlayInitializer.")
        
agcls.AgClassCatalog.add_catalog_entry("{6CA56657-186B-4768-B747-AB0071E02C05}", AgStkGraphicsGlobeImageOverlayInitializer)
__all__.append("AgStkGraphicsGlobeImageOverlayInitializer")


class AgStkGraphicsGraphicsFontFactory(IAgStkGraphicsGraphicsFontFactory):
    """A font that is suitable for use with the text batch primitive. For best performance, avoid creating duplicate font objects. Instead assign the same font object to several text batch primitives."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsGraphicsFontFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsGraphicsFontFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsGraphicsFontFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsGraphicsFontFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsGraphicsFontFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{4890C7DD-6EAC-4F44-94DB-A72E75BEDAF0}", AgStkGraphicsGraphicsFontFactory)
__all__.append("AgStkGraphicsGraphicsFontFactory")


class AgStkGraphicsGreatArcInterpolatorFactory(IAgStkGraphicsGreatArcInterpolatorFactory):
    """The great arc interpolator computes interpolated positions along a great arc. A great arc is the shortest path between two positions on an ellipsoid."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsGreatArcInterpolatorFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsGreatArcInterpolatorFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsGreatArcInterpolatorFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsGreatArcInterpolatorFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsGreatArcInterpolatorFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{6882FDC8-B958-498D-A274-46AE40AE78D5}", AgStkGraphicsGreatArcInterpolatorFactory)
__all__.append("AgStkGraphicsGreatArcInterpolatorFactory")


class AgStkGraphicsAlphaFromLuminanceFilterFactory(IAgStkGraphicsAlphaFromLuminanceFilterFactory):
    """Adds an alpha band to the source raster derived from the luminance of the raster's color bands."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsAlphaFromLuminanceFilterFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsAlphaFromLuminanceFilterFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsAlphaFromLuminanceFilterFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsAlphaFromLuminanceFilterFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsAlphaFromLuminanceFilterFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{1190FF7A-66F4-4B54-B35B-57BBBEDD35AA}", AgStkGraphicsAlphaFromLuminanceFilterFactory)
__all__.append("AgStkGraphicsAlphaFromLuminanceFilterFactory")


class AgStkGraphicsAlphaFromPixelFilterFactory(IAgStkGraphicsAlphaFromPixelFilterFactory):
    """Adds an alpha band to the source raster based on the value of its first pixel. All pixels in the source raster that are the same color as the first pixel will be made transparent."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsAlphaFromPixelFilterFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsAlphaFromPixelFilterFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsAlphaFromPixelFilterFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsAlphaFromPixelFilterFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsAlphaFromPixelFilterFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{72AEEA38-C86F-48DE-A8D7-F993011E6466}", AgStkGraphicsAlphaFromPixelFilterFactory)
__all__.append("AgStkGraphicsAlphaFromPixelFilterFactory")


class AgStkGraphicsAlphaFromRasterFilterFactory(IAgStkGraphicsAlphaFromRasterFilterFactory):
    """Adds an alpha band to the source raster derived from the color bands or alpha of another raster. This filter can be used to apply an alpha mask to the source raster."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsAlphaFromRasterFilterFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsAlphaFromRasterFilterFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsAlphaFromRasterFilterFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsAlphaFromRasterFilterFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsAlphaFromRasterFilterFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{F578725F-3B1F-4B45-AA36-FADF0AA5516F}", AgStkGraphicsAlphaFromRasterFilterFactory)
__all__.append("AgStkGraphicsAlphaFromRasterFilterFactory")


class AgStkGraphicsBandExtractFilterFactory(IAgStkGraphicsBandExtractFilterFactory):
    """Extracts a band or set of bands from the source raster. The extract format property specifies the bands and the order of the bands that will be extracted."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsBandExtractFilterFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsBandExtractFilterFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsBandExtractFilterFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsBandExtractFilterFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsBandExtractFilterFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{52C5D954-F113-46CA-BF7C-3BFCA6637B6D}", AgStkGraphicsBandExtractFilterFactory)
__all__.append("AgStkGraphicsBandExtractFilterFactory")


class AgStkGraphicsBandOrderFilterFactory(IAgStkGraphicsBandOrderFilterFactory):
    """Reorders or swizzles the bands of the source raster to match the band order of the raster format specified by the band order property. When maintain raster format is true, the source raster's format is maintained after swizzling."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsBandOrderFilterFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsBandOrderFilterFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsBandOrderFilterFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsBandOrderFilterFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsBandOrderFilterFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{F238EFB7-84AC-4648-AB58-42C01DADA9A9}", AgStkGraphicsBandOrderFilterFactory)
__all__.append("AgStkGraphicsBandOrderFilterFactory")


class AgStkGraphicsBlurFilterFactory(IAgStkGraphicsBlurFilterFactory):
    """Applies a convolution filter to blur or smooth the source raster. Can be used to reduce noise in the raster."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsBlurFilterFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsBlurFilterFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsBlurFilterFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsBlurFilterFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsBlurFilterFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{8FE6B4C1-2607-4213-A2C6-EBD012D3A51F}", AgStkGraphicsBlurFilterFactory)
__all__.append("AgStkGraphicsBlurFilterFactory")


class AgStkGraphicsBrightnessFilterFactory(IAgStkGraphicsBrightnessFilterFactory):
    """Adjusts the brightness of the source raster's color bands. The adjustment to brightness is a value between -1 and 1, corresponding to least bright to most bright."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsBrightnessFilterFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsBrightnessFilterFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsBrightnessFilterFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsBrightnessFilterFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsBrightnessFilterFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{C03BF579-ED2C-480E-835C-A2F17B7B1E02}", AgStkGraphicsBrightnessFilterFactory)
__all__.append("AgStkGraphicsBrightnessFilterFactory")


class AgStkGraphicsColorToLuminanceFilterFactory(IAgStkGraphicsColorToLuminanceFilterFactory):
    """Extracts a luminance band derived from the color bands of the source raster."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsColorToLuminanceFilterFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsColorToLuminanceFilterFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsColorToLuminanceFilterFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsColorToLuminanceFilterFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsColorToLuminanceFilterFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{7311B5AA-FC01-4B35-A1A3-76DE69555938}", AgStkGraphicsColorToLuminanceFilterFactory)
__all__.append("AgStkGraphicsColorToLuminanceFilterFactory")


class AgStkGraphicsContrastFilterFactory(IAgStkGraphicsContrastFilterFactory):
    """Adjusts the contrast of the source raster. The adjustment to contrast is a value between -1 and 1, corresponding to least contrast to most contrast."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsContrastFilterFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsContrastFilterFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsContrastFilterFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsContrastFilterFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsContrastFilterFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{9B1023F6-67C4-4DC9-8EA1-9171564EFA42}", AgStkGraphicsContrastFilterFactory)
__all__.append("AgStkGraphicsContrastFilterFactory")


class AgStkGraphicsConvolutionFilterFactory(IAgStkGraphicsConvolutionFilterFactory):
    """Applies convolution to the source raster. Convolution is the modification of a pixel's value based on the values of its surrounding pixels. The kernel is the numerical matrix that is applied to each pixel in this process..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsConvolutionFilterFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsConvolutionFilterFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsConvolutionFilterFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsConvolutionFilterFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsConvolutionFilterFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{64B119DD-A78C-4815-A9DD-4D77B310D28D}", AgStkGraphicsConvolutionFilterFactory)
__all__.append("AgStkGraphicsConvolutionFilterFactory")


class AgStkGraphicsEdgeDetectFilterFactory(IAgStkGraphicsEdgeDetectFilterFactory):
    """Applies a convolution filter to detect edges in the source raster."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsEdgeDetectFilterFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsEdgeDetectFilterFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsEdgeDetectFilterFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsEdgeDetectFilterFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsEdgeDetectFilterFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{E14D1269-91FA-4A83-92A7-F5117E1E9DE9}", AgStkGraphicsEdgeDetectFilterFactory)
__all__.append("AgStkGraphicsEdgeDetectFilterFactory")


class AgStkGraphicsFilteringRasterStreamFactory(IAgStkGraphicsFilteringRasterStreamFactory):
    """A class decorator for applying a raster filter to each update of a raster stream. Can be used to apply filters to videos and other raster streams as they are updated."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsFilteringRasterStreamFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsFilteringRasterStreamFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsFilteringRasterStreamFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsFilteringRasterStreamFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsFilteringRasterStreamFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{8B9D2671-491B-4D5B-8410-B8A8ED881970}", AgStkGraphicsFilteringRasterStreamFactory)
__all__.append("AgStkGraphicsFilteringRasterStreamFactory")


class AgStkGraphicsFlipFilterFactory(IAgStkGraphicsFlipFilterFactory):
    """Flips the source raster along the given flip axis."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsFlipFilterFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsFlipFilterFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsFlipFilterFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsFlipFilterFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsFlipFilterFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{0C012B18-9467-42CE-8EC5-E7B70012BA73}", AgStkGraphicsFlipFilterFactory)
__all__.append("AgStkGraphicsFlipFilterFactory")


class AgStkGraphicsGammaCorrectionFilterFactory(IAgStkGraphicsGammaCorrectionFilterFactory):
    """Applies gamma correction to the source raster. The gamma is a value between .2 and 5. The default gamma value is 2.2."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsGammaCorrectionFilterFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsGammaCorrectionFilterFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsGammaCorrectionFilterFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsGammaCorrectionFilterFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsGammaCorrectionFilterFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{E09D6B71-6E82-45A1-A208-B761D82266E9}", AgStkGraphicsGammaCorrectionFilterFactory)
__all__.append("AgStkGraphicsGammaCorrectionFilterFactory")


class AgStkGraphicsGaussianBlurFilterFactory(IAgStkGraphicsGaussianBlurFilterFactory):
    """Applies a convolution filter to blur the source raster using the Gaussian function."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsGaussianBlurFilterFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsGaussianBlurFilterFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsGaussianBlurFilterFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsGaussianBlurFilterFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsGaussianBlurFilterFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{B98AC54E-10BB-4E81-9766-806A2F0EA8C4}", AgStkGraphicsGaussianBlurFilterFactory)
__all__.append("AgStkGraphicsGaussianBlurFilterFactory")


class AgStkGraphicsGradientDetectFilterFactory(IAgStkGraphicsGradientDetectFilterFactory):
    """Applies a convolution filter to detect gradients in the source raster."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsGradientDetectFilterFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsGradientDetectFilterFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsGradientDetectFilterFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsGradientDetectFilterFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsGradientDetectFilterFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{B88D6D7C-4807-4905-B52F-DF054A4AD186}", AgStkGraphicsGradientDetectFilterFactory)
__all__.append("AgStkGraphicsGradientDetectFilterFactory")


class AgStkGraphicsJpeg2000WriterInitializer(IAgStkGraphicsJpeg2000WriterInitializer):
    """Converts an image, such as a BMP, to a GeoJP2 file that can be used as an image globe overlay."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsJpeg2000WriterInitializer.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsJpeg2000WriterInitializer._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsJpeg2000WriterInitializer._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsJpeg2000WriterInitializer._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsJpeg2000WriterInitializer.")
        
agcls.AgClassCatalog.add_catalog_entry("{0F29EA41-17E7-4252-B419-B2573C015DC6}", AgStkGraphicsJpeg2000WriterInitializer)
__all__.append("AgStkGraphicsJpeg2000WriterInitializer")


class AgStkGraphicsLevelsFilterFactory(IAgStkGraphicsLevelsFilterFactory):
    """Adjusts the band levels of the source raster linearly."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsLevelsFilterFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsLevelsFilterFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsLevelsFilterFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsLevelsFilterFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsLevelsFilterFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{69CBD183-936F-480E-B0FF-4D140DDC9232}", AgStkGraphicsLevelsFilterFactory)
__all__.append("AgStkGraphicsLevelsFilterFactory")


class AgStkGraphicsProjectionRasterStreamPluginActivatorFactory(IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory):
    """The Activator class provides methods to load COM plugins that implement projection and raster streaming. For more information about the projection and raster plugins, see the STK Programming Interface."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsProjectionRasterStreamPluginActivatorFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{51F36FBA-E366-4A66-A452-FEE99786ED2E}", AgStkGraphicsProjectionRasterStreamPluginActivatorFactory)
__all__.append("AgStkGraphicsProjectionRasterStreamPluginActivatorFactory")


class AgStkGraphicsRasterFactory(IAgStkGraphicsRasterFactory):
    """A raster dataset. A raster consists of one or more bands, or sets of values, which are most commonly associated with colors when the raster represents an image..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsRasterFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsRasterFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsRasterFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRasterFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsRasterFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{390E63D5-4C79-48B3-98CD-55B1983F859A}", AgStkGraphicsRasterFactory)
__all__.append("AgStkGraphicsRasterFactory")


class AgStkGraphicsRasterAttributesFactory(IAgStkGraphicsRasterAttributesFactory):
    """The attributes describing a raster dataset. raster attributes define the memory layout of a raster, and includes properties defining the order of each raster band that the raster contains, as specified by the raster format..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsRasterAttributesFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsRasterAttributesFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsRasterAttributesFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRasterAttributesFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsRasterAttributesFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{94CA0CCD-4D74-47BD-8E5F-E2D96403DACF}", AgStkGraphicsRasterAttributesFactory)
__all__.append("AgStkGraphicsRasterAttributesFactory")


class AgStkGraphicsRotateFilterFactory(IAgStkGraphicsRotateFilterFactory):
    """Rotates the source raster clockwise by the specified angle."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsRotateFilterFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsRotateFilterFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsRotateFilterFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRotateFilterFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsRotateFilterFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{12C8E395-4E61-4484-A97D-33742C841A6D}", AgStkGraphicsRotateFilterFactory)
__all__.append("AgStkGraphicsRotateFilterFactory")


class AgStkGraphicsSequenceFilterFactory(IAgStkGraphicsSequenceFilterFactory):
    """Applies a sequence of filters to the source raster in the order in which they were added. When continue on failure is set to true, subsequent filters will still be applied to the source raster even if one or more filters in the sequence cannot be applied."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsSequenceFilterFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsSequenceFilterFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsSequenceFilterFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsSequenceFilterFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsSequenceFilterFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{4CC16FDF-B6CE-4C06-B47F-AD7812566215}", AgStkGraphicsSequenceFilterFactory)
__all__.append("AgStkGraphicsSequenceFilterFactory")


class AgStkGraphicsSharpenFilterFactory(IAgStkGraphicsSharpenFilterFactory):
    """Applies a convolution filter to increase the sharpness of the source raster."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsSharpenFilterFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsSharpenFilterFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsSharpenFilterFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsSharpenFilterFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsSharpenFilterFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{98011831-2D99-4FED-AC53-DFB4090D132C}", AgStkGraphicsSharpenFilterFactory)
__all__.append("AgStkGraphicsSharpenFilterFactory")


class AgStkGraphicsVideoStreamFactory(IAgStkGraphicsVideoStreamFactory):
    """A raster stream that streams from a video. The video can be read from a file, or streamed from an HTTP, RTP, UDP, or TCP source. See the Video Streams Overview for a list of supported video formats and Uri usage."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsVideoStreamFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsVideoStreamFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsVideoStreamFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsVideoStreamFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsVideoStreamFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{A977E2D9-785B-4AB0-B01F-927486E3170B}", AgStkGraphicsVideoStreamFactory)
__all__.append("AgStkGraphicsVideoStreamFactory")


class AgStkGraphicsMarkerBatchPrimitiveFactory(IAgStkGraphicsMarkerBatchPrimitiveFactory):
    """ Renders one or more markers in the 3D scene. Markers are 2D images that always face the viewer which can be sized in pixels or meters. Markers are also referred to as sprites or billboards..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsMarkerBatchPrimitiveFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsMarkerBatchPrimitiveFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsMarkerBatchPrimitiveFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsMarkerBatchPrimitiveFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsMarkerBatchPrimitiveFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{E2AC5708-26C2-469F-AE1C-C48AED18565E}", AgStkGraphicsMarkerBatchPrimitiveFactory)
__all__.append("AgStkGraphicsMarkerBatchPrimitiveFactory")


class AgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory(IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory):
    """Optional per-marker parameters for marker batch primitive that overrides the marker batch's per-batch parameters..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{120D8907-DB34-481B-93B1-C61A4C5C61EF}", AgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory)
__all__.append("AgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory")


class AgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory(IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory):
    """path primitive update policy that removes points from remove location when the number of points in the path exceeds maximum count."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{C3F59BCB-635A-4E50-B5AA-269CD0380069}", AgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory)
__all__.append("AgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory")


class AgStkGraphicsModelPrimitiveFactory(IAgStkGraphicsModelPrimitiveFactory):
    """The model primitive loads and renders <a href='http://www.collada.org/'>COLLADA</a> (DAE) and AGI <a href='https://support.agi.com/3d-models'>MDL</a> (MDL) models."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsModelPrimitiveFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsModelPrimitiveFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsModelPrimitiveFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsModelPrimitiveFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsModelPrimitiveFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{90BABAB0-7D1E-420F-B91F-46E2E5B31763}", AgStkGraphicsModelPrimitiveFactory)
__all__.append("AgStkGraphicsModelPrimitiveFactory")


class AgStkGraphicsPathPrimitiveFactory(IAgStkGraphicsPathPrimitiveFactory):
    """Renders a line to the 3D scene. Similar to the polyline primitive; however, the PathPrimitive was designed for the efficient addition/removal of points to/from the front or back of the line."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsPathPrimitiveFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsPathPrimitiveFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsPathPrimitiveFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPathPrimitiveFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsPathPrimitiveFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{1847AEAB-C6B6-4561-BBDB-D979A443CCF0}", AgStkGraphicsPathPrimitiveFactory)
__all__.append("AgStkGraphicsPathPrimitiveFactory")


class AgStkGraphicsPixelSizeDisplayConditionFactory(IAgStkGraphicsPixelSizeDisplayConditionFactory):
    """Defines an inclusive interval, in pixels, that determines when an object, such as a primitive, is rendered based on the number of pixels the object's bounding sphere (or in the case of screen overlays, bounding rectangle) covers on the screen..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsPixelSizeDisplayConditionFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsPixelSizeDisplayConditionFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsPixelSizeDisplayConditionFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPixelSizeDisplayConditionFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsPixelSizeDisplayConditionFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{52EC4EAD-B9A0-4940-BAE8-BD115805BB46}", AgStkGraphicsPixelSizeDisplayConditionFactory)
__all__.append("AgStkGraphicsPixelSizeDisplayConditionFactory")


class AgStkGraphicsPointBatchPrimitiveFactory(IAgStkGraphicsPointBatchPrimitiveFactory):
    """ Renders one or more points in the 3D scene. Each point in the batch has a unique position and an optional color. All points in the batch share the same pixel size. For best performance, avoid creating lots of batches with only a few points each..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsPointBatchPrimitiveFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsPointBatchPrimitiveFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsPointBatchPrimitiveFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPointBatchPrimitiveFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsPointBatchPrimitiveFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{B497A3DE-DF9F-4EFD-8CB8-2767415F4889}", AgStkGraphicsPointBatchPrimitiveFactory)
__all__.append("AgStkGraphicsPointBatchPrimitiveFactory")


class AgStkGraphicsPolylinePrimitiveFactory(IAgStkGraphicsPolylinePrimitiveFactory):
    """Renders a polyline in the 3D scene. Each line segment may have a different color. A polyline can be constructed with a position interpolator to render great arcs or rhumb lines."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsPolylinePrimitiveFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsPolylinePrimitiveFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsPolylinePrimitiveFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPolylinePrimitiveFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsPolylinePrimitiveFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{825E24B9-F4B9-4EF4-8F98-A8BD8F7A6C4B}", AgStkGraphicsPolylinePrimitiveFactory)
__all__.append("AgStkGraphicsPolylinePrimitiveFactory")


class AgStkGraphicsPolylinePrimitiveOptionalParametersFactory(IAgStkGraphicsPolylinePrimitiveOptionalParametersFactory):
    """Optional per-point or per-segment parameters for polyline primitive that overrides the polyline primitive's global parameters..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsPolylinePrimitiveOptionalParametersFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsPolylinePrimitiveOptionalParametersFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsPolylinePrimitiveOptionalParametersFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsPolylinePrimitiveOptionalParametersFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsPolylinePrimitiveOptionalParametersFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{2ff372bc-ad1c-4fa2-82e9-75c9b407f19c}", AgStkGraphicsPolylinePrimitiveOptionalParametersFactory)
__all__.append("AgStkGraphicsPolylinePrimitiveOptionalParametersFactory")


class AgStkGraphicsRasterImageGlobeOverlayFactory(IAgStkGraphicsRasterImageGlobeOverlayFactory):
    """A globe image overlay for handling rasters."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsRasterImageGlobeOverlayFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsRasterImageGlobeOverlayFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsRasterImageGlobeOverlayFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRasterImageGlobeOverlayFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsRasterImageGlobeOverlayFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{73782D85-0307-4B70-B793-2930A8880AEE}", AgStkGraphicsRasterImageGlobeOverlayFactory)
__all__.append("AgStkGraphicsRasterImageGlobeOverlayFactory")


class AgStkGraphicsRhumbLineInterpolatorFactory(IAgStkGraphicsRhumbLineInterpolatorFactory):
    """The rhumb line interpolator computes interpolated positions along a rhumb line. Rhumb lines are lines of constant bearing. They appear as straight lines on a Mercator 2D map projection and are well suited to navigation."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsRhumbLineInterpolatorFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsRhumbLineInterpolatorFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsRhumbLineInterpolatorFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsRhumbLineInterpolatorFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsRhumbLineInterpolatorFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{0B6D54BD-A46B-4770-A936-23F247B6F038}", AgStkGraphicsRhumbLineInterpolatorFactory)
__all__.append("AgStkGraphicsRhumbLineInterpolatorFactory")


class AgStkGraphicsSceneDisplayConditionFactory(IAgStkGraphicsSceneDisplayConditionFactory):
    """A display condition used to control what scene or scenes an object, such as a primitive, is rendered in. This is used to show an object in some scenes and hide it in others."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsSceneDisplayConditionFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsSceneDisplayConditionFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsSceneDisplayConditionFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsSceneDisplayConditionFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsSceneDisplayConditionFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{19159366-8E64-467F-922B-739678DA01C2}", AgStkGraphicsSceneDisplayConditionFactory)
__all__.append("AgStkGraphicsSceneDisplayConditionFactory")


class AgStkGraphicsSceneManagerInitializer(IAgStkGraphicsSceneManagerInitializer):
    """The static scene manager class provides global properties and functionality that apply to all scenes and thus affect the rendering of every globe control..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsSceneManagerInitializer.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsSceneManagerInitializer._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsSceneManagerInitializer._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsSceneManagerInitializer._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsSceneManagerInitializer.")
        
agcls.AgClassCatalog.add_catalog_entry("{956AD97D-96ED-4898-89BE-08AF68BF1EA6}", AgStkGraphicsSceneManagerInitializer)
__all__.append("AgStkGraphicsSceneManagerInitializer")


class AgStkGraphicsScreenOverlayFactory(IAgStkGraphicsScreenOverlayFactory):
    """A visible element drawn in screen space. Overlays are useful for floating logos, heads up displays, and integrating user interfaces into the 3D window."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsScreenOverlayFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsScreenOverlayFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsScreenOverlayFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsScreenOverlayFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsScreenOverlayFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{C2F5A068-E483-4CCF-819D-FBB25DC85A71}", AgStkGraphicsScreenOverlayFactory)
__all__.append("AgStkGraphicsScreenOverlayFactory")


class AgStkGraphicsSolidPrimitiveFactory(IAgStkGraphicsSolidPrimitiveFactory):
    """Renders filled solid objects and their outlines. Example solids include boxes and ellipsoids. Various effects are supported, such as displaying the solid's silhouette, and hiding the outline of the backside of the solid..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsSolidPrimitiveFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsSolidPrimitiveFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsSolidPrimitiveFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsSolidPrimitiveFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsSolidPrimitiveFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{9F23AC4E-DCB0-45B1-BE07-E4BEBA9B4AFF}", AgStkGraphicsSolidPrimitiveFactory)
__all__.append("AgStkGraphicsSolidPrimitiveFactory")


class AgStkGraphicsSurfaceMeshPrimitiveFactory(IAgStkGraphicsSurfaceMeshPrimitiveFactory):
    """A triangle mesh primitive for meshes on the surface that need to conform to terrain."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsSurfaceMeshPrimitiveFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsSurfaceMeshPrimitiveFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsSurfaceMeshPrimitiveFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsSurfaceMeshPrimitiveFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsSurfaceMeshPrimitiveFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{A9B40191-F8D7-46D8-B217-30C1C41E2369}", AgStkGraphicsSurfaceMeshPrimitiveFactory)
__all__.append("AgStkGraphicsSurfaceMeshPrimitiveFactory")


class AgStkGraphicsTerrainOverlayInitializer(IAgStkGraphicsTerrainOverlayInitializer):
    """A globe overlay which shows terrain."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsTerrainOverlayInitializer.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsTerrainOverlayInitializer._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsTerrainOverlayInitializer._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsTerrainOverlayInitializer._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsTerrainOverlayInitializer.")
        
agcls.AgClassCatalog.add_catalog_entry("{8D76F5E3-BACE-4CA4-9C4D-9F14464ACAFD}", AgStkGraphicsTerrainOverlayInitializer)
__all__.append("AgStkGraphicsTerrainOverlayInitializer")


class AgStkGraphicsTextBatchPrimitiveFactory(IAgStkGraphicsTextBatchPrimitiveFactory):
    """ Renders one or more strings in the 3D scene.  For best performance, avoid creating lots of batches with only a few strings each. See the Batching Performance Overview. """
    def __init__(self, sourceObject=None):
        IAgStkGraphicsTextBatchPrimitiveFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsTextBatchPrimitiveFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsTextBatchPrimitiveFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsTextBatchPrimitiveFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsTextBatchPrimitiveFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{246D4DAA-4CD0-4E10-98C7-791A17E5A736}", AgStkGraphicsTextBatchPrimitiveFactory)
__all__.append("AgStkGraphicsTextBatchPrimitiveFactory")


class AgStkGraphicsTextBatchPrimitiveOptionalParametersFactory(IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory):
    """Optional per-string and per-batch parameters for text batch primitive..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsTextBatchPrimitiveOptionalParametersFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{A3C12306-7202-468F-B0A5-306D98A7E2BC}", AgStkGraphicsTextBatchPrimitiveOptionalParametersFactory)
__all__.append("AgStkGraphicsTextBatchPrimitiveOptionalParametersFactory")


class AgStkGraphicsTextOverlayFactory(IAgStkGraphicsTextOverlayFactory):
    """A rectangular overlay that contains text."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsTextOverlayFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsTextOverlayFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsTextOverlayFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsTextOverlayFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsTextOverlayFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{5DFA35A5-B53D-4B58-A32E-B2B2690D3104}", AgStkGraphicsTextOverlayFactory)
__all__.append("AgStkGraphicsTextOverlayFactory")


class AgStkGraphicsTextureMatrixFactory(IAgStkGraphicsTextureMatrixFactory):
    """A 4 by 4 matrix applied to a texture coordinate."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsTextureMatrixFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsTextureMatrixFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsTextureMatrixFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsTextureMatrixFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsTextureMatrixFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{0169DB20-811D-4DF6-8EDF-51C47B485D6B}", AgStkGraphicsTextureMatrixFactory)
__all__.append("AgStkGraphicsTextureMatrixFactory")


class AgStkGraphicsTextureScreenOverlayFactory(IAgStkGraphicsTextureScreenOverlayFactory):
    """A rectangular overlay that can be assigned a texture."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsTextureScreenOverlayFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsTextureScreenOverlayFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsTextureScreenOverlayFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsTextureScreenOverlayFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsTextureScreenOverlayFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{C4060E65-DD40-40CE-B462-55E08E6D63AF}", AgStkGraphicsTextureScreenOverlayFactory)
__all__.append("AgStkGraphicsTextureScreenOverlayFactory")


class AgStkGraphicsTimeIntervalDisplayConditionFactory(IAgStkGraphicsTimeIntervalDisplayConditionFactory):
    """Defines an inclusive time interval that determines when an object, such as a primitive, is rendered based on the current animation time ."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsTimeIntervalDisplayConditionFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsTimeIntervalDisplayConditionFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsTimeIntervalDisplayConditionFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsTimeIntervalDisplayConditionFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsTimeIntervalDisplayConditionFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{526637D4-DD61-4B7D-BAE9-6FEF3673BF5D}", AgStkGraphicsTimeIntervalDisplayConditionFactory)
__all__.append("AgStkGraphicsTimeIntervalDisplayConditionFactory")


class AgStkGraphicsTriangleMeshPrimitiveFactory(IAgStkGraphicsTriangleMeshPrimitiveFactory):
    """Renders a triangle mesh in the 3D scene. Examples of triangle meshes includes polygons on the globe (e.g. states or countries), terrain and imagery extents, ellipses, and extrusions."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsTriangleMeshPrimitiveFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsTriangleMeshPrimitiveFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsTriangleMeshPrimitiveFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsTriangleMeshPrimitiveFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsTriangleMeshPrimitiveFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{D904C0D6-FEAE-4E13-9BBC-98F22CC2F0AF}", AgStkGraphicsTriangleMeshPrimitiveFactory)
__all__.append("AgStkGraphicsTriangleMeshPrimitiveFactory")


class AgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory(IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory):
    """Optional parameters for triangle mesh primitive..."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{9D9FB947-B9EB-4964-8FD8-6FF54D734BD8}", AgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory)
__all__.append("AgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory")


class AgStkGraphicsVectorPrimitiveFactory(IAgStkGraphicsVectorPrimitiveFactory):
    """Renders a vector in the 3D scene. A vector is defined by a source (given by an ISystem) and a direction (given by an IVector or IPoint). Length is auto-calculated or can be set separately."""
    def __init__(self, sourceObject=None):
        IAgStkGraphicsVectorPrimitiveFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgStkGraphicsVectorPrimitiveFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgStkGraphicsVectorPrimitiveFactory._get_property(self, attrname) is not None: found_prop = IAgStkGraphicsVectorPrimitiveFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgStkGraphicsVectorPrimitiveFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{380CA28E-1D09-4F5B-9341-6E96BA4CACCE}", AgStkGraphicsVectorPrimitiveFactory)
__all__.append("AgStkGraphicsVectorPrimitiveFactory")



################################################################################
#          Copyright 2020-2020, Analytical Graphics, Inc.
################################################################################
