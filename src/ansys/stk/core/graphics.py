################################################################################
#          Copyright 2020-2020, Analytical Graphics, Inc.
################################################################################ 

__all__ = ["AgEStkGraphicsAntiAliasing", "AgEStkGraphicsBinaryLogicOperation", "AgEStkGraphicsBlurMethod", "AgEStkGraphicsCameraSnapshotFileFormat", 
"AgEStkGraphicsCameraVideoFormat", "AgEStkGraphicsConstrainedUpAxis", "AgEStkGraphicsCullFace", "AgEStkGraphicsCylinderFill", 
"AgEStkGraphicsEdgeDetectMethod", "AgEStkGraphicsFlipAxis", "AgEStkGraphicsFontStyle", "AgEStkGraphicsGlobeOverlayRole", 
"AgEStkGraphicsGradientDetectMethod", "AgEStkGraphicsIndicesOrderHint", "AgEStkGraphicsInternalTextureFormat", "AgEStkGraphicsJpeg2000CompressionProfile", 
"AgEStkGraphicsKmlNetworkLinkRefreshMode", "AgEStkGraphicsKmlNetworkLinkViewRefreshMode", "AgEStkGraphicsMagnificationFilter", 
"AgEStkGraphicsMaintainAspectRatio", "AgEStkGraphicsMapProjection", "AgEStkGraphicsMarkerBatchRenderPass", "AgEStkGraphicsMarkerBatchRenderingMethod", 
"AgEStkGraphicsMarkerBatchSizeSource", "AgEStkGraphicsMarkerBatchSortOrder", "AgEStkGraphicsMarkerBatchUnit", "AgEStkGraphicsMinificationFilter", 
"AgEStkGraphicsModelTransformationType", "AgEStkGraphicsModelUpAxis", "AgEStkGraphicsOrigin", "AgEStkGraphicsOutlineAppearance", 
"AgEStkGraphicsPathPrimitiveRemoveLocation", "AgEStkGraphicsPolylineType", "AgEStkGraphicsPrimitivesSortOrder", "AgEStkGraphicsRasterBand", 
"AgEStkGraphicsRasterFormat", "AgEStkGraphicsRasterOrientation", "AgEStkGraphicsRasterType", "AgEStkGraphicsRefreshRate", 
"AgEStkGraphicsRenderPass", "AgEStkGraphicsRenderPassHint", "AgEStkGraphicsRendererShadeModel", "AgEStkGraphicsScreenOverlayOrigin", 
"AgEStkGraphicsScreenOverlayPinningOrigin", "AgEStkGraphicsScreenOverlayUnit", "AgEStkGraphicsSetHint", "AgEStkGraphicsSharpenMethod", 
"AgEStkGraphicsStereoProjectionMode", "AgEStkGraphicsStereoscopicDisplayMode", "AgEStkGraphicsSurfaceMeshRenderingMethod", 
"AgEStkGraphicsTextureWrap", "AgEStkGraphicsVideoPlayback", "AgEStkGraphicsVisibility", "AgEStkGraphicsWindingOrder", "IStkGraphicsAGICustomTerrainOverlay", 
"IStkGraphicsAGICustomTerrainOverlayFactory", "IStkGraphicsAGIProcessedImageGlobeOverlay", "IStkGraphicsAGIProcessedImageGlobeOverlayFactory", 
"IStkGraphicsAGIProcessedTerrainOverlay", "IStkGraphicsAGIProcessedTerrainOverlayFactory", "IStkGraphicsAGIRoamImageGlobeOverlay", 
"IStkGraphicsAGIRoamImageGlobeOverlayFactory", "IStkGraphicsAlphaFromLuminanceFilter", "IStkGraphicsAlphaFromLuminanceFilterFactory", 
"IStkGraphicsAlphaFromPixelFilter", "IStkGraphicsAlphaFromPixelFilterFactory", "IStkGraphicsAlphaFromRasterFilter", "IStkGraphicsAlphaFromRasterFilterFactory", 
"IStkGraphicsAltitudeDisplayCondition", "IStkGraphicsAltitudeDisplayConditionFactory", "IStkGraphicsAxesPrimitive", "IStkGraphicsAxesPrimitiveFactory", 
"IStkGraphicsBandExtractFilter", "IStkGraphicsBandExtractFilterFactory", "IStkGraphicsBandOrderFilter", "IStkGraphicsBandOrderFilterFactory", 
"IStkGraphicsBatchPrimitiveIndex", "IStkGraphicsBlurFilter", "IStkGraphicsBlurFilterFactory", "IStkGraphicsBoundingSphere", 
"IStkGraphicsBoundingSphereFactory", "IStkGraphicsBoxTriangulatorInitializer", "IStkGraphicsBrightnessFilter", "IStkGraphicsBrightnessFilterFactory", 
"IStkGraphicsCamera", "IStkGraphicsCameraSnapshot", "IStkGraphicsCameraVideoRecording", "IStkGraphicsCentralBodyGraphics", 
"IStkGraphicsCentralBodyGraphicsIndexer", "IStkGraphicsClouds", "IStkGraphicsColorToLuminanceFilter", "IStkGraphicsColorToLuminanceFilterFactory", 
"IStkGraphicsCompositeDisplayCondition", "IStkGraphicsCompositeDisplayConditionFactory", "IStkGraphicsCompositePrimitive", 
"IStkGraphicsCompositePrimitiveFactory", "IStkGraphicsConstantDisplayCondition", "IStkGraphicsConstantDisplayConditionFactory", 
"IStkGraphicsContrastFilter", "IStkGraphicsContrastFilterFactory", "IStkGraphicsConvolutionFilter", "IStkGraphicsConvolutionFilterFactory", 
"IStkGraphicsCustomImageGlobeOverlay", "IStkGraphicsCustomImageGlobeOverlayPluginActivator", "IStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory", 
"IStkGraphicsCustomImageGlobeOverlayPluginProxy", "IStkGraphicsCylinderTriangulatorInitializer", "IStkGraphicsDisplayCondition", 
"IStkGraphicsDistanceDisplayCondition", "IStkGraphicsDistanceDisplayConditionFactory", "IStkGraphicsDistanceToGlobeOverlayDisplayCondition", 
"IStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory", "IStkGraphicsDistanceToPositionDisplayCondition", "IStkGraphicsDistanceToPositionDisplayConditionFactory", 
"IStkGraphicsDistanceToPrimitiveDisplayCondition", "IStkGraphicsDistanceToPrimitiveDisplayConditionFactory", "IStkGraphicsDurationPathPrimitiveUpdatePolicy", 
"IStkGraphicsDurationPathPrimitiveUpdatePolicyFactory", "IStkGraphicsEdgeDetectFilter", "IStkGraphicsEdgeDetectFilterFactory", 
"IStkGraphicsEllipsoidTriangulatorInitializer", "IStkGraphicsExtrudedPolylineTriangulatorInitializer", "IStkGraphicsExtrudedPolylineTriangulatorResult", 
"IStkGraphicsFactoryAndInitializers", "IStkGraphicsFilteringRasterStream", "IStkGraphicsFilteringRasterStreamFactory", "IStkGraphicsFlipFilter", 
"IStkGraphicsFlipFilterFactory", "IStkGraphicsFrameRate", "IStkGraphicsGammaCorrectionFilter", "IStkGraphicsGammaCorrectionFilterFactory", 
"IStkGraphicsGaussianBlurFilter", "IStkGraphicsGaussianBlurFilterFactory", "IStkGraphicsGeospatialImageGlobeOverlay", "IStkGraphicsGeospatialImageGlobeOverlayFactory", 
"IStkGraphicsGlobeImageOverlay", "IStkGraphicsGlobeImageOverlayAddCompleteEventArgs", "IStkGraphicsGlobeImageOverlayInitializer", 
"IStkGraphicsGlobeOverlay", "IStkGraphicsGlobeOverlaySettings", "IStkGraphicsGradientDetectFilter", "IStkGraphicsGradientDetectFilterFactory", 
"IStkGraphicsGraphicsFont", "IStkGraphicsGraphicsFontFactory", "IStkGraphicsGreatArcInterpolator", "IStkGraphicsGreatArcInterpolatorFactory", 
"IStkGraphicsImageCollection", "IStkGraphicsJpeg2000WriterInitializer", "IStkGraphicsKmlContainer", "IStkGraphicsKmlDocument", 
"IStkGraphicsKmlDocumentCollection", "IStkGraphicsKmlDocumentLoadedEventArgs", "IStkGraphicsKmlFeature", "IStkGraphicsKmlFeatureCollection", 
"IStkGraphicsKmlFolder", "IStkGraphicsKmlGraphics", "IStkGraphicsKmlNetworkLink", "IStkGraphicsLevelsFilter", "IStkGraphicsLevelsFilterFactory", 
"IStkGraphicsLighting", "IStkGraphicsMarkerBatchPrimitive", "IStkGraphicsMarkerBatchPrimitiveFactory", "IStkGraphicsMarkerBatchPrimitiveOptionalParameters", 
"IStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory", "IStkGraphicsMaximumCountPathPrimitiveUpdatePolicy", "IStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory", 
"IStkGraphicsModelArticulation", "IStkGraphicsModelArticulationCollection", "IStkGraphicsModelPrimitive", "IStkGraphicsModelPrimitiveFactory", 
"IStkGraphicsModelTransformation", "IStkGraphicsObjectCollection", "IStkGraphicsOverlay", "IStkGraphicsPathPoint", "IStkGraphicsPathPointCollection", 
"IStkGraphicsPathPointFactory", "IStkGraphicsPathPrimitive", "IStkGraphicsPathPrimitiveFactory", "IStkGraphicsPathPrimitiveUpdatePolicy", 
"IStkGraphicsPickResult", "IStkGraphicsPickResultCollection", "IStkGraphicsPixelSizeDisplayCondition", "IStkGraphicsPixelSizeDisplayConditionFactory", 
"IStkGraphicsPointBatchPrimitive", "IStkGraphicsPointBatchPrimitiveFactory", "IStkGraphicsPointBatchPrimitiveOptionalParameters", 
"IStkGraphicsPointBatchPrimitiveOptionalParametersFactory", "IStkGraphicsPolylinePrimitive", "IStkGraphicsPolylinePrimitiveFactory", 
"IStkGraphicsPolylinePrimitiveOptionalParameters", "IStkGraphicsPolylinePrimitiveOptionalParametersFactory", "IStkGraphicsPositionInterpolator", 
"IStkGraphicsPrimitive", "IStkGraphicsPrimitiveManager", "IStkGraphicsProjectedRasterOverlay", "IStkGraphicsProjectedRasterOverlayFactory", 
"IStkGraphicsProjection", "IStkGraphicsProjectionFactory", "IStkGraphicsProjectionRasterStreamPluginActivator", "IStkGraphicsProjectionRasterStreamPluginActivatorFactory", 
"IStkGraphicsProjectionRasterStreamPluginProxy", "IStkGraphicsProjectionStream", "IStkGraphicsRaster", "IStkGraphicsRasterAttributes", 
"IStkGraphicsRasterAttributesFactory", "IStkGraphicsRasterFactory", "IStkGraphicsRasterFilter", "IStkGraphicsRasterImageGlobeOverlay", 
"IStkGraphicsRasterImageGlobeOverlayFactory", "IStkGraphicsRasterStream", "IStkGraphicsRendererTexture2D", "IStkGraphicsRendererTextureTemplate2D", 
"IStkGraphicsRenderingEventArgs", "IStkGraphicsRhumbLineInterpolator", "IStkGraphicsRhumbLineInterpolatorFactory", "IStkGraphicsRotateFilter", 
"IStkGraphicsRotateFilterFactory", "IStkGraphicsScene", "IStkGraphicsSceneCollection", "IStkGraphicsSceneDisplayCondition", 
"IStkGraphicsSceneDisplayConditionFactory", "IStkGraphicsSceneGlobeOverlaySettings", "IStkGraphicsSceneManager", "IStkGraphicsSceneManagerInitializer", 
"IStkGraphicsScreenOverlay", "IStkGraphicsScreenOverlayCollection", "IStkGraphicsScreenOverlayCollectionBase", "IStkGraphicsScreenOverlayContainer", 
"IStkGraphicsScreenOverlayFactory", "IStkGraphicsScreenOverlayManager", "IStkGraphicsScreenOverlayPickResult", "IStkGraphicsScreenOverlayPickResultCollection", 
"IStkGraphicsSequenceFilter", "IStkGraphicsSequenceFilterFactory", "IStkGraphicsSharpenFilter", "IStkGraphicsSharpenFilterFactory", 
"IStkGraphicsSolidPrimitive", "IStkGraphicsSolidPrimitiveFactory", "IStkGraphicsSolidTriangulatorResult", "IStkGraphicsStereoscopic", 
"IStkGraphicsSurfaceExtentTriangulatorInitializer", "IStkGraphicsSurfaceMeshPrimitive", "IStkGraphicsSurfaceMeshPrimitiveFactory", 
"IStkGraphicsSurfacePolygonTriangulatorInitializer", "IStkGraphicsSurfaceShapesInitializer", "IStkGraphicsSurfaceShapesResult", 
"IStkGraphicsSurfaceTriangulatorResult", "IStkGraphicsTerrainCollection", "IStkGraphicsTerrainOverlay", "IStkGraphicsTerrainOverlayAddCompleteEventArgs", 
"IStkGraphicsTerrainOverlayInitializer", "IStkGraphicsTextBatchPrimitive", "IStkGraphicsTextBatchPrimitiveFactory", "IStkGraphicsTextBatchPrimitiveOptionalParameters", 
"IStkGraphicsTextBatchPrimitiveOptionalParametersFactory", "IStkGraphicsTextOverlay", "IStkGraphicsTextOverlayFactory", 
"IStkGraphicsTexture2DFactory", "IStkGraphicsTextureFilter2D", "IStkGraphicsTextureFilter2DFactory", "IStkGraphicsTextureMatrix", 
"IStkGraphicsTextureMatrixFactory", "IStkGraphicsTextureScreenOverlay", "IStkGraphicsTextureScreenOverlayFactory", "IStkGraphicsTimeIntervalDisplayCondition", 
"IStkGraphicsTimeIntervalDisplayConditionFactory", "IStkGraphicsTriangleMeshPrimitive", "IStkGraphicsTriangleMeshPrimitiveFactory", 
"IStkGraphicsTriangleMeshPrimitiveOptionalParameters", "IStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory", "IStkGraphicsTriangulatorResult", 
"IStkGraphicsVectorPrimitive", "IStkGraphicsVectorPrimitiveFactory", "IStkGraphicsVideoStream", "IStkGraphicsVideoStreamFactory", 
"IStkGraphicsVisualEffects", "StkGraphicsAGICustomTerrainOverlay", "StkGraphicsAGICustomTerrainOverlayFactory", "StkGraphicsAGIProcessedImageGlobeOverlay", 
"StkGraphicsAGIProcessedImageGlobeOverlayFactory", "StkGraphicsAGIProcessedTerrainOverlay", "StkGraphicsAGIProcessedTerrainOverlayFactory", 
"StkGraphicsAGIRoamImageGlobeOverlay", "StkGraphicsAGIRoamImageGlobeOverlayFactory", "StkGraphicsAlphaFromLuminanceFilter", 
"StkGraphicsAlphaFromLuminanceFilterFactory", "StkGraphicsAlphaFromPixelFilter", "StkGraphicsAlphaFromPixelFilterFactory", 
"StkGraphicsAlphaFromRasterFilter", "StkGraphicsAlphaFromRasterFilterFactory", "StkGraphicsAltitudeDisplayCondition", "StkGraphicsAltitudeDisplayConditionFactory", 
"StkGraphicsAxesPrimitive", "StkGraphicsAxesPrimitiveFactory", "StkGraphicsBandExtractFilter", "StkGraphicsBandExtractFilterFactory", 
"StkGraphicsBandOrderFilter", "StkGraphicsBandOrderFilterFactory", "StkGraphicsBatchPrimitiveIndex", "StkGraphicsBlurFilter", 
"StkGraphicsBlurFilterFactory", "StkGraphicsBoundingSphere", "StkGraphicsBoundingSphereFactory", "StkGraphicsBoxTriangulatorInitializer", 
"StkGraphicsBrightnessFilter", "StkGraphicsBrightnessFilterFactory", "StkGraphicsCamera", "StkGraphicsCameraSnapshot", "StkGraphicsCameraVideoRecording", 
"StkGraphicsCentralBodyGraphics", "StkGraphicsCentralBodyGraphicsIndexer", "StkGraphicsClouds", "StkGraphicsColorToLuminanceFilter", 
"StkGraphicsColorToLuminanceFilterFactory", "StkGraphicsCompositeDisplayCondition", "StkGraphicsCompositeDisplayConditionFactory", 
"StkGraphicsCompositePrimitive", "StkGraphicsCompositePrimitiveFactory", "StkGraphicsConstantDisplayCondition", "StkGraphicsConstantDisplayConditionFactory", 
"StkGraphicsContrastFilter", "StkGraphicsContrastFilterFactory", "StkGraphicsConvolutionFilter", "StkGraphicsConvolutionFilterFactory", 
"StkGraphicsCustomImageGlobeOverlay", "StkGraphicsCustomImageGlobeOverlayPluginActivator", "StkGraphicsCustomImageGlobeOverlayPluginActivatorFactory", 
"StkGraphicsCustomImageGlobeOverlayPluginProxy", "StkGraphicsCylinderTriangulatorInitializer", "StkGraphicsDisplayCondition", 
"StkGraphicsDistanceDisplayCondition", "StkGraphicsDistanceDisplayConditionFactory", "StkGraphicsDistanceToGlobeOverlayDisplayCondition", 
"StkGraphicsDistanceToGlobeOverlayDisplayConditionFactory", "StkGraphicsDistanceToPositionDisplayCondition", "StkGraphicsDistanceToPositionDisplayConditionFactory", 
"StkGraphicsDistanceToPrimitiveDisplayCondition", "StkGraphicsDistanceToPrimitiveDisplayConditionFactory", "StkGraphicsDurationPathPrimitiveUpdatePolicy", 
"StkGraphicsDurationPathPrimitiveUpdatePolicyFactory", "StkGraphicsEdgeDetectFilter", "StkGraphicsEdgeDetectFilterFactory", 
"StkGraphicsEllipsoidTriangulatorInitializer", "StkGraphicsExtrudedPolylineTriangulatorInitializer", "StkGraphicsExtrudedPolylineTriangulatorResult", 
"StkGraphicsFactoryAndInitializers", "StkGraphicsFilteringRasterStream", "StkGraphicsFilteringRasterStreamFactory", "StkGraphicsFlipFilter", 
"StkGraphicsFlipFilterFactory", "StkGraphicsFrameRate", "StkGraphicsGammaCorrectionFilter", "StkGraphicsGammaCorrectionFilterFactory", 
"StkGraphicsGaussianBlurFilter", "StkGraphicsGaussianBlurFilterFactory", "StkGraphicsGeospatialImageGlobeOverlay", "StkGraphicsGeospatialImageGlobeOverlayFactory", 
"StkGraphicsGlobeImageOverlay", "StkGraphicsGlobeImageOverlayAddCompleteEventArgs", "StkGraphicsGlobeImageOverlayInitializer", 
"StkGraphicsGlobeOverlay", "StkGraphicsGlobeOverlaySettings", "StkGraphicsGradientDetectFilter", "StkGraphicsGradientDetectFilterFactory", 
"StkGraphicsGraphicsFont", "StkGraphicsGraphicsFontFactory", "StkGraphicsGreatArcInterpolator", "StkGraphicsGreatArcInterpolatorFactory", 
"StkGraphicsImageCollection", "StkGraphicsJpeg2000WriterInitializer", "StkGraphicsKmlContainer", "StkGraphicsKmlDocument", 
"StkGraphicsKmlDocumentCollection", "StkGraphicsKmlDocumentLoadedEventArgs", "StkGraphicsKmlFeature", "StkGraphicsKmlFeatureCollection", 
"StkGraphicsKmlFolder", "StkGraphicsKmlGraphics", "StkGraphicsKmlNetworkLink", "StkGraphicsLevelsFilter", "StkGraphicsLevelsFilterFactory", 
"StkGraphicsLighting", "StkGraphicsMarkerBatchPrimitive", "StkGraphicsMarkerBatchPrimitiveFactory", "StkGraphicsMarkerBatchPrimitiveOptionalParameters", 
"StkGraphicsMarkerBatchPrimitiveOptionalParametersFactory", "StkGraphicsMaximumCountPathPrimitiveUpdatePolicy", "StkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory", 
"StkGraphicsModelArticulation", "StkGraphicsModelArticulationCollection", "StkGraphicsModelPrimitive", "StkGraphicsModelPrimitiveFactory", 
"StkGraphicsModelTransformation", "StkGraphicsObjectCollection", "StkGraphicsOverlay", "StkGraphicsPathPoint", "StkGraphicsPathPointCollection", 
"StkGraphicsPathPointFactory", "StkGraphicsPathPrimitive", "StkGraphicsPathPrimitiveFactory", "StkGraphicsPathPrimitiveUpdatePolicy", 
"StkGraphicsPickResult", "StkGraphicsPickResultCollection", "StkGraphicsPixelSizeDisplayCondition", "StkGraphicsPixelSizeDisplayConditionFactory", 
"StkGraphicsPointBatchPrimitive", "StkGraphicsPointBatchPrimitiveFactory", "StkGraphicsPointBatchPrimitiveOptionalParameters", 
"StkGraphicsPointBatchPrimitiveOptionalParametersFactory", "StkGraphicsPolylinePrimitive", "StkGraphicsPolylinePrimitiveFactory", 
"StkGraphicsPolylinePrimitiveOptionalParameters", "StkGraphicsPolylinePrimitiveOptionalParametersFactory", "StkGraphicsPositionInterpolator", 
"StkGraphicsPrimitive", "StkGraphicsPrimitiveManager", "StkGraphicsProjectedRasterOverlay", "StkGraphicsProjectedRasterOverlayFactory", 
"StkGraphicsProjection", "StkGraphicsProjectionFactory", "StkGraphicsProjectionRasterStreamPluginActivator", "StkGraphicsProjectionRasterStreamPluginActivatorFactory", 
"StkGraphicsProjectionRasterStreamPluginProxy", "StkGraphicsProjectionStream", "StkGraphicsRaster", "StkGraphicsRasterAttributes", 
"StkGraphicsRasterAttributesFactory", "StkGraphicsRasterFactory", "StkGraphicsRasterFilter", "StkGraphicsRasterImageGlobeOverlay", 
"StkGraphicsRasterImageGlobeOverlayFactory", "StkGraphicsRasterStream", "StkGraphicsRendererTexture2D", "StkGraphicsRendererTextureTemplate2D", 
"StkGraphicsRenderingEventArgs", "StkGraphicsRhumbLineInterpolator", "StkGraphicsRhumbLineInterpolatorFactory", "StkGraphicsRotateFilter", 
"StkGraphicsRotateFilterFactory", "StkGraphicsScene", "StkGraphicsSceneCollection", "StkGraphicsSceneDisplayCondition", 
"StkGraphicsSceneDisplayConditionFactory", "StkGraphicsSceneGlobeOverlaySettings", "StkGraphicsSceneManager", "StkGraphicsSceneManagerInitializer", 
"StkGraphicsScreenOverlay", "StkGraphicsScreenOverlayCollection", "StkGraphicsScreenOverlayCollectionBase", "StkGraphicsScreenOverlayFactory", 
"StkGraphicsScreenOverlayManager", "StkGraphicsScreenOverlayPickResult", "StkGraphicsScreenOverlayPickResultCollection", 
"StkGraphicsSequenceFilter", "StkGraphicsSequenceFilterFactory", "StkGraphicsSharpenFilter", "StkGraphicsSharpenFilterFactory", 
"StkGraphicsSolidPrimitive", "StkGraphicsSolidPrimitiveFactory", "StkGraphicsSolidTriangulatorResult", "StkGraphicsStereoscopic", 
"StkGraphicsSurfaceExtentTriangulatorInitializer", "StkGraphicsSurfaceMeshPrimitive", "StkGraphicsSurfaceMeshPrimitiveFactory", 
"StkGraphicsSurfacePolygonTriangulatorInitializer", "StkGraphicsSurfaceShapesInitializer", "StkGraphicsSurfaceShapesResult", 
"StkGraphicsSurfaceTriangulatorResult", "StkGraphicsTerrainCollection", "StkGraphicsTerrainOverlay", "StkGraphicsTerrainOverlayAddCompleteEventArgs", 
"StkGraphicsTerrainOverlayInitializer", "StkGraphicsTextBatchPrimitive", "StkGraphicsTextBatchPrimitiveFactory", "StkGraphicsTextBatchPrimitiveOptionalParameters", 
"StkGraphicsTextBatchPrimitiveOptionalParametersFactory", "StkGraphicsTextOverlay", "StkGraphicsTextOverlayFactory", "StkGraphicsTexture2DFactory", 
"StkGraphicsTextureFilter2D", "StkGraphicsTextureFilter2DFactory", "StkGraphicsTextureMatrix", "StkGraphicsTextureMatrixFactory", 
"StkGraphicsTextureScreenOverlay", "StkGraphicsTextureScreenOverlayFactory", "StkGraphicsTimeIntervalDisplayCondition", 
"StkGraphicsTimeIntervalDisplayConditionFactory", "StkGraphicsTriangleMeshPrimitive", "StkGraphicsTriangleMeshPrimitiveFactory", 
"StkGraphicsTriangleMeshPrimitiveOptionalParameters", "StkGraphicsTriangleMeshPrimitiveOptionalParametersFactory", "StkGraphicsTriangulatorResult", 
"StkGraphicsVectorPrimitive", "StkGraphicsVectorPrimitiveFactory", "StkGraphicsVideoStream", "StkGraphicsVideoStreamFactory", 
"StkGraphicsVisualEffects"]

import typing

from ctypes   import byref, POINTER
from datetime import datetime
from enum     import IntEnum, IntFlag

try:
    from numpy import ndarray
except ModuleNotFoundError:
    pass
    
try:
    from pandas import DataFrame
except ModuleNotFoundError:
    pass

from .internal  import comutil          as agcom
from .internal  import coclassutil      as agcls
from .internal  import marshall         as agmarshall
from .internal  import dataanalysisutil as agdata
from .utilities import colors           as agcolor
from .internal.comutil     import IUnknown, IDispatch, IPictureDisp, IAGFUNCTYPE, IEnumVARIANT
from .internal.eventutil   import *
from .utilities.exceptions import *

from .stkutil import *
from .vgt import *


def _raise_uninitialized_error(*args):
    raise STKRuntimeError("Valid STK object model classes are returned from STK methods and should not be created independently.")

class AgEStkGraphicsCylinderFill(IntFlag):
    """Cylinder faces that can be filled."""
    # Fill the cylinder's wall.
    eStkGraphicsCylinderFillWall = 1
    # Fill the cylinder's bottom cap.
    eStkGraphicsCylinderFillBottomCap = 2
    # Fill the cylinder's top cap.
    eStkGraphicsCylinderFillTopCap = 4
    # Completely fill the cylinder, including its wall, bottom, and top cap.
    eStkGraphicsCylinderFillAll = 7

AgEStkGraphicsCylinderFill.eStkGraphicsCylinderFillWall.__doc__ = "Fill the cylinder's wall."
AgEStkGraphicsCylinderFill.eStkGraphicsCylinderFillBottomCap.__doc__ = "Fill the cylinder's bottom cap."
AgEStkGraphicsCylinderFill.eStkGraphicsCylinderFillTopCap.__doc__ = "Fill the cylinder's top cap."
AgEStkGraphicsCylinderFill.eStkGraphicsCylinderFillAll.__doc__ = "Completely fill the cylinder, including its wall, bottom, and top cap."

agcls.AgTypeNameMap["AgEStkGraphicsCylinderFill"] = AgEStkGraphicsCylinderFill

class AgEStkGraphicsWindingOrder(IntEnum):
    """Specifies the order for positions or front facing triangles. Winding order is important for triangulation and backface culling."""
    # Positions or triangles are defined in counter-clockwise order.
    eStkGraphicsWindingOrderCounterClockwise = 0
    # Positions or triangles are defined in clockwise order.
    eStkGraphicsWindingOrderClockwise = 1
    # The winding order is unknown and should be computed. For best performance, only use this value if you do not know the actual winding order.
    eStkGraphicsWindingOrderCompute = 2

AgEStkGraphicsWindingOrder.eStkGraphicsWindingOrderCounterClockwise.__doc__ = "Positions or triangles are defined in counter-clockwise order."
AgEStkGraphicsWindingOrder.eStkGraphicsWindingOrderClockwise.__doc__ = "Positions or triangles are defined in clockwise order."
AgEStkGraphicsWindingOrder.eStkGraphicsWindingOrderCompute.__doc__ = "The winding order is unknown and should be computed. For best performance, only use this value if you do not know the actual winding order."

agcls.AgTypeNameMap["AgEStkGraphicsWindingOrder"] = AgEStkGraphicsWindingOrder

class AgEStkGraphicsCameraSnapshotFileFormat(IntEnum):
    """When using camera snapshot or camera video recording to save a snapshot to a file, this specifies the file format."""
    # BMP file format
    eStkGraphicsCameraSnapshotFileFormatBmp = 0
    # TIFF file format
    eStkGraphicsCameraSnapshotFileFormatTiff = 2
    # JPEG file format
    eStkGraphicsCameraSnapshotFileFormatJpeg = 3
    # PNG file format
    eStkGraphicsCameraSnapshotFileFormatPng = 4

AgEStkGraphicsCameraSnapshotFileFormat.eStkGraphicsCameraSnapshotFileFormatBmp.__doc__ = "BMP file format"
AgEStkGraphicsCameraSnapshotFileFormat.eStkGraphicsCameraSnapshotFileFormatTiff.__doc__ = "TIFF file format"
AgEStkGraphicsCameraSnapshotFileFormat.eStkGraphicsCameraSnapshotFileFormatJpeg.__doc__ = "JPEG file format"
AgEStkGraphicsCameraSnapshotFileFormat.eStkGraphicsCameraSnapshotFileFormatPng.__doc__ = "PNG file format"

agcls.AgTypeNameMap["AgEStkGraphicsCameraSnapshotFileFormat"] = AgEStkGraphicsCameraSnapshotFileFormat

class AgEStkGraphicsCameraVideoFormat(IntEnum):
    """When using camera video recording to record a video, this specifies the file format."""
    # H.264 file format
    eStkGraphicsCameraVideoFormatH264 = 0
    # Windows Media Video (WMV) file format
    eStkGraphicsCameraVideoFormatWMV = 1

AgEStkGraphicsCameraVideoFormat.eStkGraphicsCameraVideoFormatH264.__doc__ = "H.264 file format"
AgEStkGraphicsCameraVideoFormat.eStkGraphicsCameraVideoFormatWMV.__doc__ = "Windows Media Video (WMV) file format"

agcls.AgTypeNameMap["AgEStkGraphicsCameraVideoFormat"] = AgEStkGraphicsCameraVideoFormat

class AgEStkGraphicsConstrainedUpAxis(IntEnum):
    """When setting the camera'saxes, this defines which axis of the axes is up in screen space, where up is from the bottom to the top of the screen."""
    # The X axis is constrained.
    eStkGraphicsConstrainedUpAxisX = 0
    # The Y axis is constrained.
    eStkGraphicsConstrainedUpAxisY = 1
    # The Z axis is constrained.
    eStkGraphicsConstrainedUpAxisZ = 2
    # The negative X axis is constrained.
    eStkGraphicsConstrainedUpAxisNegativeX = 3
    # The negative Y axis is constrained.
    eStkGraphicsConstrainedUpAxisNegativeY = 4
    # The negative Z axis is constrained.
    eStkGraphicsConstrainedUpAxisNegativeZ = 5
    # No axis is contained.
    eStkGraphicsConstrainedUpAxisNone = 6

AgEStkGraphicsConstrainedUpAxis.eStkGraphicsConstrainedUpAxisX.__doc__ = "The X axis is constrained."
AgEStkGraphicsConstrainedUpAxis.eStkGraphicsConstrainedUpAxisY.__doc__ = "The Y axis is constrained."
AgEStkGraphicsConstrainedUpAxis.eStkGraphicsConstrainedUpAxisZ.__doc__ = "The Z axis is constrained."
AgEStkGraphicsConstrainedUpAxis.eStkGraphicsConstrainedUpAxisNegativeX.__doc__ = "The negative X axis is constrained."
AgEStkGraphicsConstrainedUpAxis.eStkGraphicsConstrainedUpAxisNegativeY.__doc__ = "The negative Y axis is constrained."
AgEStkGraphicsConstrainedUpAxis.eStkGraphicsConstrainedUpAxisNegativeZ.__doc__ = "The negative Z axis is constrained."
AgEStkGraphicsConstrainedUpAxis.eStkGraphicsConstrainedUpAxisNone.__doc__ = "No axis is contained."

agcls.AgTypeNameMap["AgEStkGraphicsConstrainedUpAxis"] = AgEStkGraphicsConstrainedUpAxis

class AgEStkGraphicsGlobeOverlayRole(IntEnum):
    """The role of a globe overlay."""
    # The globe overlay is a base image.
    eStkGraphicsGlobeOverlayRoleBase = 0
    # The globe overlay is a base image that is only displayed on the area of the central body that is not lit by the sun.
    eStkGraphicsGlobeOverlayRoleNight = 1
    # The globe overlay is a base image that shows the glint of the sun on the central body.
    eStkGraphicsGlobeOverlayRoleSpecular = 2
    # The globe overlay is a normal overlay without a special role.
    eStkGraphicsGlobeOverlayRoleNormal = 4
    # The role of the globe overlay isn't set.
    eStkGraphicsGlobeOverlayRoleNone = 5

AgEStkGraphicsGlobeOverlayRole.eStkGraphicsGlobeOverlayRoleBase.__doc__ = "The globe overlay is a base image."
AgEStkGraphicsGlobeOverlayRole.eStkGraphicsGlobeOverlayRoleNight.__doc__ = "The globe overlay is a base image that is only displayed on the area of the central body that is not lit by the sun."
AgEStkGraphicsGlobeOverlayRole.eStkGraphicsGlobeOverlayRoleSpecular.__doc__ = "The globe overlay is a base image that shows the glint of the sun on the central body."
AgEStkGraphicsGlobeOverlayRole.eStkGraphicsGlobeOverlayRoleNormal.__doc__ = "The globe overlay is a normal overlay without a special role."
AgEStkGraphicsGlobeOverlayRole.eStkGraphicsGlobeOverlayRoleNone.__doc__ = "The role of the globe overlay isn't set."

agcls.AgTypeNameMap["AgEStkGraphicsGlobeOverlayRole"] = AgEStkGraphicsGlobeOverlayRole

class AgEStkGraphicsIndicesOrderHint(IntEnum):
    """An optimization hint optionally provided to a primitive'sSetPartial method to enhance performance."""
    # The indices passed to SetPartial are not sorted. Therefore, the primitive may sort them to improve performance of writing its geometry to video memory.
    eStkGraphicsIndicesOrderHintNotSorted = 0
    # The indices passed to SetPartial are sorted in ascending order. Therefore, the primitive does not need to sort them. It is recommended to only use SortedAscending if it is easy and efficient for you to provide the indices in ascending order...
    eStkGraphicsIndicesOrderHintSortedAscending = 1

AgEStkGraphicsIndicesOrderHint.eStkGraphicsIndicesOrderHintNotSorted.__doc__ = "The indices passed to SetPartial are not sorted. Therefore, the primitive may sort them to improve performance of writing its geometry to video memory."
AgEStkGraphicsIndicesOrderHint.eStkGraphicsIndicesOrderHintSortedAscending.__doc__ = "The indices passed to SetPartial are sorted in ascending order. Therefore, the primitive does not need to sort them. It is recommended to only use SortedAscending if it is easy and efficient for you to provide the indices in ascending order..."

agcls.AgTypeNameMap["AgEStkGraphicsIndicesOrderHint"] = AgEStkGraphicsIndicesOrderHint

class AgEStkGraphicsMaintainAspectRatio(IntEnum):
    """Specifies whether the aspect ratio of a texture will be maintained during sizing of a screen overlay."""
    # The aspect ratio of the texture is not maintained during sizing of the screen overlay.
    eStkGraphicsMaintainAspectRatioNone = 0
    # The aspect ratio of the texture is maintained based on the width property of the screen overlay. When used, the height property is ignored and the height is automatically calculated based on the aspect ratio of the texture and the overlay's width property.
    eStkGraphicsMaintainAspectRatioWidth = 1
    # The aspect ratio of the texture is maintained based on the height property of the screen overlay. When used, the width property is ignored and the width is automatically calculated based on the aspect ratio of the texture and the overlay's height property.
    eStkGraphicsMaintainAspectRatioHeight = 2

AgEStkGraphicsMaintainAspectRatio.eStkGraphicsMaintainAspectRatioNone.__doc__ = "The aspect ratio of the texture is not maintained during sizing of the screen overlay."
AgEStkGraphicsMaintainAspectRatio.eStkGraphicsMaintainAspectRatioWidth.__doc__ = "The aspect ratio of the texture is maintained based on the width property of the screen overlay. When used, the height property is ignored and the height is automatically calculated based on the aspect ratio of the texture and the overlay's width property."
AgEStkGraphicsMaintainAspectRatio.eStkGraphicsMaintainAspectRatioHeight.__doc__ = "The aspect ratio of the texture is maintained based on the height property of the screen overlay. When used, the width property is ignored and the width is automatically calculated based on the aspect ratio of the texture and the overlay's height property."

agcls.AgTypeNameMap["AgEStkGraphicsMaintainAspectRatio"] = AgEStkGraphicsMaintainAspectRatio

class AgEStkGraphicsMapProjection(IntEnum):
    """The projection of the pixel data returned from a custom image globe overlay."""
    # Mercator projection
    eStkGraphicsMapProjectionMercator = 0
    # Equidistant Cylindrical projection
    eStkGraphicsMapProjectionEquidistantCylindrical = 1

AgEStkGraphicsMapProjection.eStkGraphicsMapProjectionMercator.__doc__ = "Mercator projection"
AgEStkGraphicsMapProjection.eStkGraphicsMapProjectionEquidistantCylindrical.__doc__ = "Equidistant Cylindrical projection"

agcls.AgTypeNameMap["AgEStkGraphicsMapProjection"] = AgEStkGraphicsMapProjection

class AgEStkGraphicsMarkerBatchRenderingMethod(IntEnum):
    """Rendering methods available for use by the marker batch primitive. Different methods may have different performance characteristics and require different video card support. When in doubt, use Automatic."""
    # Render the marker batch using a geometry shader. Requires <a href='http://www.opengl.org/'>OpenGL</a> 3.0 or 2.0 with the <a href='http://www.opengl.org/registry/specs/ARB/geometry_shader4.txt'>ARB_geometry_shader4</a> extension.
    eStkGraphicsMarkerBatchRenderingMethodGeometryShader = 0
    # Render the marker batch using a vertex shader. Requires OpenGL 2.0 or 1.5 with the following <a href='http://www.opengl.org/registry/'>extensions</a>: <ul><li><a href='http://www.opengl.org/registry/specs/ARB/vertex_shader...
    eStkGraphicsMarkerBatchRenderingMethodVertexShader = 1
    # Render the marker batch using an automatically selected method based on the capabilities of the video card.
    eStkGraphicsMarkerBatchRenderingMethodAutomatic = 2
    # Render the marker batch using the fixed function pipeline. Generally, this is the slowest method but it supports all video cards.
    eStkGraphicsMarkerBatchRenderingMethodFixedFunction = 3

AgEStkGraphicsMarkerBatchRenderingMethod.eStkGraphicsMarkerBatchRenderingMethodGeometryShader.__doc__ = "Render the marker batch using a geometry shader. Requires <a href='http://www.opengl.org/'>OpenGL</a> 3.0 or 2.0 with the <a href='http://www.opengl.org/registry/specs/ARB/geometry_shader4.txt'>ARB_geometry_shader4</a> extension."
AgEStkGraphicsMarkerBatchRenderingMethod.eStkGraphicsMarkerBatchRenderingMethodVertexShader.__doc__ = "Render the marker batch using a vertex shader. Requires OpenGL 2.0 or 1.5 with the following <a href='http://www.opengl.org/registry/'>extensions</a>: <ul><li><a href='http://www.opengl.org/registry/specs/ARB/vertex_shader..."
AgEStkGraphicsMarkerBatchRenderingMethod.eStkGraphicsMarkerBatchRenderingMethodAutomatic.__doc__ = "Render the marker batch using an automatically selected method based on the capabilities of the video card."
AgEStkGraphicsMarkerBatchRenderingMethod.eStkGraphicsMarkerBatchRenderingMethodFixedFunction.__doc__ = "Render the marker batch using the fixed function pipeline. Generally, this is the slowest method but it supports all video cards."

agcls.AgTypeNameMap["AgEStkGraphicsMarkerBatchRenderingMethod"] = AgEStkGraphicsMarkerBatchRenderingMethod

class AgEStkGraphicsMarkerBatchRenderPass(IntEnum):
    """The pass during which the marker batch is rendered."""
    # The marker batch contains all opaque textures and therefore should be rendered using the opaque pass.
    eStkGraphicsMarkerBatchRenderPassOpaque = 0
    # The marker batch contains textures with translucency and therefore should be rendered using the translucent pass. For correct blending of overlapping textures, also consider using back to front.
    eStkGraphicsMarkerBatchRenderPassTranslucent = 1
    # The marker batch render pass should be determined based on the marker batch's translucency. This includes the translucency set per marker when SetColors is used.
    eStkGraphicsMarkerBatchRenderPassBasedOnTranslucency = 2

AgEStkGraphicsMarkerBatchRenderPass.eStkGraphicsMarkerBatchRenderPassOpaque.__doc__ = "The marker batch contains all opaque textures and therefore should be rendered using the opaque pass."
AgEStkGraphicsMarkerBatchRenderPass.eStkGraphicsMarkerBatchRenderPassTranslucent.__doc__ = "The marker batch contains textures with translucency and therefore should be rendered using the translucent pass. For correct blending of overlapping textures, also consider using back to front."
AgEStkGraphicsMarkerBatchRenderPass.eStkGraphicsMarkerBatchRenderPassBasedOnTranslucency.__doc__ = "The marker batch render pass should be determined based on the marker batch's translucency. This includes the translucency set per marker when SetColors is used."

agcls.AgTypeNameMap["AgEStkGraphicsMarkerBatchRenderPass"] = AgEStkGraphicsMarkerBatchRenderPass

class AgEStkGraphicsMarkerBatchSizeSource(IntEnum):
    """Determines which marker batch property is used to size each marker in a marker batch."""
    # The size of each marker is the same as the size of its texture. If the marker is not textured, the user defined size is used instead.
    eStkGraphicsMarkerBatchSizeSourceFromTexture = 0
    # The size of each marker in the marker batch is user defined. Either all markers have the same size (size) or each marker has a user defined size (SetSizes).
    eStkGraphicsMarkerBatchSizeSourceUserDefined = 1

AgEStkGraphicsMarkerBatchSizeSource.eStkGraphicsMarkerBatchSizeSourceFromTexture.__doc__ = "The size of each marker is the same as the size of its texture. If the marker is not textured, the user defined size is used instead."
AgEStkGraphicsMarkerBatchSizeSource.eStkGraphicsMarkerBatchSizeSourceUserDefined.__doc__ = "The size of each marker in the marker batch is user defined. Either all markers have the same size (size) or each marker has a user defined size (SetSizes)."

agcls.AgTypeNameMap["AgEStkGraphicsMarkerBatchSizeSource"] = AgEStkGraphicsMarkerBatchSizeSource

class AgEStkGraphicsMarkerBatchSortOrder(IntEnum):
    """The order in which markers in a marker batch are sorted before rendering."""
    # The markers are sorted in back to front order before rendering. For overlapping translucent markers, this enables correct blending results...
    eStkGraphicsMarkerBatchSortOrderBackToFront = 0
    # The markers are sorted in front to back order before rendering. For overlapping opaque markers, this can enable the GPU to quickly eliminate markers that are hidden behind other markers...
    eStkGraphicsMarkerBatchSortOrderFrontToBack = 1
    # The markers are sorted by texture. This minimizes costly texture changes during rendering and does not require resorting when the camera moves or a marker changes position.
    eStkGraphicsMarkerBatchSortOrderByTexture = 2

AgEStkGraphicsMarkerBatchSortOrder.eStkGraphicsMarkerBatchSortOrderBackToFront.__doc__ = "The markers are sorted in back to front order before rendering. For overlapping translucent markers, this enables correct blending results..."
AgEStkGraphicsMarkerBatchSortOrder.eStkGraphicsMarkerBatchSortOrderFrontToBack.__doc__ = "The markers are sorted in front to back order before rendering. For overlapping opaque markers, this can enable the GPU to quickly eliminate markers that are hidden behind other markers..."
AgEStkGraphicsMarkerBatchSortOrder.eStkGraphicsMarkerBatchSortOrderByTexture.__doc__ = "The markers are sorted by texture. This minimizes costly texture changes during rendering and does not require resorting when the camera moves or a marker changes position."

agcls.AgTypeNameMap["AgEStkGraphicsMarkerBatchSortOrder"] = AgEStkGraphicsMarkerBatchSortOrder

class AgEStkGraphicsMarkerBatchUnit(IntEnum):
    """The unit for marker sizes in a marker batch."""
    # The size of a marker is defined in pixels. As the camera zooms in and out the size of the marker doesn't change.
    eStkGraphicsMarkerBatchUnitPixels = 0
    # The size of a marker is defined in meters.
    eStkGraphicsMarkerBatchUnitMeters = 1

AgEStkGraphicsMarkerBatchUnit.eStkGraphicsMarkerBatchUnitPixels.__doc__ = "The size of a marker is defined in pixels. As the camera zooms in and out the size of the marker doesn't change."
AgEStkGraphicsMarkerBatchUnit.eStkGraphicsMarkerBatchUnitMeters.__doc__ = "The size of a marker is defined in meters."

agcls.AgTypeNameMap["AgEStkGraphicsMarkerBatchUnit"] = AgEStkGraphicsMarkerBatchUnit

class AgEStkGraphicsModelTransformationType(IntEnum):
    """Transformation types that define the way a model transformation changes the geometry of the model articulation it is associated with."""
    # Translates the geometry along the X axis.
    eStkGraphicsModelTransformationTypeTranslateX = 0
    # Translates the geometry along the Y axis.
    eStkGraphicsModelTransformationTypeTranslateY = 1
    # Translates the geometry along the Z axis.
    eStkGraphicsModelTransformationTypeTranslateZ = 2
    # Rotates the geometry about the X axis.
    eStkGraphicsModelTransformationTypeRotateX = 3
    # Rotates the geometry about the Y axis.
    eStkGraphicsModelTransformationTypeRotateY = 4
    # Rotates the geometry about the Z axis.
    eStkGraphicsModelTransformationTypeRotateZ = 5
    # Scales the geometry along the X axis.
    eStkGraphicsModelTransformationTypeScaleX = 6
    # Scales the geometry along the Y axis.
    eStkGraphicsModelTransformationTypeScaleY = 7
    # Scales the geometry along the Z axis.
    eStkGraphicsModelTransformationTypeScaleZ = 8
    # Scales the geometry uniformly along the X, Y, and Z axes.
    eStkGraphicsModelTransformationTypeScaleUniform = 9
    # Translates the texture associated with the geometry along the X axis.
    eStkGraphicsModelTransformationTypeTextureTranslateX = 10
    # Translates the texture associated with the geometry along the Y axis.
    eStkGraphicsModelTransformationTypeTextureTranslateY = 11
    # Translates the texture associated with the geometry along the Z axis.
    eStkGraphicsModelTransformationTypeTextureTranslateZ = 12
    # Rotates the texture associated with the geometry about the X axis.
    eStkGraphicsModelTransformationTypeTextureRotateX = 13
    # Rotates the texture associated with the geometry about the Y axis.
    eStkGraphicsModelTransformationTypeTextureRotateY = 14
    # Rotates the texture associated with the geometry about the Z axis.
    eStkGraphicsModelTransformationTypeTextureRotateZ = 15
    # Scales the texture associated with the geometry along the X axis.
    eStkGraphicsModelTransformationTypeTextureScaleX = 16
    # Scales the texture associated with the geometry along the Y axis.
    eStkGraphicsModelTransformationTypeTextureScaleY = 17
    # Scales the texture associated with the geometry along the Z axis.
    eStkGraphicsModelTransformationTypeTextureScaleZ = 18
    # Scales the texture associated with the geometry uniformly along the X, Y, and Z axes.
    eStkGraphicsModelTransformationTypeTextureScaleUniform = 19
    # Translates the red band of color associated with the geometry.
    eStkGraphicsModelTransformationTypeTranslateRed = 20
    # Translates the green band of color associated with the geometry.
    eStkGraphicsModelTransformationTypeTranslateGreen = 21
    # Translates the blue band of color associated with the geometry.
    eStkGraphicsModelTransformationTypeTranslateBlue = 22

AgEStkGraphicsModelTransformationType.eStkGraphicsModelTransformationTypeTranslateX.__doc__ = "Translates the geometry along the X axis."
AgEStkGraphicsModelTransformationType.eStkGraphicsModelTransformationTypeTranslateY.__doc__ = "Translates the geometry along the Y axis."
AgEStkGraphicsModelTransformationType.eStkGraphicsModelTransformationTypeTranslateZ.__doc__ = "Translates the geometry along the Z axis."
AgEStkGraphicsModelTransformationType.eStkGraphicsModelTransformationTypeRotateX.__doc__ = "Rotates the geometry about the X axis."
AgEStkGraphicsModelTransformationType.eStkGraphicsModelTransformationTypeRotateY.__doc__ = "Rotates the geometry about the Y axis."
AgEStkGraphicsModelTransformationType.eStkGraphicsModelTransformationTypeRotateZ.__doc__ = "Rotates the geometry about the Z axis."
AgEStkGraphicsModelTransformationType.eStkGraphicsModelTransformationTypeScaleX.__doc__ = "Scales the geometry along the X axis."
AgEStkGraphicsModelTransformationType.eStkGraphicsModelTransformationTypeScaleY.__doc__ = "Scales the geometry along the Y axis."
AgEStkGraphicsModelTransformationType.eStkGraphicsModelTransformationTypeScaleZ.__doc__ = "Scales the geometry along the Z axis."
AgEStkGraphicsModelTransformationType.eStkGraphicsModelTransformationTypeScaleUniform.__doc__ = "Scales the geometry uniformly along the X, Y, and Z axes."
AgEStkGraphicsModelTransformationType.eStkGraphicsModelTransformationTypeTextureTranslateX.__doc__ = "Translates the texture associated with the geometry along the X axis."
AgEStkGraphicsModelTransformationType.eStkGraphicsModelTransformationTypeTextureTranslateY.__doc__ = "Translates the texture associated with the geometry along the Y axis."
AgEStkGraphicsModelTransformationType.eStkGraphicsModelTransformationTypeTextureTranslateZ.__doc__ = "Translates the texture associated with the geometry along the Z axis."
AgEStkGraphicsModelTransformationType.eStkGraphicsModelTransformationTypeTextureRotateX.__doc__ = "Rotates the texture associated with the geometry about the X axis."
AgEStkGraphicsModelTransformationType.eStkGraphicsModelTransformationTypeTextureRotateY.__doc__ = "Rotates the texture associated with the geometry about the Y axis."
AgEStkGraphicsModelTransformationType.eStkGraphicsModelTransformationTypeTextureRotateZ.__doc__ = "Rotates the texture associated with the geometry about the Z axis."
AgEStkGraphicsModelTransformationType.eStkGraphicsModelTransformationTypeTextureScaleX.__doc__ = "Scales the texture associated with the geometry along the X axis."
AgEStkGraphicsModelTransformationType.eStkGraphicsModelTransformationTypeTextureScaleY.__doc__ = "Scales the texture associated with the geometry along the Y axis."
AgEStkGraphicsModelTransformationType.eStkGraphicsModelTransformationTypeTextureScaleZ.__doc__ = "Scales the texture associated with the geometry along the Z axis."
AgEStkGraphicsModelTransformationType.eStkGraphicsModelTransformationTypeTextureScaleUniform.__doc__ = "Scales the texture associated with the geometry uniformly along the X, Y, and Z axes."
AgEStkGraphicsModelTransformationType.eStkGraphicsModelTransformationTypeTranslateRed.__doc__ = "Translates the red band of color associated with the geometry."
AgEStkGraphicsModelTransformationType.eStkGraphicsModelTransformationTypeTranslateGreen.__doc__ = "Translates the green band of color associated with the geometry."
AgEStkGraphicsModelTransformationType.eStkGraphicsModelTransformationTypeTranslateBlue.__doc__ = "Translates the blue band of color associated with the geometry."

agcls.AgTypeNameMap["AgEStkGraphicsModelTransformationType"] = AgEStkGraphicsModelTransformationType

class AgEStkGraphicsOrigin(IntEnum):
    """Vertical and horizontal origin."""
    # The object's origin is its bottom, left corner.
    eStkGraphicsOriginBottomLeft = 0
    # The object's origin is its bottom, center point.
    eStkGraphicsOriginBottomCenter = 1
    # The object's origin is its bottom, right corner.
    eStkGraphicsOriginBottomRight = 2
    # The object's origin is its center, left point.
    eStkGraphicsOriginCenterLeft = 3
    # The object's origin is its center.
    eStkGraphicsOriginCenter = 4
    # The object's origin is its center, right point.
    eStkGraphicsOriginCenterRight = 5
    # The object's origin is its top, left corner.
    eStkGraphicsOriginTopLeft = 6
    # The object's origin is its top, center point.
    eStkGraphicsOriginTopCenter = 7
    # The object's origin is its top, right corner.
    eStkGraphicsOriginTopRight = 8

AgEStkGraphicsOrigin.eStkGraphicsOriginBottomLeft.__doc__ = "The object's origin is its bottom, left corner."
AgEStkGraphicsOrigin.eStkGraphicsOriginBottomCenter.__doc__ = "The object's origin is its bottom, center point."
AgEStkGraphicsOrigin.eStkGraphicsOriginBottomRight.__doc__ = "The object's origin is its bottom, right corner."
AgEStkGraphicsOrigin.eStkGraphicsOriginCenterLeft.__doc__ = "The object's origin is its center, left point."
AgEStkGraphicsOrigin.eStkGraphicsOriginCenter.__doc__ = "The object's origin is its center."
AgEStkGraphicsOrigin.eStkGraphicsOriginCenterRight.__doc__ = "The object's origin is its center, right point."
AgEStkGraphicsOrigin.eStkGraphicsOriginTopLeft.__doc__ = "The object's origin is its top, left corner."
AgEStkGraphicsOrigin.eStkGraphicsOriginTopCenter.__doc__ = "The object's origin is its top, center point."
AgEStkGraphicsOrigin.eStkGraphicsOriginTopRight.__doc__ = "The object's origin is its top, right corner."

agcls.AgTypeNameMap["AgEStkGraphicsOrigin"] = AgEStkGraphicsOrigin

class AgEStkGraphicsPathPrimitiveRemoveLocation(IntEnum):
    """Represents the location of a point to be removed."""
    # Remove from the front of the line.
    eStkGraphicsRemoveLocationFront = 0
    # Remove from the back of the line.
    eStkGraphicsRemoveLocationBack = 1

AgEStkGraphicsPathPrimitiveRemoveLocation.eStkGraphicsRemoveLocationFront.__doc__ = "Remove from the front of the line."
AgEStkGraphicsPathPrimitiveRemoveLocation.eStkGraphicsRemoveLocationBack.__doc__ = "Remove from the back of the line."

agcls.AgTypeNameMap["AgEStkGraphicsPathPrimitiveRemoveLocation"] = AgEStkGraphicsPathPrimitiveRemoveLocation

class AgEStkGraphicsPrimitivesSortOrder(IntEnum):
    """The order in which primitives are sorted before rendering."""
    # Primitives are sorted by their internal state before rendering. This provides good performance but can lead to blending artifacts with translucent primitives along the same line of sight.
    eStkGraphicsPrimitivesSortOrderByState = 0
    # Primitives are sorted in back to front order before rendering. For translucent primitives, this enables correct blending results. This may not perform as well as PrimitivesSortOrderByState since the CPU has to sort the primitives before rendering.
    eStkGraphicsPrimitivesSortOrderBackToFront = 1

AgEStkGraphicsPrimitivesSortOrder.eStkGraphicsPrimitivesSortOrderByState.__doc__ = "Primitives are sorted by their internal state before rendering. This provides good performance but can lead to blending artifacts with translucent primitives along the same line of sight."
AgEStkGraphicsPrimitivesSortOrder.eStkGraphicsPrimitivesSortOrderBackToFront.__doc__ = "Primitives are sorted in back to front order before rendering. For translucent primitives, this enables correct blending results. This may not perform as well as PrimitivesSortOrderByState since the CPU has to sort the primitives before rendering."

agcls.AgTypeNameMap["AgEStkGraphicsPrimitivesSortOrder"] = AgEStkGraphicsPrimitivesSortOrder

class AgEStkGraphicsRefreshRate(IntEnum):
    """The rate at which animation frames will occur."""
    # The animation will occur as fast as possible. The maximum frame rate is the refresh rate of the display or is the maximum that video card is capable of if the video card's vertical sync is off.
    eStkGraphicsRefreshRateFastest = 0
    # The animation will target a specified frame rate.
    eStkGraphicsRefreshRateTargetedFramesPerSecond = 1

AgEStkGraphicsRefreshRate.eStkGraphicsRefreshRateFastest.__doc__ = "The animation will occur as fast as possible. The maximum frame rate is the refresh rate of the display or is the maximum that video card is capable of if the video card's vertical sync is off."
AgEStkGraphicsRefreshRate.eStkGraphicsRefreshRateTargetedFramesPerSecond.__doc__ = "The animation will target a specified frame rate."

agcls.AgTypeNameMap["AgEStkGraphicsRefreshRate"] = AgEStkGraphicsRefreshRate

class AgEStkGraphicsRenderPass(IntFlag):
    """Describes when a primitive will be rendered. Some primitives need to be rendered during or at a certain time. For example, translucent primitives need to be rendered after opaque primitives to allow proper blending..."""
    # Render during the opaque rendering pass.
    eStkGraphicsRenderPassOpaque = 1
    # Render during the translucent rendering pass.
    eStkGraphicsRenderPassTranslucent = 2
    # Render before the central body is rendered.
    eStkGraphicsRenderPassCentralBodyClipped = 4
    # Rendered in an ordered composite before all other primitives and before the central body is rendered.
    eStkGraphicsRenderPassOrderedCompositeCentralBodyClipped = 8
    # Rendered in an ordered composite before all primitives but after the central body is rendered.
    eStkGraphicsRenderPassOrderedComposite = 16
    # Render after the terrain is rendered.
    eStkGraphicsRenderPassTerrain = 32

AgEStkGraphicsRenderPass.eStkGraphicsRenderPassOpaque.__doc__ = "Render during the opaque rendering pass."
AgEStkGraphicsRenderPass.eStkGraphicsRenderPassTranslucent.__doc__ = "Render during the translucent rendering pass."
AgEStkGraphicsRenderPass.eStkGraphicsRenderPassCentralBodyClipped.__doc__ = "Render before the central body is rendered."
AgEStkGraphicsRenderPass.eStkGraphicsRenderPassOrderedCompositeCentralBodyClipped.__doc__ = "Rendered in an ordered composite before all other primitives and before the central body is rendered."
AgEStkGraphicsRenderPass.eStkGraphicsRenderPassOrderedComposite.__doc__ = "Rendered in an ordered composite before all primitives but after the central body is rendered."
AgEStkGraphicsRenderPass.eStkGraphicsRenderPassTerrain.__doc__ = "Render after the terrain is rendered."

agcls.AgTypeNameMap["AgEStkGraphicsRenderPass"] = AgEStkGraphicsRenderPass

class AgEStkGraphicsRenderPassHint(IntEnum):
    """An optimization hint optionally provided to a primitive'sSet method to enhance performance when per-position colors are used."""
    # The collection of colors contains only opaque colors. This implies that each color's alpha component is 255.
    eStkGraphicsRenderPassHintOpaque = 0
    # The collection of colors contains translucent colors. This implies that at least one color has an alpha component that is not 255.
    eStkGraphicsRenderPassHintTranslucent = 1
    # It is unknown if the collection of colors contains opaque or translucent colors.
    eStkGraphicsRenderPassHintUnknown = 2

AgEStkGraphicsRenderPassHint.eStkGraphicsRenderPassHintOpaque.__doc__ = "The collection of colors contains only opaque colors. This implies that each color's alpha component is 255."
AgEStkGraphicsRenderPassHint.eStkGraphicsRenderPassHintTranslucent.__doc__ = "The collection of colors contains translucent colors. This implies that at least one color has an alpha component that is not 255."
AgEStkGraphicsRenderPassHint.eStkGraphicsRenderPassHintUnknown.__doc__ = "It is unknown if the collection of colors contains opaque or translucent colors."

agcls.AgTypeNameMap["AgEStkGraphicsRenderPassHint"] = AgEStkGraphicsRenderPassHint

class AgEStkGraphicsScreenOverlayOrigin(IntEnum):
    """Specifies the origin of a screen overlay, as well as the direction of the horizontal and vertical axes. The origin specifies both the origin in the parent overlay's coordinate system and the origin within the overlay itself that is positioned."""
    # When the X and Y position are both set to 0, this value places the bottom, left corner of the overlay in its parent's bottom, left corner. Increasing X values move the overlay to the right and increasing Y values move it up.
    eStkGraphicsScreenOverlayOriginBottomLeft = 0
    # When the X and Y position are both set to 0, this value places the bottom edge of the overlay at its parent's bottom edge and the center of the overlay is horizontally centered within its parent...
    eStkGraphicsScreenOverlayOriginBottomCenter = 1
    # When the X and Y position are both set to 0, this value places the bottom, right corner of the overlay in its parent's bottom, right corner. Increasing X values move the overlay to the left and increasing Y values move it up.
    eStkGraphicsScreenOverlayOriginBottomRight = 2
    # When the X and Y position are both set to 0, this value places the left edge of the overlay at its parent's left edge and the center of the overlay is vertically centered within its parent...
    eStkGraphicsScreenOverlayOriginCenterLeft = 3
    # When the X and Y position are both set to 0, this value places the center of the overlay at its parent's center. Increasing X values move the overlay to the right and increasing Y values move it up.
    eStkGraphicsScreenOverlayOriginCenter = 4
    # When the X and Y position are both set to 0, this value places the right edge of the overlay at its parent's right edge and the center of the overlay is vertically centered within its parent...
    eStkGraphicsScreenOverlayOriginCenterRight = 5
    # When the X and Y position are both set to 0, this value places the top, left corner of the overlay in its parent's top, left corner. Increasing X values move the overlay to the right and increasing Y values move it down.
    eStkGraphicsScreenOverlayOriginTopLeft = 6
    # When the X and Y position are both set to 0, this value places the top edge of the overlay at its parent's top edge and the center of the overlay is horizontally centered within its parent...
    eStkGraphicsScreenOverlayOriginTopCenter = 7
    # When the X and Y position are both set to 0, this value places the top, right corner of the overlay in its parent's top, right corner. Increasing X values move the overlay to the left and increasing Y values move it down.
    eStkGraphicsScreenOverlayOriginTopRight = 8

AgEStkGraphicsScreenOverlayOrigin.eStkGraphicsScreenOverlayOriginBottomLeft.__doc__ = "When the X and Y position are both set to 0, this value places the bottom, left corner of the overlay in its parent's bottom, left corner. Increasing X values move the overlay to the right and increasing Y values move it up."
AgEStkGraphicsScreenOverlayOrigin.eStkGraphicsScreenOverlayOriginBottomCenter.__doc__ = "When the X and Y position are both set to 0, this value places the bottom edge of the overlay at its parent's bottom edge and the center of the overlay is horizontally centered within its parent..."
AgEStkGraphicsScreenOverlayOrigin.eStkGraphicsScreenOverlayOriginBottomRight.__doc__ = "When the X and Y position are both set to 0, this value places the bottom, right corner of the overlay in its parent's bottom, right corner. Increasing X values move the overlay to the left and increasing Y values move it up."
AgEStkGraphicsScreenOverlayOrigin.eStkGraphicsScreenOverlayOriginCenterLeft.__doc__ = "When the X and Y position are both set to 0, this value places the left edge of the overlay at its parent's left edge and the center of the overlay is vertically centered within its parent..."
AgEStkGraphicsScreenOverlayOrigin.eStkGraphicsScreenOverlayOriginCenter.__doc__ = "When the X and Y position are both set to 0, this value places the center of the overlay at its parent's center. Increasing X values move the overlay to the right and increasing Y values move it up."
AgEStkGraphicsScreenOverlayOrigin.eStkGraphicsScreenOverlayOriginCenterRight.__doc__ = "When the X and Y position are both set to 0, this value places the right edge of the overlay at its parent's right edge and the center of the overlay is vertically centered within its parent..."
AgEStkGraphicsScreenOverlayOrigin.eStkGraphicsScreenOverlayOriginTopLeft.__doc__ = "When the X and Y position are both set to 0, this value places the top, left corner of the overlay in its parent's top, left corner. Increasing X values move the overlay to the right and increasing Y values move it down."
AgEStkGraphicsScreenOverlayOrigin.eStkGraphicsScreenOverlayOriginTopCenter.__doc__ = "When the X and Y position are both set to 0, this value places the top edge of the overlay at its parent's top edge and the center of the overlay is horizontally centered within its parent..."
AgEStkGraphicsScreenOverlayOrigin.eStkGraphicsScreenOverlayOriginTopRight.__doc__ = "When the X and Y position are both set to 0, this value places the top, right corner of the overlay in its parent's top, right corner. Increasing X values move the overlay to the left and increasing Y values move it down."

agcls.AgTypeNameMap["AgEStkGraphicsScreenOverlayOrigin"] = AgEStkGraphicsScreenOverlayOrigin

class AgEStkGraphicsScreenOverlayPinningOrigin(IntEnum):
    """Specifies the origin of the pinning position of the screen overlay, as well as the direction of the horizontal and vertical axes for that pinning position. The pinning origin specifies the origin of the pinning position in the overlay's coordinate system."""
    # When the X and Y pinning position are both set to 0, this value places the pinning position in the overlay's bottom, left corner. Increasing X values move the pinning position to the right and increasing Y values move it up.
    eStkGraphicsScreenOverlayPinningOriginBottomLeft = 0
    # When the X and Y pinning position are both set to 0, this value places the pinning position at its overlay's bottom edge and the pinning position is horizontally centered within its overlay...
    eStkGraphicsScreenOverlayPinningOriginBottomCenter = 1
    # When the X and Y pinning position are both set to 0, this value places the pinning position in its overlay's bottom, right corner. Increasing X values move the pinning position to the left and increasing Y values move it up.
    eStkGraphicsScreenOverlayPinningOriginBottomRight = 2
    # When the X and Y pinning position are both set to 0, this value places the pinning position at its overlay's left edge and the pinning position is vertically centered within its overlay...
    eStkGraphicsScreenOverlayPinningOriginCenterLeft = 3
    # When the X and Y pinning position are both set to 0, this value places the pinning position at its overlay's center. Increasing X values move the pinning position to the right and increasing Y values move it up.
    eStkGraphicsScreenOverlayPinningOriginCenter = 4
    # When the X and Y pinning pinning position are both set to 0, this value places the pinning position at its overlay's right edge and the pinning position is vertically centered within its overlay...
    eStkGraphicsScreenOverlayPinningOriginCenterRight = 5
    # When the X and Y pinning position are both set to 0, this value places the pinning position in its overlay's top, left corner. Increasing X values move the pinning position to the right and increasing Y values move it down.
    eStkGraphicsScreenOverlayPinningOriginTopLeft = 6
    # When the X and Y pinning position are both set to 0, this value places the pinning position at its overlays's top edge and the pinning position is horizontally centered within its overlay...
    eStkGraphicsScreenOverlayPinningOriginTopCenter = 7
    # When the X and Y pinning position are both set to 0, this value places the pinning position in its overlay's top, right corner. Increasing X values move the pinning position to the left and increasing Y values move it down.
    eStkGraphicsScreenOverlayPinningOriginTopRight = 8
    # The pinning origin is automatically set to the origin of the overlay. For instance, if the origin of the overlay is ScreenOverlayOrigin.BottomLeft, the pinning origin will also be equivalent to ScreenOverlayPinningOrigin.BottomLeft.
    eStkGraphicsScreenOverlayPinningOriginAutomatic = 9

AgEStkGraphicsScreenOverlayPinningOrigin.eStkGraphicsScreenOverlayPinningOriginBottomLeft.__doc__ = "When the X and Y pinning position are both set to 0, this value places the pinning position in the overlay's bottom, left corner. Increasing X values move the pinning position to the right and increasing Y values move it up."
AgEStkGraphicsScreenOverlayPinningOrigin.eStkGraphicsScreenOverlayPinningOriginBottomCenter.__doc__ = "When the X and Y pinning position are both set to 0, this value places the pinning position at its overlay's bottom edge and the pinning position is horizontally centered within its overlay..."
AgEStkGraphicsScreenOverlayPinningOrigin.eStkGraphicsScreenOverlayPinningOriginBottomRight.__doc__ = "When the X and Y pinning position are both set to 0, this value places the pinning position in its overlay's bottom, right corner. Increasing X values move the pinning position to the left and increasing Y values move it up."
AgEStkGraphicsScreenOverlayPinningOrigin.eStkGraphicsScreenOverlayPinningOriginCenterLeft.__doc__ = "When the X and Y pinning position are both set to 0, this value places the pinning position at its overlay's left edge and the pinning position is vertically centered within its overlay..."
AgEStkGraphicsScreenOverlayPinningOrigin.eStkGraphicsScreenOverlayPinningOriginCenter.__doc__ = "When the X and Y pinning position are both set to 0, this value places the pinning position at its overlay's center. Increasing X values move the pinning position to the right and increasing Y values move it up."
AgEStkGraphicsScreenOverlayPinningOrigin.eStkGraphicsScreenOverlayPinningOriginCenterRight.__doc__ = "When the X and Y pinning pinning position are both set to 0, this value places the pinning position at its overlay's right edge and the pinning position is vertically centered within its overlay..."
AgEStkGraphicsScreenOverlayPinningOrigin.eStkGraphicsScreenOverlayPinningOriginTopLeft.__doc__ = "When the X and Y pinning position are both set to 0, this value places the pinning position in its overlay's top, left corner. Increasing X values move the pinning position to the right and increasing Y values move it down."
AgEStkGraphicsScreenOverlayPinningOrigin.eStkGraphicsScreenOverlayPinningOriginTopCenter.__doc__ = "When the X and Y pinning position are both set to 0, this value places the pinning position at its overlays's top edge and the pinning position is horizontally centered within its overlay..."
AgEStkGraphicsScreenOverlayPinningOrigin.eStkGraphicsScreenOverlayPinningOriginTopRight.__doc__ = "When the X and Y pinning position are both set to 0, this value places the pinning position in its overlay's top, right corner. Increasing X values move the pinning position to the left and increasing Y values move it down."
AgEStkGraphicsScreenOverlayPinningOrigin.eStkGraphicsScreenOverlayPinningOriginAutomatic.__doc__ = "The pinning origin is automatically set to the origin of the overlay. For instance, if the origin of the overlay is ScreenOverlayOrigin.BottomLeft, the pinning origin will also be equivalent to ScreenOverlayPinningOrigin.BottomLeft."

agcls.AgTypeNameMap["AgEStkGraphicsScreenOverlayPinningOrigin"] = AgEStkGraphicsScreenOverlayPinningOrigin

class AgEStkGraphicsScreenOverlayUnit(IntEnum):
    """A unit specifying how a screen overlay is sized and positioned relative to its parent."""
    # The value is specified in pixels.
    eStkGraphicsScreenOverlayUnitPixels = 0
    # The value is specified as a fraction of the overlay's parent, where 0.0 is 0% and 1.0 is 100%.
    eStkGraphicsScreenOverlayUnitFraction = 1

AgEStkGraphicsScreenOverlayUnit.eStkGraphicsScreenOverlayUnitPixels.__doc__ = "The value is specified in pixels."
AgEStkGraphicsScreenOverlayUnit.eStkGraphicsScreenOverlayUnitFraction.__doc__ = "The value is specified as a fraction of the overlay's parent, where 0.0 is 0% and 1.0 is 100%."

agcls.AgTypeNameMap["AgEStkGraphicsScreenOverlayUnit"] = AgEStkGraphicsScreenOverlayUnit

class AgEStkGraphicsSurfaceMeshRenderingMethod(IntEnum):
    """Rendering methods available for use by the surface mesh primitive. Different methods may have different performance characteristics and require different video card support. When in doubt, use Automatic."""
    # Render the surface mesh using a geometry shader. Requires <a href='http://www.opengl.org/'>OpenGL</a> 3.0 or 2.0 with the <a href='http://www.opengl.org/registry/specs/ARB/geometry_shader4.txt'>ARB_geometry_shader4</a> extension.
    eStkGraphicsSurfaceMeshRenderingMethodGeometryShader = 0
    # Render the surface mesh using a vertex shader. Requires OpenGL 2.0 or 1.5 with the following <a href='http://www.opengl.org/registry/'>extensions</a>: <ul><li><a href='http://www.opengl.org/registry/specs/ARB/vertex_shader...
    eStkGraphicsSurfaceMeshRenderingMethodVertexShader = 1
    # Render the surface mesh using an automatically selected method based on the capabilities of the video card.
    eStkGraphicsSurfaceMeshRenderingMethodAutomatic = 2

AgEStkGraphicsSurfaceMeshRenderingMethod.eStkGraphicsSurfaceMeshRenderingMethodGeometryShader.__doc__ = "Render the surface mesh using a geometry shader. Requires <a href='http://www.opengl.org/'>OpenGL</a> 3.0 or 2.0 with the <a href='http://www.opengl.org/registry/specs/ARB/geometry_shader4.txt'>ARB_geometry_shader4</a> extension."
AgEStkGraphicsSurfaceMeshRenderingMethod.eStkGraphicsSurfaceMeshRenderingMethodVertexShader.__doc__ = "Render the surface mesh using a vertex shader. Requires OpenGL 2.0 or 1.5 with the following <a href='http://www.opengl.org/registry/'>extensions</a>: <ul><li><a href='http://www.opengl.org/registry/specs/ARB/vertex_shader..."
AgEStkGraphicsSurfaceMeshRenderingMethod.eStkGraphicsSurfaceMeshRenderingMethodAutomatic.__doc__ = "Render the surface mesh using an automatically selected method based on the capabilities of the video card."

agcls.AgTypeNameMap["AgEStkGraphicsSurfaceMeshRenderingMethod"] = AgEStkGraphicsSurfaceMeshRenderingMethod

class AgEStkGraphicsVisibility(IntEnum):
    """Result of a visibility test, such as testing if a sphere intersects a frustum."""
    # The object is not visible.
    eStkGraphicsVisibilityNone = 0
    # The object is partially visible.
    eStkGraphicsVisibilityPartial = 1
    # The object is completely visible.
    eStkGraphicsVisibilityAll = 2

AgEStkGraphicsVisibility.eStkGraphicsVisibilityNone.__doc__ = "The object is not visible."
AgEStkGraphicsVisibility.eStkGraphicsVisibilityPartial.__doc__ = "The object is partially visible."
AgEStkGraphicsVisibility.eStkGraphicsVisibilityAll.__doc__ = "The object is completely visible."

agcls.AgTypeNameMap["AgEStkGraphicsVisibility"] = AgEStkGraphicsVisibility

class AgEStkGraphicsAntiAliasing(IntEnum):
    """The multisample anti-aliasing (MSAA) options for Scenes. As the level of anti-aliasing increases, performance will generally decrease, but the quality of the anti-aliasing will improve."""
    # No anti-aliasing
    eStkGraphicsAntiAliasingOff = 0
    # Fast Approximate Anti aliasing
    eStkGraphicsAntiAliasingFXAA = 1
    # Anti-aliasing at 2x
    eStkGraphicsAntiAliasingTwoX = 2
    # Anti-aliasing at 4x
    eStkGraphicsAntiAliasingFourX = 4
    # Anti-aliasing at 8x
    eStkGraphicsAntiAliasingEightX = 8
    # Anti-aliasing at 16x
    eStkGraphicsAntiAliasingSixteenX = 16
    # Anti-aliasing at 32x
    eStkGraphicsAntiAliasingThirtyTwoX = 32
    # Anti-aliasing at 64x
    eStkGraphicsAntiAliasingSixtyFourX = 64

AgEStkGraphicsAntiAliasing.eStkGraphicsAntiAliasingOff.__doc__ = "No anti-aliasing"
AgEStkGraphicsAntiAliasing.eStkGraphicsAntiAliasingFXAA.__doc__ = "Fast Approximate Anti aliasing"
AgEStkGraphicsAntiAliasing.eStkGraphicsAntiAliasingTwoX.__doc__ = "Anti-aliasing at 2x"
AgEStkGraphicsAntiAliasing.eStkGraphicsAntiAliasingFourX.__doc__ = "Anti-aliasing at 4x"
AgEStkGraphicsAntiAliasing.eStkGraphicsAntiAliasingEightX.__doc__ = "Anti-aliasing at 8x"
AgEStkGraphicsAntiAliasing.eStkGraphicsAntiAliasingSixteenX.__doc__ = "Anti-aliasing at 16x"
AgEStkGraphicsAntiAliasing.eStkGraphicsAntiAliasingThirtyTwoX.__doc__ = "Anti-aliasing at 32x"
AgEStkGraphicsAntiAliasing.eStkGraphicsAntiAliasingSixtyFourX.__doc__ = "Anti-aliasing at 64x"

agcls.AgTypeNameMap["AgEStkGraphicsAntiAliasing"] = AgEStkGraphicsAntiAliasing

class AgEStkGraphicsBinaryLogicOperation(IntEnum):
    """Binary logic operations that can be used by composite display condition."""
    # Logically and together display conditions in the composite.
    eStkGraphicsBinaryLogicOperationAnd = 0
    # Logically or together display conditions in the composite.
    eStkGraphicsBinaryLogicOperationOr = 1

AgEStkGraphicsBinaryLogicOperation.eStkGraphicsBinaryLogicOperationAnd.__doc__ = "Logically and together display conditions in the composite."
AgEStkGraphicsBinaryLogicOperation.eStkGraphicsBinaryLogicOperationOr.__doc__ = "Logically or together display conditions in the composite."

agcls.AgTypeNameMap["AgEStkGraphicsBinaryLogicOperation"] = AgEStkGraphicsBinaryLogicOperation

class AgEStkGraphicsBlurMethod(IntEnum):
    """The method used to blur or smooth a raster."""
    # Provides smoothing and noise reduction through mean filtering.
    eStkGraphicsBlurMethodMean = 0
    # Provides basic blurring.
    eStkGraphicsBlurMethodBasic = 1

AgEStkGraphicsBlurMethod.eStkGraphicsBlurMethodMean.__doc__ = "Provides smoothing and noise reduction through mean filtering."
AgEStkGraphicsBlurMethod.eStkGraphicsBlurMethodBasic.__doc__ = "Provides basic blurring."

agcls.AgTypeNameMap["AgEStkGraphicsBlurMethod"] = AgEStkGraphicsBlurMethod

class AgEStkGraphicsEdgeDetectMethod(IntEnum):
    """The method used to detect edges in a raster."""
    # Detects vertical edges.
    eStkGraphicsEdgeDetectMethodVertical = 0
    # Detects horizontal edges.
    eStkGraphicsEdgeDetectMethodHorizontal = 1
    # Detects left diagonal edges.
    eStkGraphicsEdgeDetectMethodLeftDiagonal = 2
    # Detects right diagonal edges.
    eStkGraphicsEdgeDetectMethodRightDiagonal = 3
    # Detects edges using the Laplacian method.
    eStkGraphicsEdgeDetectMethodLaplacian = 4
    # Detects edges using the Prewitt-Laplacian method.
    eStkGraphicsEdgeDetectMethodPrewittLaplacian = 5
    # Detects vertical edges using the Sobel method.
    eStkGraphicsEdgeDetectMethodSobelVertical = 6
    # Detects horizontal edges using the Sobel method.
    eStkGraphicsEdgeDetectMethodSobelHorizontal = 7

AgEStkGraphicsEdgeDetectMethod.eStkGraphicsEdgeDetectMethodVertical.__doc__ = "Detects vertical edges."
AgEStkGraphicsEdgeDetectMethod.eStkGraphicsEdgeDetectMethodHorizontal.__doc__ = "Detects horizontal edges."
AgEStkGraphicsEdgeDetectMethod.eStkGraphicsEdgeDetectMethodLeftDiagonal.__doc__ = "Detects left diagonal edges."
AgEStkGraphicsEdgeDetectMethod.eStkGraphicsEdgeDetectMethodRightDiagonal.__doc__ = "Detects right diagonal edges."
AgEStkGraphicsEdgeDetectMethod.eStkGraphicsEdgeDetectMethodLaplacian.__doc__ = "Detects edges using the Laplacian method."
AgEStkGraphicsEdgeDetectMethod.eStkGraphicsEdgeDetectMethodPrewittLaplacian.__doc__ = "Detects edges using the Prewitt-Laplacian method."
AgEStkGraphicsEdgeDetectMethod.eStkGraphicsEdgeDetectMethodSobelVertical.__doc__ = "Detects vertical edges using the Sobel method."
AgEStkGraphicsEdgeDetectMethod.eStkGraphicsEdgeDetectMethodSobelHorizontal.__doc__ = "Detects horizontal edges using the Sobel method."

agcls.AgTypeNameMap["AgEStkGraphicsEdgeDetectMethod"] = AgEStkGraphicsEdgeDetectMethod

class AgEStkGraphicsFlipAxis(IntEnum):
    """The axis on which a raster will be flipped."""
    # The horizontal axis.
    eStkGraphicsFlipAxisHorizontal = 0
    # The vertical axis.
    eStkGraphicsFlipAxisVertical = 1

AgEStkGraphicsFlipAxis.eStkGraphicsFlipAxisHorizontal.__doc__ = "The horizontal axis."
AgEStkGraphicsFlipAxis.eStkGraphicsFlipAxisVertical.__doc__ = "The vertical axis."

agcls.AgTypeNameMap["AgEStkGraphicsFlipAxis"] = AgEStkGraphicsFlipAxis

class AgEStkGraphicsGradientDetectMethod(IntEnum):
    """The method used to detect gradients in a raster. Gradient detection is commonly referred to as embossing."""
    # Detects east gradients.
    eStkGraphicsGradientDetectMethodEast = 0
    # Detects north gradients.
    eStkGraphicsGradientDetectMethodNorth = 1
    # Detects west gradients.
    eStkGraphicsGradientDetectMethodWest = 2
    # Detects south gradients.
    eStkGraphicsGradientDetectMethodSouth = 3
    # Detects north east gradients.
    eStkGraphicsGradientDetectMethodNorthEast = 4
    # Detects north west gradients.
    eStkGraphicsGradientDetectMethodNorthWest = 5
    # Detects south east gradients.
    eStkGraphicsGradientDetectMethodSouthEast = 6
    # Detects south west gradients.
    eStkGraphicsGradientDetectMethodSouthWest = 7

AgEStkGraphicsGradientDetectMethod.eStkGraphicsGradientDetectMethodEast.__doc__ = "Detects east gradients."
AgEStkGraphicsGradientDetectMethod.eStkGraphicsGradientDetectMethodNorth.__doc__ = "Detects north gradients."
AgEStkGraphicsGradientDetectMethod.eStkGraphicsGradientDetectMethodWest.__doc__ = "Detects west gradients."
AgEStkGraphicsGradientDetectMethod.eStkGraphicsGradientDetectMethodSouth.__doc__ = "Detects south gradients."
AgEStkGraphicsGradientDetectMethod.eStkGraphicsGradientDetectMethodNorthEast.__doc__ = "Detects north east gradients."
AgEStkGraphicsGradientDetectMethod.eStkGraphicsGradientDetectMethodNorthWest.__doc__ = "Detects north west gradients."
AgEStkGraphicsGradientDetectMethod.eStkGraphicsGradientDetectMethodSouthEast.__doc__ = "Detects south east gradients."
AgEStkGraphicsGradientDetectMethod.eStkGraphicsGradientDetectMethodSouthWest.__doc__ = "Detects south west gradients."

agcls.AgTypeNameMap["AgEStkGraphicsGradientDetectMethod"] = AgEStkGraphicsGradientDetectMethod

class AgEStkGraphicsJpeg2000CompressionProfile(IntEnum):
    """Defines the profile used when encoding a JPEG 2000 file."""
    # This is the default profile, which is recommended for those unfamiliar with the others.
    eStkGraphicsJpeg2000CompressionProfileDefault = 0
    # This profile is designed for U.S. and NATO military applications.
    eStkGraphicsJpeg2000CompressionProfileNITF_BIIF_NPJE = 1
    # This profile is designed for U.S. and NATO military applications. Based on NPJE, the profile is used for image exploitation, and improves image read times for lower resolutions in large images as compared to NPJE.
    eStkGraphicsJpeg2000CompressionProfileNITF_BIIF_EPJE = 2

AgEStkGraphicsJpeg2000CompressionProfile.eStkGraphicsJpeg2000CompressionProfileDefault.__doc__ = "This is the default profile, which is recommended for those unfamiliar with the others."
AgEStkGraphicsJpeg2000CompressionProfile.eStkGraphicsJpeg2000CompressionProfileNITF_BIIF_NPJE.__doc__ = "This profile is designed for U.S. and NATO military applications."
AgEStkGraphicsJpeg2000CompressionProfile.eStkGraphicsJpeg2000CompressionProfileNITF_BIIF_EPJE.__doc__ = "This profile is designed for U.S. and NATO military applications. Based on NPJE, the profile is used for image exploitation, and improves image read times for lower resolutions in large images as compared to NPJE."

agcls.AgTypeNameMap["AgEStkGraphicsJpeg2000CompressionProfile"] = AgEStkGraphicsJpeg2000CompressionProfile

class AgEStkGraphicsRasterBand(IntEnum):
    """Common band types that may be contained within a raster dataset. Each band can be thought of as a set of values, which are most commonly associated with colors when the raster represents an image..."""
    # A band containing red values.
    eStkGraphicsRasterBandRed = 0
    # A band containing green values.
    eStkGraphicsRasterBandGreen = 1
    # A band containing blue values.
    eStkGraphicsRasterBandBlue = 2
    # A band containing alpha values.
    eStkGraphicsRasterBandAlpha = 3
    # A band containing luminance values.
    eStkGraphicsRasterBandLuminance = 4

AgEStkGraphicsRasterBand.eStkGraphicsRasterBandRed.__doc__ = "A band containing red values."
AgEStkGraphicsRasterBand.eStkGraphicsRasterBandGreen.__doc__ = "A band containing green values."
AgEStkGraphicsRasterBand.eStkGraphicsRasterBandBlue.__doc__ = "A band containing blue values."
AgEStkGraphicsRasterBand.eStkGraphicsRasterBandAlpha.__doc__ = "A band containing alpha values."
AgEStkGraphicsRasterBand.eStkGraphicsRasterBandLuminance.__doc__ = "A band containing luminance values."

agcls.AgTypeNameMap["AgEStkGraphicsRasterBand"] = AgEStkGraphicsRasterBand

class AgEStkGraphicsRasterFormat(IntEnum):
    """Common raster band layouts that may be contained within a raster dataset. Each pixel of the raster will contain the bands defined by the layout in the specified order. A typical color raster image will have an rgbraster format."""
    # The format of the raster is a single band consisting of red values.
    eStkGraphicsRasterFormatRed = 0
    # The format of the raster is a single band consisting of green values.
    eStkGraphicsRasterFormatGreen = 1
    # The format of the raster is a single band consisting of blue values.
    eStkGraphicsRasterFormatBlue = 2
    # The format of the raster is a single band consisting of alpha values.
    eStkGraphicsRasterFormatAlpha = 3
    # The format of the raster is three bands consisting of red, green, and blue values.
    eStkGraphicsRasterFormatRgb = 4
    # The format of the raster is three bands consisting of blue, green, and red values.
    eStkGraphicsRasterFormatBgr = 5
    # The format of the raster is four bands consisting of red, green, blue, and alpha values.
    eStkGraphicsRasterFormatRgba = 6
    # The format of the raster is four bands consisting of blue, green, red, and alpha values.
    eStkGraphicsRasterFormatBgra = 7
    # The format of the raster is a single band consisting of luminance values.
    eStkGraphicsRasterFormatLuminance = 8
    # The format of the raster is two bands consisting of luminance and alpha values.
    eStkGraphicsRasterFormatLuminanceAlpha = 9

AgEStkGraphicsRasterFormat.eStkGraphicsRasterFormatRed.__doc__ = "The format of the raster is a single band consisting of red values."
AgEStkGraphicsRasterFormat.eStkGraphicsRasterFormatGreen.__doc__ = "The format of the raster is a single band consisting of green values."
AgEStkGraphicsRasterFormat.eStkGraphicsRasterFormatBlue.__doc__ = "The format of the raster is a single band consisting of blue values."
AgEStkGraphicsRasterFormat.eStkGraphicsRasterFormatAlpha.__doc__ = "The format of the raster is a single band consisting of alpha values."
AgEStkGraphicsRasterFormat.eStkGraphicsRasterFormatRgb.__doc__ = "The format of the raster is three bands consisting of red, green, and blue values."
AgEStkGraphicsRasterFormat.eStkGraphicsRasterFormatBgr.__doc__ = "The format of the raster is three bands consisting of blue, green, and red values."
AgEStkGraphicsRasterFormat.eStkGraphicsRasterFormatRgba.__doc__ = "The format of the raster is four bands consisting of red, green, blue, and alpha values."
AgEStkGraphicsRasterFormat.eStkGraphicsRasterFormatBgra.__doc__ = "The format of the raster is four bands consisting of blue, green, red, and alpha values."
AgEStkGraphicsRasterFormat.eStkGraphicsRasterFormatLuminance.__doc__ = "The format of the raster is a single band consisting of luminance values."
AgEStkGraphicsRasterFormat.eStkGraphicsRasterFormatLuminanceAlpha.__doc__ = "The format of the raster is two bands consisting of luminance and alpha values."

agcls.AgTypeNameMap["AgEStkGraphicsRasterFormat"] = AgEStkGraphicsRasterFormat

class AgEStkGraphicsRasterOrientation(IntEnum):
    """The vertical orientation of the raster."""
    # The raster has a top to bottom orientation.
    eStkGraphicsRasterOrientationTopToBottom = 0
    # The raster has a bottom to top orientation.
    eStkGraphicsRasterOrientationBottomToTop = 1

AgEStkGraphicsRasterOrientation.eStkGraphicsRasterOrientationTopToBottom.__doc__ = "The raster has a top to bottom orientation."
AgEStkGraphicsRasterOrientation.eStkGraphicsRasterOrientationBottomToTop.__doc__ = "The raster has a bottom to top orientation."

agcls.AgTypeNameMap["AgEStkGraphicsRasterOrientation"] = AgEStkGraphicsRasterOrientation

class AgEStkGraphicsRasterType(IntEnum):
    """The type of data contained within each band of a raster dataset."""
    # Each value contained within a band can be represented with an unsigned byte.
    eStkGraphicsRasterTypeUnsignedByte = 0
    # Each value contained within a band can be represented with a byte.
    eStkGraphicsRasterTypeByte = 1
    # Each value contained within a band can be represented with an unsigned short.
    eStkGraphicsRasterTypeUnsignedShort = 2
    # Each value contained within a band can be represented with a short.
    eStkGraphicsRasterTypeShort = 3
    # Each value contained within a band can be represented with an unsigned int.
    eStkGraphicsRasterTypeUnsignedInt = 4
    # Each value contained within a band can be represented with an int.
    eStkGraphicsRasterTypeInt = 5
    # Each value contained within a band can be represented with a float.
    eStkGraphicsRasterTypeFloat = 6
    # Each value contained within a band can be represented with a double.
    eStkGraphicsRasterTypeDouble = 7

AgEStkGraphicsRasterType.eStkGraphicsRasterTypeUnsignedByte.__doc__ = "Each value contained within a band can be represented with an unsigned byte."
AgEStkGraphicsRasterType.eStkGraphicsRasterTypeByte.__doc__ = "Each value contained within a band can be represented with a byte."
AgEStkGraphicsRasterType.eStkGraphicsRasterTypeUnsignedShort.__doc__ = "Each value contained within a band can be represented with an unsigned short."
AgEStkGraphicsRasterType.eStkGraphicsRasterTypeShort.__doc__ = "Each value contained within a band can be represented with a short."
AgEStkGraphicsRasterType.eStkGraphicsRasterTypeUnsignedInt.__doc__ = "Each value contained within a band can be represented with an unsigned int."
AgEStkGraphicsRasterType.eStkGraphicsRasterTypeInt.__doc__ = "Each value contained within a band can be represented with an int."
AgEStkGraphicsRasterType.eStkGraphicsRasterTypeFloat.__doc__ = "Each value contained within a band can be represented with a float."
AgEStkGraphicsRasterType.eStkGraphicsRasterTypeDouble.__doc__ = "Each value contained within a band can be represented with a double."

agcls.AgTypeNameMap["AgEStkGraphicsRasterType"] = AgEStkGraphicsRasterType

class AgEStkGraphicsSharpenMethod(IntEnum):
    """The method used to sharpen a raster."""
    # Provides sharpening through mean removal.
    eStkGraphicsSharpenMethodMeanRemoval = 0
    # Provides basic sharpening.
    eStkGraphicsSharpenMethodBasic = 1

AgEStkGraphicsSharpenMethod.eStkGraphicsSharpenMethodMeanRemoval.__doc__ = "Provides sharpening through mean removal."
AgEStkGraphicsSharpenMethod.eStkGraphicsSharpenMethodBasic.__doc__ = "Provides basic sharpening."

agcls.AgTypeNameMap["AgEStkGraphicsSharpenMethod"] = AgEStkGraphicsSharpenMethod

class AgEStkGraphicsVideoPlayback(IntEnum):
    """Specifies how the video stream will playback. When the playback is set to real time, the video will playback in real time..."""
    # The video will playback in realtime.
    eStkGraphicsVideoPlaybackRealTime = 0
    # The video will playback in coincidence with the scene manager time within the interval defined by interval start time and interval end time.
    eStkGraphicsVideoPlaybackTimeInterval = 1

AgEStkGraphicsVideoPlayback.eStkGraphicsVideoPlaybackRealTime.__doc__ = "The video will playback in realtime."
AgEStkGraphicsVideoPlayback.eStkGraphicsVideoPlaybackTimeInterval.__doc__ = "The video will playback in coincidence with the scene manager time within the interval defined by interval start time and interval end time."

agcls.AgTypeNameMap["AgEStkGraphicsVideoPlayback"] = AgEStkGraphicsVideoPlayback

class AgEStkGraphicsKmlNetworkLinkRefreshMode(IntEnum):
    """Defines the options available for a KmlNetworkLink's RefreshMode property."""
    # Refresh when the document is loaded and whenever the Link parameters change (the default).
    eStkGraphicsKmlNetworkLinkRefreshModeOnChange = 0
    # Refresh the network link at the duration specified by refresh interval.
    eStkGraphicsKmlNetworkLinkRefreshModeOnInterval = 1
    # Refresh the network link when the expiration time is reached.
    eStkGraphicsKmlNetworkLinkRefreshModeOnExpire = 2

AgEStkGraphicsKmlNetworkLinkRefreshMode.eStkGraphicsKmlNetworkLinkRefreshModeOnChange.__doc__ = "Refresh when the document is loaded and whenever the Link parameters change (the default)."
AgEStkGraphicsKmlNetworkLinkRefreshMode.eStkGraphicsKmlNetworkLinkRefreshModeOnInterval.__doc__ = "Refresh the network link at the duration specified by refresh interval."
AgEStkGraphicsKmlNetworkLinkRefreshMode.eStkGraphicsKmlNetworkLinkRefreshModeOnExpire.__doc__ = "Refresh the network link when the expiration time is reached."

agcls.AgTypeNameMap["AgEStkGraphicsKmlNetworkLinkRefreshMode"] = AgEStkGraphicsKmlNetworkLinkRefreshMode

class AgEStkGraphicsKmlNetworkLinkViewRefreshMode(IntEnum):
    """Defines the options available for a KmlNetworkLink's ViewRefreshMode property."""
    # Do not refresh the network link when the camera's view changes.
    eStkGraphicsKmlNetworkLinkViewRefreshModeNever = 0
    # Only refresh the network link when it is explicitly refreshed by calling the refresh method.
    eStkGraphicsKmlNetworkLinkViewRefreshModeOnRequest = 1
    # Refresh the network link after camera view movement stops for the duration specified by view refresh time.
    eStkGraphicsKmlNetworkLinkViewRefreshModeOnStop = 2
    # Refreshes the network link when the region associated with this link becomes active.
    eStkGraphicsKmlNetworkLinkViewRefreshModeOnRegion = 3

AgEStkGraphicsKmlNetworkLinkViewRefreshMode.eStkGraphicsKmlNetworkLinkViewRefreshModeNever.__doc__ = "Do not refresh the network link when the camera's view changes."
AgEStkGraphicsKmlNetworkLinkViewRefreshMode.eStkGraphicsKmlNetworkLinkViewRefreshModeOnRequest.__doc__ = "Only refresh the network link when it is explicitly refreshed by calling the refresh method."
AgEStkGraphicsKmlNetworkLinkViewRefreshMode.eStkGraphicsKmlNetworkLinkViewRefreshModeOnStop.__doc__ = "Refresh the network link after camera view movement stops for the duration specified by view refresh time."
AgEStkGraphicsKmlNetworkLinkViewRefreshMode.eStkGraphicsKmlNetworkLinkViewRefreshModeOnRegion.__doc__ = "Refreshes the network link when the region associated with this link becomes active."

agcls.AgTypeNameMap["AgEStkGraphicsKmlNetworkLinkViewRefreshMode"] = AgEStkGraphicsKmlNetworkLinkViewRefreshMode

class AgEStkGraphicsModelUpAxis(IntEnum):
    """When setting the camera'saxes, this defines which axis of the axes is up in screen space, where up is from the bottom to the top of the screen."""
    # The positive X axis.
    eStkGraphicsModelUpAxisX = 0
    # The positive Y axis.
    eStkGraphicsModelUpAxisY = 1
    # The positive Z axis.
    eStkGraphicsModelUpAxisZ = 2
    # The negative X axis.
    eStkGraphicsModelUpAxisNegativeX = 3
    # The negative Y axis.
    eStkGraphicsModelUpAxisNegativeY = 4
    # The negative Z axis.
    eStkGraphicsModelUpAxisNegativeZ = 5

AgEStkGraphicsModelUpAxis.eStkGraphicsModelUpAxisX.__doc__ = "The positive X axis."
AgEStkGraphicsModelUpAxis.eStkGraphicsModelUpAxisY.__doc__ = "The positive Y axis."
AgEStkGraphicsModelUpAxis.eStkGraphicsModelUpAxisZ.__doc__ = "The positive Z axis."
AgEStkGraphicsModelUpAxis.eStkGraphicsModelUpAxisNegativeX.__doc__ = "The negative X axis."
AgEStkGraphicsModelUpAxis.eStkGraphicsModelUpAxisNegativeY.__doc__ = "The negative Y axis."
AgEStkGraphicsModelUpAxis.eStkGraphicsModelUpAxisNegativeZ.__doc__ = "The negative Z axis."

agcls.AgTypeNameMap["AgEStkGraphicsModelUpAxis"] = AgEStkGraphicsModelUpAxis

class AgEStkGraphicsOutlineAppearance(IntEnum):
    """Possible appearances of an outline. Front lines are lines on front facing geometry and back lines are lines on back facing geometry."""
    # Both the front and back lines are displayed.
    eStkGraphicsFrontAndBackLines = 0
    # Only the front lines are displayed. This can be used to declutter the outline.
    eStkGraphicsFrontLinesOnly = 1
    # Both the front and back lines are displayed. The back lines are displayed using a different color, translucency, and width. This is used to declutter the outline but still provide a visual cue for the back facing geometry.
    eStkGraphicsStylizeBackLines = 2

AgEStkGraphicsOutlineAppearance.eStkGraphicsFrontAndBackLines.__doc__ = "Both the front and back lines are displayed."
AgEStkGraphicsOutlineAppearance.eStkGraphicsFrontLinesOnly.__doc__ = "Only the front lines are displayed. This can be used to declutter the outline."
AgEStkGraphicsOutlineAppearance.eStkGraphicsStylizeBackLines.__doc__ = "Both the front and back lines are displayed. The back lines are displayed using a different color, translucency, and width. This is used to declutter the outline but still provide a visual cue for the back facing geometry."

agcls.AgTypeNameMap["AgEStkGraphicsOutlineAppearance"] = AgEStkGraphicsOutlineAppearance

class AgEStkGraphicsPolylineType(IntEnum):
    """Describes how to interpret positions defining a polyline."""
    # Every two positions define a line segment. Line segments are not required to be connected to each other.
    eStkGraphicsPolylineTypeLines = 0
    # After the first position, each additional position defines a line segment from the previous position to the current position.
    eStkGraphicsPolylineTypeLineStrip = 1
    # Lines are drawn as points.
    eStkGraphicsPolylineTypePoints = 2

AgEStkGraphicsPolylineType.eStkGraphicsPolylineTypeLines.__doc__ = "Every two positions define a line segment. Line segments are not required to be connected to each other."
AgEStkGraphicsPolylineType.eStkGraphicsPolylineTypeLineStrip.__doc__ = "After the first position, each additional position defines a line segment from the previous position to the current position."
AgEStkGraphicsPolylineType.eStkGraphicsPolylineTypePoints.__doc__ = "Lines are drawn as points."

agcls.AgTypeNameMap["AgEStkGraphicsPolylineType"] = AgEStkGraphicsPolylineType

class AgEStkGraphicsCullFace(IntEnum):
    """Identifies whether front- and/or back-facing triangles are culled."""
    # Front-facing triangles are culled.
    eStkGraphicsECullFaceFront = 0
    # Back-facing triangles are culled.
    eStkGraphicsECullFaceBack = 1
    # Both front- and back-facing triangles are culled. Therefore, no triangles are rendered.
    eStkGraphicsECullFaceFrontAndBack = 2
    # No triangles are culled.
    eStkGraphicsECullFaceNeither = 3

AgEStkGraphicsCullFace.eStkGraphicsECullFaceFront.__doc__ = "Front-facing triangles are culled."
AgEStkGraphicsCullFace.eStkGraphicsECullFaceBack.__doc__ = "Back-facing triangles are culled."
AgEStkGraphicsCullFace.eStkGraphicsECullFaceFrontAndBack.__doc__ = "Both front- and back-facing triangles are culled. Therefore, no triangles are rendered."
AgEStkGraphicsCullFace.eStkGraphicsECullFaceNeither.__doc__ = "No triangles are culled."

agcls.AgTypeNameMap["AgEStkGraphicsCullFace"] = AgEStkGraphicsCullFace

class AgEStkGraphicsInternalTextureFormat(IntEnum):
    """The format of individual texels in a texture."""
    # Each texel is an 4-bit alpha component.
    eStkGraphicsInternalTextureFormatAlpha4 = 0
    # Each texel is an 8-bit alpha component.
    eStkGraphicsInternalTextureFormatAlpha8 = 1
    # Each texel is an 12-bit alpha component.
    eStkGraphicsInternalTextureFormatAlpha12 = 2
    # Each texel is an 16-bit alpha component.
    eStkGraphicsInternalTextureFormatAlpha16 = 3
    # Each texel contains 3-bit red and green components and 2-bit blue component.
    eStkGraphicsInternalTextureFormatR3G3B2 = 4
    # Each texel contains 4-bit red, green, and blue components.
    eStkGraphicsInternalTextureFormatRgb4 = 5
    # Each texel contains 5-bit red, green, and blue components.
    eStkGraphicsInternalTextureFormatRgb5 = 6
    # Each texel contains 8-bit red, green, and blue components.
    eStkGraphicsInternalTextureFormatRgb8 = 7
    # Each texel contains 10-bit red, green, and blue components.
    eStkGraphicsInternalTextureFormatRgb10 = 8
    # Each texel contains 12-bit red, green, and blue components.
    eStkGraphicsInternalTextureFormatRgb12 = 9
    # Each texel contains 16-bit red, green, and blue components.
    eStkGraphicsInternalTextureFormatRgb16 = 10
    # Each texel contains 16-bit red, green, and blue floating point components.
    eStkGraphicsInternalTextureFormatRgb16F = 11
    # Each texel contains 32-bit red, green, and blue floating point components.
    eStkGraphicsInternalTextureFormatRgb32F = 12
    # Each texel contains 2-bit red, green, blue, and alpha components.
    eStkGraphicsInternalTextureFormatRgba2 = 13
    # Each texel contains 4-bit red, green, blue, and alpha components.
    eStkGraphicsInternalTextureFormatRgba4 = 14
    # Each texel contains 5-bit red, green, blue components and 1-bit alpha component.
    eStkGraphicsInternalTextureFormatRgb5A1 = 15
    # Each texel contains 8-bit red, green, blue, and alpha components.
    eStkGraphicsInternalTextureFormatRgba8 = 16
    # Each texel contains 10-bit red, green, blue components and 2-bit alpha component.
    eStkGraphicsInternalTextureFormatRgb10A2 = 17
    # Each texel contains 12-bit red, green, blue, and alpha components.
    eStkGraphicsInternalTextureFormatRgba12 = 18
    # Each texel contains 16-bit red, green, blue, and alpha components.
    eStkGraphicsInternalTextureFormatRgba16 = 19
    # Each texel contains 16-bit red, green, blue, and alpha floating point components.
    eStkGraphicsInternalTextureFormatRgba16F = 20
    # Each texel contains 32-bit red, green, blue, and alpha floating point components.
    eStkGraphicsInternalTextureFormatRgba32F = 21
    # Each texel is an 4-bit luminance, e.g. intensity, component.
    eStkGraphicsInternalTextureFormatLuminance4 = 22
    # Each texel is an 8-bit luminance, e.g. intensity, component.
    eStkGraphicsInternalTextureFormatLuminance8 = 23
    # Each texel is an 12-bit luminance, e.g. intensity, component.
    eStkGraphicsInternalTextureFormatLuminance12 = 24
    # Each texel is an 16-bit luminance, e.g. intensity, component.
    eStkGraphicsInternalTextureFormatLuminance16 = 25
    # Each texel is an 16-bit luminance, e.g. intensity, floating point component.
    eStkGraphicsInternalTextureFormatLuminance16F = 26
    # Each texel is an 32-bit luminance, e.g. intensity, floating point component.
    eStkGraphicsInternalTextureFormatLuminance32F = 27
    # Each texel contains an 4-bit luminance and 4-bit alpha component.
    eStkGraphicsInternalTextureFormatLuminance4Alpha4 = 28
    # Each texel contains an 6-bit luminance and 2-bit alpha component.
    eStkGraphicsInternalTextureFormatLuminance6Alpha2 = 29
    # Each texel contains an 8-bit luminance and 8-bit alpha component.
    eStkGraphicsInternalTextureFormatLuminance8Alpha8 = 30
    # Each texel contains an 12-bit luminance and 4-bit alpha component.
    eStkGraphicsInternalTextureFormatLuminance12Alpha4 = 31
    # Each texel contains an 12-bit luminance and 12-bit alpha component.
    eStkGraphicsInternalTextureFormatLuminance12Alpha12 = 32
    # Each texel contains an 16-bit luminance and 16-bit alpha component.
    eStkGraphicsInternalTextureFormatLuminance16Alpha16 = 33
    # Each texel contains an 16-bit luminance and 16-bit alpha floating point component.
    eStkGraphicsInternalTextureFormatLuminance16Alpha16F = 34
    # Each texel contains an 32-bit luminance and 32-bit alpha floating point component.
    eStkGraphicsInternalTextureFormatLuminance32Alpha32F = 35

AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatAlpha4.__doc__ = "Each texel is an 4-bit alpha component."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatAlpha8.__doc__ = "Each texel is an 8-bit alpha component."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatAlpha12.__doc__ = "Each texel is an 12-bit alpha component."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatAlpha16.__doc__ = "Each texel is an 16-bit alpha component."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatR3G3B2.__doc__ = "Each texel contains 3-bit red and green components and 2-bit blue component."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatRgb4.__doc__ = "Each texel contains 4-bit red, green, and blue components."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatRgb5.__doc__ = "Each texel contains 5-bit red, green, and blue components."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatRgb8.__doc__ = "Each texel contains 8-bit red, green, and blue components."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatRgb10.__doc__ = "Each texel contains 10-bit red, green, and blue components."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatRgb12.__doc__ = "Each texel contains 12-bit red, green, and blue components."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatRgb16.__doc__ = "Each texel contains 16-bit red, green, and blue components."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatRgb16F.__doc__ = "Each texel contains 16-bit red, green, and blue floating point components."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatRgb32F.__doc__ = "Each texel contains 32-bit red, green, and blue floating point components."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatRgba2.__doc__ = "Each texel contains 2-bit red, green, blue, and alpha components."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatRgba4.__doc__ = "Each texel contains 4-bit red, green, blue, and alpha components."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatRgb5A1.__doc__ = "Each texel contains 5-bit red, green, blue components and 1-bit alpha component."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatRgba8.__doc__ = "Each texel contains 8-bit red, green, blue, and alpha components."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatRgb10A2.__doc__ = "Each texel contains 10-bit red, green, blue components and 2-bit alpha component."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatRgba12.__doc__ = "Each texel contains 12-bit red, green, blue, and alpha components."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatRgba16.__doc__ = "Each texel contains 16-bit red, green, blue, and alpha components."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatRgba16F.__doc__ = "Each texel contains 16-bit red, green, blue, and alpha floating point components."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatRgba32F.__doc__ = "Each texel contains 32-bit red, green, blue, and alpha floating point components."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatLuminance4.__doc__ = "Each texel is an 4-bit luminance, e.g. intensity, component."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatLuminance8.__doc__ = "Each texel is an 8-bit luminance, e.g. intensity, component."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatLuminance12.__doc__ = "Each texel is an 12-bit luminance, e.g. intensity, component."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatLuminance16.__doc__ = "Each texel is an 16-bit luminance, e.g. intensity, component."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatLuminance16F.__doc__ = "Each texel is an 16-bit luminance, e.g. intensity, floating point component."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatLuminance32F.__doc__ = "Each texel is an 32-bit luminance, e.g. intensity, floating point component."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatLuminance4Alpha4.__doc__ = "Each texel contains an 4-bit luminance and 4-bit alpha component."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatLuminance6Alpha2.__doc__ = "Each texel contains an 6-bit luminance and 2-bit alpha component."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatLuminance8Alpha8.__doc__ = "Each texel contains an 8-bit luminance and 8-bit alpha component."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatLuminance12Alpha4.__doc__ = "Each texel contains an 12-bit luminance and 4-bit alpha component."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatLuminance12Alpha12.__doc__ = "Each texel contains an 12-bit luminance and 12-bit alpha component."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatLuminance16Alpha16.__doc__ = "Each texel contains an 16-bit luminance and 16-bit alpha component."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatLuminance16Alpha16F.__doc__ = "Each texel contains an 16-bit luminance and 16-bit alpha floating point component."
AgEStkGraphicsInternalTextureFormat.eStkGraphicsInternalTextureFormatLuminance32Alpha32F.__doc__ = "Each texel contains an 32-bit luminance and 32-bit alpha floating point component."

agcls.AgTypeNameMap["AgEStkGraphicsInternalTextureFormat"] = AgEStkGraphicsInternalTextureFormat

class AgEStkGraphicsMagnificationFilter(IntEnum):
    """The filter used when the pixel being textured maps to an area less than or equal to one texel."""
    # Use the texel that is closest to the center of the pixel being textured. This usually faster than Linear but can produce images with sharper edges.
    eStkGraphicsMagnificationFilterNearest = 0
    # Use the weighted average of the four texels that are closest to the center of the pixel being textured.
    eStkGraphicsMagnificationFilterLinear = 1

AgEStkGraphicsMagnificationFilter.eStkGraphicsMagnificationFilterNearest.__doc__ = "Use the texel that is closest to the center of the pixel being textured. This usually faster than Linear but can produce images with sharper edges."
AgEStkGraphicsMagnificationFilter.eStkGraphicsMagnificationFilterLinear.__doc__ = "Use the weighted average of the four texels that are closest to the center of the pixel being textured."

agcls.AgTypeNameMap["AgEStkGraphicsMagnificationFilter"] = AgEStkGraphicsMagnificationFilter

class AgEStkGraphicsMinificationFilter(IntEnum):
    """The filter used when the pixel being textured maps to an area greater than one texel."""
    # Use the texel that is closest to the center of the pixel being textured.
    eStkGraphicsMinificationFilterNearest = 0
    # Use the weighted average of the four (for 2D textures, two for 1D textures) texels that are closest to the center of the pixel being textured.
    eStkGraphicsMinificationFilterLinear = 1
    # Use the mipmap that most closely matches the size of the pixel being textured. Then use the texel from that mipmap that is closest to the center of the pixel being textured.
    eStkGraphicsMinificationFilterNearestMipMapNearest = 2
    # Use the mipmap that most closely matches the size of the pixel being textured. Then use the weighted average of the four (for 2D textures, two for 1D textures) texels from that mipmap that are closest to the center of the pixel being textured.
    eStkGraphicsMinificationFilterLinearMipMapNearest = 3
    # Use the two mipmaps that most closely match the size of the pixel being textured. Determine the texel that is closest to the center of the pixel being textured in each mipmap. The final texture value is a weighted average of these two texels.
    eStkGraphicsMinificationFilterNearestMipMapLinear = 4
    # Use the two mipmaps that most closely match the size of the pixel being textured. Determine the weighted average of the four (for 2D textures, two for 1D textures) texels that are closest to the center of the pixel being textured in each mipmap...
    eStkGraphicsMinificationFilterLinearMipMapLinear = 5

AgEStkGraphicsMinificationFilter.eStkGraphicsMinificationFilterNearest.__doc__ = "Use the texel that is closest to the center of the pixel being textured."
AgEStkGraphicsMinificationFilter.eStkGraphicsMinificationFilterLinear.__doc__ = "Use the weighted average of the four (for 2D textures, two for 1D textures) texels that are closest to the center of the pixel being textured."
AgEStkGraphicsMinificationFilter.eStkGraphicsMinificationFilterNearestMipMapNearest.__doc__ = "Use the mipmap that most closely matches the size of the pixel being textured. Then use the texel from that mipmap that is closest to the center of the pixel being textured."
AgEStkGraphicsMinificationFilter.eStkGraphicsMinificationFilterLinearMipMapNearest.__doc__ = "Use the mipmap that most closely matches the size of the pixel being textured. Then use the weighted average of the four (for 2D textures, two for 1D textures) texels from that mipmap that are closest to the center of the pixel being textured."
AgEStkGraphicsMinificationFilter.eStkGraphicsMinificationFilterNearestMipMapLinear.__doc__ = "Use the two mipmaps that most closely match the size of the pixel being textured. Determine the texel that is closest to the center of the pixel being textured in each mipmap. The final texture value is a weighted average of these two texels."
AgEStkGraphicsMinificationFilter.eStkGraphicsMinificationFilterLinearMipMapLinear.__doc__ = "Use the two mipmaps that most closely match the size of the pixel being textured. Determine the weighted average of the four (for 2D textures, two for 1D textures) texels that are closest to the center of the pixel being textured in each mipmap..."

agcls.AgTypeNameMap["AgEStkGraphicsMinificationFilter"] = AgEStkGraphicsMinificationFilter

class AgEStkGraphicsRendererShadeModel(IntEnum):
    """Identifies which shade model to use. The primitive can be drawn with a single color or multiple colors."""
    # Flat shading renders the primitive with one color across all of the vertices.
    eStkGraphicsRendererShadeModelFlat = 0
    # Gouraud shading renders the primitive by interpolating the color between the vertices.
    eStkGraphicsRendererShadeModelGouraud = 1

AgEStkGraphicsRendererShadeModel.eStkGraphicsRendererShadeModelFlat.__doc__ = "Flat shading renders the primitive with one color across all of the vertices."
AgEStkGraphicsRendererShadeModel.eStkGraphicsRendererShadeModelGouraud.__doc__ = "Gouraud shading renders the primitive by interpolating the color between the vertices."

agcls.AgTypeNameMap["AgEStkGraphicsRendererShadeModel"] = AgEStkGraphicsRendererShadeModel

class AgEStkGraphicsTextureWrap(IntEnum):
    """Determine how to handle textures coordinates that fall outside of the range [0, 1]."""
    # Clamp the texture coordinate to the range [0, 1].
    eStkGraphicsTextureWrapClamp = 0
    # Clamp the texture coordinate to the range [-1/2N, 1 + 1/2N], where N is the size the texture in the direction of clamping.
    eStkGraphicsTextureWrapClampToBorder = 1
    # Clamp the texture coordinate to the range [1/2N, 1 - 1/2N], where N is the size the texture in the direction of clamping.
    eStkGraphicsTextureWrapClampToEdge = 2
    # If the integer part of the texture coordinate is even, use the fractional part of the texture coordinate. Otherwise, use one minus the fractional part of the texture coordinate.
    eStkGraphicsTextureWrapMirroredRepeat = 3
    # Ignore the integer part of the texture coordinate.
    eStkGraphicsTextureWrapRepeat = 4

AgEStkGraphicsTextureWrap.eStkGraphicsTextureWrapClamp.__doc__ = "Clamp the texture coordinate to the range [0, 1]."
AgEStkGraphicsTextureWrap.eStkGraphicsTextureWrapClampToBorder.__doc__ = "Clamp the texture coordinate to the range [-1/2N, 1 + 1/2N], where N is the size the texture in the direction of clamping."
AgEStkGraphicsTextureWrap.eStkGraphicsTextureWrapClampToEdge.__doc__ = "Clamp the texture coordinate to the range [1/2N, 1 - 1/2N], where N is the size the texture in the direction of clamping."
AgEStkGraphicsTextureWrap.eStkGraphicsTextureWrapMirroredRepeat.__doc__ = "If the integer part of the texture coordinate is even, use the fractional part of the texture coordinate. Otherwise, use one minus the fractional part of the texture coordinate."
AgEStkGraphicsTextureWrap.eStkGraphicsTextureWrapRepeat.__doc__ = "Ignore the integer part of the texture coordinate."

agcls.AgTypeNameMap["AgEStkGraphicsTextureWrap"] = AgEStkGraphicsTextureWrap

class AgEStkGraphicsSetHint(IntEnum):
    """An optimization hint optionally provided to primitives to enhance performance for static or dynamic primitives. See the Set Hint Performance Overview for selecting an appropriate value."""
    # Rendering is optimized for static geometry. The primitive's vertices are not going to be updated with Set() or SetPartial() calls. Calls to SetPartial() will fail. Calls to Set() are allowed but may not be as efficient as SetHintFrequent.
    eStkGraphicsSetHintInfrequent = 0
    # Rendering is optimized for dynamic geometry. The primitive's vertices are expected to be updated with SetPartial() - some or all of the vertices will change but the number of vertices will not.
    eStkGraphicsSetHintPartial = 1
    # Rendering is optimized for streaming geometry. The primitive's vertices are expected to be updated with Set() - all the vertices will change and/or the number of vertices will change. Calls to SetPartial() will fail.
    eStkGraphicsSetHintFrequent = 2

AgEStkGraphicsSetHint.eStkGraphicsSetHintInfrequent.__doc__ = "Rendering is optimized for static geometry. The primitive's vertices are not going to be updated with Set() or SetPartial() calls. Calls to SetPartial() will fail. Calls to Set() are allowed but may not be as efficient as SetHintFrequent."
AgEStkGraphicsSetHint.eStkGraphicsSetHintPartial.__doc__ = "Rendering is optimized for dynamic geometry. The primitive's vertices are expected to be updated with SetPartial() - some or all of the vertices will change but the number of vertices will not."
AgEStkGraphicsSetHint.eStkGraphicsSetHintFrequent.__doc__ = "Rendering is optimized for streaming geometry. The primitive's vertices are expected to be updated with Set() - all the vertices will change and/or the number of vertices will change. Calls to SetPartial() will fail."

agcls.AgTypeNameMap["AgEStkGraphicsSetHint"] = AgEStkGraphicsSetHint

class AgEStkGraphicsStereoProjectionMode(IntEnum):
    """The stereoscopic projection mode used for the left and right eye scenes."""
    # Parallel projection. Parallel projection will ignore any projection distance that has been set and instead use a parallel projection for each eye. In parallel mode all objects will appear to go into the screen...
    eStkGraphicsStereoProjectionParallel = 0
    # Fixed distance projection. Objects at the fixed distance will appear to have no depth. Objects further than the distance will appear to go into the screen. Objects nearer than the distance will appear to pop out of the screen.
    eStkGraphicsStereoProjectionFixedDistance = 1
    # Automatic distance projection. Automatic distance projection will ignore any projection distance that has been set and instead automatically calculates the projection distance based on the distance between the camera and the center of the scene.
    eStkGraphicsStereoProjectionAutomatic = 2

AgEStkGraphicsStereoProjectionMode.eStkGraphicsStereoProjectionParallel.__doc__ = "Parallel projection. Parallel projection will ignore any projection distance that has been set and instead use a parallel projection for each eye. In parallel mode all objects will appear to go into the screen..."
AgEStkGraphicsStereoProjectionMode.eStkGraphicsStereoProjectionFixedDistance.__doc__ = "Fixed distance projection. Objects at the fixed distance will appear to have no depth. Objects further than the distance will appear to go into the screen. Objects nearer than the distance will appear to pop out of the screen."
AgEStkGraphicsStereoProjectionMode.eStkGraphicsStereoProjectionAutomatic.__doc__ = "Automatic distance projection. Automatic distance projection will ignore any projection distance that has been set and instead automatically calculates the projection distance based on the distance between the camera and the center of the scene."

agcls.AgTypeNameMap["AgEStkGraphicsStereoProjectionMode"] = AgEStkGraphicsStereoProjectionMode

class AgEStkGraphicsStereoscopicDisplayMode(IntEnum):
    """The stereoscopic display mode. To use a particular stereoscopic display mode, ensure that your system supports the feature and that it is enabled."""
    # No stereoscopic
    eStkGraphicsStereoscopicDisplayModeOff = 0
    # OpenGL Quad-buffer stereoscopic
    eStkGraphicsStereoscopicDisplayModeQuadBuffer = 1
    # Anaglyph or two-color stereoscopic
    eStkGraphicsStereoscopicDisplayModeAnaglyph = 2
    # Left eye view of the stereoscopic scene
    eStkGraphicsStereoscopicDisplayModeLeftEye = 3
    # Right eye view of the stereoscopic scene
    eStkGraphicsStereoscopicDisplayModeRightEye = 4
    # Side-by-side stereoscopic. Left and right eye views are rendered next to each other in the same window.
    eStkGraphicsStereoscopicDisplayModeSideBySide = 5

AgEStkGraphicsStereoscopicDisplayMode.eStkGraphicsStereoscopicDisplayModeOff.__doc__ = "No stereoscopic"
AgEStkGraphicsStereoscopicDisplayMode.eStkGraphicsStereoscopicDisplayModeQuadBuffer.__doc__ = "OpenGL Quad-buffer stereoscopic"
AgEStkGraphicsStereoscopicDisplayMode.eStkGraphicsStereoscopicDisplayModeAnaglyph.__doc__ = "Anaglyph or two-color stereoscopic"
AgEStkGraphicsStereoscopicDisplayMode.eStkGraphicsStereoscopicDisplayModeLeftEye.__doc__ = "Left eye view of the stereoscopic scene"
AgEStkGraphicsStereoscopicDisplayMode.eStkGraphicsStereoscopicDisplayModeRightEye.__doc__ = "Right eye view of the stereoscopic scene"
AgEStkGraphicsStereoscopicDisplayMode.eStkGraphicsStereoscopicDisplayModeSideBySide.__doc__ = "Side-by-side stereoscopic. Left and right eye views are rendered next to each other in the same window."

agcls.AgTypeNameMap["AgEStkGraphicsStereoscopicDisplayMode"] = AgEStkGraphicsStereoscopicDisplayMode

class AgEStkGraphicsFontStyle(IntEnum):
    """Font styles."""
    # Regular font.
    eStkGraphicsFontStyleRegular = 0x0
    # Bold font.
    eStkGraphicsFontStyleBold = 0x1
    # Italic font.
    eStkGraphicsFontStyleItalic = 0x2
    # Underlined font.
    eStkGraphicsFontStyleUnderline = 0x4
    # Strike-out style.
    eStkGraphicsFontStyleStrikeout = 0x8

AgEStkGraphicsFontStyle.eStkGraphicsFontStyleRegular.__doc__ = "Regular font."
AgEStkGraphicsFontStyle.eStkGraphicsFontStyleBold.__doc__ = "Bold font."
AgEStkGraphicsFontStyle.eStkGraphicsFontStyleItalic.__doc__ = "Italic font."
AgEStkGraphicsFontStyle.eStkGraphicsFontStyleUnderline.__doc__ = "Underlined font."
AgEStkGraphicsFontStyle.eStkGraphicsFontStyleStrikeout.__doc__ = "Strike-out style."

agcls.AgTypeNameMap["AgEStkGraphicsFontStyle"] = AgEStkGraphicsFontStyle


class IStkGraphicsPathPoint(object):
    """A path point used with the Path Primitive."""
    _uuid = "{9107fca2-51b8-4347-9391-9ee6c6b792e3}"
    _num_methods = 12
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetPosition"] = _raise_uninitialized_error
        self.__dict__["_SetPosition"] = _raise_uninitialized_error
        self.__dict__["_GetDate"] = _raise_uninitialized_error
        self.__dict__["_GetColor"] = _raise_uninitialized_error
        self.__dict__["_SetColor"] = _raise_uninitialized_error
        self.__dict__["_GetTranslucency"] = _raise_uninitialized_error
        self.__dict__["_SetTranslucency"] = _raise_uninitialized_error
        self.__dict__["_GetOutlineColor"] = _raise_uninitialized_error
        self.__dict__["_SetOutlineColor"] = _raise_uninitialized_error
        self.__dict__["_GetOutlineTranslucency"] = _raise_uninitialized_error
        self.__dict__["_SetOutlineTranslucency"] = _raise_uninitialized_error
        self.__dict__["_GetIsTranslucent"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsPathPoint._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsPathPoint from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsPathPoint = agcom.GUID(IStkGraphicsPathPoint._uuid)
        vtable_offset_local = IStkGraphicsPathPoint._vtable_offset - 1
        self.__dict__["_GetPosition"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPathPoint, vtable_offset_local+1, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetPosition"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPathPoint, vtable_offset_local+2, agcom.SAFEARRAY)
        self.__dict__["_GetDate"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPathPoint, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_GetColor"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPathPoint, vtable_offset_local+4, POINTER(agcom.OLE_COLOR))
        self.__dict__["_SetColor"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPathPoint, vtable_offset_local+5, agcom.OLE_COLOR)
        self.__dict__["_GetTranslucency"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPathPoint, vtable_offset_local+6, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTranslucency"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPathPoint, vtable_offset_local+7, agcom.DOUBLE)
        self.__dict__["_GetOutlineColor"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPathPoint, vtable_offset_local+8, POINTER(agcom.OLE_COLOR))
        self.__dict__["_SetOutlineColor"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPathPoint, vtable_offset_local+9, agcom.OLE_COLOR)
        self.__dict__["_GetOutlineTranslucency"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPathPoint, vtable_offset_local+10, POINTER(agcom.DOUBLE))
        self.__dict__["_SetOutlineTranslucency"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPathPoint, vtable_offset_local+11, agcom.DOUBLE)
        self.__dict__["_GetIsTranslucent"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPathPoint, vtable_offset_local+12, POINTER(agcom.VARIANT_BOOL))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsPathPoint.__dict__ and type(IStkGraphicsPathPoint.__dict__[attrname]) == property:
            return IStkGraphicsPathPoint.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsPathPoint.")
    
    @property
    def Position(self) -> list:
        """A path point position as a one-dimensional array of three elements corresponding to (X,Y,Z) cartesian coordinates."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPosition"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @Position.setter
    def Position(self, position:list) -> None:
        with agmarshall.SAFEARRAY_arg(position) as arg_position:
            agcls.evaluate_hresult(self.__dict__["_SetPosition"](arg_position.COM_val))

    @property
    def Date(self) -> "IDate":
        """A date/time of the path point."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDate"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Color(self) -> agcolor.Color:
        """The path point color."""
        with agmarshall.OLE_COLOR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetColor"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Color.setter
    def Color(self, color:agcolor.Color) -> None:
        with agmarshall.OLE_COLOR_arg(color) as arg_color:
            agcls.evaluate_hresult(self.__dict__["_SetColor"](arg_color.COM_val))

    @property
    def Translucency(self) -> float:
        """The path point translucency."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTranslucency"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Translucency.setter
    def Translucency(self, translucency:float) -> None:
        with agmarshall.DOUBLE_arg(translucency) as arg_translucency:
            agcls.evaluate_hresult(self.__dict__["_SetTranslucency"](arg_translucency.COM_val))

    @property
    def OutlineColor(self) -> agcolor.Color:
        """The path point outline color."""
        with agmarshall.OLE_COLOR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetOutlineColor"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @OutlineColor.setter
    def OutlineColor(self, outlineColor:agcolor.Color) -> None:
        with agmarshall.OLE_COLOR_arg(outlineColor) as arg_outlineColor:
            agcls.evaluate_hresult(self.__dict__["_SetOutlineColor"](arg_outlineColor.COM_val))

    @property
    def OutlineTranslucency(self) -> float:
        """The path point outline translucency."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetOutlineTranslucency"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @OutlineTranslucency.setter
    def OutlineTranslucency(self, outlineTranslucency:float) -> None:
        with agmarshall.DOUBLE_arg(outlineTranslucency) as arg_outlineTranslucency:
            agcls.evaluate_hresult(self.__dict__["_SetOutlineTranslucency"](arg_outlineTranslucency.COM_val))

    @property
    def IsTranslucent(self) -> bool:
        """Whether the path point is translucent."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetIsTranslucent"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{9107fca2-51b8-4347-9391-9ee6c6b792e3}", IStkGraphicsPathPoint)
agcls.AgTypeNameMap["IStkGraphicsPathPoint"] = IStkGraphicsPathPoint

class IStkGraphicsPathPointFactory(object):
    """Creates Path Primitive's path points."""
    _uuid = "{efb486c4-09f0-4918-b051-7776acd13f66}"
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithDate"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithDateAndPosition"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithDatePositionAndColor"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithDatePositionColorAndTranslucency"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsPathPointFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsPathPointFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsPathPointFactory = agcom.GUID(IStkGraphicsPathPointFactory._uuid)
        vtable_offset_local = IStkGraphicsPathPointFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPathPointFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithDate"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPathPointFactory, vtable_offset_local+2, agcom.PVOID, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithDateAndPosition"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPathPointFactory, vtable_offset_local+3, agcom.PVOID, POINTER(agcom.SAFEARRAY), POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithDatePositionAndColor"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPathPointFactory, vtable_offset_local+4, agcom.PVOID, POINTER(agcom.SAFEARRAY), agcom.OLE_COLOR, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithDatePositionColorAndTranslucency"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPathPointFactory, vtable_offset_local+5, agcom.PVOID, POINTER(agcom.SAFEARRAY), agcom.OLE_COLOR, agcom.DOUBLE, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsPathPointFactory.__dict__ and type(IStkGraphicsPathPointFactory.__dict__[attrname]) == property:
            return IStkGraphicsPathPointFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsPathPointFactory.")
    
    def Initialize(self) -> "IStkGraphicsPathPoint":
        """Initializes a new path point."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithDate(self, pathPointDate:"IDate") -> "IStkGraphicsPathPoint":
        """Initializes a new path point with the given date."""
        with agmarshall.AgInterface_in_arg(pathPointDate, IDate) as arg_pathPointDate, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithDate"](arg_pathPointDate.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithDateAndPosition(self, pathPointDate:"IDate", position:list) -> "IStkGraphicsPathPoint":
        """Initializes a new path point with the given date and position."""
        with agmarshall.AgInterface_in_arg(pathPointDate, IDate) as arg_pathPointDate, \
             agmarshall.SAFEARRAY_arg(position) as arg_position, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithDateAndPosition"](arg_pathPointDate.COM_val, byref(arg_position.COM_val), byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithDatePositionAndColor(self, pathPointDate:"IDate", position:list, color:agcolor.Color) -> "IStkGraphicsPathPoint":
        """Initializes a new path point with the given date, position and color."""
        with agmarshall.AgInterface_in_arg(pathPointDate, IDate) as arg_pathPointDate, \
             agmarshall.SAFEARRAY_arg(position) as arg_position, \
             agmarshall.OLE_COLOR_arg(color) as arg_color, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithDatePositionAndColor"](arg_pathPointDate.COM_val, byref(arg_position.COM_val), arg_color.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithDatePositionColorAndTranslucency(self, pathPointDate:"IDate", position:list, color:agcolor.Color, translucency:float) -> "IStkGraphicsPathPoint":
        """Initializes a new path point with the given date, position, color and translucency."""
        with agmarshall.AgInterface_in_arg(pathPointDate, IDate) as arg_pathPointDate, \
             agmarshall.SAFEARRAY_arg(position) as arg_position, \
             agmarshall.OLE_COLOR_arg(color) as arg_color, \
             agmarshall.DOUBLE_arg(translucency) as arg_translucency, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithDatePositionColorAndTranslucency"](arg_pathPointDate.COM_val, byref(arg_position.COM_val), arg_color.COM_val, arg_translucency.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{efb486c4-09f0-4918-b051-7776acd13f66}", IStkGraphicsPathPointFactory)
agcls.AgTypeNameMap["IStkGraphicsPathPointFactory"] = IStkGraphicsPathPointFactory

class IStkGraphicsBoundingSphere(object):
    """A sphere that encapsulates an object."""
    _uuid = "{68e2776e-6e9a-449a-8146-99e67cf8d16c}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCenter"] = _raise_uninitialized_error
        self.__dict__["_GetRadius"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsBoundingSphere._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsBoundingSphere from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsBoundingSphere = agcom.GUID(IStkGraphicsBoundingSphere._uuid)
        vtable_offset_local = IStkGraphicsBoundingSphere._vtable_offset - 1
        self.__dict__["_GetCenter"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsBoundingSphere, vtable_offset_local+1, POINTER(agcom.SAFEARRAY))
        self.__dict__["_GetRadius"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsBoundingSphere, vtable_offset_local+2, POINTER(agcom.DOUBLE))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsBoundingSphere.__dict__ and type(IStkGraphicsBoundingSphere.__dict__[attrname]) == property:
            return IStkGraphicsBoundingSphere.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsBoundingSphere.")
    
    @property
    def Center(self) -> list:
        """A center of the bounding sphere. The center point is specified as one-dimensional array with three elements corresponding to (X,Y,Z) cartesian coordinates."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCenter"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Radius(self) -> float:
        """A radius of the bounding sphere."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetRadius"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{68e2776e-6e9a-449a-8146-99e67cf8d16c}", IStkGraphicsBoundingSphere)
agcls.AgTypeNameMap["IStkGraphicsBoundingSphere"] = IStkGraphicsBoundingSphere

class IStkGraphicsBoundingSphereFactory(object):
    """Creates instances of the bounding sphere type."""
    _uuid = "{fdde5510-3231-4c01-9c23-8485643e47ff}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_GetMaximumRadiusBoundingSphere"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsBoundingSphereFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsBoundingSphereFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsBoundingSphereFactory = agcom.GUID(IStkGraphicsBoundingSphereFactory._uuid)
        vtable_offset_local = IStkGraphicsBoundingSphereFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsBoundingSphereFactory, vtable_offset_local+1, POINTER(agcom.SAFEARRAY), agcom.DOUBLE, POINTER(agcom.PVOID))
        self.__dict__["_GetMaximumRadiusBoundingSphere"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsBoundingSphereFactory, vtable_offset_local+2, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsBoundingSphereFactory.__dict__ and type(IStkGraphicsBoundingSphereFactory.__dict__[attrname]) == property:
            return IStkGraphicsBoundingSphereFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsBoundingSphereFactory.")
    
    def Initialize(self, center:list, radius:float) -> "IStkGraphicsBoundingSphere":
        """Create instances of BoundingSphere."""
        with agmarshall.SAFEARRAY_arg(center) as arg_center, \
             agmarshall.DOUBLE_arg(radius) as arg_radius, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_center.COM_val), arg_radius.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def MaximumRadiusBoundingSphere(self) -> "IStkGraphicsBoundingSphere":
        """Gets the bounding sphere of maximum possible radius."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaximumRadiusBoundingSphere"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{fdde5510-3231-4c01-9c23-8485643e47ff}", IStkGraphicsBoundingSphereFactory)
agcls.AgTypeNameMap["IStkGraphicsBoundingSphereFactory"] = IStkGraphicsBoundingSphereFactory

class IStkGraphicsTextureFilter2D(object):
    """A texture filter."""
    _uuid = "{c71ed80c-abbc-4ce5-bf56-a21ea03c4593}"
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetMinificationFilter"] = _raise_uninitialized_error
        self.__dict__["_GetMagnificationFilter"] = _raise_uninitialized_error
        self.__dict__["_GetWrapS"] = _raise_uninitialized_error
        self.__dict__["_GetWrapT"] = _raise_uninitialized_error
        self.__dict__["_GetNearestClampToEdge"] = _raise_uninitialized_error
        self.__dict__["_GetNearestRepeat"] = _raise_uninitialized_error
        self.__dict__["_GetLinearClampToEdge"] = _raise_uninitialized_error
        self.__dict__["_GetLinearRepeat"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsTextureFilter2D._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsTextureFilter2D from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsTextureFilter2D = agcom.GUID(IStkGraphicsTextureFilter2D._uuid)
        vtable_offset_local = IStkGraphicsTextureFilter2D._vtable_offset - 1
        self.__dict__["_GetMinificationFilter"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextureFilter2D, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_GetMagnificationFilter"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextureFilter2D, vtable_offset_local+2, POINTER(agcom.LONG))
        self.__dict__["_GetWrapS"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextureFilter2D, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_GetWrapT"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextureFilter2D, vtable_offset_local+4, POINTER(agcom.LONG))
        self.__dict__["_GetNearestClampToEdge"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextureFilter2D, vtable_offset_local+5, POINTER(agcom.PVOID))
        self.__dict__["_GetNearestRepeat"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextureFilter2D, vtable_offset_local+6, POINTER(agcom.PVOID))
        self.__dict__["_GetLinearClampToEdge"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextureFilter2D, vtable_offset_local+7, POINTER(agcom.PVOID))
        self.__dict__["_GetLinearRepeat"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextureFilter2D, vtable_offset_local+8, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsTextureFilter2D.__dict__ and type(IStkGraphicsTextureFilter2D.__dict__[attrname]) == property:
            return IStkGraphicsTextureFilter2D.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsTextureFilter2D.")
    
    @property
    def MinificationFilter(self) -> "AgEStkGraphicsMinificationFilter":
        """Gets the minification filter used when the pixel being textured maps to an area less than or equal to one texel."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsMinificationFilter) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinificationFilter"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def MagnificationFilter(self) -> "AgEStkGraphicsMagnificationFilter":
        """Gets the magnification filter used when the pixel being textured maps to an area greater than one texel."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsMagnificationFilter) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMagnificationFilter"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def WrapS(self) -> "AgEStkGraphicsTextureWrap":
        """Gets the texture wrap for the s direction."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsTextureWrap) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetWrapS"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def WrapT(self) -> "AgEStkGraphicsTextureWrap":
        """Gets the texture wrap for the t direction."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsTextureWrap) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetWrapT"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def NearestClampToEdge(self) -> "IStkGraphicsTextureFilter2D":
        """Gets a texture filter with the following properties: MinificationFilter: Nearest, MagnificationFilter: Nearest, WrapS: ClampToEdge, WrapT: ClampToEdge"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetNearestClampToEdge"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def NearestRepeat(self) -> "IStkGraphicsTextureFilter2D":
        """Gets a texture filter with the following properties: MinificationFilter: Nearest, MagnificationFilter: Nearest, WrapS: Repeat, WrapT: Repeat"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetNearestRepeat"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def LinearClampToEdge(self) -> "IStkGraphicsTextureFilter2D":
        """Gets a texture filter with the following properties: MinificationFilter: Linear, MagnificationFilter: Linear, WrapS: ClampToEdge, WrapT: ClampToEdge"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetLinearClampToEdge"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def LinearRepeat(self) -> "IStkGraphicsTextureFilter2D":
        """Gets a texture filter with the following properties: MinificationFilter: Linear, MagnificationFilter: Linear, WrapS: Repeat, WrapT: Repeat"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetLinearRepeat"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{c71ed80c-abbc-4ce5-bf56-a21ea03c4593}", IStkGraphicsTextureFilter2D)
agcls.AgTypeNameMap["IStkGraphicsTextureFilter2D"] = IStkGraphicsTextureFilter2D

class IStkGraphicsTextureFilter2DFactory(object):
    """Creates texture filters."""
    _uuid = "{8e616d0f-4cf9-4dfd-b7fd-1295dd9131e5}"
    _num_methods = 7
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetNearestClampToEdge"] = _raise_uninitialized_error
        self.__dict__["_GetNearestRepeat"] = _raise_uninitialized_error
        self.__dict__["_GetLinearClampToEdge"] = _raise_uninitialized_error
        self.__dict__["_GetLinearRepeat"] = _raise_uninitialized_error
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithTextureWrap"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithMinificationAndMagnification"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsTextureFilter2DFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsTextureFilter2DFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsTextureFilter2DFactory = agcom.GUID(IStkGraphicsTextureFilter2DFactory._uuid)
        vtable_offset_local = IStkGraphicsTextureFilter2DFactory._vtable_offset - 1
        self.__dict__["_GetNearestClampToEdge"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextureFilter2DFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetNearestRepeat"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextureFilter2DFactory, vtable_offset_local+2, POINTER(agcom.PVOID))
        self.__dict__["_GetLinearClampToEdge"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextureFilter2DFactory, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_GetLinearRepeat"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextureFilter2DFactory, vtable_offset_local+4, POINTER(agcom.PVOID))
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextureFilter2DFactory, vtable_offset_local+5, agcom.LONG, agcom.LONG, agcom.LONG, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithTextureWrap"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextureFilter2DFactory, vtable_offset_local+6, agcom.LONG, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithMinificationAndMagnification"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextureFilter2DFactory, vtable_offset_local+7, agcom.LONG, agcom.LONG, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsTextureFilter2DFactory.__dict__ and type(IStkGraphicsTextureFilter2DFactory.__dict__[attrname]) == property:
            return IStkGraphicsTextureFilter2DFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsTextureFilter2DFactory.")
    
    @property
    def NearestClampToEdge(self) -> "IStkGraphicsTextureFilter2D":
        """Gets a texture filter with the following properties: MinificationFilter: Nearest, MagnificationFilter: Nearest, WrapS: ClampToEdge, WrapT: ClampToEdge"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetNearestClampToEdge"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def NearestRepeat(self) -> "IStkGraphicsTextureFilter2D":
        """Gets a texture filter with the following properties: MinificationFilter: Nearest, MagnificationFilter: Nearest, WrapS: Repeat, WrapT: Repeat"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetNearestRepeat"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def LinearClampToEdge(self) -> "IStkGraphicsTextureFilter2D":
        """Gets a texture filter with the following properties: MinificationFilter: Linear, MagnificationFilter: Linear, WrapS: ClampToEdge, WrapT: ClampToEdge"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetLinearClampToEdge"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def LinearRepeat(self) -> "IStkGraphicsTextureFilter2D":
        """Gets a texture filter with the following properties: MinificationFilter: Linear, MagnificationFilter: Linear, WrapS: Repeat, WrapT: Repeat"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetLinearRepeat"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def Initialize(self, minificationFilter:"AgEStkGraphicsMinificationFilter", magnificationFilter:"AgEStkGraphicsMagnificationFilter", wrapS:"AgEStkGraphicsTextureWrap", wrapT:"AgEStkGraphicsTextureWrap") -> "IStkGraphicsTextureFilter2D":
        """Creates a texture filter using the specified minification/magnification options and texture wrap."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsMinificationFilter, minificationFilter) as arg_minificationFilter, \
             agmarshall.AgEnum_arg(AgEStkGraphicsMagnificationFilter, magnificationFilter) as arg_magnificationFilter, \
             agmarshall.AgEnum_arg(AgEStkGraphicsTextureWrap, wrapS) as arg_wrapS, \
             agmarshall.AgEnum_arg(AgEStkGraphicsTextureWrap, wrapT) as arg_wrapT, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](arg_minificationFilter.COM_val, arg_magnificationFilter.COM_val, arg_wrapS.COM_val, arg_wrapT.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithTextureWrap(self, wrapS:"AgEStkGraphicsTextureWrap", wrapT:"AgEStkGraphicsTextureWrap") -> "IStkGraphicsTextureFilter2D":
        """Creates a texture filter using the specified texture wrap."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsTextureWrap, wrapS) as arg_wrapS, \
             agmarshall.AgEnum_arg(AgEStkGraphicsTextureWrap, wrapT) as arg_wrapT, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithTextureWrap"](arg_wrapS.COM_val, arg_wrapT.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithMinificationAndMagnification(self, minificationFilter:"AgEStkGraphicsMinificationFilter", magnificationFilter:"AgEStkGraphicsMagnificationFilter") -> "IStkGraphicsTextureFilter2D":
        """Creates a texture filter using the specified minification/magnification options."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsMinificationFilter, minificationFilter) as arg_minificationFilter, \
             agmarshall.AgEnum_arg(AgEStkGraphicsMagnificationFilter, magnificationFilter) as arg_magnificationFilter, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithMinificationAndMagnification"](arg_minificationFilter.COM_val, arg_magnificationFilter.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{8e616d0f-4cf9-4dfd-b7fd-1295dd9131e5}", IStkGraphicsTextureFilter2DFactory)
agcls.AgTypeNameMap["IStkGraphicsTextureFilter2DFactory"] = IStkGraphicsTextureFilter2DFactory

class IStkGraphicsRendererTexture2D(object):
    """A 2D Texture. A texture represents an image that is ready for use by objects such as primitives and overlays. Textures typically reside in video memory."""
    _uuid = "{b207af7e-f2b5-4b2f-89f6-1fc3721102b3}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetTemplate"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsRendererTexture2D._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsRendererTexture2D from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsRendererTexture2D = agcom.GUID(IStkGraphicsRendererTexture2D._uuid)
        vtable_offset_local = IStkGraphicsRendererTexture2D._vtable_offset - 1
        self.__dict__["_GetTemplate"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsRendererTexture2D, vtable_offset_local+1, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsRendererTexture2D.__dict__ and type(IStkGraphicsRendererTexture2D.__dict__[attrname]) == property:
            return IStkGraphicsRendererTexture2D.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsRendererTexture2D.")
    
    @property
    def Template(self) -> "IStkGraphicsRendererTextureTemplate2D":
        """Gets a template from which the texture was created."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTemplate"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{b207af7e-f2b5-4b2f-89f6-1fc3721102b3}", IStkGraphicsRendererTexture2D)
agcls.AgTypeNameMap["IStkGraphicsRendererTexture2D"] = IStkGraphicsRendererTexture2D

class IStkGraphicsRendererTextureTemplate2D(object):
    """Template object containing attributes required to create a 2D texture."""
    _uuid = "{46fbfc4c-29b8-49c7-beb7-77bc5d836f10}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetInternalFormat"] = _raise_uninitialized_error
        self.__dict__["_GetWidth"] = _raise_uninitialized_error
        self.__dict__["_GetHeight"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsRendererTextureTemplate2D._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsRendererTextureTemplate2D from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsRendererTextureTemplate2D = agcom.GUID(IStkGraphicsRendererTextureTemplate2D._uuid)
        vtable_offset_local = IStkGraphicsRendererTextureTemplate2D._vtable_offset - 1
        self.__dict__["_GetInternalFormat"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsRendererTextureTemplate2D, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_GetWidth"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsRendererTextureTemplate2D, vtable_offset_local+2, POINTER(agcom.INT))
        self.__dict__["_GetHeight"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsRendererTextureTemplate2D, vtable_offset_local+3, POINTER(agcom.INT))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsRendererTextureTemplate2D.__dict__ and type(IStkGraphicsRendererTextureTemplate2D.__dict__[attrname]) == property:
            return IStkGraphicsRendererTextureTemplate2D.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsRendererTextureTemplate2D.")
    
    @property
    def InternalFormat(self) -> "AgEStkGraphicsInternalTextureFormat":
        """Gets an internal format of the texture."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsInternalTextureFormat) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetInternalFormat"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Width(self) -> int:
        """Gets a width of the texture in texels."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetWidth"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Height(self) -> int:
        """Gets a height of the texture in texels."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetHeight"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{46fbfc4c-29b8-49c7-beb7-77bc5d836f10}", IStkGraphicsRendererTextureTemplate2D)
agcls.AgTypeNameMap["IStkGraphicsRendererTextureTemplate2D"] = IStkGraphicsRendererTextureTemplate2D

class IStkGraphicsPathPointCollection(object):
    """A collection of path points."""
    _uuid = "{9214e199-6476-4ef1-a741-13362718bdd5}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        self.__dict__["_Item"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsPathPointCollection._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsPathPointCollection from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsPathPointCollection = agcom.GUID(IStkGraphicsPathPointCollection._uuid)
        vtable_offset_local = IStkGraphicsPathPointCollection._vtable_offset - 1
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPathPointCollection, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_Item"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPathPointCollection, vtable_offset_local+2, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPathPointCollection, vtable_offset_local+3, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsPathPointCollection.__dict__ and type(IStkGraphicsPathPointCollection.__dict__[attrname]) == property:
            return IStkGraphicsPathPointCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsPathPointCollection.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> "IStkGraphicsPathPoint":
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    
    @property
    def Count(self) -> int:
        """A total number of elements in the collection."""
        with agmarshall.LONG_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def Item(self, index:int) -> "IStkGraphicsPathPoint":
        """Returns a path point at the specified position in the collection."""
        with agmarshall.LONG_arg(index) as arg_index, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Item"](arg_index.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        with agmarshall.IEnumVARIANT_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{9214e199-6476-4ef1-a741-13362718bdd5}", IStkGraphicsPathPointCollection)
agcls.AgTypeNameMap["IStkGraphicsPathPointCollection"] = IStkGraphicsPathPointCollection

class IStkGraphicsObjectCollection(object):
    """A collection of objects."""
    _uuid = "{feb3a8c8-dc5b-4246-a8ec-1d6154b4cf68}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        self.__dict__["_Item"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsObjectCollection._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsObjectCollection from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsObjectCollection = agcom.GUID(IStkGraphicsObjectCollection._uuid)
        vtable_offset_local = IStkGraphicsObjectCollection._vtable_offset - 1
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsObjectCollection, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_Item"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsObjectCollection, vtable_offset_local+2, agcom.LONG, POINTER(agcom.VARIANT))
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsObjectCollection, vtable_offset_local+3, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsObjectCollection.__dict__ and type(IStkGraphicsObjectCollection.__dict__[attrname]) == property:
            return IStkGraphicsObjectCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsObjectCollection.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> typing.Any:
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    
    @property
    def Count(self) -> int:
        """A total number of elements in the collection."""
        with agmarshall.LONG_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def Item(self, index:int) -> typing.Any:
        """An item in the collection at the specified index."""
        with agmarshall.LONG_arg(index) as arg_index, \
             agmarshall.VARIANT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_Item"](arg_index.COM_val, byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        with agmarshall.IEnumVARIANT_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{feb3a8c8-dc5b-4246-a8ec-1d6154b4cf68}", IStkGraphicsObjectCollection)
agcls.AgTypeNameMap["IStkGraphicsObjectCollection"] = IStkGraphicsObjectCollection

class IStkGraphicsSceneCollection(object):
    """A collection of scenes."""
    _uuid = "{aac03f9e-8c23-4a8d-ad88-455deb232f0b}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        self.__dict__["_Item"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsSceneCollection._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsSceneCollection from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsSceneCollection = agcom.GUID(IStkGraphicsSceneCollection._uuid)
        vtable_offset_local = IStkGraphicsSceneCollection._vtable_offset - 1
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSceneCollection, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_Item"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSceneCollection, vtable_offset_local+2, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSceneCollection, vtable_offset_local+3, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsSceneCollection.__dict__ and type(IStkGraphicsSceneCollection.__dict__[attrname]) == property:
            return IStkGraphicsSceneCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsSceneCollection.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> "IStkGraphicsScene":
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    
    @property
    def Count(self) -> int:
        """Total number of scenes in the collection."""
        with agmarshall.LONG_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def Item(self, index:int) -> "IStkGraphicsScene":
        """A scene in the collection at a specified index."""
        with agmarshall.LONG_arg(index) as arg_index, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Item"](arg_index.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        with agmarshall.IEnumVARIANT_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{aac03f9e-8c23-4a8d-ad88-455deb232f0b}", IStkGraphicsSceneCollection)
agcls.AgTypeNameMap["IStkGraphicsSceneCollection"] = IStkGraphicsSceneCollection

class IStkGraphicsScreenOverlayContainer(object):
    """The interface for screen overlays that contain a collection of other overlays. This interface is implemented by ScreenOverlayManager and ScreenOverlay."""
    _uuid = "{5e57d9b7-f014-46d7-8b6d-b38d47e7ce41}"
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetOverlays"] = _raise_uninitialized_error
        self.__dict__["_GetPadding"] = _raise_uninitialized_error
        self.__dict__["_SetPadding"] = _raise_uninitialized_error
        self.__dict__["_GetDisplay"] = _raise_uninitialized_error
        self.__dict__["_SetDisplay"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsScreenOverlayContainer._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsScreenOverlayContainer from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsScreenOverlayContainer = agcom.GUID(IStkGraphicsScreenOverlayContainer._uuid)
        vtable_offset_local = IStkGraphicsScreenOverlayContainer._vtable_offset - 1
        self.__dict__["_GetOverlays"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsScreenOverlayContainer, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetPadding"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsScreenOverlayContainer, vtable_offset_local+2, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetPadding"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsScreenOverlayContainer, vtable_offset_local+3, agcom.SAFEARRAY)
        self.__dict__["_GetDisplay"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsScreenOverlayContainer, vtable_offset_local+4, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetDisplay"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsScreenOverlayContainer, vtable_offset_local+5, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsScreenOverlayContainer.__dict__ and type(IStkGraphicsScreenOverlayContainer.__dict__[attrname]) == property:
            return IStkGraphicsScreenOverlayContainer.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsScreenOverlayContainer.")
    
    @property
    def Overlays(self) -> "IStkGraphicsScreenOverlayCollection":
        """Gets the collection of overlays that are contained within this overlay."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetOverlays"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Padding(self) -> list:
        """Gets or sets the padding surrounding the overlays that are contained within this overlay. The array contains the components of the padding arranged in the order left, top, right, bottom."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPadding"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @Padding.setter
    def Padding(self, padding:list) -> None:
        with agmarshall.SAFEARRAY_arg(padding) as arg_padding:
            agcls.evaluate_hresult(self.__dict__["_SetPadding"](arg_padding.COM_val))

    @property
    def Display(self) -> bool:
        """Gets or sets if this overlay and the collection of overlays that are contained within this overlay should be rendered."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDisplay"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Display.setter
    def Display(self, display:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(display) as arg_display:
            agcls.evaluate_hresult(self.__dict__["_SetDisplay"](arg_display.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{5e57d9b7-f014-46d7-8b6d-b38d47e7ce41}", IStkGraphicsScreenOverlayContainer)
agcls.AgTypeNameMap["IStkGraphicsScreenOverlayContainer"] = IStkGraphicsScreenOverlayContainer

class IStkGraphicsScreenOverlayPickResultCollection(object):
    """A collection of pick results."""
    _uuid = "{6c1f8d2c-1b38-482c-b935-b174003284bb}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        self.__dict__["_Item"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsScreenOverlayPickResultCollection._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsScreenOverlayPickResultCollection from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsScreenOverlayPickResultCollection = agcom.GUID(IStkGraphicsScreenOverlayPickResultCollection._uuid)
        vtable_offset_local = IStkGraphicsScreenOverlayPickResultCollection._vtable_offset - 1
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsScreenOverlayPickResultCollection, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_Item"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsScreenOverlayPickResultCollection, vtable_offset_local+2, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsScreenOverlayPickResultCollection, vtable_offset_local+3, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsScreenOverlayPickResultCollection.__dict__ and type(IStkGraphicsScreenOverlayPickResultCollection.__dict__[attrname]) == property:
            return IStkGraphicsScreenOverlayPickResultCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsScreenOverlayPickResultCollection.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> "IStkGraphicsScreenOverlayPickResult":
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    
    @property
    def Count(self) -> int:
        """A total number of elements in the collection."""
        with agmarshall.LONG_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def Item(self, index:int) -> "IStkGraphicsScreenOverlayPickResult":
        """Get an element at the specified position in the collection."""
        with agmarshall.LONG_arg(index) as arg_index, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Item"](arg_index.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        with agmarshall.IEnumVARIANT_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{6c1f8d2c-1b38-482c-b935-b174003284bb}", IStkGraphicsScreenOverlayPickResultCollection)
agcls.AgTypeNameMap["IStkGraphicsScreenOverlayPickResultCollection"] = IStkGraphicsScreenOverlayPickResultCollection

class IStkGraphicsGlobeImageOverlayAddCompleteEventArgs(object):
    """The event is raised when the globe image overlay is displayed for the first time after being added using AddAsync."""
    _uuid = "{bbe097c9-d64c-4474-ba9a-fb47c76388ba}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetOverlay"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsGlobeImageOverlayAddCompleteEventArgs._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsGlobeImageOverlayAddCompleteEventArgs from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsGlobeImageOverlayAddCompleteEventArgs = agcom.GUID(IStkGraphicsGlobeImageOverlayAddCompleteEventArgs._uuid)
        vtable_offset_local = IStkGraphicsGlobeImageOverlayAddCompleteEventArgs._vtable_offset - 1
        self.__dict__["_GetOverlay"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsGlobeImageOverlayAddCompleteEventArgs, vtable_offset_local+1, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsGlobeImageOverlayAddCompleteEventArgs.__dict__ and type(IStkGraphicsGlobeImageOverlayAddCompleteEventArgs.__dict__[attrname]) == property:
            return IStkGraphicsGlobeImageOverlayAddCompleteEventArgs.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsGlobeImageOverlayAddCompleteEventArgs.")
    
    @property
    def Overlay(self) -> "IStkGraphicsGlobeImageOverlay":
        """The overlay object that was added earlier using AddAsync."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetOverlay"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{bbe097c9-d64c-4474-ba9a-fb47c76388ba}", IStkGraphicsGlobeImageOverlayAddCompleteEventArgs)
agcls.AgTypeNameMap["IStkGraphicsGlobeImageOverlayAddCompleteEventArgs"] = IStkGraphicsGlobeImageOverlayAddCompleteEventArgs

class IStkGraphicsTerrainOverlayAddCompleteEventArgs(object):
    """The event is raised when the terrain overlay is displayed for the first time after having been added using AddAsync."""
    _uuid = "{76a70982-21b5-427f-9db1-c0b92950b516}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetOverlay"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsTerrainOverlayAddCompleteEventArgs._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsTerrainOverlayAddCompleteEventArgs from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsTerrainOverlayAddCompleteEventArgs = agcom.GUID(IStkGraphicsTerrainOverlayAddCompleteEventArgs._uuid)
        vtable_offset_local = IStkGraphicsTerrainOverlayAddCompleteEventArgs._vtable_offset - 1
        self.__dict__["_GetOverlay"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTerrainOverlayAddCompleteEventArgs, vtable_offset_local+1, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsTerrainOverlayAddCompleteEventArgs.__dict__ and type(IStkGraphicsTerrainOverlayAddCompleteEventArgs.__dict__[attrname]) == property:
            return IStkGraphicsTerrainOverlayAddCompleteEventArgs.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsTerrainOverlayAddCompleteEventArgs.")
    
    @property
    def Overlay(self) -> "IStkGraphicsTerrainOverlay":
        """The terrain overlay being displayed for the first time."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetOverlay"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{76a70982-21b5-427f-9db1-c0b92950b516}", IStkGraphicsTerrainOverlayAddCompleteEventArgs)
agcls.AgTypeNameMap["IStkGraphicsTerrainOverlayAddCompleteEventArgs"] = IStkGraphicsTerrainOverlayAddCompleteEventArgs

class IStkGraphicsPickResultCollection(object):
    """A collection of picked objects."""
    _uuid = "{2d29d5b1-b160-49ad-8f58-cef696bc952a}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        self.__dict__["_Item"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsPickResultCollection._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsPickResultCollection from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsPickResultCollection = agcom.GUID(IStkGraphicsPickResultCollection._uuid)
        vtable_offset_local = IStkGraphicsPickResultCollection._vtable_offset - 1
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPickResultCollection, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_Item"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPickResultCollection, vtable_offset_local+2, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPickResultCollection, vtable_offset_local+3, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsPickResultCollection.__dict__ and type(IStkGraphicsPickResultCollection.__dict__[attrname]) == property:
            return IStkGraphicsPickResultCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsPickResultCollection.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> "IStkGraphicsPickResult":
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    
    @property
    def Count(self) -> int:
        """A total number of elements in the collection."""
        with agmarshall.LONG_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def Item(self, index:int) -> "IStkGraphicsPickResult":
        """Returns a picked object at the specified position in the collection."""
        with agmarshall.LONG_arg(index) as arg_index, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Item"](arg_index.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        with agmarshall.IEnumVARIANT_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{2d29d5b1-b160-49ad-8f58-cef696bc952a}", IStkGraphicsPickResultCollection)
agcls.AgTypeNameMap["IStkGraphicsPickResultCollection"] = IStkGraphicsPickResultCollection

class IStkGraphicsRenderingEventArgs(object):
    """The event is raised when the scene is rendered."""
    _uuid = "{7c1eea22-fad1-437e-9282-f9202cd103bd}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetTime"] = _raise_uninitialized_error
        self.__dict__["_GetTimeInEpSecs"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsRenderingEventArgs._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsRenderingEventArgs from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsRenderingEventArgs = agcom.GUID(IStkGraphicsRenderingEventArgs._uuid)
        vtable_offset_local = IStkGraphicsRenderingEventArgs._vtable_offset - 1
        self.__dict__["_GetTime"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsRenderingEventArgs, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetTimeInEpSecs"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsRenderingEventArgs, vtable_offset_local+2, POINTER(agcom.DOUBLE))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsRenderingEventArgs.__dict__ and type(IStkGraphicsRenderingEventArgs.__dict__[attrname]) == property:
            return IStkGraphicsRenderingEventArgs.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsRenderingEventArgs.")
    
    @property
    def Time(self) -> "IDate":
        """The time of the rendering event."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTime"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def TimeInEpSecs(self) -> float:
        """The time of the rendering event (in STK's scenario epoch units)."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTimeInEpSecs"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{7c1eea22-fad1-437e-9282-f9202cd103bd}", IStkGraphicsRenderingEventArgs)
agcls.AgTypeNameMap["IStkGraphicsRenderingEventArgs"] = IStkGraphicsRenderingEventArgs

class IStkGraphicsBatchPrimitiveIndex(object):
    """Represents an individual item index that is associated with a batch primitive. Provides the Index of the individual item and the Primitive that contains that index..."""
    _uuid = "{15dae589-33b5-4629-a50f-485a49546ddf}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetIndex"] = _raise_uninitialized_error
        self.__dict__["_GetPrimitive"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsBatchPrimitiveIndex._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsBatchPrimitiveIndex from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsBatchPrimitiveIndex = agcom.GUID(IStkGraphicsBatchPrimitiveIndex._uuid)
        vtable_offset_local = IStkGraphicsBatchPrimitiveIndex._vtable_offset - 1
        self.__dict__["_GetIndex"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsBatchPrimitiveIndex, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_GetPrimitive"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsBatchPrimitiveIndex, vtable_offset_local+2, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsBatchPrimitiveIndex.__dict__ and type(IStkGraphicsBatchPrimitiveIndex.__dict__[attrname]) == property:
            return IStkGraphicsBatchPrimitiveIndex.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsBatchPrimitiveIndex.")
    
    @property
    def Index(self) -> int:
        """The index of the item contained by the Primitive."""
        with agmarshall.LONG_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetIndex"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Primitive(self) -> "IStkGraphicsPrimitive":
        """The Primitive that contains the item at the Index specified."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPrimitive"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{15dae589-33b5-4629-a50f-485a49546ddf}", IStkGraphicsBatchPrimitiveIndex)
agcls.AgTypeNameMap["IStkGraphicsBatchPrimitiveIndex"] = IStkGraphicsBatchPrimitiveIndex

class IStkGraphicsKmlDocumentCollection(object):
    """A collection of KML documents."""
    _uuid = "{8f385d51-5b9c-4f8d-8340-1e8f49b51a6a}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        self.__dict__["_Item"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsKmlDocumentCollection._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsKmlDocumentCollection from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsKmlDocumentCollection = agcom.GUID(IStkGraphicsKmlDocumentCollection._uuid)
        vtable_offset_local = IStkGraphicsKmlDocumentCollection._vtable_offset - 1
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsKmlDocumentCollection, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_Item"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsKmlDocumentCollection, vtable_offset_local+2, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsKmlDocumentCollection, vtable_offset_local+3, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsKmlDocumentCollection.__dict__ and type(IStkGraphicsKmlDocumentCollection.__dict__[attrname]) == property:
            return IStkGraphicsKmlDocumentCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsKmlDocumentCollection.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> "IStkGraphicsKmlDocument":
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    
    @property
    def Count(self) -> int:
        """A total number of elements in the collection."""
        with agmarshall.LONG_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def Item(self, index:int) -> "IStkGraphicsKmlDocument":
        """Get an element at the specified position in the collection."""
        with agmarshall.LONG_arg(index) as arg_index, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Item"](arg_index.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        with agmarshall.IEnumVARIANT_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{8f385d51-5b9c-4f8d-8340-1e8f49b51a6a}", IStkGraphicsKmlDocumentCollection)
agcls.AgTypeNameMap["IStkGraphicsKmlDocumentCollection"] = IStkGraphicsKmlDocumentCollection

class IStkGraphicsKmlFeatureCollection(object):
    """A collection of KML features."""
    _uuid = "{e4f1dff5-fbb1-4951-bfc0-abfeec89acc8}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        self.__dict__["_Item"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsKmlFeatureCollection._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsKmlFeatureCollection from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsKmlFeatureCollection = agcom.GUID(IStkGraphicsKmlFeatureCollection._uuid)
        vtable_offset_local = IStkGraphicsKmlFeatureCollection._vtable_offset - 1
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsKmlFeatureCollection, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_Item"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsKmlFeatureCollection, vtable_offset_local+2, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsKmlFeatureCollection, vtable_offset_local+3, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsKmlFeatureCollection.__dict__ and type(IStkGraphicsKmlFeatureCollection.__dict__[attrname]) == property:
            return IStkGraphicsKmlFeatureCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsKmlFeatureCollection.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> "IStkGraphicsKmlFeature":
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    
    @property
    def Count(self) -> int:
        """A total number of elements in the collection."""
        with agmarshall.LONG_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def Item(self, index:int) -> "IStkGraphicsKmlFeature":
        """Get an element at the specified position in the collection."""
        with agmarshall.LONG_arg(index) as arg_index, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Item"](arg_index.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        with agmarshall.IEnumVARIANT_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{e4f1dff5-fbb1-4951-bfc0-abfeec89acc8}", IStkGraphicsKmlFeatureCollection)
agcls.AgTypeNameMap["IStkGraphicsKmlFeatureCollection"] = IStkGraphicsKmlFeatureCollection

class IStkGraphicsKmlDocumentLoadedEventArgs(object):
    """The event is raised when a KML document has been loaded."""
    _uuid = "{60d78883-928f-45f2-ab60-0becb167af3d}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetDocument"] = _raise_uninitialized_error
        self.__dict__["_GetException"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsKmlDocumentLoadedEventArgs._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsKmlDocumentLoadedEventArgs from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsKmlDocumentLoadedEventArgs = agcom.GUID(IStkGraphicsKmlDocumentLoadedEventArgs._uuid)
        vtable_offset_local = IStkGraphicsKmlDocumentLoadedEventArgs._vtable_offset - 1
        self.__dict__["_GetDocument"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsKmlDocumentLoadedEventArgs, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetException"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsKmlDocumentLoadedEventArgs, vtable_offset_local+2, POINTER(agcom.BSTR))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsKmlDocumentLoadedEventArgs.__dict__ and type(IStkGraphicsKmlDocumentLoadedEventArgs.__dict__[attrname]) == property:
            return IStkGraphicsKmlDocumentLoadedEventArgs.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsKmlDocumentLoadedEventArgs.")
    
    @property
    def Document(self) -> "IStkGraphicsKmlDocument":
        """Gets the KML document associated with the load event."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDocument"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Exception(self) -> str:
        """Returns an error message, if an error occurred while loading the KML; otherwise an empty string."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetException"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{60d78883-928f-45f2-ab60-0becb167af3d}", IStkGraphicsKmlDocumentLoadedEventArgs)
agcls.AgTypeNameMap["IStkGraphicsKmlDocumentLoadedEventArgs"] = IStkGraphicsKmlDocumentLoadedEventArgs

class IStkGraphicsFactoryAndInitializers(object):
    """Methods and properties are used to initialize new primitives, display conditions, screen overlays, textures and many other types; compute and retrieve triangulator results and access global properties (what's known as static properties, static methods a..."""
    _uuid = "{5ccf1ef3-48a0-4b22-9fcf-c32eae3f8d69}"
    _num_methods = 83
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetBoxTriangulator"] = _raise_uninitialized_error
        self.__dict__["_GetCylinderTriangulator"] = _raise_uninitialized_error
        self.__dict__["_GetEllipsoidTriangulator"] = _raise_uninitialized_error
        self.__dict__["_GetExtrudedPolylineTriangulator"] = _raise_uninitialized_error
        self.__dict__["_GetSurfaceExtentTriangulator"] = _raise_uninitialized_error
        self.__dict__["_GetSurfacePolygonTriangulator"] = _raise_uninitialized_error
        self.__dict__["_GetSurfaceShapes"] = _raise_uninitialized_error
        self.__dict__["_GetAGIProcessedImageGlobeOverlay"] = _raise_uninitialized_error
        self.__dict__["_GetAGIProcessedTerrainOverlay"] = _raise_uninitialized_error
        self.__dict__["_GetAGIRoamImageGlobeOverlay"] = _raise_uninitialized_error
        self.__dict__["_GetCustomImageGlobeOverlayPluginActivator"] = _raise_uninitialized_error
        self.__dict__["_GetGeospatialImageGlobeOverlay"] = _raise_uninitialized_error
        self.__dict__["_GetProjectedRasterOverlay"] = _raise_uninitialized_error
        self.__dict__["_GetProjection"] = _raise_uninitialized_error
        self.__dict__["_GetAltitudeDisplayCondition"] = _raise_uninitialized_error
        self.__dict__["_GetCompositeDisplayCondition"] = _raise_uninitialized_error
        self.__dict__["_GetCompositePrimitive"] = _raise_uninitialized_error
        self.__dict__["_GetConstantDisplayCondition"] = _raise_uninitialized_error
        self.__dict__["_GetDistanceDisplayCondition"] = _raise_uninitialized_error
        self.__dict__["_GetDistanceToGlobeOverlayDisplayCondition"] = _raise_uninitialized_error
        self.__dict__["_GetDistanceToPositionDisplayCondition"] = _raise_uninitialized_error
        self.__dict__["_GetDistanceToPrimitiveDisplayCondition"] = _raise_uninitialized_error
        self.__dict__["_GetDurationPathPrimitiveUpdatePolicy"] = _raise_uninitialized_error
        self.__dict__["_GetGlobeImageOverlay"] = _raise_uninitialized_error
        self.__dict__["_GetGraphicsFont"] = _raise_uninitialized_error
        self.__dict__["_GetGreatArcInterpolator"] = _raise_uninitialized_error
        self.__dict__["_GetAlphaFromLuminanceFilter"] = _raise_uninitialized_error
        self.__dict__["_GetAlphaFromPixelFilter"] = _raise_uninitialized_error
        self.__dict__["_GetAlphaFromRasterFilter"] = _raise_uninitialized_error
        self.__dict__["_GetBandExtractFilter"] = _raise_uninitialized_error
        self.__dict__["_GetBandOrderFilter"] = _raise_uninitialized_error
        self.__dict__["_GetBlurFilter"] = _raise_uninitialized_error
        self.__dict__["_GetBrightnessFilter"] = _raise_uninitialized_error
        self.__dict__["_GetColorToLuminanceFilter"] = _raise_uninitialized_error
        self.__dict__["_GetContrastFilter"] = _raise_uninitialized_error
        self.__dict__["_GetConvolutionFilter"] = _raise_uninitialized_error
        self.__dict__["_GetEdgeDetectFilter"] = _raise_uninitialized_error
        self.__dict__["_GetFilteringRasterStream"] = _raise_uninitialized_error
        self.__dict__["_GetFlipFilter"] = _raise_uninitialized_error
        self.__dict__["_GetGammaCorrectionFilter"] = _raise_uninitialized_error
        self.__dict__["_GetGaussianBlurFilter"] = _raise_uninitialized_error
        self.__dict__["_GetGradientDetectFilter"] = _raise_uninitialized_error
        self.__dict__["_GetJpeg2000Writer"] = _raise_uninitialized_error
        self.__dict__["_GetLevelsFilter"] = _raise_uninitialized_error
        self.__dict__["_GetProjectionRasterStreamPluginActivator"] = _raise_uninitialized_error
        self.__dict__["_GetRaster"] = _raise_uninitialized_error
        self.__dict__["_GetRasterAttributes"] = _raise_uninitialized_error
        self.__dict__["_GetRotateFilter"] = _raise_uninitialized_error
        self.__dict__["_GetSequenceFilter"] = _raise_uninitialized_error
        self.__dict__["_GetSharpenFilter"] = _raise_uninitialized_error
        self.__dict__["_GetVideoStream"] = _raise_uninitialized_error
        self.__dict__["_GetMarkerBatchPrimitive"] = _raise_uninitialized_error
        self.__dict__["_GetMarkerBatchPrimitiveOptionalParameters"] = _raise_uninitialized_error
        self.__dict__["_GetMaximumCountPathPrimitiveUpdatePolicy"] = _raise_uninitialized_error
        self.__dict__["_GetModelPrimitive"] = _raise_uninitialized_error
        self.__dict__["_GetPathPrimitive"] = _raise_uninitialized_error
        self.__dict__["_GetPixelSizeDisplayCondition"] = _raise_uninitialized_error
        self.__dict__["_GetPointBatchPrimitive"] = _raise_uninitialized_error
        self.__dict__["_GetPolylinePrimitive"] = _raise_uninitialized_error
        self.__dict__["_GetRasterImageGlobeOverlay"] = _raise_uninitialized_error
        self.__dict__["_GetRhumbLineInterpolator"] = _raise_uninitialized_error
        self.__dict__["_GetSceneDisplayCondition"] = _raise_uninitialized_error
        self.__dict__["_GetSceneManager"] = _raise_uninitialized_error
        self.__dict__["_GetScreenOverlay"] = _raise_uninitialized_error
        self.__dict__["_GetSolidPrimitive"] = _raise_uninitialized_error
        self.__dict__["_GetSurfaceMeshPrimitive"] = _raise_uninitialized_error
        self.__dict__["_GetTerrainOverlay"] = _raise_uninitialized_error
        self.__dict__["_GetTextBatchPrimitive"] = _raise_uninitialized_error
        self.__dict__["_GetTextBatchPrimitiveOptionalParameters"] = _raise_uninitialized_error
        self.__dict__["_GetTextureMatrix"] = _raise_uninitialized_error
        self.__dict__["_GetTextureScreenOverlay"] = _raise_uninitialized_error
        self.__dict__["_GetTimeIntervalDisplayCondition"] = _raise_uninitialized_error
        self.__dict__["_GetTriangleMeshPrimitive"] = _raise_uninitialized_error
        self.__dict__["_GetTriangleMeshPrimitiveOptionalParameters"] = _raise_uninitialized_error
        self.__dict__["_GetTextureFilter2D"] = _raise_uninitialized_error
        self.__dict__["_GetBoundingSphere"] = _raise_uninitialized_error
        self.__dict__["_GetPathPoint"] = _raise_uninitialized_error
        self.__dict__["_GetTextOverlay"] = _raise_uninitialized_error
        self.__dict__["_GetAGICustomTerrainOverlay"] = _raise_uninitialized_error
        self.__dict__["_GetAxesPrimitive"] = _raise_uninitialized_error
        self.__dict__["_GetVectorPrimitive"] = _raise_uninitialized_error
        self.__dict__["_GetPolylinePrimitiveOptionalParameters"] = _raise_uninitialized_error
        self.__dict__["_GetPointBatchPrimitiveOptionalParameters"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsFactoryAndInitializers._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsFactoryAndInitializers from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsFactoryAndInitializers = agcom.GUID(IStkGraphicsFactoryAndInitializers._uuid)
        vtable_offset_local = IStkGraphicsFactoryAndInitializers._vtable_offset - 1
        self.__dict__["_GetBoxTriangulator"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetCylinderTriangulator"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+2, POINTER(agcom.PVOID))
        self.__dict__["_GetEllipsoidTriangulator"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_GetExtrudedPolylineTriangulator"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+4, POINTER(agcom.PVOID))
        self.__dict__["_GetSurfaceExtentTriangulator"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+5, POINTER(agcom.PVOID))
        self.__dict__["_GetSurfacePolygonTriangulator"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+6, POINTER(agcom.PVOID))
        self.__dict__["_GetSurfaceShapes"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+7, POINTER(agcom.PVOID))
        self.__dict__["_GetAGIProcessedImageGlobeOverlay"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+8, POINTER(agcom.PVOID))
        self.__dict__["_GetAGIProcessedTerrainOverlay"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+9, POINTER(agcom.PVOID))
        self.__dict__["_GetAGIRoamImageGlobeOverlay"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+10, POINTER(agcom.PVOID))
        self.__dict__["_GetCustomImageGlobeOverlayPluginActivator"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+11, POINTER(agcom.PVOID))
        self.__dict__["_GetGeospatialImageGlobeOverlay"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+12, POINTER(agcom.PVOID))
        self.__dict__["_GetProjectedRasterOverlay"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+13, POINTER(agcom.PVOID))
        self.__dict__["_GetProjection"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+14, POINTER(agcom.PVOID))
        self.__dict__["_GetAltitudeDisplayCondition"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+15, POINTER(agcom.PVOID))
        self.__dict__["_GetCompositeDisplayCondition"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+16, POINTER(agcom.PVOID))
        self.__dict__["_GetCompositePrimitive"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+17, POINTER(agcom.PVOID))
        self.__dict__["_GetConstantDisplayCondition"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+18, POINTER(agcom.PVOID))
        self.__dict__["_GetDistanceDisplayCondition"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+19, POINTER(agcom.PVOID))
        self.__dict__["_GetDistanceToGlobeOverlayDisplayCondition"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+20, POINTER(agcom.PVOID))
        self.__dict__["_GetDistanceToPositionDisplayCondition"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+21, POINTER(agcom.PVOID))
        self.__dict__["_GetDistanceToPrimitiveDisplayCondition"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+22, POINTER(agcom.PVOID))
        self.__dict__["_GetDurationPathPrimitiveUpdatePolicy"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+23, POINTER(agcom.PVOID))
        self.__dict__["_GetGlobeImageOverlay"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+24, POINTER(agcom.PVOID))
        self.__dict__["_GetGraphicsFont"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+25, POINTER(agcom.PVOID))
        self.__dict__["_GetGreatArcInterpolator"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+26, POINTER(agcom.PVOID))
        self.__dict__["_GetAlphaFromLuminanceFilter"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+27, POINTER(agcom.PVOID))
        self.__dict__["_GetAlphaFromPixelFilter"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+28, POINTER(agcom.PVOID))
        self.__dict__["_GetAlphaFromRasterFilter"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+29, POINTER(agcom.PVOID))
        self.__dict__["_GetBandExtractFilter"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+30, POINTER(agcom.PVOID))
        self.__dict__["_GetBandOrderFilter"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+31, POINTER(agcom.PVOID))
        self.__dict__["_GetBlurFilter"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+32, POINTER(agcom.PVOID))
        self.__dict__["_GetBrightnessFilter"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+33, POINTER(agcom.PVOID))
        self.__dict__["_GetColorToLuminanceFilter"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+34, POINTER(agcom.PVOID))
        self.__dict__["_GetContrastFilter"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+35, POINTER(agcom.PVOID))
        self.__dict__["_GetConvolutionFilter"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+36, POINTER(agcom.PVOID))
        self.__dict__["_GetEdgeDetectFilter"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+37, POINTER(agcom.PVOID))
        self.__dict__["_GetFilteringRasterStream"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+38, POINTER(agcom.PVOID))
        self.__dict__["_GetFlipFilter"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+39, POINTER(agcom.PVOID))
        self.__dict__["_GetGammaCorrectionFilter"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+40, POINTER(agcom.PVOID))
        self.__dict__["_GetGaussianBlurFilter"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+41, POINTER(agcom.PVOID))
        self.__dict__["_GetGradientDetectFilter"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+42, POINTER(agcom.PVOID))
        self.__dict__["_GetJpeg2000Writer"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+43, POINTER(agcom.PVOID))
        self.__dict__["_GetLevelsFilter"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+44, POINTER(agcom.PVOID))
        self.__dict__["_GetProjectionRasterStreamPluginActivator"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+45, POINTER(agcom.PVOID))
        self.__dict__["_GetRaster"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+46, POINTER(agcom.PVOID))
        self.__dict__["_GetRasterAttributes"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+47, POINTER(agcom.PVOID))
        self.__dict__["_GetRotateFilter"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+48, POINTER(agcom.PVOID))
        self.__dict__["_GetSequenceFilter"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+49, POINTER(agcom.PVOID))
        self.__dict__["_GetSharpenFilter"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+50, POINTER(agcom.PVOID))
        self.__dict__["_GetVideoStream"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+51, POINTER(agcom.PVOID))
        self.__dict__["_GetMarkerBatchPrimitive"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+52, POINTER(agcom.PVOID))
        self.__dict__["_GetMarkerBatchPrimitiveOptionalParameters"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+53, POINTER(agcom.PVOID))
        self.__dict__["_GetMaximumCountPathPrimitiveUpdatePolicy"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+54, POINTER(agcom.PVOID))
        self.__dict__["_GetModelPrimitive"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+55, POINTER(agcom.PVOID))
        self.__dict__["_GetPathPrimitive"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+56, POINTER(agcom.PVOID))
        self.__dict__["_GetPixelSizeDisplayCondition"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+57, POINTER(agcom.PVOID))
        self.__dict__["_GetPointBatchPrimitive"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+58, POINTER(agcom.PVOID))
        self.__dict__["_GetPolylinePrimitive"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+59, POINTER(agcom.PVOID))
        self.__dict__["_GetRasterImageGlobeOverlay"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+60, POINTER(agcom.PVOID))
        self.__dict__["_GetRhumbLineInterpolator"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+61, POINTER(agcom.PVOID))
        self.__dict__["_GetSceneDisplayCondition"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+62, POINTER(agcom.PVOID))
        self.__dict__["_GetSceneManager"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+63, POINTER(agcom.PVOID))
        self.__dict__["_GetScreenOverlay"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+64, POINTER(agcom.PVOID))
        self.__dict__["_GetSolidPrimitive"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+65, POINTER(agcom.PVOID))
        self.__dict__["_GetSurfaceMeshPrimitive"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+66, POINTER(agcom.PVOID))
        self.__dict__["_GetTerrainOverlay"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+67, POINTER(agcom.PVOID))
        self.__dict__["_GetTextBatchPrimitive"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+68, POINTER(agcom.PVOID))
        self.__dict__["_GetTextBatchPrimitiveOptionalParameters"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+69, POINTER(agcom.PVOID))
        self.__dict__["_GetTextureMatrix"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+70, POINTER(agcom.PVOID))
        self.__dict__["_GetTextureScreenOverlay"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+71, POINTER(agcom.PVOID))
        self.__dict__["_GetTimeIntervalDisplayCondition"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+72, POINTER(agcom.PVOID))
        self.__dict__["_GetTriangleMeshPrimitive"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+73, POINTER(agcom.PVOID))
        self.__dict__["_GetTriangleMeshPrimitiveOptionalParameters"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+74, POINTER(agcom.PVOID))
        self.__dict__["_GetTextureFilter2D"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+75, POINTER(agcom.PVOID))
        self.__dict__["_GetBoundingSphere"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+76, POINTER(agcom.PVOID))
        self.__dict__["_GetPathPoint"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+77, POINTER(agcom.PVOID))
        self.__dict__["_GetTextOverlay"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+78, POINTER(agcom.PVOID))
        self.__dict__["_GetAGICustomTerrainOverlay"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+79, POINTER(agcom.PVOID))
        self.__dict__["_GetAxesPrimitive"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+80, POINTER(agcom.PVOID))
        self.__dict__["_GetVectorPrimitive"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+81, POINTER(agcom.PVOID))
        self.__dict__["_GetPolylinePrimitiveOptionalParameters"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+82, POINTER(agcom.PVOID))
        self.__dict__["_GetPointBatchPrimitiveOptionalParameters"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFactoryAndInitializers, vtable_offset_local+83, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsFactoryAndInitializers.__dict__ and type(IStkGraphicsFactoryAndInitializers.__dict__[attrname]) == property:
            return IStkGraphicsFactoryAndInitializers.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsFactoryAndInitializers.")
    
    @property
    def BoxTriangulator(self) -> "IStkGraphicsBoxTriangulatorInitializer":
        """Access global methods and properties of BoxTriangulator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBoxTriangulator"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def CylinderTriangulator(self) -> "IStkGraphicsCylinderTriangulatorInitializer":
        """Access global methods and properties of CylinderTriangulator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCylinderTriangulator"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def EllipsoidTriangulator(self) -> "IStkGraphicsEllipsoidTriangulatorInitializer":
        """Access global methods and properties of EllipsoidTriangulator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetEllipsoidTriangulator"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def ExtrudedPolylineTriangulator(self) -> "IStkGraphicsExtrudedPolylineTriangulatorInitializer":
        """Access global methods and properties of ExtrudedPolylineTriangulator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetExtrudedPolylineTriangulator"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def SurfaceExtentTriangulator(self) -> "IStkGraphicsSurfaceExtentTriangulatorInitializer":
        """Access global methods and properties of SurfaceExtentTriangulator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSurfaceExtentTriangulator"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def SurfacePolygonTriangulator(self) -> "IStkGraphicsSurfacePolygonTriangulatorInitializer":
        """Access global methods and properties of SurfacePolygonTriangulator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSurfacePolygonTriangulator"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def SurfaceShapes(self) -> "IStkGraphicsSurfaceShapesInitializer":
        """Access global methods and properties of SurfaceShapes (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSurfaceShapes"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def AGIProcessedImageGlobeOverlay(self) -> "IStkGraphicsAGIProcessedImageGlobeOverlayFactory":
        """Access global methods and properties of AGIProcessedImageGlobeOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAGIProcessedImageGlobeOverlay"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def AGIProcessedTerrainOverlay(self) -> "IStkGraphicsAGIProcessedTerrainOverlayFactory":
        """Access global methods and properties of AGIProcessedTerrainOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAGIProcessedTerrainOverlay"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def AGIRoamImageGlobeOverlay(self) -> "IStkGraphicsAGIRoamImageGlobeOverlayFactory":
        """Access global methods and properties of AGIRoamImageGlobeOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAGIRoamImageGlobeOverlay"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def CustomImageGlobeOverlayPluginActivator(self) -> "IStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory":
        """Access global methods and properties of CustomImageGlobeOverlayPluginActivator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCustomImageGlobeOverlayPluginActivator"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def GeospatialImageGlobeOverlay(self) -> "IStkGraphicsGeospatialImageGlobeOverlayFactory":
        """Access global methods and properties of GeospatialImageGlobeOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetGeospatialImageGlobeOverlay"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def ProjectedRasterOverlay(self) -> "IStkGraphicsProjectedRasterOverlayFactory":
        """Access global methods and properties of ProjectedRasterOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetProjectedRasterOverlay"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Projection(self) -> "IStkGraphicsProjectionFactory":
        """Access global methods and properties of Projection (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetProjection"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def AltitudeDisplayCondition(self) -> "IStkGraphicsAltitudeDisplayConditionFactory":
        """Access global methods and properties of AltitudeDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitudeDisplayCondition"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def CompositeDisplayCondition(self) -> "IStkGraphicsCompositeDisplayConditionFactory":
        """Access global methods and properties of CompositeDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCompositeDisplayCondition"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def CompositePrimitive(self) -> "IStkGraphicsCompositePrimitiveFactory":
        """Access global methods and properties of CompositePrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCompositePrimitive"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def ConstantDisplayCondition(self) -> "IStkGraphicsConstantDisplayConditionFactory":
        """Access global methods and properties of ConstantDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetConstantDisplayCondition"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def DistanceDisplayCondition(self) -> "IStkGraphicsDistanceDisplayConditionFactory":
        """Access global methods and properties of DistanceDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDistanceDisplayCondition"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def DistanceToGlobeOverlayDisplayCondition(self) -> "IStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory":
        """Access global methods and properties of DistanceToGlobeOverlayDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDistanceToGlobeOverlayDisplayCondition"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def DistanceToPositionDisplayCondition(self) -> "IStkGraphicsDistanceToPositionDisplayConditionFactory":
        """Access global methods and properties of DistanceToPositionDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDistanceToPositionDisplayCondition"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def DistanceToPrimitiveDisplayCondition(self) -> "IStkGraphicsDistanceToPrimitiveDisplayConditionFactory":
        """Access global methods and properties of DistanceToPrimitiveDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDistanceToPrimitiveDisplayCondition"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def DurationPathPrimitiveUpdatePolicy(self) -> "IStkGraphicsDurationPathPrimitiveUpdatePolicyFactory":
        """Access global methods and properties of DurationPathPrimitiveUpdatePolicy (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDurationPathPrimitiveUpdatePolicy"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def GlobeImageOverlay(self) -> "IStkGraphicsGlobeImageOverlayInitializer":
        """Access global methods and properties of GlobeImageOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetGlobeImageOverlay"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def GraphicsFont(self) -> "IStkGraphicsGraphicsFontFactory":
        """Access global methods and properties of GraphicsFont (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetGraphicsFont"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def GreatArcInterpolator(self) -> "IStkGraphicsGreatArcInterpolatorFactory":
        """Access global methods and properties of GreatArcInterpolator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetGreatArcInterpolator"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def AlphaFromLuminanceFilter(self) -> "IStkGraphicsAlphaFromLuminanceFilterFactory":
        """Access global methods and properties of AlphaFromLuminanceFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAlphaFromLuminanceFilter"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def AlphaFromPixelFilter(self) -> "IStkGraphicsAlphaFromPixelFilterFactory":
        """Access global methods and properties of AlphaFromPixelFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAlphaFromPixelFilter"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def AlphaFromRasterFilter(self) -> "IStkGraphicsAlphaFromRasterFilterFactory":
        """Access global methods and properties of AlphaFromRasterFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAlphaFromRasterFilter"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def BandExtractFilter(self) -> "IStkGraphicsBandExtractFilterFactory":
        """Access global methods and properties of BandExtractFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBandExtractFilter"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def BandOrderFilter(self) -> "IStkGraphicsBandOrderFilterFactory":
        """Access global methods and properties of BandOrderFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBandOrderFilter"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def BlurFilter(self) -> "IStkGraphicsBlurFilterFactory":
        """Access global methods and properties of BlurFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBlurFilter"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def BrightnessFilter(self) -> "IStkGraphicsBrightnessFilterFactory":
        """Access global methods and properties of BrightnessFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBrightnessFilter"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def ColorToLuminanceFilter(self) -> "IStkGraphicsColorToLuminanceFilterFactory":
        """Access global methods and properties of ColorToLuminanceFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetColorToLuminanceFilter"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def ContrastFilter(self) -> "IStkGraphicsContrastFilterFactory":
        """Access global methods and properties of ContrastFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetContrastFilter"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def ConvolutionFilter(self) -> "IStkGraphicsConvolutionFilterFactory":
        """Access global methods and properties of ConvolutionFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetConvolutionFilter"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def EdgeDetectFilter(self) -> "IStkGraphicsEdgeDetectFilterFactory":
        """Access global methods and properties of EdgeDetectFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetEdgeDetectFilter"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def FilteringRasterStream(self) -> "IStkGraphicsFilteringRasterStreamFactory":
        """Access global methods and properties of FilteringRasterStream (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetFilteringRasterStream"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def FlipFilter(self) -> "IStkGraphicsFlipFilterFactory":
        """Access global methods and properties of FlipFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetFlipFilter"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def GammaCorrectionFilter(self) -> "IStkGraphicsGammaCorrectionFilterFactory":
        """Access global methods and properties of GammaCorrectionFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetGammaCorrectionFilter"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def GaussianBlurFilter(self) -> "IStkGraphicsGaussianBlurFilterFactory":
        """Access global methods and properties of GaussianBlurFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetGaussianBlurFilter"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def GradientDetectFilter(self) -> "IStkGraphicsGradientDetectFilterFactory":
        """Access global methods and properties of GradientDetectFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetGradientDetectFilter"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Jpeg2000Writer(self) -> "IStkGraphicsJpeg2000WriterInitializer":
        """Access global methods and properties of Jpeg2000Writer (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetJpeg2000Writer"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def LevelsFilter(self) -> "IStkGraphicsLevelsFilterFactory":
        """Access global methods and properties of LevelsFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetLevelsFilter"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def ProjectionRasterStreamPluginActivator(self) -> "IStkGraphicsProjectionRasterStreamPluginActivatorFactory":
        """Access global methods and properties of ProjectionRasterStreamPluginActivator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetProjectionRasterStreamPluginActivator"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Raster(self) -> "IStkGraphicsRasterFactory":
        """Access global methods and properties of Raster (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetRaster"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def RasterAttributes(self) -> "IStkGraphicsRasterAttributesFactory":
        """Access global methods and properties of RasterAttributes (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetRasterAttributes"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def RotateFilter(self) -> "IStkGraphicsRotateFilterFactory":
        """Access global methods and properties of RotateFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetRotateFilter"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def SequenceFilter(self) -> "IStkGraphicsSequenceFilterFactory":
        """Access global methods and properties of SequenceFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSequenceFilter"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def SharpenFilter(self) -> "IStkGraphicsSharpenFilterFactory":
        """Access global methods and properties of SharpenFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSharpenFilter"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def VideoStream(self) -> "IStkGraphicsVideoStreamFactory":
        """Access global methods and properties of VideoStream (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetVideoStream"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def MarkerBatchPrimitive(self) -> "IStkGraphicsMarkerBatchPrimitiveFactory":
        """Access global methods and properties of MarkerBatchPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMarkerBatchPrimitive"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def MarkerBatchPrimitiveOptionalParameters(self) -> "IStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory":
        """Access global methods and properties of MarkerBatchPrimitiveOptionalParameters (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMarkerBatchPrimitiveOptionalParameters"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def MaximumCountPathPrimitiveUpdatePolicy(self) -> "IStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory":
        """Access global methods and properties of MaximumCountPathPrimitiveUpdatePolicy (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaximumCountPathPrimitiveUpdatePolicy"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def ModelPrimitive(self) -> "IStkGraphicsModelPrimitiveFactory":
        """Access global methods and properties of ModelPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetModelPrimitive"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def PathPrimitive(self) -> "IStkGraphicsPathPrimitiveFactory":
        """Access global methods and properties of PathPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPathPrimitive"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def PixelSizeDisplayCondition(self) -> "IStkGraphicsPixelSizeDisplayConditionFactory":
        """Access global methods and properties of PixelSizeDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPixelSizeDisplayCondition"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def PointBatchPrimitive(self) -> "IStkGraphicsPointBatchPrimitiveFactory":
        """Access global methods and properties of PointBatchPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPointBatchPrimitive"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def PolylinePrimitive(self) -> "IStkGraphicsPolylinePrimitiveFactory":
        """Access global methods and properties of PolylinePrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPolylinePrimitive"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def RasterImageGlobeOverlay(self) -> "IStkGraphicsRasterImageGlobeOverlayFactory":
        """Access global methods and properties of RasterImageGlobeOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetRasterImageGlobeOverlay"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def RhumbLineInterpolator(self) -> "IStkGraphicsRhumbLineInterpolatorFactory":
        """Access global methods and properties of RhumbLineInterpolator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetRhumbLineInterpolator"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def SceneDisplayCondition(self) -> "IStkGraphicsSceneDisplayConditionFactory":
        """Access global methods and properties of SceneDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSceneDisplayCondition"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def SceneManager(self) -> "IStkGraphicsSceneManagerInitializer":
        """Access global methods and properties of SceneManager (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSceneManager"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def ScreenOverlay(self) -> "IStkGraphicsScreenOverlayFactory":
        """Access global methods and properties of ScreenOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetScreenOverlay"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def SolidPrimitive(self) -> "IStkGraphicsSolidPrimitiveFactory":
        """Access global methods and properties of SolidPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSolidPrimitive"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def SurfaceMeshPrimitive(self) -> "IStkGraphicsSurfaceMeshPrimitiveFactory":
        """Access global methods and properties of SurfaceMeshPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSurfaceMeshPrimitive"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def TerrainOverlay(self) -> "IStkGraphicsTerrainOverlayInitializer":
        """Access global methods and properties of TerrainOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTerrainOverlay"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def TextBatchPrimitive(self) -> "IStkGraphicsTextBatchPrimitiveFactory":
        """Access global methods and properties of TextBatchPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTextBatchPrimitive"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def TextBatchPrimitiveOptionalParameters(self) -> "IStkGraphicsTextBatchPrimitiveOptionalParametersFactory":
        """Access global methods and properties of TextBatchPrimitiveOptionalParameters (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTextBatchPrimitiveOptionalParameters"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def TextureMatrix(self) -> "IStkGraphicsTextureMatrixFactory":
        """Access global methods and properties of TextureMatrix (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTextureMatrix"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def TextureScreenOverlay(self) -> "IStkGraphicsTextureScreenOverlayFactory":
        """Access global methods and properties of TextureScreenOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTextureScreenOverlay"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def TimeIntervalDisplayCondition(self) -> "IStkGraphicsTimeIntervalDisplayConditionFactory":
        """Access global methods and properties of TimeIntervalDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTimeIntervalDisplayCondition"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def TriangleMeshPrimitive(self) -> "IStkGraphicsTriangleMeshPrimitiveFactory":
        """Access global methods and properties of TriangleMeshPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTriangleMeshPrimitive"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def TriangleMeshPrimitiveOptionalParameters(self) -> "IStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory":
        """Access global methods and properties of TriangleMeshPrimitiveOptionalParameters (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTriangleMeshPrimitiveOptionalParameters"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def TextureFilter2D(self) -> "IStkGraphicsTextureFilter2DFactory":
        """Factory creates texture filters."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTextureFilter2D"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def BoundingSphere(self) -> "IStkGraphicsBoundingSphereFactory":
        """Factory creates bounding spheres."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBoundingSphere"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def PathPoint(self) -> "IStkGraphicsPathPointFactory":
        """Factory creates path points."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPathPoint"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def TextOverlay(self) -> "IStkGraphicsTextOverlayFactory":
        """Access global methods and properties of TextOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTextOverlay"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def AGICustomTerrainOverlay(self) -> "IStkGraphicsAGICustomTerrainOverlayFactory":
        """Access global methods and properties of AGICustomTerrainOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAGICustomTerrainOverlay"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def AxesPrimitive(self) -> "IStkGraphicsAxesPrimitiveFactory":
        """Access global methods and properties of AxesPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAxesPrimitive"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def VectorPrimitive(self) -> "IStkGraphicsVectorPrimitiveFactory":
        """Access global methods and properties of VectorPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetVectorPrimitive"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def PolylinePrimitiveOptionalParameters(self) -> "IStkGraphicsPolylinePrimitiveOptionalParametersFactory":
        """Access global methods and properties of PolylinePrimitiveOptionalParameters (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPolylinePrimitiveOptionalParameters"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def PointBatchPrimitiveOptionalParameters(self) -> "IStkGraphicsPointBatchPrimitiveOptionalParametersFactory":
        """Access global methods and properties of PointBatchPrimitiveOptionalParameters (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPointBatchPrimitiveOptionalParameters"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{5ccf1ef3-48a0-4b22-9fcf-c32eae3f8d69}", IStkGraphicsFactoryAndInitializers)
agcls.AgTypeNameMap["IStkGraphicsFactoryAndInitializers"] = IStkGraphicsFactoryAndInitializers

class IStkGraphicsExtrudedPolylineTriangulatorResult(object):
    """The result from extruded polyline triangulation: a triangle mesh defined using an indexed triangle list with top and bottom boundary positions. The mesh is commonly visualized with the triangle mesh primitive or surface mesh primitive..."""
    _uuid = "{5d94d077-0a56-4d83-ac90-369344533684}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetTopBoundaryPositions"] = _raise_uninitialized_error
        self.__dict__["_GetBottomBoundaryPositions"] = _raise_uninitialized_error
        self.__dict__["_GetBoundaryPositionsWindingOrder"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsExtrudedPolylineTriangulatorResult._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsExtrudedPolylineTriangulatorResult from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsExtrudedPolylineTriangulatorResult = agcom.GUID(IStkGraphicsExtrudedPolylineTriangulatorResult._uuid)
        vtable_offset_local = IStkGraphicsExtrudedPolylineTriangulatorResult._vtable_offset - 1
        self.__dict__["_GetTopBoundaryPositions"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsExtrudedPolylineTriangulatorResult, vtable_offset_local+1, POINTER(agcom.SAFEARRAY))
        self.__dict__["_GetBottomBoundaryPositions"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsExtrudedPolylineTriangulatorResult, vtable_offset_local+2, POINTER(agcom.SAFEARRAY))
        self.__dict__["_GetBoundaryPositionsWindingOrder"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsExtrudedPolylineTriangulatorResult, vtable_offset_local+3, POINTER(agcom.LONG))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsExtrudedPolylineTriangulatorResult.__dict__ and type(IStkGraphicsExtrudedPolylineTriangulatorResult.__dict__[attrname]) == property:
            return IStkGraphicsExtrudedPolylineTriangulatorResult.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsExtrudedPolylineTriangulatorResult.")
    
    @property
    def TopBoundaryPositions(self) -> list:
        """Gets the boundary positions along the top of the extrusion. Three array elements (in the order x, y, z) constitute one position."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTopBoundaryPositions"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def BottomBoundaryPositions(self) -> list:
        """Gets the boundary positions along the bottom of the extrusion. Three array elements (in the order x, y, z) constitute one position."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBottomBoundaryPositions"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def BoundaryPositionsWindingOrder(self) -> "AgEStkGraphicsWindingOrder":
        """Gets the winding order of top boundary positions and bottom boundary positions."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsWindingOrder) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBoundaryPositionsWindingOrder"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{5d94d077-0a56-4d83-ac90-369344533684}", IStkGraphicsExtrudedPolylineTriangulatorResult)
agcls.AgTypeNameMap["IStkGraphicsExtrudedPolylineTriangulatorResult"] = IStkGraphicsExtrudedPolylineTriangulatorResult

class IStkGraphicsSolidTriangulatorResult(object):
    """The result from a triangulation of a solid: a triangle mesh defined using an indexed triangle list and positions outlining the solid. It is recommended to visualize the solid using a solid primitive..."""
    _uuid = "{a7ba0673-f944-4dc6-a450-5cb62915cb7b}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetOutlineIndices"] = _raise_uninitialized_error
        self.__dict__["_GetOutlinePositions"] = _raise_uninitialized_error
        self.__dict__["_GetOutlinePolylineType"] = _raise_uninitialized_error
        self.__dict__["_GetClosed"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsSolidTriangulatorResult._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsSolidTriangulatorResult from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsSolidTriangulatorResult = agcom.GUID(IStkGraphicsSolidTriangulatorResult._uuid)
        vtable_offset_local = IStkGraphicsSolidTriangulatorResult._vtable_offset - 1
        self.__dict__["_GetOutlineIndices"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSolidTriangulatorResult, vtable_offset_local+1, POINTER(agcom.SAFEARRAY))
        self.__dict__["_GetOutlinePositions"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSolidTriangulatorResult, vtable_offset_local+2, POINTER(agcom.SAFEARRAY))
        self.__dict__["_GetOutlinePolylineType"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSolidTriangulatorResult, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_GetClosed"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSolidTriangulatorResult, vtable_offset_local+4, POINTER(agcom.VARIANT_BOOL))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsSolidTriangulatorResult.__dict__ and type(IStkGraphicsSolidTriangulatorResult.__dict__[attrname]) == property:
            return IStkGraphicsSolidTriangulatorResult.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsSolidTriangulatorResult.")
    
    @property
    def OutlineIndices(self) -> list:
        """Gets indices into positions that define the positions outlining the solid. The indices returned consider the three components of a position (x, y, and z) as a single array element..."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetOutlineIndices"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def OutlinePositions(self) -> list:
        """Gets the positions outlining the solid. Three array elements (in the order x, y, z) constitute one position."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetOutlinePositions"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def OutlinePolylineType(self) -> "AgEStkGraphicsPolylineType":
        """Gets the polyline type of outline indices and outline positions."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsPolylineType) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetOutlinePolylineType"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Closed(self) -> bool:
        """Gets whether the solid is closed. For example, a box with six faces is closed. If one face is removed, the box is open."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetClosed"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{a7ba0673-f944-4dc6-a450-5cb62915cb7b}", IStkGraphicsSolidTriangulatorResult)
agcls.AgTypeNameMap["IStkGraphicsSolidTriangulatorResult"] = IStkGraphicsSolidTriangulatorResult

class IStkGraphicsSurfaceShapesResult(object):
    """Represents the boundary positions of a shape on the surface computed from by a surface shapes method."""
    _uuid = "{0efd15db-d9f7-4e1f-925b-ade0b0a22a21}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetPositions"] = _raise_uninitialized_error
        self.__dict__["_GetPositionsWindingOrder"] = _raise_uninitialized_error
        self.__dict__["_GetPolylineType"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsSurfaceShapesResult._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsSurfaceShapesResult from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsSurfaceShapesResult = agcom.GUID(IStkGraphicsSurfaceShapesResult._uuid)
        vtable_offset_local = IStkGraphicsSurfaceShapesResult._vtable_offset - 1
        self.__dict__["_GetPositions"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSurfaceShapesResult, vtable_offset_local+1, POINTER(agcom.SAFEARRAY))
        self.__dict__["_GetPositionsWindingOrder"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSurfaceShapesResult, vtable_offset_local+2, POINTER(agcom.LONG))
        self.__dict__["_GetPolylineType"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSurfaceShapesResult, vtable_offset_local+3, POINTER(agcom.LONG))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsSurfaceShapesResult.__dict__ and type(IStkGraphicsSurfaceShapesResult.__dict__[attrname]) == property:
            return IStkGraphicsSurfaceShapesResult.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsSurfaceShapesResult.")
    
    @property
    def Positions(self) -> list:
        """Gets the positions of the computed shape. Three array elements (in the order x, y, z) constitute one position."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPositions"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def PositionsWindingOrder(self) -> "AgEStkGraphicsWindingOrder":
        """Gets the winding order of positions."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsWindingOrder) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPositionsWindingOrder"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def PolylineType(self) -> "AgEStkGraphicsPolylineType":
        """Gets the polyline type of positions."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsPolylineType) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPolylineType"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{0efd15db-d9f7-4e1f-925b-ade0b0a22a21}", IStkGraphicsSurfaceShapesResult)
agcls.AgTypeNameMap["IStkGraphicsSurfaceShapesResult"] = IStkGraphicsSurfaceShapesResult

class IStkGraphicsSurfaceTriangulatorResult(object):
    """The result from a triangulation on the surface of a central body: a triangle mesh defined using an indexed triangle list and boundary positions surrounding the mesh..."""
    _uuid = "{27cedd3e-86cd-4d18-862f-eeb0e6de62aa}"
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetGranularity"] = _raise_uninitialized_error
        self.__dict__["_GetBoundaryIndices"] = _raise_uninitialized_error
        self.__dict__["_GetBoundaryPositions"] = _raise_uninitialized_error
        self.__dict__["_GetBoundaryPositionsWindingOrder"] = _raise_uninitialized_error
        self.__dict__["_GetBoundaryPolylineType"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsSurfaceTriangulatorResult._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsSurfaceTriangulatorResult from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsSurfaceTriangulatorResult = agcom.GUID(IStkGraphicsSurfaceTriangulatorResult._uuid)
        vtable_offset_local = IStkGraphicsSurfaceTriangulatorResult._vtable_offset - 1
        self.__dict__["_GetGranularity"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSurfaceTriangulatorResult, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_GetBoundaryIndices"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSurfaceTriangulatorResult, vtable_offset_local+2, POINTER(agcom.SAFEARRAY))
        self.__dict__["_GetBoundaryPositions"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSurfaceTriangulatorResult, vtable_offset_local+3, POINTER(agcom.SAFEARRAY))
        self.__dict__["_GetBoundaryPositionsWindingOrder"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSurfaceTriangulatorResult, vtable_offset_local+4, POINTER(agcom.LONG))
        self.__dict__["_GetBoundaryPolylineType"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSurfaceTriangulatorResult, vtable_offset_local+5, POINTER(agcom.LONG))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsSurfaceTriangulatorResult.__dict__ and type(IStkGraphicsSurfaceTriangulatorResult.__dict__[attrname]) == property:
            return IStkGraphicsSurfaceTriangulatorResult.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsSurfaceTriangulatorResult.")
    
    @property
    def Granularity(self) -> float:
        """Gets the granularity used when the triangulation was computed. Lower granularities are more precise but create more triangles."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetGranularity"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def BoundaryIndices(self) -> list:
        """Gets indices into positions that define the boundary positions that surround the mesh. The indices returned consider the three components of a position (x, y, and z) as a single array element..."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBoundaryIndices"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def BoundaryPositions(self) -> list:
        """Gets the boundary positions that surround the mesh. Three array elements (in the order x, y, z) constitute one position."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBoundaryPositions"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def BoundaryPositionsWindingOrder(self) -> "AgEStkGraphicsWindingOrder":
        """Gets the winding order of boundary positions."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsWindingOrder) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBoundaryPositionsWindingOrder"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def BoundaryPolylineType(self) -> "AgEStkGraphicsPolylineType":
        """Gets the polyline type of boundary positions."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsPolylineType) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBoundaryPolylineType"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{27cedd3e-86cd-4d18-862f-eeb0e6de62aa}", IStkGraphicsSurfaceTriangulatorResult)
agcls.AgTypeNameMap["IStkGraphicsSurfaceTriangulatorResult"] = IStkGraphicsSurfaceTriangulatorResult

class IStkGraphicsTriangulatorResult(object):
    """The result from triangulation: a triangle mesh defined using an indexed triangle list. This is commonly visualized with the triangle mesh primitive or surface mesh primitive."""
    _uuid = "{9dece859-d370-4674-8ffa-8caa98e60632}"
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetPositions"] = _raise_uninitialized_error
        self.__dict__["_GetNormals"] = _raise_uninitialized_error
        self.__dict__["_GetIndices"] = _raise_uninitialized_error
        self.__dict__["_GetTriangleWindingOrder"] = _raise_uninitialized_error
        self.__dict__["_GetBoundingSphere"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsTriangulatorResult._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsTriangulatorResult from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsTriangulatorResult = agcom.GUID(IStkGraphicsTriangulatorResult._uuid)
        vtable_offset_local = IStkGraphicsTriangulatorResult._vtable_offset - 1
        self.__dict__["_GetPositions"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTriangulatorResult, vtable_offset_local+1, POINTER(agcom.SAFEARRAY))
        self.__dict__["_GetNormals"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTriangulatorResult, vtable_offset_local+2, POINTER(agcom.SAFEARRAY))
        self.__dict__["_GetIndices"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTriangulatorResult, vtable_offset_local+3, POINTER(agcom.SAFEARRAY))
        self.__dict__["_GetTriangleWindingOrder"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTriangulatorResult, vtable_offset_local+4, POINTER(agcom.LONG))
        self.__dict__["_GetBoundingSphere"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTriangulatorResult, vtable_offset_local+5, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsTriangulatorResult.__dict__ and type(IStkGraphicsTriangulatorResult.__dict__[attrname]) == property:
            return IStkGraphicsTriangulatorResult.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsTriangulatorResult.")
    
    @property
    def Positions(self) -> list:
        """Gets the positions of the mesh. Three array elements (in the order x, y, z) constitute one position."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPositions"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Normals(self) -> list:
        """Gets the normals of the mesh. Every position in positions has corresponding normal. Normals are commonly used for lighting. Three array elements (in the order x, y, z) constitute one normal."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetNormals"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Indices(self) -> list:
        """Gets indices into positions and normals. Every 3 indices represent 1 triangle. The indices returned consider the three components of a position or normal (x, y, and z) as a single array element..."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetIndices"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def TriangleWindingOrder(self) -> "AgEStkGraphicsWindingOrder":
        """Gets the orientation of front-facing triangles in the mesh."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsWindingOrder) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTriangleWindingOrder"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def BoundingSphere(self) -> "IStkGraphicsBoundingSphere":
        """Gets the bounding sphere that encompasses the mesh."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBoundingSphere"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{9dece859-d370-4674-8ffa-8caa98e60632}", IStkGraphicsTriangulatorResult)
agcls.AgTypeNameMap["IStkGraphicsTriangulatorResult"] = IStkGraphicsTriangulatorResult

class IStkGraphicsAGICustomTerrainOverlay(object):
    """A terrain overlay for handling AGI Cesium Terrain."""
    _uuid = "{59ef8436-aeec-4e60-8e3d-920e0f11feba}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsAGICustomTerrainOverlay._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsAGICustomTerrainOverlay from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsAGICustomTerrainOverlay = agcom.GUID(IStkGraphicsAGICustomTerrainOverlay._uuid)
        vtable_offset_local = IStkGraphicsAGICustomTerrainOverlay._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsAGICustomTerrainOverlay.__dict__ and type(IStkGraphicsAGICustomTerrainOverlay.__dict__[attrname]) == property:
            return IStkGraphicsAGICustomTerrainOverlay.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsAGICustomTerrainOverlay.")
    

agcls.AgClassCatalog.add_catalog_entry("{59ef8436-aeec-4e60-8e3d-920e0f11feba}", IStkGraphicsAGICustomTerrainOverlay)
agcls.AgTypeNameMap["IStkGraphicsAGICustomTerrainOverlay"] = IStkGraphicsAGICustomTerrainOverlay

class IStkGraphicsAGIProcessedImageGlobeOverlay(object):
    """A globe image overlay for handling AGI Processed Image (PDTTX) files."""
    _uuid = "{5c2d7cca-54f6-4b27-93d6-58bddac0befe}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsAGIProcessedImageGlobeOverlay._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsAGIProcessedImageGlobeOverlay from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsAGIProcessedImageGlobeOverlay = agcom.GUID(IStkGraphicsAGIProcessedImageGlobeOverlay._uuid)
        vtable_offset_local = IStkGraphicsAGIProcessedImageGlobeOverlay._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsAGIProcessedImageGlobeOverlay.__dict__ and type(IStkGraphicsAGIProcessedImageGlobeOverlay.__dict__[attrname]) == property:
            return IStkGraphicsAGIProcessedImageGlobeOverlay.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsAGIProcessedImageGlobeOverlay.")
    

agcls.AgClassCatalog.add_catalog_entry("{5c2d7cca-54f6-4b27-93d6-58bddac0befe}", IStkGraphicsAGIProcessedImageGlobeOverlay)
agcls.AgTypeNameMap["IStkGraphicsAGIProcessedImageGlobeOverlay"] = IStkGraphicsAGIProcessedImageGlobeOverlay

class IStkGraphicsAGIProcessedTerrainOverlay(object):
    """A terrain overlay for handling AGI Processed Terrain (PDTT) files."""
    _uuid = "{093a5b12-abdd-4029-adc5-2cbab7e4216d}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsAGIProcessedTerrainOverlay._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsAGIProcessedTerrainOverlay from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsAGIProcessedTerrainOverlay = agcom.GUID(IStkGraphicsAGIProcessedTerrainOverlay._uuid)
        vtable_offset_local = IStkGraphicsAGIProcessedTerrainOverlay._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsAGIProcessedTerrainOverlay.__dict__ and type(IStkGraphicsAGIProcessedTerrainOverlay.__dict__[attrname]) == property:
            return IStkGraphicsAGIProcessedTerrainOverlay.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsAGIProcessedTerrainOverlay.")
    

agcls.AgClassCatalog.add_catalog_entry("{093a5b12-abdd-4029-adc5-2cbab7e4216d}", IStkGraphicsAGIProcessedTerrainOverlay)
agcls.AgTypeNameMap["IStkGraphicsAGIProcessedTerrainOverlay"] = IStkGraphicsAGIProcessedTerrainOverlay

class IStkGraphicsAGIRoamImageGlobeOverlay(object):
    """A globe image overlay for handling ROAM (TXM/TXB) files."""
    _uuid = "{d76d82b7-7a13-452d-b661-1d416fae732e}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsAGIRoamImageGlobeOverlay._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsAGIRoamImageGlobeOverlay from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsAGIRoamImageGlobeOverlay = agcom.GUID(IStkGraphicsAGIRoamImageGlobeOverlay._uuid)
        vtable_offset_local = IStkGraphicsAGIRoamImageGlobeOverlay._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsAGIRoamImageGlobeOverlay.__dict__ and type(IStkGraphicsAGIRoamImageGlobeOverlay.__dict__[attrname]) == property:
            return IStkGraphicsAGIRoamImageGlobeOverlay.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsAGIRoamImageGlobeOverlay.")
    

agcls.AgClassCatalog.add_catalog_entry("{d76d82b7-7a13-452d-b661-1d416fae732e}", IStkGraphicsAGIRoamImageGlobeOverlay)
agcls.AgTypeNameMap["IStkGraphicsAGIRoamImageGlobeOverlay"] = IStkGraphicsAGIRoamImageGlobeOverlay

class IStkGraphicsCameraSnapshot(object):
    """Takes snapshots of the 3D window."""
    _uuid = "{6b6a8d90-ff4d-49b2-9fb4-5bf459818cd1}"
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_SaveToFile"] = _raise_uninitialized_error
        self.__dict__["_SaveToFileWithWidthAndDPI"] = _raise_uninitialized_error
        self.__dict__["_SaveToClipboard"] = _raise_uninitialized_error
        self.__dict__["_SaveToRaster"] = _raise_uninitialized_error
        self.__dict__["_SaveToTexture"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsCameraSnapshot._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsCameraSnapshot from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsCameraSnapshot = agcom.GUID(IStkGraphicsCameraSnapshot._uuid)
        vtable_offset_local = IStkGraphicsCameraSnapshot._vtable_offset - 1
        self.__dict__["_SaveToFile"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCameraSnapshot, vtable_offset_local+1, agcom.BSTR, agcom.LONG)
        self.__dict__["_SaveToFileWithWidthAndDPI"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCameraSnapshot, vtable_offset_local+2, agcom.BSTR, agcom.LONG, agcom.DOUBLE, agcom.DOUBLE)
        self.__dict__["_SaveToClipboard"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCameraSnapshot, vtable_offset_local+3, )
        self.__dict__["_SaveToRaster"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCameraSnapshot, vtable_offset_local+4, POINTER(agcom.PVOID))
        self.__dict__["_SaveToTexture"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCameraSnapshot, vtable_offset_local+5, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsCameraSnapshot.__dict__ and type(IStkGraphicsCameraSnapshot.__dict__[attrname]) == property:
            return IStkGraphicsCameraSnapshot.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsCameraSnapshot.")
    
    def SaveToFile(self, filename:str, cameraSnapshotFormat:"AgEStkGraphicsCameraSnapshotFileFormat") -> None:
        """Saves a snapshot of the 3D window to the filename with the specified format."""
        with agmarshall.BSTR_arg(filename) as arg_filename, \
             agmarshall.AgEnum_arg(AgEStkGraphicsCameraSnapshotFileFormat, cameraSnapshotFormat) as arg_cameraSnapshotFormat:
            agcls.evaluate_hresult(self.__dict__["_SaveToFile"](arg_filename.COM_val, arg_cameraSnapshotFormat.COM_val))

    def SaveToFileWithWidthAndDPI(self, filename:str, cameraSnapshotFormat:"AgEStkGraphicsCameraSnapshotFileFormat", widthInInches:float, dotsPerInch:float) -> None:
        """Saves a snapshot of the 3D window to the filename with the specified format at high resolution..."""
        with agmarshall.BSTR_arg(filename) as arg_filename, \
             agmarshall.AgEnum_arg(AgEStkGraphicsCameraSnapshotFileFormat, cameraSnapshotFormat) as arg_cameraSnapshotFormat, \
             agmarshall.DOUBLE_arg(widthInInches) as arg_widthInInches, \
             agmarshall.DOUBLE_arg(dotsPerInch) as arg_dotsPerInch:
            agcls.evaluate_hresult(self.__dict__["_SaveToFileWithWidthAndDPI"](arg_filename.COM_val, arg_cameraSnapshotFormat.COM_val, arg_widthInInches.COM_val, arg_dotsPerInch.COM_val))

    def SaveToClipboard(self) -> None:
        """Saves a single frame of the 3D window to the clipboard."""
        agcls.evaluate_hresult(self.__dict__["_SaveToClipboard"]())

    def SaveToRaster(self) -> "IStkGraphicsRaster":
        """Saves a snapshot of the 3D window to a raster."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_SaveToRaster"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def SaveToTexture(self) -> "IStkGraphicsRendererTexture2D":
        """Saves a snapshot of the 3D window to a texture 2d."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_SaveToTexture"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{6b6a8d90-ff4d-49b2-9fb4-5bf459818cd1}", IStkGraphicsCameraSnapshot)
agcls.AgTypeNameMap["IStkGraphicsCameraSnapshot"] = IStkGraphicsCameraSnapshot

class IStkGraphicsCameraVideoRecording(object):
    """Records the 3D window to either a movie file or to consecutively ordered image files each time the scene is rendered."""
    _uuid = "{f519ee7a-e452-451a-839d-0eda6cf69c0a}"
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetIsRecording"] = _raise_uninitialized_error
        self.__dict__["_StartRecording"] = _raise_uninitialized_error
        self.__dict__["_StartRecordingFrameStack"] = _raise_uninitialized_error
        self.__dict__["_StopRecording"] = _raise_uninitialized_error
        self.__dict__["_StartRecordingVideo"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsCameraVideoRecording._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsCameraVideoRecording from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsCameraVideoRecording = agcom.GUID(IStkGraphicsCameraVideoRecording._uuid)
        vtable_offset_local = IStkGraphicsCameraVideoRecording._vtable_offset - 1
        self.__dict__["_GetIsRecording"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCameraVideoRecording, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_StartRecording"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCameraVideoRecording, vtable_offset_local+2, agcom.BSTR, agcom.INT, agcom.INT)
        self.__dict__["_StartRecordingFrameStack"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCameraVideoRecording, vtable_offset_local+3, agcom.BSTR, agcom.BSTR, agcom.LONG, agcom.INT, agcom.INT)
        self.__dict__["_StopRecording"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCameraVideoRecording, vtable_offset_local+4, )
        self.__dict__["_StartRecordingVideo"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCameraVideoRecording, vtable_offset_local+5, agcom.BSTR, agcom.BSTR, agcom.LONG, agcom.INT, agcom.INT)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsCameraVideoRecording.__dict__ and type(IStkGraphicsCameraVideoRecording.__dict__[attrname]) == property:
            return IStkGraphicsCameraVideoRecording.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsCameraVideoRecording.")
    
    @property
    def IsRecording(self) -> bool:
        """Gets if recording is occurring or not."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetIsRecording"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def StartRecording(self, wmvFilename:str, videoBitRate:int, videoFrameRate:int) -> None:
        """This method is deprecated. Use StartRecordingVideo instead. Starts recording a file in the WMV format at the specified bit and frame rate."""
        with agmarshall.BSTR_arg(wmvFilename) as arg_wmvFilename, \
             agmarshall.INT_arg(videoBitRate) as arg_videoBitRate, \
             agmarshall.INT_arg(videoFrameRate) as arg_videoFrameRate:
            agcls.evaluate_hresult(self.__dict__["_StartRecording"](arg_wmvFilename.COM_val, arg_videoBitRate.COM_val, arg_videoFrameRate.COM_val))

    def StartRecordingFrameStack(self, fileDirectory:str, filePrefix:str, cameraSnapshotFileFormat:"AgEStkGraphicsCameraSnapshotFileFormat", startingFrameNumber:int, numberOfFrameDigits:int) -> None:
        """Starts recording a frame stack. Each frame is saved as a separate image file. The filename of each frame is defined by a prefix followed by a frame number."""
        with agmarshall.BSTR_arg(fileDirectory) as arg_fileDirectory, \
             agmarshall.BSTR_arg(filePrefix) as arg_filePrefix, \
             agmarshall.AgEnum_arg(AgEStkGraphicsCameraSnapshotFileFormat, cameraSnapshotFileFormat) as arg_cameraSnapshotFileFormat, \
             agmarshall.INT_arg(startingFrameNumber) as arg_startingFrameNumber, \
             agmarshall.INT_arg(numberOfFrameDigits) as arg_numberOfFrameDigits:
            agcls.evaluate_hresult(self.__dict__["_StartRecordingFrameStack"](arg_fileDirectory.COM_val, arg_filePrefix.COM_val, arg_cameraSnapshotFileFormat.COM_val, arg_startingFrameNumber.COM_val, arg_numberOfFrameDigits.COM_val))

    def StopRecording(self) -> None:
        """Stops recording."""
        agcls.evaluate_hresult(self.__dict__["_StopRecording"]())

    def StartRecordingVideo(self, fileDirectory:str, filePrefix:str, videoFormat:"AgEStkGraphicsCameraVideoFormat", videoBitRate:int, videoFrameRate:int) -> None:
        """Starts recording a video file at the specified bit and frame rate."""
        with agmarshall.BSTR_arg(fileDirectory) as arg_fileDirectory, \
             agmarshall.BSTR_arg(filePrefix) as arg_filePrefix, \
             agmarshall.AgEnum_arg(AgEStkGraphicsCameraVideoFormat, videoFormat) as arg_videoFormat, \
             agmarshall.INT_arg(videoBitRate) as arg_videoBitRate, \
             agmarshall.INT_arg(videoFrameRate) as arg_videoFrameRate:
            agcls.evaluate_hresult(self.__dict__["_StartRecordingVideo"](arg_fileDirectory.COM_val, arg_filePrefix.COM_val, arg_videoFormat.COM_val, arg_videoBitRate.COM_val, arg_videoFrameRate.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{f519ee7a-e452-451a-839d-0eda6cf69c0a}", IStkGraphicsCameraVideoRecording)
agcls.AgTypeNameMap["IStkGraphicsCameraVideoRecording"] = IStkGraphicsCameraVideoRecording

class IStkGraphicsCentralBodyGraphicsIndexer(object):
    """An indexer into the central body graphics for a particular central body, which provides graphical properties such as showing or hiding the central body in the scene, and working with terrain and imagery for the specified central body."""
    _uuid = "{fc4eafc1-217c-4a1b-9640-4a678d84813a}"
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetEarth"] = _raise_uninitialized_error
        self.__dict__["_GetMoon"] = _raise_uninitialized_error
        self.__dict__["_GetSun"] = _raise_uninitialized_error
        self.__dict__["_Item"] = _raise_uninitialized_error
        self.__dict__["_GetByName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsCentralBodyGraphicsIndexer._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsCentralBodyGraphicsIndexer from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsCentralBodyGraphicsIndexer = agcom.GUID(IStkGraphicsCentralBodyGraphicsIndexer._uuid)
        vtable_offset_local = IStkGraphicsCentralBodyGraphicsIndexer._vtable_offset - 1
        self.__dict__["_GetEarth"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCentralBodyGraphicsIndexer, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetMoon"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCentralBodyGraphicsIndexer, vtable_offset_local+2, POINTER(agcom.PVOID))
        self.__dict__["_GetSun"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCentralBodyGraphicsIndexer, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_Item"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCentralBodyGraphicsIndexer, vtable_offset_local+4, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_GetByName"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCentralBodyGraphicsIndexer, vtable_offset_local+5, agcom.BSTR, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsCentralBodyGraphicsIndexer.__dict__ and type(IStkGraphicsCentralBodyGraphicsIndexer.__dict__[attrname]) == property:
            return IStkGraphicsCentralBodyGraphicsIndexer.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsCentralBodyGraphicsIndexer.")
    
    @property
    def Earth(self) -> "IStkGraphicsCentralBodyGraphics":
        """Gets the central body graphics for the planet Earth. This is equivalent to passing a central body equal to an instance of earth central body to the indexer."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetEarth"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Moon(self) -> "IStkGraphicsCentralBodyGraphics":
        """Gets the central body graphics for the Moon."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMoon"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Sun(self) -> "IStkGraphicsCentralBodyGraphics":
        """Gets the central body graphics for the Sun."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSun"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def Item(self, centralBody:str) -> "IStkGraphicsCentralBodyGraphics":
        """Gets the central body graphics for the specified central body."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Item"](arg_centralBody.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def GetByName(self, name:str) -> "IStkGraphicsCentralBodyGraphics":
        """Returns the central body graphics for the central body with the given name."""
        with agmarshall.BSTR_arg(name) as arg_name, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetByName"](arg_name.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{fc4eafc1-217c-4a1b-9640-4a678d84813a}", IStkGraphicsCentralBodyGraphicsIndexer)
agcls.AgTypeNameMap["IStkGraphicsCentralBodyGraphicsIndexer"] = IStkGraphicsCentralBodyGraphicsIndexer

class IStkGraphicsCustomImageGlobeOverlay(object):
    """A globe image overlay that allows for a user defined image to be specified."""
    _uuid = "{f8086ed2-4b18-4d6d-a39f-1ab5801cf886}"
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetIsTranslucent"] = _raise_uninitialized_error
        self.__dict__["_GetMaximumMetersPerPixel"] = _raise_uninitialized_error
        self.__dict__["_GetProjection"] = _raise_uninitialized_error
        self.__dict__["_StartUp"] = _raise_uninitialized_error
        self.__dict__["_ShutDown"] = _raise_uninitialized_error
        self.__dict__["_ClearCache"] = _raise_uninitialized_error
        self.__dict__["_Reload"] = _raise_uninitialized_error
        self.__dict__["_Read"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsCustomImageGlobeOverlay._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsCustomImageGlobeOverlay from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsCustomImageGlobeOverlay = agcom.GUID(IStkGraphicsCustomImageGlobeOverlay._uuid)
        vtable_offset_local = IStkGraphicsCustomImageGlobeOverlay._vtable_offset - 1
        self.__dict__["_GetIsTranslucent"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCustomImageGlobeOverlay, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetMaximumMetersPerPixel"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCustomImageGlobeOverlay, vtable_offset_local+2, POINTER(agcom.DOUBLE))
        self.__dict__["_GetProjection"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCustomImageGlobeOverlay, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_StartUp"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCustomImageGlobeOverlay, vtable_offset_local+4, agcom.PVOID)
        self.__dict__["_ShutDown"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCustomImageGlobeOverlay, vtable_offset_local+5, agcom.PVOID)
        self.__dict__["_ClearCache"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCustomImageGlobeOverlay, vtable_offset_local+6, )
        self.__dict__["_Reload"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCustomImageGlobeOverlay, vtable_offset_local+7, )
        self.__dict__["_Read"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCustomImageGlobeOverlay, vtable_offset_local+8, POINTER(agcom.SAFEARRAY), agcom.VARIANT, agcom.PVOID, POINTER(agcom.VARIANT_BOOL))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsCustomImageGlobeOverlay.__dict__ and type(IStkGraphicsCustomImageGlobeOverlay.__dict__[attrname]) == property:
            return IStkGraphicsCustomImageGlobeOverlay.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsCustomImageGlobeOverlay.")
    
    @property
    def IsTranslucent(self) -> bool:
        """Gets whether the overlay contains translucent imagery."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetIsTranslucent"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def MaximumMetersPerPixel(self) -> float:
        """Gets the maximum resolution of the inlay in meters per pixel."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaximumMetersPerPixel"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Projection(self) -> "AgEStkGraphicsMapProjection":
        """Gets the map projection. Valid values are mercator and equidistant cylindrical."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsMapProjection) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetProjection"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def StartUp(self, scene:"IStkGraphicsScene") -> None:
        """Called automatically when imagery is being added to the globe."""
        with agmarshall.AgInterface_in_arg(scene, IStkGraphicsScene) as arg_scene:
            agcls.evaluate_hresult(self.__dict__["_StartUp"](arg_scene.COM_val))

    def ShutDown(self, scene:"IStkGraphicsScene") -> None:
        """Called automatically when imagery is being removed from the globe."""
        with agmarshall.AgInterface_in_arg(scene, IStkGraphicsScene) as arg_scene:
            agcls.evaluate_hresult(self.__dict__["_ShutDown"](arg_scene.COM_val))

    def ClearCache(self) -> None:
        """Clears the image data cache associated with this instance. This is equivalent to deleting and re-adding the overlay."""
        agcls.evaluate_hresult(self.__dict__["_ClearCache"]())

    def Reload(self) -> None:
        """Reloads the image data associated with this instance. Preserves the current image data until new image data replaces it."""
        agcls.evaluate_hresult(self.__dict__["_Reload"]())

    def Read(self, extent:list, userTileData:typing.Any, image:"IPictureDisp") -> bool:
        """Reads a tile from the specified extent, scales it to and stores the result in image."""
        with agmarshall.SAFEARRAY_arg(extent) as arg_extent, \
             agmarshall.VARIANT_arg(userTileData) as arg_userTileData, \
             agmarshall.PVOID_arg(image, IPictureDisp) as arg_image, \
             agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_Read"](byref(arg_extent.COM_val), arg_userTileData.COM_val, arg_image.COM_val, byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{f8086ed2-4b18-4d6d-a39f-1ab5801cf886}", IStkGraphicsCustomImageGlobeOverlay)
agcls.AgTypeNameMap["IStkGraphicsCustomImageGlobeOverlay"] = IStkGraphicsCustomImageGlobeOverlay

class IStkGraphicsCustomImageGlobeOverlayPluginActivator(object):
    """The Activator class provides methods to load COM plugins that implement custom image globe overlays. For more information about custom image globe overlays, see the STK Programming Interface."""
    _uuid = "{efb59b20-9f79-4043-a3bd-6cd1a3395738}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_CreateFromDisplayName"] = _raise_uninitialized_error
        self.__dict__["_GetAvailableDisplayNames"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsCustomImageGlobeOverlayPluginActivator._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsCustomImageGlobeOverlayPluginActivator from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsCustomImageGlobeOverlayPluginActivator = agcom.GUID(IStkGraphicsCustomImageGlobeOverlayPluginActivator._uuid)
        vtable_offset_local = IStkGraphicsCustomImageGlobeOverlayPluginActivator._vtable_offset - 1
        self.__dict__["_CreateFromDisplayName"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCustomImageGlobeOverlayPluginActivator, vtable_offset_local+1, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_GetAvailableDisplayNames"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCustomImageGlobeOverlayPluginActivator, vtable_offset_local+2, POINTER(agcom.SAFEARRAY))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsCustomImageGlobeOverlayPluginActivator.__dict__ and type(IStkGraphicsCustomImageGlobeOverlayPluginActivator.__dict__[attrname]) == property:
            return IStkGraphicsCustomImageGlobeOverlayPluginActivator.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsCustomImageGlobeOverlayPluginActivator.")
    
    def CreateFromDisplayName(self, displayName:str) -> "IStkGraphicsCustomImageGlobeOverlayPluginProxy":
        """Loads a custom image globe overlay COM plugin associated with the specified display name and returns a proxy object that allows accessing the custom image globe overlays implemented by the plugin."""
        with agmarshall.BSTR_arg(displayName) as arg_displayName, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_CreateFromDisplayName"](arg_displayName.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def GetAvailableDisplayNames(self) -> list:
        """Gets a list of available custom image globe overlay Display Names (Programmatic Identifiers)."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAvailableDisplayNames"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{efb59b20-9f79-4043-a3bd-6cd1a3395738}", IStkGraphicsCustomImageGlobeOverlayPluginActivator)
agcls.AgTypeNameMap["IStkGraphicsCustomImageGlobeOverlayPluginActivator"] = IStkGraphicsCustomImageGlobeOverlayPluginActivator

class IStkGraphicsCustomImageGlobeOverlayPluginProxy(object):
    """A proxy class provides access to a custom image globe overlay implemented by a plugin. Proxies are instantiated using custom image globe overlay plugin activator."""
    _uuid = "{197fbafd-0f9c-44d9-b2d0-14c8b30f312e}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCustomImageGlobeOverlay"] = _raise_uninitialized_error
        self.__dict__["_GetIsCustomImageGlobeOverlaySupported"] = _raise_uninitialized_error
        self.__dict__["_GetRealPluginObject"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsCustomImageGlobeOverlayPluginProxy._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsCustomImageGlobeOverlayPluginProxy from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsCustomImageGlobeOverlayPluginProxy = agcom.GUID(IStkGraphicsCustomImageGlobeOverlayPluginProxy._uuid)
        vtable_offset_local = IStkGraphicsCustomImageGlobeOverlayPluginProxy._vtable_offset - 1
        self.__dict__["_GetCustomImageGlobeOverlay"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCustomImageGlobeOverlayPluginProxy, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetIsCustomImageGlobeOverlaySupported"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCustomImageGlobeOverlayPluginProxy, vtable_offset_local+2, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetRealPluginObject"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCustomImageGlobeOverlayPluginProxy, vtable_offset_local+3, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsCustomImageGlobeOverlayPluginProxy.__dict__ and type(IStkGraphicsCustomImageGlobeOverlayPluginProxy.__dict__[attrname]) == property:
            return IStkGraphicsCustomImageGlobeOverlayPluginProxy.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsCustomImageGlobeOverlayPluginProxy.")
    
    @property
    def CustomImageGlobeOverlay(self) -> "IStkGraphicsCustomImageGlobeOverlay":
        """Returns a custom image globe overlay."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCustomImageGlobeOverlay"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def IsCustomImageGlobeOverlaySupported(self) -> bool:
        """Returns true if custom image globe overlays are supported."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetIsCustomImageGlobeOverlaySupported"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def RealPluginObject(self) -> typing.Any:
        """Returns a pointer to plugin object's IUnknown interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetRealPluginObject"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{197fbafd-0f9c-44d9-b2d0-14c8b30f312e}", IStkGraphicsCustomImageGlobeOverlayPluginProxy)
agcls.AgTypeNameMap["IStkGraphicsCustomImageGlobeOverlayPluginProxy"] = IStkGraphicsCustomImageGlobeOverlayPluginProxy

class IStkGraphicsGeospatialImageGlobeOverlay(object):
    """A globe image overlay for handling <a href='http://www.jpeg.org/jpeg2000/'>JPEG 2000</a> (.jp2), ECW (.ecw), ECWP, and MrSid (.sid) image formats in the WGS84 geographic projection."""
    _uuid = "{fd42a5ba-5049-4c58-bf40-61ca5943dccf}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetUseTransparentColor"] = _raise_uninitialized_error
        self.__dict__["_SetUseTransparentColor"] = _raise_uninitialized_error
        self.__dict__["_GetTransparentColor"] = _raise_uninitialized_error
        self.__dict__["_SetTransparentColor"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsGeospatialImageGlobeOverlay._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsGeospatialImageGlobeOverlay from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsGeospatialImageGlobeOverlay = agcom.GUID(IStkGraphicsGeospatialImageGlobeOverlay._uuid)
        vtable_offset_local = IStkGraphicsGeospatialImageGlobeOverlay._vtable_offset - 1
        self.__dict__["_GetUseTransparentColor"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsGeospatialImageGlobeOverlay, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseTransparentColor"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsGeospatialImageGlobeOverlay, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetTransparentColor"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsGeospatialImageGlobeOverlay, vtable_offset_local+3, POINTER(agcom.OLE_COLOR))
        self.__dict__["_SetTransparentColor"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsGeospatialImageGlobeOverlay, vtable_offset_local+4, agcom.OLE_COLOR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsGeospatialImageGlobeOverlay.__dict__ and type(IStkGraphicsGeospatialImageGlobeOverlay.__dict__[attrname]) == property:
            return IStkGraphicsGeospatialImageGlobeOverlay.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsGeospatialImageGlobeOverlay.")
    
    @property
    def UseTransparentColor(self) -> bool:
        """Gets or sets whether transparent color should be used."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseTransparentColor"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @UseTransparentColor.setter
    def UseTransparentColor(self, useTransparentColor:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(useTransparentColor) as arg_useTransparentColor:
            agcls.evaluate_hresult(self.__dict__["_SetUseTransparentColor"](arg_useTransparentColor.COM_val))

    @property
    def TransparentColor(self) -> agcolor.Color:
        """Gets or sets the color that will become transparent."""
        with agmarshall.OLE_COLOR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTransparentColor"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @TransparentColor.setter
    def TransparentColor(self, transparentColor:agcolor.Color) -> None:
        with agmarshall.OLE_COLOR_arg(transparentColor) as arg_transparentColor:
            agcls.evaluate_hresult(self.__dict__["_SetTransparentColor"](arg_transparentColor.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{fd42a5ba-5049-4c58-bf40-61ca5943dccf}", IStkGraphicsGeospatialImageGlobeOverlay)
agcls.AgTypeNameMap["IStkGraphicsGeospatialImageGlobeOverlay"] = IStkGraphicsGeospatialImageGlobeOverlay

class IStkGraphicsGlobeOverlay(object):
    """The base class of all terrain overlay and globe image overlay objects."""
    _uuid = "{983949c2-68a3-46ee-9670-f174091286ad}"
    _num_methods = 7
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCentralBody"] = _raise_uninitialized_error
        self.__dict__["_GetExtent"] = _raise_uninitialized_error
        self.__dict__["_GetRole"] = _raise_uninitialized_error
        self.__dict__["_GetUriAsString"] = _raise_uninitialized_error
        self.__dict__["_GetIsValid"] = _raise_uninitialized_error
        self.__dict__["_GetDisplayCondition"] = _raise_uninitialized_error
        self.__dict__["_SetDisplayCondition"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsGlobeOverlay._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsGlobeOverlay from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsGlobeOverlay = agcom.GUID(IStkGraphicsGlobeOverlay._uuid)
        vtable_offset_local = IStkGraphicsGlobeOverlay._vtable_offset - 1
        self.__dict__["_GetCentralBody"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsGlobeOverlay, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_GetExtent"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsGlobeOverlay, vtable_offset_local+2, POINTER(agcom.SAFEARRAY))
        self.__dict__["_GetRole"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsGlobeOverlay, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_GetUriAsString"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsGlobeOverlay, vtable_offset_local+4, POINTER(agcom.BSTR))
        self.__dict__["_GetIsValid"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsGlobeOverlay, vtable_offset_local+5, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetDisplayCondition"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsGlobeOverlay, vtable_offset_local+6, POINTER(agcom.PVOID))
        self.__dict__["_SetDisplayCondition"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsGlobeOverlay, vtable_offset_local+7, agcom.PVOID)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsGlobeOverlay.__dict__ and type(IStkGraphicsGlobeOverlay.__dict__[attrname]) == property:
            return IStkGraphicsGlobeOverlay.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsGlobeOverlay.")
    
    @property
    def CentralBody(self) -> str:
        """Gets the central body that the globe overlay is displayed on. It will return <see langword='null' /> if the globe overlay hasn't been added to a central body."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBody"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Extent(self) -> list:
        """Gets the cartographic extent that represents the area covered by the globe overlay. The array elements are arranged in the order west longitude, south latitude, east longitude, north latitude."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetExtent"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Role(self) -> "AgEStkGraphicsGlobeOverlayRole":
        """Gets the globe overlay role of the globe overlay."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsGlobeOverlayRole) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetRole"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def UriAsString(self) -> str:
        """Gets the absolute URI specifying the location of the globe overlay."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetUriAsString"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def IsValid(self) -> bool:
        """Gets whether or not the overlay is valid. It can be invalid because of a missing file, corrupt file, unlicensed file, or a file on the incorrect central body."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetIsValid"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def DisplayCondition(self) -> "IStkGraphicsDisplayCondition":
        """Gets or sets the display condition that controls whether or not the globe overlay is displayed."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDisplayCondition"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @DisplayCondition.setter
    def DisplayCondition(self, displayCondition:"IStkGraphicsDisplayCondition") -> None:
        with agmarshall.AgInterface_in_arg(displayCondition, IStkGraphicsDisplayCondition) as arg_displayCondition:
            agcls.evaluate_hresult(self.__dict__["_SetDisplayCondition"](arg_displayCondition.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{983949c2-68a3-46ee-9670-f174091286ad}", IStkGraphicsGlobeOverlay)
agcls.AgTypeNameMap["IStkGraphicsGlobeOverlay"] = IStkGraphicsGlobeOverlay

class IStkGraphicsGlobeOverlaySettings(object):
    """Settings used by globe overlay objects. These setting affect all scenes."""
    _uuid = "{2864d6df-bbe2-42b7-9838-27d1f5ff5be6}"
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetTerrainCacheSize"] = _raise_uninitialized_error
        self.__dict__["_SetTerrainCacheSize"] = _raise_uninitialized_error
        self.__dict__["_GetImageryCacheSize"] = _raise_uninitialized_error
        self.__dict__["_SetImageryCacheSize"] = _raise_uninitialized_error
        self.__dict__["_GetPreloadTerrainAndImagery"] = _raise_uninitialized_error
        self.__dict__["_SetPreloadTerrainAndImagery"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsGlobeOverlaySettings._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsGlobeOverlaySettings from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsGlobeOverlaySettings = agcom.GUID(IStkGraphicsGlobeOverlaySettings._uuid)
        vtable_offset_local = IStkGraphicsGlobeOverlaySettings._vtable_offset - 1
        self.__dict__["_GetTerrainCacheSize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsGlobeOverlaySettings, vtable_offset_local+1, POINTER(agcom.INT))
        self.__dict__["_SetTerrainCacheSize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsGlobeOverlaySettings, vtable_offset_local+2, agcom.INT)
        self.__dict__["_GetImageryCacheSize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsGlobeOverlaySettings, vtable_offset_local+3, POINTER(agcom.INT))
        self.__dict__["_SetImageryCacheSize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsGlobeOverlaySettings, vtable_offset_local+4, agcom.INT)
        self.__dict__["_GetPreloadTerrainAndImagery"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsGlobeOverlaySettings, vtable_offset_local+5, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetPreloadTerrainAndImagery"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsGlobeOverlaySettings, vtable_offset_local+6, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsGlobeOverlaySettings.__dict__ and type(IStkGraphicsGlobeOverlaySettings.__dict__[attrname]) == property:
            return IStkGraphicsGlobeOverlaySettings.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsGlobeOverlaySettings.")
    
    @property
    def TerrainCacheSize(self) -> int:
        """Gets or sets the size of the terrain cache in megabytes. It is not recommended to go above 128 megabytes. Large cache sizes can slow down rendering since so much imagery will be rendered."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTerrainCacheSize"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @TerrainCacheSize.setter
    def TerrainCacheSize(self, terrainCacheSize:int) -> None:
        with agmarshall.INT_arg(terrainCacheSize) as arg_terrainCacheSize:
            agcls.evaluate_hresult(self.__dict__["_SetTerrainCacheSize"](arg_terrainCacheSize.COM_val))

    @property
    def ImageryCacheSize(self) -> int:
        """Gets or sets the size of the imagery cache in megabytes. It is not recommended to go above 128 megabytes. Large cache sizes can slow down rendering since so much imagery will be rendered."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetImageryCacheSize"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @ImageryCacheSize.setter
    def ImageryCacheSize(self, imageryCacheSize:int) -> None:
        with agmarshall.INT_arg(imageryCacheSize) as arg_imageryCacheSize:
            agcls.evaluate_hresult(self.__dict__["_SetImageryCacheSize"](arg_imageryCacheSize.COM_val))

    @property
    def PreloadTerrainAndImagery(self) -> bool:
        """Gets or sets whether terrain and imagery are preloaded. When set to true, terrain and imagery are preloaded to get the best visual quality; when set to false, they are not preloaded..."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPreloadTerrainAndImagery"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @PreloadTerrainAndImagery.setter
    def PreloadTerrainAndImagery(self, preloadTerrainAndImagery:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(preloadTerrainAndImagery) as arg_preloadTerrainAndImagery:
            agcls.evaluate_hresult(self.__dict__["_SetPreloadTerrainAndImagery"](arg_preloadTerrainAndImagery.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{2864d6df-bbe2-42b7-9838-27d1f5ff5be6}", IStkGraphicsGlobeOverlaySettings)
agcls.AgTypeNameMap["IStkGraphicsGlobeOverlaySettings"] = IStkGraphicsGlobeOverlaySettings

class IStkGraphicsLighting(object):
    """Lighting in the 3D scene."""
    _uuid = "{683cd020-54fc-48af-b7e4-0dbe06c9bf12}"
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetEnabled"] = _raise_uninitialized_error
        self.__dict__["_SetEnabled"] = _raise_uninitialized_error
        self.__dict__["_GetAmbientIntensity"] = _raise_uninitialized_error
        self.__dict__["_SetAmbientIntensity"] = _raise_uninitialized_error
        self.__dict__["_GetDiffuseIntensity"] = _raise_uninitialized_error
        self.__dict__["_SetDiffuseIntensity"] = _raise_uninitialized_error
        self.__dict__["_GetNightLightsIntensity"] = _raise_uninitialized_error
        self.__dict__["_SetNightLightsIntensity"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsLighting._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsLighting from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsLighting = agcom.GUID(IStkGraphicsLighting._uuid)
        vtable_offset_local = IStkGraphicsLighting._vtable_offset - 1
        self.__dict__["_GetEnabled"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsLighting, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetEnabled"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsLighting, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetAmbientIntensity"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsLighting, vtable_offset_local+3, POINTER(agcom.FLOAT))
        self.__dict__["_SetAmbientIntensity"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsLighting, vtable_offset_local+4, agcom.FLOAT)
        self.__dict__["_GetDiffuseIntensity"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsLighting, vtable_offset_local+5, POINTER(agcom.FLOAT))
        self.__dict__["_SetDiffuseIntensity"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsLighting, vtable_offset_local+6, agcom.FLOAT)
        self.__dict__["_GetNightLightsIntensity"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsLighting, vtable_offset_local+7, POINTER(agcom.FLOAT))
        self.__dict__["_SetNightLightsIntensity"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsLighting, vtable_offset_local+8, agcom.FLOAT)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsLighting.__dict__ and type(IStkGraphicsLighting.__dict__[attrname]) == property:
            return IStkGraphicsLighting.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsLighting.")
    
    @property
    def Enabled(self) -> bool:
        """Gets or sets whether or not lighting is enabled."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnabled"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Enabled.setter
    def Enabled(self, enabled:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(enabled) as arg_enabled:
            agcls.evaluate_hresult(self.__dict__["_SetEnabled"](arg_enabled.COM_val))

    @property
    def AmbientIntensity(self) -> float:
        """Gets or sets the ambient intensity throughout the scene."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAmbientIntensity"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @AmbientIntensity.setter
    def AmbientIntensity(self, ambientIntensity:float) -> None:
        with agmarshall.FLOAT_arg(ambientIntensity) as arg_ambientIntensity:
            agcls.evaluate_hresult(self.__dict__["_SetAmbientIntensity"](arg_ambientIntensity.COM_val))

    @property
    def DiffuseIntensity(self) -> float:
        """Gets or sets the diffuse intensity from the sun."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDiffuseIntensity"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @DiffuseIntensity.setter
    def DiffuseIntensity(self, diffuseIntensity:float) -> None:
        with agmarshall.FLOAT_arg(diffuseIntensity) as arg_diffuseIntensity:
            agcls.evaluate_hresult(self.__dict__["_SetDiffuseIntensity"](arg_diffuseIntensity.COM_val))

    @property
    def NightLightsIntensity(self) -> float:
        """Gets or sets the overall brightness for the night light's image overlay, night overlay."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetNightLightsIntensity"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @NightLightsIntensity.setter
    def NightLightsIntensity(self, nightLightsIntensity:float) -> None:
        with agmarshall.FLOAT_arg(nightLightsIntensity) as arg_nightLightsIntensity:
            agcls.evaluate_hresult(self.__dict__["_SetNightLightsIntensity"](arg_nightLightsIntensity.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{683cd020-54fc-48af-b7e4-0dbe06c9bf12}", IStkGraphicsLighting)
agcls.AgTypeNameMap["IStkGraphicsLighting"] = IStkGraphicsLighting

class IStkGraphicsPathPrimitiveUpdatePolicy(object):
    """A class that encapsulates the update logic for a path primitive. Derived classes must implement the Update method."""
    _uuid = "{71fe898e-dabb-4501-9c80-dcb1cde9c16b}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Update"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsPathPrimitiveUpdatePolicy._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsPathPrimitiveUpdatePolicy from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsPathPrimitiveUpdatePolicy = agcom.GUID(IStkGraphicsPathPrimitiveUpdatePolicy._uuid)
        vtable_offset_local = IStkGraphicsPathPrimitiveUpdatePolicy._vtable_offset - 1
        self.__dict__["_Update"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPathPrimitiveUpdatePolicy, vtable_offset_local+1, agcom.PVOID, agcom.PVOID)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsPathPrimitiveUpdatePolicy.__dict__ and type(IStkGraphicsPathPrimitiveUpdatePolicy.__dict__[attrname]) == property:
            return IStkGraphicsPathPrimitiveUpdatePolicy.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsPathPrimitiveUpdatePolicy.")
    
    def Update(self, pathPrimitive:"IStkGraphicsPathPrimitive", date:"IDate") -> None:
        """Updates the pathPrimitive at the specified date."""
        with agmarshall.AgInterface_in_arg(pathPrimitive, IStkGraphicsPathPrimitive) as arg_pathPrimitive, \
             agmarshall.AgInterface_in_arg(date, IDate) as arg_date:
            agcls.evaluate_hresult(self.__dict__["_Update"](arg_pathPrimitive.COM_val, arg_date.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{71fe898e-dabb-4501-9c80-dcb1cde9c16b}", IStkGraphicsPathPrimitiveUpdatePolicy)
agcls.AgTypeNameMap["IStkGraphicsPathPrimitiveUpdatePolicy"] = IStkGraphicsPathPrimitiveUpdatePolicy

class IStkGraphicsProjectedRasterOverlay(object):
    """A globe image overlay which projects a raster onto the terrain or surface of the central body. You can also enable projection onto models by setting projected raster model projection to true for a Scene..."""
    _uuid = "{7cb212ed-4ef5-43c7-bbc3-f2ebd4dfd143}"
    _num_methods = 36
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetRaster"] = _raise_uninitialized_error
        self.__dict__["_SetRaster"] = _raise_uninitialized_error
        self.__dict__["_GetProjection"] = _raise_uninitialized_error
        self.__dict__["_SetProjection"] = _raise_uninitialized_error
        self.__dict__["_GetShowShadows"] = _raise_uninitialized_error
        self.__dict__["_SetShowShadows"] = _raise_uninitialized_error
        self.__dict__["_GetShowFrustum"] = _raise_uninitialized_error
        self.__dict__["_SetShowFrustum"] = _raise_uninitialized_error
        self.__dict__["_GetShowFarPlane"] = _raise_uninitialized_error
        self.__dict__["_SetShowFarPlane"] = _raise_uninitialized_error
        self.__dict__["_GetColor"] = _raise_uninitialized_error
        self.__dict__["_SetColor"] = _raise_uninitialized_error
        self.__dict__["_GetFrustumColor"] = _raise_uninitialized_error
        self.__dict__["_SetFrustumColor"] = _raise_uninitialized_error
        self.__dict__["_GetFarPlaneColor"] = _raise_uninitialized_error
        self.__dict__["_SetFarPlaneColor"] = _raise_uninitialized_error
        self.__dict__["_GetShadowColor"] = _raise_uninitialized_error
        self.__dict__["_SetShadowColor"] = _raise_uninitialized_error
        self.__dict__["_GetBorderColor"] = _raise_uninitialized_error
        self.__dict__["_SetBorderColor"] = _raise_uninitialized_error
        self.__dict__["_GetBorderWidth"] = _raise_uninitialized_error
        self.__dict__["_SetBorderWidth"] = _raise_uninitialized_error
        self.__dict__["_GetFrustumTranslucency"] = _raise_uninitialized_error
        self.__dict__["_SetFrustumTranslucency"] = _raise_uninitialized_error
        self.__dict__["_GetFarPlaneTranslucency"] = _raise_uninitialized_error
        self.__dict__["_SetFarPlaneTranslucency"] = _raise_uninitialized_error
        self.__dict__["_GetShadowTranslucency"] = _raise_uninitialized_error
        self.__dict__["_SetShadowTranslucency"] = _raise_uninitialized_error
        self.__dict__["_GetBorderTranslucency"] = _raise_uninitialized_error
        self.__dict__["_SetBorderTranslucency"] = _raise_uninitialized_error
        self.__dict__["_GetUseTransparentColor"] = _raise_uninitialized_error
        self.__dict__["_SetUseTransparentColor"] = _raise_uninitialized_error
        self.__dict__["_GetTransparentColor"] = _raise_uninitialized_error
        self.__dict__["_SetTransparentColor"] = _raise_uninitialized_error
        self.__dict__["_GetDirections"] = _raise_uninitialized_error
        self.__dict__["_GetSupported"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsProjectedRasterOverlay._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsProjectedRasterOverlay from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsProjectedRasterOverlay = agcom.GUID(IStkGraphicsProjectedRasterOverlay._uuid)
        vtable_offset_local = IStkGraphicsProjectedRasterOverlay._vtable_offset - 1
        self.__dict__["_GetRaster"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsProjectedRasterOverlay, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_SetRaster"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsProjectedRasterOverlay, vtable_offset_local+2, agcom.PVOID)
        self.__dict__["_GetProjection"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsProjectedRasterOverlay, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_SetProjection"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsProjectedRasterOverlay, vtable_offset_local+4, agcom.PVOID)
        self.__dict__["_GetShowShadows"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsProjectedRasterOverlay, vtable_offset_local+5, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetShowShadows"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsProjectedRasterOverlay, vtable_offset_local+6, agcom.VARIANT_BOOL)
        self.__dict__["_GetShowFrustum"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsProjectedRasterOverlay, vtable_offset_local+7, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetShowFrustum"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsProjectedRasterOverlay, vtable_offset_local+8, agcom.VARIANT_BOOL)
        self.__dict__["_GetShowFarPlane"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsProjectedRasterOverlay, vtable_offset_local+9, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetShowFarPlane"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsProjectedRasterOverlay, vtable_offset_local+10, agcom.VARIANT_BOOL)
        self.__dict__["_GetColor"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsProjectedRasterOverlay, vtable_offset_local+11, POINTER(agcom.OLE_COLOR))
        self.__dict__["_SetColor"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsProjectedRasterOverlay, vtable_offset_local+12, agcom.OLE_COLOR)
        self.__dict__["_GetFrustumColor"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsProjectedRasterOverlay, vtable_offset_local+13, POINTER(agcom.OLE_COLOR))
        self.__dict__["_SetFrustumColor"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsProjectedRasterOverlay, vtable_offset_local+14, agcom.OLE_COLOR)
        self.__dict__["_GetFarPlaneColor"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsProjectedRasterOverlay, vtable_offset_local+15, POINTER(agcom.OLE_COLOR))
        self.__dict__["_SetFarPlaneColor"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsProjectedRasterOverlay, vtable_offset_local+16, agcom.OLE_COLOR)
        self.__dict__["_GetShadowColor"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsProjectedRasterOverlay, vtable_offset_local+17, POINTER(agcom.OLE_COLOR))
        self.__dict__["_SetShadowColor"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsProjectedRasterOverlay, vtable_offset_local+18, agcom.OLE_COLOR)
        self.__dict__["_GetBorderColor"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsProjectedRasterOverlay, vtable_offset_local+19, POINTER(agcom.OLE_COLOR))
        self.__dict__["_SetBorderColor"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsProjectedRasterOverlay, vtable_offset_local+20, agcom.OLE_COLOR)
        self.__dict__["_GetBorderWidth"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsProjectedRasterOverlay, vtable_offset_local+21, POINTER(agcom.FLOAT))
        self.__dict__["_SetBorderWidth"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsProjectedRasterOverlay, vtable_offset_local+22, agcom.FLOAT)
        self.__dict__["_GetFrustumTranslucency"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsProjectedRasterOverlay, vtable_offset_local+23, POINTER(agcom.FLOAT))
        self.__dict__["_SetFrustumTranslucency"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsProjectedRasterOverlay, vtable_offset_local+24, agcom.FLOAT)
        self.__dict__["_GetFarPlaneTranslucency"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsProjectedRasterOverlay, vtable_offset_local+25, POINTER(agcom.FLOAT))
        self.__dict__["_SetFarPlaneTranslucency"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsProjectedRasterOverlay, vtable_offset_local+26, agcom.FLOAT)
        self.__dict__["_GetShadowTranslucency"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsProjectedRasterOverlay, vtable_offset_local+27, POINTER(agcom.FLOAT))
        self.__dict__["_SetShadowTranslucency"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsProjectedRasterOverlay, vtable_offset_local+28, agcom.FLOAT)
        self.__dict__["_GetBorderTranslucency"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsProjectedRasterOverlay, vtable_offset_local+29, POINTER(agcom.FLOAT))
        self.__dict__["_SetBorderTranslucency"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsProjectedRasterOverlay, vtable_offset_local+30, agcom.FLOAT)
        self.__dict__["_GetUseTransparentColor"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsProjectedRasterOverlay, vtable_offset_local+31, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseTransparentColor"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsProjectedRasterOverlay, vtable_offset_local+32, agcom.VARIANT_BOOL)
        self.__dict__["_GetTransparentColor"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsProjectedRasterOverlay, vtable_offset_local+33, POINTER(agcom.OLE_COLOR))
        self.__dict__["_SetTransparentColor"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsProjectedRasterOverlay, vtable_offset_local+34, agcom.OLE_COLOR)
        self.__dict__["_GetDirections"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsProjectedRasterOverlay, vtable_offset_local+35, POINTER(agcom.SAFEARRAY))
        self.__dict__["_GetSupported"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsProjectedRasterOverlay, vtable_offset_local+36, POINTER(agcom.VARIANT_BOOL))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsProjectedRasterOverlay.__dict__ and type(IStkGraphicsProjectedRasterOverlay.__dict__[attrname]) == property:
            return IStkGraphicsProjectedRasterOverlay.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsProjectedRasterOverlay.")
    
    @property
    def Raster(self) -> "IStkGraphicsRaster":
        """Gets or sets the raster that is projected."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetRaster"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @Raster.setter
    def Raster(self, raster:"IStkGraphicsRaster") -> None:
        with agmarshall.AgInterface_in_arg(raster, IStkGraphicsRaster) as arg_raster:
            agcls.evaluate_hresult(self.__dict__["_SetRaster"](arg_raster.COM_val))

    @property
    def Projection(self) -> "IStkGraphicsProjection":
        """Gets or sets the projection that projects the raster."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetProjection"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @Projection.setter
    def Projection(self, projection:"IStkGraphicsProjection") -> None:
        with agmarshall.AgInterface_in_arg(projection, IStkGraphicsProjection) as arg_projection:
            agcls.evaluate_hresult(self.__dict__["_SetProjection"](arg_projection.COM_val))

    @property
    def ShowShadows(self) -> bool:
        """Gets or sets whether to show shadows or not. When set to true, the raster will only be projected onto parts of the terrain visible from the projection's position. When false, the raster will project onto any terrain inside the projection's view frustum..."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetShowShadows"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @ShowShadows.setter
    def ShowShadows(self, showShadows:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(showShadows) as arg_showShadows:
            agcls.evaluate_hresult(self.__dict__["_SetShowShadows"](arg_showShadows.COM_val))

    @property
    def ShowFrustum(self) -> bool:
        """Gets or sets whether to show the frustum of the projection."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetShowFrustum"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @ShowFrustum.setter
    def ShowFrustum(self, showFrustum:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(showFrustum) as arg_showFrustum:
            agcls.evaluate_hresult(self.__dict__["_SetShowFrustum"](arg_showFrustum.COM_val))

    @property
    def ShowFarPlane(self) -> bool:
        """Gets or sets whether to show the far plane of the projection. If this is set to true, you will see the projected raster even when it does not intersect terrain."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetShowFarPlane"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @ShowFarPlane.setter
    def ShowFarPlane(self, showFarPlane:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(showFarPlane) as arg_showFarPlane:
            agcls.evaluate_hresult(self.__dict__["_SetShowFarPlane"](arg_showFarPlane.COM_val))

    @property
    def Color(self) -> agcolor.Color:
        """Gets or sets the color of the projected raster."""
        with agmarshall.OLE_COLOR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetColor"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Color.setter
    def Color(self, color:agcolor.Color) -> None:
        with agmarshall.OLE_COLOR_arg(color) as arg_color:
            agcls.evaluate_hresult(self.__dict__["_SetColor"](arg_color.COM_val))

    @property
    def FrustumColor(self) -> agcolor.Color:
        """Gets or sets the color of the projection's frustum."""
        with agmarshall.OLE_COLOR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetFrustumColor"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @FrustumColor.setter
    def FrustumColor(self, frustumColor:agcolor.Color) -> None:
        with agmarshall.OLE_COLOR_arg(frustumColor) as arg_frustumColor:
            agcls.evaluate_hresult(self.__dict__["_SetFrustumColor"](arg_frustumColor.COM_val))

    @property
    def FarPlaneColor(self) -> agcolor.Color:
        """Gets or sets the color of the projection's far plane."""
        with agmarshall.OLE_COLOR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetFarPlaneColor"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @FarPlaneColor.setter
    def FarPlaneColor(self, farPlaneColor:agcolor.Color) -> None:
        with agmarshall.OLE_COLOR_arg(farPlaneColor) as arg_farPlaneColor:
            agcls.evaluate_hresult(self.__dict__["_SetFarPlaneColor"](arg_farPlaneColor.COM_val))

    @property
    def ShadowColor(self) -> agcolor.Color:
        """Gets or sets the color of the projection's shadow."""
        with agmarshall.OLE_COLOR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetShadowColor"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @ShadowColor.setter
    def ShadowColor(self, shadowColor:agcolor.Color) -> None:
        with agmarshall.OLE_COLOR_arg(shadowColor) as arg_shadowColor:
            agcls.evaluate_hresult(self.__dict__["_SetShadowColor"](arg_shadowColor.COM_val))

    @property
    def BorderColor(self) -> agcolor.Color:
        """Gets or sets the color of the projection's border."""
        with agmarshall.OLE_COLOR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBorderColor"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @BorderColor.setter
    def BorderColor(self, borderColor:agcolor.Color) -> None:
        with agmarshall.OLE_COLOR_arg(borderColor) as arg_borderColor:
            agcls.evaluate_hresult(self.__dict__["_SetBorderColor"](arg_borderColor.COM_val))

    @property
    def BorderWidth(self) -> float:
        """Gets or sets the width of the projection's border."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBorderWidth"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @BorderWidth.setter
    def BorderWidth(self, borderWidth:float) -> None:
        with agmarshall.FLOAT_arg(borderWidth) as arg_borderWidth:
            agcls.evaluate_hresult(self.__dict__["_SetBorderWidth"](arg_borderWidth.COM_val))

    @property
    def FrustumTranslucency(self) -> float:
        """Gets or sets the translucency of the projection's frustum."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetFrustumTranslucency"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @FrustumTranslucency.setter
    def FrustumTranslucency(self, frustumTranslucency:float) -> None:
        with agmarshall.FLOAT_arg(frustumTranslucency) as arg_frustumTranslucency:
            agcls.evaluate_hresult(self.__dict__["_SetFrustumTranslucency"](arg_frustumTranslucency.COM_val))

    @property
    def FarPlaneTranslucency(self) -> float:
        """Gets or sets the translucency of the projection's far plane."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetFarPlaneTranslucency"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @FarPlaneTranslucency.setter
    def FarPlaneTranslucency(self, farPlaneTranslucency:float) -> None:
        with agmarshall.FLOAT_arg(farPlaneTranslucency) as arg_farPlaneTranslucency:
            agcls.evaluate_hresult(self.__dict__["_SetFarPlaneTranslucency"](arg_farPlaneTranslucency.COM_val))

    @property
    def ShadowTranslucency(self) -> float:
        """Gets or sets the translucency of the projection's shadow."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetShadowTranslucency"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @ShadowTranslucency.setter
    def ShadowTranslucency(self, shadowTranslucency:float) -> None:
        with agmarshall.FLOAT_arg(shadowTranslucency) as arg_shadowTranslucency:
            agcls.evaluate_hresult(self.__dict__["_SetShadowTranslucency"](arg_shadowTranslucency.COM_val))

    @property
    def BorderTranslucency(self) -> float:
        """Gets or sets the translucency of the projection's border."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBorderTranslucency"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @BorderTranslucency.setter
    def BorderTranslucency(self, borderTranslucency:float) -> None:
        with agmarshall.FLOAT_arg(borderTranslucency) as arg_borderTranslucency:
            agcls.evaluate_hresult(self.__dict__["_SetBorderTranslucency"](arg_borderTranslucency.COM_val))

    @property
    def UseTransparentColor(self) -> bool:
        """Gets or sets whether transparent color should be used."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseTransparentColor"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @UseTransparentColor.setter
    def UseTransparentColor(self, useTransparentColor:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(useTransparentColor) as arg_useTransparentColor:
            agcls.evaluate_hresult(self.__dict__["_SetUseTransparentColor"](arg_useTransparentColor.COM_val))

    @property
    def TransparentColor(self) -> agcolor.Color:
        """Gets or sets the color that will become transparent."""
        with agmarshall.OLE_COLOR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTransparentColor"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @TransparentColor.setter
    def TransparentColor(self, transparentColor:agcolor.Color) -> None:
        with agmarshall.OLE_COLOR_arg(transparentColor) as arg_transparentColor:
            agcls.evaluate_hresult(self.__dict__["_SetTransparentColor"](arg_transparentColor.COM_val))

    @property
    def Directions(self) -> list:
        """Gets the direction vectors in the central body's fixed reference frame that define the projection's frustum..."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDirections"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Supported(self) -> bool:
        """Gets whether or not the video card supports the projected raster overlay."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSupported"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{7cb212ed-4ef5-43c7-bbc3-f2ebd4dfd143}", IStkGraphicsProjectedRasterOverlay)
agcls.AgTypeNameMap["IStkGraphicsProjectedRasterOverlay"] = IStkGraphicsProjectedRasterOverlay

class IStkGraphicsProjection(object):
    """A projection represents a simplified camera with a position, orientation, and field of view horizontal and field of view vertical..."""
    _uuid = "{152e3a02-23b0-4dc8-a7e5-9ee19619bcab}"
    _num_methods = 12
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetPosition"] = _raise_uninitialized_error
        self.__dict__["_SetPosition"] = _raise_uninitialized_error
        self.__dict__["_GetOrientation"] = _raise_uninitialized_error
        self.__dict__["_SetOrientation"] = _raise_uninitialized_error
        self.__dict__["_GetFieldOfViewHorizontal"] = _raise_uninitialized_error
        self.__dict__["_SetFieldOfViewHorizontal"] = _raise_uninitialized_error
        self.__dict__["_GetFieldOfViewVertical"] = _raise_uninitialized_error
        self.__dict__["_SetFieldOfViewVertical"] = _raise_uninitialized_error
        self.__dict__["_GetNearPlane"] = _raise_uninitialized_error
        self.__dict__["_SetNearPlane"] = _raise_uninitialized_error
        self.__dict__["_GetFarPlane"] = _raise_uninitialized_error
        self.__dict__["_SetFarPlane"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsProjection._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsProjection from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsProjection = agcom.GUID(IStkGraphicsProjection._uuid)
        vtable_offset_local = IStkGraphicsProjection._vtable_offset - 1
        self.__dict__["_GetPosition"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsProjection, vtable_offset_local+1, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetPosition"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsProjection, vtable_offset_local+2, agcom.SAFEARRAY)
        self.__dict__["_GetOrientation"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsProjection, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_SetOrientation"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsProjection, vtable_offset_local+4, agcom.PVOID)
        self.__dict__["_GetFieldOfViewHorizontal"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsProjection, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetFieldOfViewHorizontal"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsProjection, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetFieldOfViewVertical"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsProjection, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetFieldOfViewVertical"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsProjection, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetNearPlane"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsProjection, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetNearPlane"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsProjection, vtable_offset_local+10, agcom.DOUBLE)
        self.__dict__["_GetFarPlane"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsProjection, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_SetFarPlane"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsProjection, vtable_offset_local+12, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsProjection.__dict__ and type(IStkGraphicsProjection.__dict__[attrname]) == property:
            return IStkGraphicsProjection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsProjection.")
    
    @property
    def Position(self) -> list:
        """Gets or sets the cartesian defining the position of the projection in the central body's fixed reference frame. The array contains the components of the position arranged in the order x, y, z."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPosition"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @Position.setter
    def Position(self, position:list) -> None:
        with agmarshall.SAFEARRAY_arg(position) as arg_position:
            agcls.evaluate_hresult(self.__dict__["_SetPosition"](arg_position.COM_val))

    @property
    def Orientation(self) -> "IOrientation":
        """Gets or sets the unit quaternion defining the orientation of the projection in the central body's fixed reference frame."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetOrientation"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @Orientation.setter
    def Orientation(self, orientation:"IOrientation") -> None:
        with agmarshall.AgInterface_in_arg(orientation, IOrientation) as arg_orientation:
            agcls.evaluate_hresult(self.__dict__["_SetOrientation"](arg_orientation.COM_val))

    @property
    def FieldOfViewHorizontal(self) -> float:
        """Gets or sets the horizontal field of view associated with the projection."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetFieldOfViewHorizontal"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @FieldOfViewHorizontal.setter
    def FieldOfViewHorizontal(self, fieldOfViewHorizontal:float) -> None:
        with agmarshall.DOUBLE_arg(fieldOfViewHorizontal) as arg_fieldOfViewHorizontal:
            agcls.evaluate_hresult(self.__dict__["_SetFieldOfViewHorizontal"](arg_fieldOfViewHorizontal.COM_val))

    @property
    def FieldOfViewVertical(self) -> float:
        """Gets or sets the vertical field of view associated with the projection."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetFieldOfViewVertical"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @FieldOfViewVertical.setter
    def FieldOfViewVertical(self, fieldOfViewVertical:float) -> None:
        with agmarshall.DOUBLE_arg(fieldOfViewVertical) as arg_fieldOfViewVertical:
            agcls.evaluate_hresult(self.__dict__["_SetFieldOfViewVertical"](arg_fieldOfViewVertical.COM_val))

    @property
    def NearPlane(self) -> float:
        """Gets or sets the near plane associated with the projection."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetNearPlane"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @NearPlane.setter
    def NearPlane(self, nearPlane:float) -> None:
        with agmarshall.DOUBLE_arg(nearPlane) as arg_nearPlane:
            agcls.evaluate_hresult(self.__dict__["_SetNearPlane"](arg_nearPlane.COM_val))

    @property
    def FarPlane(self) -> float:
        """Gets or sets the far plane associated with the projection."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetFarPlane"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @FarPlane.setter
    def FarPlane(self, farPlane:float) -> None:
        with agmarshall.DOUBLE_arg(farPlane) as arg_farPlane:
            agcls.evaluate_hresult(self.__dict__["_SetFarPlane"](arg_farPlane.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{152e3a02-23b0-4dc8-a7e5-9ee19619bcab}", IStkGraphicsProjection)
agcls.AgTypeNameMap["IStkGraphicsProjection"] = IStkGraphicsProjection

class IStkGraphicsProjectionStream(object):
    """A projection that is updated dynamically at the specified update delta. The class can be used to stream projection data to projection clients, like projected raster overlay..."""
    _uuid = "{7af66bcf-c123-47b2-ac63-168bbdedec66}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetUpdateDelta"] = _raise_uninitialized_error
        self.__dict__["_SetUpdateDelta"] = _raise_uninitialized_error
        self.__dict__["_Update"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsProjectionStream._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsProjectionStream from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsProjectionStream = agcom.GUID(IStkGraphicsProjectionStream._uuid)
        vtable_offset_local = IStkGraphicsProjectionStream._vtable_offset - 1
        self.__dict__["_GetUpdateDelta"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsProjectionStream, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetUpdateDelta"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsProjectionStream, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_Update"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsProjectionStream, vtable_offset_local+3, agcom.PVOID, agcom.PVOID, POINTER(agcom.VARIANT_BOOL))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsProjectionStream.__dict__ and type(IStkGraphicsProjectionStream.__dict__[attrname]) == property:
            return IStkGraphicsProjectionStream.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsProjectionStream.")
    
    @property
    def UpdateDelta(self) -> float:
        """Gets or sets the update delta of the projection stream in seconds. The update delta defines the interval at which the Update method will be called..."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetUpdateDelta"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @UpdateDelta.setter
    def UpdateDelta(self, updateDelta:float) -> None:
        with agmarshall.DOUBLE_arg(updateDelta) as arg_updateDelta:
            agcls.evaluate_hresult(self.__dict__["_SetUpdateDelta"](arg_updateDelta.COM_val))

    def Update(self, time:"IDate", nextTime:"IDate") -> bool:
        """When overridden in a derived class, updates the projection data associated with the projection stream at the specified time. When the Update method is called, the projection stream contains the current projection data..."""
        with agmarshall.AgInterface_in_arg(time, IDate) as arg_time, \
             agmarshall.AgInterface_in_arg(nextTime, IDate) as arg_nextTime, \
             agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_Update"](arg_time.COM_val, arg_nextTime.COM_val, byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{7af66bcf-c123-47b2-ac63-168bbdedec66}", IStkGraphicsProjectionStream)
agcls.AgTypeNameMap["IStkGraphicsProjectionStream"] = IStkGraphicsProjectionStream

class IStkGraphicsSceneGlobeOverlaySettings(object):
    """Settings used by globe overlay objects. These settings only affect the scene."""
    _uuid = "{6f2961c3-3fbe-4d5c-849b-d17be044dd71}"
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAntiAliasImagery"] = _raise_uninitialized_error
        self.__dict__["_SetAntiAliasImagery"] = _raise_uninitialized_error
        self.__dict__["_GetTerrainMeshPixelError"] = _raise_uninitialized_error
        self.__dict__["_SetTerrainMeshPixelError"] = _raise_uninitialized_error
        self.__dict__["_GetImageryPixelError"] = _raise_uninitialized_error
        self.__dict__["_SetImageryPixelError"] = _raise_uninitialized_error
        self.__dict__["_GetProjectedRasterModelProjection"] = _raise_uninitialized_error
        self.__dict__["_SetProjectedRasterModelProjection"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsSceneGlobeOverlaySettings._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsSceneGlobeOverlaySettings from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsSceneGlobeOverlaySettings = agcom.GUID(IStkGraphicsSceneGlobeOverlaySettings._uuid)
        vtable_offset_local = IStkGraphicsSceneGlobeOverlaySettings._vtable_offset - 1
        self.__dict__["_GetAntiAliasImagery"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSceneGlobeOverlaySettings, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetAntiAliasImagery"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSceneGlobeOverlaySettings, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetTerrainMeshPixelError"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSceneGlobeOverlaySettings, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTerrainMeshPixelError"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSceneGlobeOverlaySettings, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetImageryPixelError"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSceneGlobeOverlaySettings, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetImageryPixelError"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSceneGlobeOverlaySettings, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetProjectedRasterModelProjection"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSceneGlobeOverlaySettings, vtable_offset_local+7, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetProjectedRasterModelProjection"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSceneGlobeOverlaySettings, vtable_offset_local+8, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsSceneGlobeOverlaySettings.__dict__ and type(IStkGraphicsSceneGlobeOverlaySettings.__dict__[attrname]) == property:
            return IStkGraphicsSceneGlobeOverlaySettings.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsSceneGlobeOverlaySettings.")
    
    @property
    def AntiAliasImagery(self) -> bool:
        """Gets or sets a value indicating whether or not imagery is anti-aliased."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAntiAliasImagery"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @AntiAliasImagery.setter
    def AntiAliasImagery(self, antiAliasImagery:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(antiAliasImagery) as arg_antiAliasImagery:
            agcls.evaluate_hresult(self.__dict__["_SetAntiAliasImagery"](arg_antiAliasImagery.COM_val))

    @property
    def TerrainMeshPixelError(self) -> float:
        """Gets or sets the pixel error for terrain meshes. This is the number of pixels that the rendered terrain is different from the actual terrain data. The default is 2.0 pixels."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTerrainMeshPixelError"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @TerrainMeshPixelError.setter
    def TerrainMeshPixelError(self, terrainMeshPixelError:float) -> None:
        with agmarshall.DOUBLE_arg(terrainMeshPixelError) as arg_terrainMeshPixelError:
            agcls.evaluate_hresult(self.__dict__["_SetTerrainMeshPixelError"](arg_terrainMeshPixelError.COM_val))

    @property
    def ImageryPixelError(self) -> float:
        """Gets or sets the pixel error for imagery. This is the number of pixels that the rendered imagery is different from the actual imagery data. The default is 1.0 pixel."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetImageryPixelError"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @ImageryPixelError.setter
    def ImageryPixelError(self, imageryPixelError:float) -> None:
        with agmarshall.DOUBLE_arg(imageryPixelError) as arg_imageryPixelError:
            agcls.evaluate_hresult(self.__dict__["_SetImageryPixelError"](arg_imageryPixelError.COM_val))

    @property
    def ProjectedRasterModelProjection(self) -> bool:
        """Gets or sets whether projected raster globe overlays will also project onto models."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetProjectedRasterModelProjection"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @ProjectedRasterModelProjection.setter
    def ProjectedRasterModelProjection(self, projectedRasterModelProjection:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(projectedRasterModelProjection) as arg_projectedRasterModelProjection:
            agcls.evaluate_hresult(self.__dict__["_SetProjectedRasterModelProjection"](arg_projectedRasterModelProjection.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{6f2961c3-3fbe-4d5c-849b-d17be044dd71}", IStkGraphicsSceneGlobeOverlaySettings)
agcls.AgTypeNameMap["IStkGraphicsSceneGlobeOverlaySettings"] = IStkGraphicsSceneGlobeOverlaySettings

class IStkGraphicsScreenOverlayCollectionBase(object):
    """The common base class for collections of overlays held by screen overlay and by screen overlay manager."""
    _uuid = "{49ea6365-0b8d-4fc5-ad52-c1d16ac7568d}"
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        self.__dict__["_GetIsReadOnly"] = _raise_uninitialized_error
        self.__dict__["_Item"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        self.__dict__["_Contains"] = _raise_uninitialized_error
        self.__dict__["_Remove"] = _raise_uninitialized_error
        self.__dict__["_Clear"] = _raise_uninitialized_error
        self.__dict__["_Add"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsScreenOverlayCollectionBase._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsScreenOverlayCollectionBase from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsScreenOverlayCollectionBase = agcom.GUID(IStkGraphicsScreenOverlayCollectionBase._uuid)
        vtable_offset_local = IStkGraphicsScreenOverlayCollectionBase._vtable_offset - 1
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsScreenOverlayCollectionBase, vtable_offset_local+1, POINTER(agcom.INT))
        self.__dict__["_GetIsReadOnly"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsScreenOverlayCollectionBase, vtable_offset_local+2, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_Item"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsScreenOverlayCollectionBase, vtable_offset_local+3, agcom.INT, POINTER(agcom.PVOID))
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsScreenOverlayCollectionBase, vtable_offset_local+4, POINTER(agcom.PVOID))
        self.__dict__["_Contains"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsScreenOverlayCollectionBase, vtable_offset_local+5, agcom.PVOID, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_Remove"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsScreenOverlayCollectionBase, vtable_offset_local+6, agcom.PVOID, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_Clear"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsScreenOverlayCollectionBase, vtable_offset_local+7, )
        self.__dict__["_Add"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsScreenOverlayCollectionBase, vtable_offset_local+8, agcom.PVOID)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsScreenOverlayCollectionBase.__dict__ and type(IStkGraphicsScreenOverlayCollectionBase.__dict__[attrname]) == property:
            return IStkGraphicsScreenOverlayCollectionBase.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsScreenOverlayCollectionBase.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> "IStkGraphicsScreenOverlay":
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    
    @property
    def Count(self) -> int:
        """Gets the number of screen overlays in the collection."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def IsReadOnly(self) -> bool:
        """Gets a value indicating whether the collection is read-only."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetIsReadOnly"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def Item(self, index:int) -> "IStkGraphicsScreenOverlay":
        """Gets the overlay at the specified index."""
        with agmarshall.INT_arg(index) as arg_index, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Item"](arg_index.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        """Returns an enumerator that iterates through the collection."""
        with agmarshall.IEnumVARIANT_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def Contains(self, item:"IStkGraphicsScreenOverlay") -> bool:
        """Determines whether the collection contains a specific overlay."""
        with agmarshall.AgInterface_in_arg(item, IStkGraphicsScreenOverlay) as arg_item, \
             agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_Contains"](arg_item.COM_val, byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def Remove(self, item:"IStkGraphicsScreenOverlay") -> bool:
        """Removes the first occurrence of a specific overlay from the collection."""
        with agmarshall.AgInterface_in_arg(item, IStkGraphicsScreenOverlay) as arg_item, \
             agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_Remove"](arg_item.COM_val, byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def Clear(self) -> None:
        """Removes all overlays from the collection."""
        agcls.evaluate_hresult(self.__dict__["_Clear"]())

    def Add(self, item:"IStkGraphicsScreenOverlay") -> None:
        """Adds an overlay to the collection."""
        with agmarshall.AgInterface_in_arg(item, IStkGraphicsScreenOverlay) as arg_item:
            agcls.evaluate_hresult(self.__dict__["_Add"](arg_item.COM_val))

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{49ea6365-0b8d-4fc5-ad52-c1d16ac7568d}", IStkGraphicsScreenOverlayCollectionBase)
agcls.AgTypeNameMap["IStkGraphicsScreenOverlayCollectionBase"] = IStkGraphicsScreenOverlayCollectionBase

class IStkGraphicsTexture2DFactory(object):
    """A factory for creating texture 2d objects from various sources."""
    _uuid = "{455fd9a8-e787-4459-a613-e3367dce25b8}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_LoadFromStringUri"] = _raise_uninitialized_error
        self.__dict__["_FromRaster"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsTexture2DFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsTexture2DFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsTexture2DFactory = agcom.GUID(IStkGraphicsTexture2DFactory._uuid)
        vtable_offset_local = IStkGraphicsTexture2DFactory._vtable_offset - 1
        self.__dict__["_LoadFromStringUri"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTexture2DFactory, vtable_offset_local+1, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_FromRaster"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTexture2DFactory, vtable_offset_local+2, agcom.PVOID, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsTexture2DFactory.__dict__ and type(IStkGraphicsTexture2DFactory.__dict__[attrname]) == property:
            return IStkGraphicsTexture2DFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsTexture2DFactory.")
    
    def LoadFromStringUri(self, uri:str) -> "IStkGraphicsRendererTexture2D":
        """Creates a new texture from a Uri, which can be a file, HTTP, HTTPS, or FTP source. See raster for a list of supported raster formats."""
        with agmarshall.BSTR_arg(uri) as arg_uri, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_LoadFromStringUri"](arg_uri.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def FromRaster(self, raster:"IStkGraphicsRaster") -> "IStkGraphicsRendererTexture2D":
        """Creates a new texture from a raster."""
        with agmarshall.AgInterface_in_arg(raster, IStkGraphicsRaster) as arg_raster, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_FromRaster"](arg_raster.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{455fd9a8-e787-4459-a613-e3367dce25b8}", IStkGraphicsTexture2DFactory)
agcls.AgTypeNameMap["IStkGraphicsTexture2DFactory"] = IStkGraphicsTexture2DFactory

class IStkGraphicsVisualEffects(object):
    """Controls various post processing effects that can be applied to the scene."""
    _uuid = "{a1b830ed-9742-4903-9773-1edbc40f0deb}"
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetLensFlareEnabled"] = _raise_uninitialized_error
        self.__dict__["_SetLensFlareEnabled"] = _raise_uninitialized_error
        self.__dict__["_GetVignetteEnabled"] = _raise_uninitialized_error
        self.__dict__["_SetVignetteEnabled"] = _raise_uninitialized_error
        self.__dict__["_GetVignetteStrength"] = _raise_uninitialized_error
        self.__dict__["_SetVignetteStrength"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsVisualEffects._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsVisualEffects from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsVisualEffects = agcom.GUID(IStkGraphicsVisualEffects._uuid)
        vtable_offset_local = IStkGraphicsVisualEffects._vtable_offset - 1
        self.__dict__["_GetLensFlareEnabled"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVisualEffects, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetLensFlareEnabled"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVisualEffects, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetVignetteEnabled"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVisualEffects, vtable_offset_local+3, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetVignetteEnabled"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVisualEffects, vtable_offset_local+4, agcom.VARIANT_BOOL)
        self.__dict__["_GetVignetteStrength"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVisualEffects, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetVignetteStrength"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVisualEffects, vtable_offset_local+6, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsVisualEffects.__dict__ and type(IStkGraphicsVisualEffects.__dict__[attrname]) == property:
            return IStkGraphicsVisualEffects.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsVisualEffects.")
    
    @property
    def LensFlareEnabled(self) -> bool:
        """Gets or sets whether or not the lens flare effect is enabled"""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetLensFlareEnabled"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @LensFlareEnabled.setter
    def LensFlareEnabled(self, lensFlareEnabled:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(lensFlareEnabled) as arg_lensFlareEnabled:
            agcls.evaluate_hresult(self.__dict__["_SetLensFlareEnabled"](arg_lensFlareEnabled.COM_val))

    @property
    def VignetteEnabled(self) -> bool:
        """Gets or sets whether or not the vignette effect is enabled. This simulates light being blocked by the lens hood, resulting in a slight darkening at the perimeter of the 3D Window."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetVignetteEnabled"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @VignetteEnabled.setter
    def VignetteEnabled(self, vignetteEnabled:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(vignetteEnabled) as arg_vignetteEnabled:
            agcls.evaluate_hresult(self.__dict__["_SetVignetteEnabled"](arg_vignetteEnabled.COM_val))

    @property
    def VignetteStrength(self) -> float:
        """Sets the strength of the vignette effect, values between [0.001 and 5.0], with larger values resulting in more pronounced darkening around the perimeter of the 3D window."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetVignetteStrength"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @VignetteStrength.setter
    def VignetteStrength(self, vignetteStrength:float) -> None:
        with agmarshall.DOUBLE_arg(vignetteStrength) as arg_vignetteStrength:
            agcls.evaluate_hresult(self.__dict__["_SetVignetteStrength"](arg_vignetteStrength.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{a1b830ed-9742-4903-9773-1edbc40f0deb}", IStkGraphicsVisualEffects)
agcls.AgTypeNameMap["IStkGraphicsVisualEffects"] = IStkGraphicsVisualEffects

class IStkGraphicsAltitudeDisplayCondition(object):
    """Defines an inclusive altitude interval that determines when an object is rendered based on the camera's altitude relative to a central body."""
    _uuid = "{a6225aa6-608d-4ad8-b5f6-2afdd29b96f9}"
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetMinimumAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetMinimumAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetMaximumAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetMaximumAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetCentralBody"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBody"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsAltitudeDisplayCondition._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsAltitudeDisplayCondition from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsAltitudeDisplayCondition = agcom.GUID(IStkGraphicsAltitudeDisplayCondition._uuid)
        vtable_offset_local = IStkGraphicsAltitudeDisplayCondition._vtable_offset - 1
        self.__dict__["_GetMinimumAltitude"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsAltitudeDisplayCondition, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMinimumAltitude"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsAltitudeDisplayCondition, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetMaximumAltitude"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsAltitudeDisplayCondition, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaximumAltitude"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsAltitudeDisplayCondition, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetCentralBody"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsAltitudeDisplayCondition, vtable_offset_local+5, POINTER(agcom.BSTR))
        self.__dict__["_SetCentralBody"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsAltitudeDisplayCondition, vtable_offset_local+6, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsAltitudeDisplayCondition.__dict__ and type(IStkGraphicsAltitudeDisplayCondition.__dict__[attrname]) == property:
            return IStkGraphicsAltitudeDisplayCondition.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsAltitudeDisplayCondition.")
    
    @property
    def MinimumAltitude(self) -> float:
        """Gets or sets the minimum altitude of the inclusive altitude interval. Use Double.MinValue to ignore checking the minimum altitude."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinimumAltitude"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @MinimumAltitude.setter
    def MinimumAltitude(self, minimumAltitude:float) -> None:
        with agmarshall.DOUBLE_arg(minimumAltitude) as arg_minimumAltitude:
            agcls.evaluate_hresult(self.__dict__["_SetMinimumAltitude"](arg_minimumAltitude.COM_val))

    @property
    def MaximumAltitude(self) -> float:
        """Gets or sets the maximum altitude of the inclusive altitude interval. Use Double.MaxValue to ignore checking the maximum altitude."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaximumAltitude"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @MaximumAltitude.setter
    def MaximumAltitude(self, maximumAltitude:float) -> None:
        with agmarshall.DOUBLE_arg(maximumAltitude) as arg_maximumAltitude:
            agcls.evaluate_hresult(self.__dict__["_SetMaximumAltitude"](arg_maximumAltitude.COM_val))

    @property
    def CentralBody(self) -> str:
        """Gets or sets the central body to which the altitude is relative."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBody"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @CentralBody.setter
    def CentralBody(self, centralBody:str) -> None:
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBody"](arg_centralBody.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{a6225aa6-608d-4ad8-b5f6-2afdd29b96f9}", IStkGraphicsAltitudeDisplayCondition)
agcls.AgTypeNameMap["IStkGraphicsAltitudeDisplayCondition"] = IStkGraphicsAltitudeDisplayCondition

class IStkGraphicsAxesPrimitive(object):
    """Renders an axes in the 3D scene."""
    _uuid = "{8892fb91-4aa2-4663-9307-68a737163045}"
    _num_methods = 22
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetLighting"] = _raise_uninitialized_error
        self.__dict__["_SetLighting"] = _raise_uninitialized_error
        self.__dict__["_GetLabel"] = _raise_uninitialized_error
        self.__dict__["_SetLabel"] = _raise_uninitialized_error
        self.__dict__["_GetDisplayLabel"] = _raise_uninitialized_error
        self.__dict__["_SetDisplayLabel"] = _raise_uninitialized_error
        self.__dict__["_GetDisplayTrace"] = _raise_uninitialized_error
        self.__dict__["_SetDisplayTrace"] = _raise_uninitialized_error
        self.__dict__["_GetDisplaySweep"] = _raise_uninitialized_error
        self.__dict__["_SetDisplaySweep"] = _raise_uninitialized_error
        self.__dict__["_GetDisplayLines"] = _raise_uninitialized_error
        self.__dict__["_SetDisplayLines"] = _raise_uninitialized_error
        self.__dict__["_GetPersistenceWidth"] = _raise_uninitialized_error
        self.__dict__["_SetPersistenceWidth"] = _raise_uninitialized_error
        self.__dict__["_GetFadePersistence"] = _raise_uninitialized_error
        self.__dict__["_SetFadePersistence"] = _raise_uninitialized_error
        self.__dict__["_GetPersistenceDuration"] = _raise_uninitialized_error
        self.__dict__["_SetPersistenceDuration"] = _raise_uninitialized_error
        self.__dict__["_GetLength"] = _raise_uninitialized_error
        self.__dict__["_SetLength"] = _raise_uninitialized_error
        self.__dict__["_GetWidth"] = _raise_uninitialized_error
        self.__dict__["_SetWidth"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsAxesPrimitive._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsAxesPrimitive from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsAxesPrimitive = agcom.GUID(IStkGraphicsAxesPrimitive._uuid)
        vtable_offset_local = IStkGraphicsAxesPrimitive._vtable_offset - 1
        self.__dict__["_GetLighting"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsAxesPrimitive, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetLighting"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsAxesPrimitive, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetLabel"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsAxesPrimitive, vtable_offset_local+3, POINTER(agcom.BSTR))
        self.__dict__["_SetLabel"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsAxesPrimitive, vtable_offset_local+4, agcom.BSTR)
        self.__dict__["_GetDisplayLabel"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsAxesPrimitive, vtable_offset_local+5, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetDisplayLabel"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsAxesPrimitive, vtable_offset_local+6, agcom.VARIANT_BOOL)
        self.__dict__["_GetDisplayTrace"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsAxesPrimitive, vtable_offset_local+7, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetDisplayTrace"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsAxesPrimitive, vtable_offset_local+8, agcom.VARIANT_BOOL)
        self.__dict__["_GetDisplaySweep"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsAxesPrimitive, vtable_offset_local+9, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetDisplaySweep"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsAxesPrimitive, vtable_offset_local+10, agcom.VARIANT_BOOL)
        self.__dict__["_GetDisplayLines"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsAxesPrimitive, vtable_offset_local+11, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetDisplayLines"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsAxesPrimitive, vtable_offset_local+12, agcom.VARIANT_BOOL)
        self.__dict__["_GetPersistenceWidth"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsAxesPrimitive, vtable_offset_local+13, POINTER(agcom.DOUBLE))
        self.__dict__["_SetPersistenceWidth"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsAxesPrimitive, vtable_offset_local+14, agcom.DOUBLE)
        self.__dict__["_GetFadePersistence"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsAxesPrimitive, vtable_offset_local+15, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetFadePersistence"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsAxesPrimitive, vtable_offset_local+16, agcom.VARIANT_BOOL)
        self.__dict__["_GetPersistenceDuration"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsAxesPrimitive, vtable_offset_local+17, POINTER(agcom.DOUBLE))
        self.__dict__["_SetPersistenceDuration"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsAxesPrimitive, vtable_offset_local+18, agcom.DOUBLE)
        self.__dict__["_GetLength"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsAxesPrimitive, vtable_offset_local+19, POINTER(agcom.DOUBLE))
        self.__dict__["_SetLength"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsAxesPrimitive, vtable_offset_local+20, agcom.DOUBLE)
        self.__dict__["_GetWidth"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsAxesPrimitive, vtable_offset_local+21, POINTER(agcom.DOUBLE))
        self.__dict__["_SetWidth"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsAxesPrimitive, vtable_offset_local+22, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsAxesPrimitive.__dict__ and type(IStkGraphicsAxesPrimitive.__dict__[attrname]) == property:
            return IStkGraphicsAxesPrimitive.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsAxesPrimitive.")
    
    @property
    def Lighting(self) -> bool:
        """Gets or Sets whether the primitive is lit."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetLighting"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Lighting.setter
    def Lighting(self, lighting:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(lighting) as arg_lighting:
            agcls.evaluate_hresult(self.__dict__["_SetLighting"](arg_lighting.COM_val))

    @property
    def Label(self) -> str:
        """Gets or Sets the axes label."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetLabel"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Label.setter
    def Label(self, label:str) -> None:
        with agmarshall.BSTR_arg(label) as arg_label:
            agcls.evaluate_hresult(self.__dict__["_SetLabel"](arg_label.COM_val))

    @property
    def DisplayLabel(self) -> bool:
        """Gets or Sets whether the axes' label is displayed."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDisplayLabel"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @DisplayLabel.setter
    def DisplayLabel(self, displayLabel:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(displayLabel) as arg_displayLabel:
            agcls.evaluate_hresult(self.__dict__["_SetDisplayLabel"](arg_displayLabel.COM_val))

    @property
    def DisplayTrace(self) -> bool:
        """Gets or Sets whether the persistence trace (points) is displayed."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDisplayTrace"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @DisplayTrace.setter
    def DisplayTrace(self, displayTrace:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(displayTrace) as arg_displayTrace:
            agcls.evaluate_hresult(self.__dict__["_SetDisplayTrace"](arg_displayTrace.COM_val))

    @property
    def DisplaySweep(self) -> bool:
        """Gets or Sets whether the persistence sweep (triangles) is displayed."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDisplaySweep"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @DisplaySweep.setter
    def DisplaySweep(self, displaySweep:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(displaySweep) as arg_displaySweep:
            agcls.evaluate_hresult(self.__dict__["_SetDisplaySweep"](arg_displaySweep.COM_val))

    @property
    def DisplayLines(self) -> bool:
        """Gets or Sets whether persistence lines are displayed."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDisplayLines"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @DisplayLines.setter
    def DisplayLines(self, displayLines:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(displayLines) as arg_displayLines:
            agcls.evaluate_hresult(self.__dict__["_SetDisplayLines"](arg_displayLines.COM_val))

    @property
    def PersistenceWidth(self) -> float:
        """Gets or Sets persistence point/line width."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPersistenceWidth"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @PersistenceWidth.setter
    def PersistenceWidth(self, persistenceWidth:float) -> None:
        with agmarshall.DOUBLE_arg(persistenceWidth) as arg_persistenceWidth:
            agcls.evaluate_hresult(self.__dict__["_SetPersistenceWidth"](arg_persistenceWidth.COM_val))

    @property
    def FadePersistence(self) -> bool:
        """Gets or Sets whether the persistence path should fade over time."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetFadePersistence"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @FadePersistence.setter
    def FadePersistence(self, fadePersistence:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(fadePersistence) as arg_fadePersistence:
            agcls.evaluate_hresult(self.__dict__["_SetFadePersistence"](arg_fadePersistence.COM_val))

    @property
    def PersistenceDuration(self) -> float:
        """Gets or Sets the maximum duration of the persistence path."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPersistenceDuration"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @PersistenceDuration.setter
    def PersistenceDuration(self, persistenceDuration:float) -> None:
        with agmarshall.DOUBLE_arg(persistenceDuration) as arg_persistenceDuration:
            agcls.evaluate_hresult(self.__dict__["_SetPersistenceDuration"](arg_persistenceDuration.COM_val))

    @property
    def Length(self) -> float:
        """Gets or Sets the axes' source-to-arrow-tip length."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetLength"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Length.setter
    def Length(self, length:float) -> None:
        with agmarshall.DOUBLE_arg(length) as arg_length:
            agcls.evaluate_hresult(self.__dict__["_SetLength"](arg_length.COM_val))

    @property
    def Width(self) -> float:
        """Gets or Sets the width in pixels. As the camera distances changes from this primitive, the geometry will autoscale to maintain this thickness."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetWidth"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Width.setter
    def Width(self, width:float) -> None:
        with agmarshall.DOUBLE_arg(width) as arg_width:
            agcls.evaluate_hresult(self.__dict__["_SetWidth"](arg_width.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{8892fb91-4aa2-4663-9307-68a737163045}", IStkGraphicsAxesPrimitive)
agcls.AgTypeNameMap["IStkGraphicsAxesPrimitive"] = IStkGraphicsAxesPrimitive

class IStkGraphicsCamera(object):
    """Implemented by the scene camera. Contains operations to manipulate the camera position, view direction and orientation in the scene."""
    _uuid = "{c9a35fc4-8868-4b28-8622-13cfa470c315}"
    _num_methods = 50
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetPosition"] = _raise_uninitialized_error
        self.__dict__["_SetPosition"] = _raise_uninitialized_error
        self.__dict__["_GetReferencePoint"] = _raise_uninitialized_error
        self.__dict__["_SetReferencePoint"] = _raise_uninitialized_error
        self.__dict__["_GetDirection"] = _raise_uninitialized_error
        self.__dict__["_SetDirection"] = _raise_uninitialized_error
        self.__dict__["_GetUpVector"] = _raise_uninitialized_error
        self.__dict__["_SetUpVector"] = _raise_uninitialized_error
        self.__dict__["_GetDistance"] = _raise_uninitialized_error
        self.__dict__["_SetDistance"] = _raise_uninitialized_error
        self.__dict__["_GetAxes"] = _raise_uninitialized_error
        self.__dict__["_SetAxes"] = _raise_uninitialized_error
        self.__dict__["_GetConstrainedUpAxis"] = _raise_uninitialized_error
        self.__dict__["_SetConstrainedUpAxis"] = _raise_uninitialized_error
        self.__dict__["_GetAllowRotationOverConstrainedUpAxis"] = _raise_uninitialized_error
        self.__dict__["_SetAllowRotationOverConstrainedUpAxis"] = _raise_uninitialized_error
        self.__dict__["_GetLockViewDirection"] = _raise_uninitialized_error
        self.__dict__["_SetLockViewDirection"] = _raise_uninitialized_error
        self.__dict__["_GetFieldOfView"] = _raise_uninitialized_error
        self.__dict__["_SetFieldOfView"] = _raise_uninitialized_error
        self.__dict__["_GetHorizontalFieldOfView"] = _raise_uninitialized_error
        self.__dict__["_GetVerticalFieldOfView"] = _raise_uninitialized_error
        self.__dict__["_GetNearPlane"] = _raise_uninitialized_error
        self.__dict__["_SetNearPlane"] = _raise_uninitialized_error
        self.__dict__["_GetFarPlane"] = _raise_uninitialized_error
        self.__dict__["_SetFarPlane"] = _raise_uninitialized_error
        self.__dict__["_GetFarNearPlaneRatio"] = _raise_uninitialized_error
        self.__dict__["_SetFarNearPlaneRatio"] = _raise_uninitialized_error
        self.__dict__["_GetDistancePerRadius"] = _raise_uninitialized_error
        self.__dict__["_GetSnapshot"] = _raise_uninitialized_error
        self.__dict__["_GetVideoRecording"] = _raise_uninitialized_error
        self.__dict__["_GetPixelSizePerDistance"] = _raise_uninitialized_error
        self.__dict__["_GetPositionReferenceFrame"] = _raise_uninitialized_error
        self.__dict__["_GetReferencePointReferenceFrame"] = _raise_uninitialized_error
        self.__dict__["_VisibilityTest"] = _raise_uninitialized_error
        self.__dict__["_CartographicToWindow"] = _raise_uninitialized_error
        self.__dict__["_TryCartographicToWindow"] = _raise_uninitialized_error
        self.__dict__["_WindowToCartographic"] = _raise_uninitialized_error
        self.__dict__["_TryWindowToCartographic"] = _raise_uninitialized_error
        self.__dict__["_ViewCentralBody"] = _raise_uninitialized_error
        self.__dict__["_ViewExtent"] = _raise_uninitialized_error
        self.__dict__["_ViewRectangularExtent"] = _raise_uninitialized_error
        self.__dict__["_ViewWithUpAxis"] = _raise_uninitialized_error
        self.__dict__["_View"] = _raise_uninitialized_error
        self.__dict__["_ViewDirectionWithUpAxis"] = _raise_uninitialized_error
        self.__dict__["_ViewDirection"] = _raise_uninitialized_error
        self.__dict__["_ViewOffsetWithUpAxis"] = _raise_uninitialized_error
        self.__dict__["_ViewOffset"] = _raise_uninitialized_error
        self.__dict__["_ViewOffsetDirectionWithUpAxis"] = _raise_uninitialized_error
        self.__dict__["_ViewOffsetDirection"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsCamera._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsCamera from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsCamera = agcom.GUID(IStkGraphicsCamera._uuid)
        vtable_offset_local = IStkGraphicsCamera._vtable_offset - 1
        self.__dict__["_GetPosition"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCamera, vtable_offset_local+1, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetPosition"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCamera, vtable_offset_local+2, agcom.SAFEARRAY)
        self.__dict__["_GetReferencePoint"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCamera, vtable_offset_local+3, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetReferencePoint"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCamera, vtable_offset_local+4, agcom.SAFEARRAY)
        self.__dict__["_GetDirection"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCamera, vtable_offset_local+5, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetDirection"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCamera, vtable_offset_local+6, agcom.SAFEARRAY)
        self.__dict__["_GetUpVector"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCamera, vtable_offset_local+7, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetUpVector"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCamera, vtable_offset_local+8, agcom.SAFEARRAY)
        self.__dict__["_GetDistance"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCamera, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDistance"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCamera, vtable_offset_local+10, agcom.DOUBLE)
        self.__dict__["_GetAxes"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCamera, vtable_offset_local+11, POINTER(agcom.PVOID))
        self.__dict__["_SetAxes"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCamera, vtable_offset_local+12, agcom.PVOID)
        self.__dict__["_GetConstrainedUpAxis"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCamera, vtable_offset_local+13, POINTER(agcom.LONG))
        self.__dict__["_SetConstrainedUpAxis"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCamera, vtable_offset_local+14, agcom.LONG)
        self.__dict__["_GetAllowRotationOverConstrainedUpAxis"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCamera, vtable_offset_local+15, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetAllowRotationOverConstrainedUpAxis"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCamera, vtable_offset_local+16, agcom.VARIANT_BOOL)
        self.__dict__["_GetLockViewDirection"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCamera, vtable_offset_local+17, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetLockViewDirection"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCamera, vtable_offset_local+18, agcom.VARIANT_BOOL)
        self.__dict__["_GetFieldOfView"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCamera, vtable_offset_local+19, POINTER(agcom.DOUBLE))
        self.__dict__["_SetFieldOfView"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCamera, vtable_offset_local+20, agcom.DOUBLE)
        self.__dict__["_GetHorizontalFieldOfView"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCamera, vtable_offset_local+21, POINTER(agcom.DOUBLE))
        self.__dict__["_GetVerticalFieldOfView"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCamera, vtable_offset_local+22, POINTER(agcom.DOUBLE))
        self.__dict__["_GetNearPlane"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCamera, vtable_offset_local+23, POINTER(agcom.DOUBLE))
        self.__dict__["_SetNearPlane"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCamera, vtable_offset_local+24, agcom.DOUBLE)
        self.__dict__["_GetFarPlane"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCamera, vtable_offset_local+25, POINTER(agcom.DOUBLE))
        self.__dict__["_SetFarPlane"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCamera, vtable_offset_local+26, agcom.DOUBLE)
        self.__dict__["_GetFarNearPlaneRatio"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCamera, vtable_offset_local+27, POINTER(agcom.DOUBLE))
        self.__dict__["_SetFarNearPlaneRatio"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCamera, vtable_offset_local+28, agcom.DOUBLE)
        self.__dict__["_GetDistancePerRadius"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCamera, vtable_offset_local+29, POINTER(agcom.DOUBLE))
        self.__dict__["_GetSnapshot"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCamera, vtable_offset_local+30, POINTER(agcom.PVOID))
        self.__dict__["_GetVideoRecording"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCamera, vtable_offset_local+31, POINTER(agcom.PVOID))
        self.__dict__["_GetPixelSizePerDistance"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCamera, vtable_offset_local+32, POINTER(agcom.DOUBLE))
        self.__dict__["_GetPositionReferenceFrame"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCamera, vtable_offset_local+33, POINTER(agcom.PVOID))
        self.__dict__["_GetReferencePointReferenceFrame"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCamera, vtable_offset_local+34, POINTER(agcom.PVOID))
        self.__dict__["_VisibilityTest"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCamera, vtable_offset_local+35, agcom.PVOID, agcom.PVOID, POINTER(agcom.LONG))
        self.__dict__["_CartographicToWindow"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCamera, vtable_offset_local+36, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY))
        self.__dict__["_TryCartographicToWindow"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCamera, vtable_offset_local+37, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY))
        self.__dict__["_WindowToCartographic"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCamera, vtable_offset_local+38, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY))
        self.__dict__["_TryWindowToCartographic"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCamera, vtable_offset_local+39, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY))
        self.__dict__["_ViewCentralBody"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCamera, vtable_offset_local+40, agcom.BSTR, agcom.PVOID)
        self.__dict__["_ViewExtent"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCamera, vtable_offset_local+41, agcom.BSTR, POINTER(agcom.SAFEARRAY))
        self.__dict__["_ViewRectangularExtent"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCamera, vtable_offset_local+42, agcom.BSTR, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE)
        self.__dict__["_ViewWithUpAxis"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCamera, vtable_offset_local+43, agcom.PVOID, agcom.PVOID, agcom.PVOID, POINTER(agcom.SAFEARRAY))
        self.__dict__["_View"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCamera, vtable_offset_local+44, agcom.PVOID, agcom.PVOID, agcom.PVOID)
        self.__dict__["_ViewDirectionWithUpAxis"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCamera, vtable_offset_local+45, agcom.PVOID, agcom.PVOID, agcom.PVOID, POINTER(agcom.SAFEARRAY))
        self.__dict__["_ViewDirection"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCamera, vtable_offset_local+46, agcom.PVOID, agcom.PVOID, agcom.PVOID)
        self.__dict__["_ViewOffsetWithUpAxis"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCamera, vtable_offset_local+47, agcom.PVOID, agcom.PVOID, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY))
        self.__dict__["_ViewOffset"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCamera, vtable_offset_local+48, agcom.PVOID, agcom.PVOID, POINTER(agcom.SAFEARRAY))
        self.__dict__["_ViewOffsetDirectionWithUpAxis"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCamera, vtable_offset_local+49, agcom.PVOID, agcom.PVOID, agcom.PVOID, POINTER(agcom.SAFEARRAY))
        self.__dict__["_ViewOffsetDirection"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCamera, vtable_offset_local+50, agcom.PVOID, agcom.PVOID, agcom.PVOID)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsCamera.__dict__ and type(IStkGraphicsCamera.__dict__[attrname]) == property:
            return IStkGraphicsCamera.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsCamera.")
    
    @property
    def Position(self) -> list:
        """Gets or sets the position of the camera. The array contains the components of the position arranged in the order x, y, z."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPosition"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @Position.setter
    def Position(self, position:list) -> None:
        with agmarshall.SAFEARRAY_arg(position) as arg_position:
            agcls.evaluate_hresult(self.__dict__["_SetPosition"](arg_position.COM_val))

    @property
    def ReferencePoint(self) -> list:
        """Gets or sets the reference point of the camera. The array contains the components of the reference point arranged in the order x, y, z."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetReferencePoint"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @ReferencePoint.setter
    def ReferencePoint(self, referencePoint:list) -> None:
        with agmarshall.SAFEARRAY_arg(referencePoint) as arg_referencePoint:
            agcls.evaluate_hresult(self.__dict__["_SetReferencePoint"](arg_referencePoint.COM_val))

    @property
    def Direction(self) -> list:
        """Gets or sets the direction of the camera in axes. The array contains the components of the direction arranged in the order x, y, z."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDirection"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @Direction.setter
    def Direction(self, direction:list) -> None:
        with agmarshall.SAFEARRAY_arg(direction) as arg_direction:
            agcls.evaluate_hresult(self.__dict__["_SetDirection"](arg_direction.COM_val))

    @property
    def UpVector(self) -> list:
        """Gets or sets the up direction of the camera in axes. The array contains the components of the direction arranged in the order x, y, z."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetUpVector"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @UpVector.setter
    def UpVector(self, upVector:list) -> None:
        with agmarshall.SAFEARRAY_arg(upVector) as arg_upVector:
            agcls.evaluate_hresult(self.__dict__["_SetUpVector"](arg_upVector.COM_val))

    @property
    def Distance(self) -> float:
        """Gets or sets the distance the camera position is from the reference point."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDistance"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Distance.setter
    def Distance(self, distance:float) -> None:
        with agmarshall.DOUBLE_arg(distance) as arg_distance:
            agcls.evaluate_hresult(self.__dict__["_SetDistance"](arg_distance.COM_val))

    @property
    def Axes(self) -> "ICrdnAxes":
        """Gets or sets camera's axes of rotation."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAxes"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @Axes.setter
    def Axes(self, axes:"ICrdnAxes") -> None:
        with agmarshall.AgInterface_in_arg(axes, ICrdnAxes) as arg_axes:
            agcls.evaluate_hresult(self.__dict__["_SetAxes"](arg_axes.COM_val))

    @property
    def ConstrainedUpAxis(self) -> "AgEStkGraphicsConstrainedUpAxis":
        """Gets or sets the axis to constrain the up vector to."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsConstrainedUpAxis) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetConstrainedUpAxis"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @ConstrainedUpAxis.setter
    def ConstrainedUpAxis(self, constrainedUpAxis:"AgEStkGraphicsConstrainedUpAxis") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsConstrainedUpAxis, constrainedUpAxis) as arg_constrainedUpAxis:
            agcls.evaluate_hresult(self.__dict__["_SetConstrainedUpAxis"](arg_constrainedUpAxis.COM_val))

    @property
    def AllowRotationOverConstrainedUpAxis(self) -> bool:
        """Gets or sets whether the camera can rotate over the constrained up axis. For example, if true the camera would be able to flip over the North Pole and view the globe upside down."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAllowRotationOverConstrainedUpAxis"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @AllowRotationOverConstrainedUpAxis.setter
    def AllowRotationOverConstrainedUpAxis(self, allowRotationOverConstrainedUpAxis:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(allowRotationOverConstrainedUpAxis) as arg_allowRotationOverConstrainedUpAxis:
            agcls.evaluate_hresult(self.__dict__["_SetAllowRotationOverConstrainedUpAxis"](arg_allowRotationOverConstrainedUpAxis.COM_val))

    @property
    def LockViewDirection(self) -> bool:
        """Gets or sets whether the camera's direction is locked."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetLockViewDirection"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @LockViewDirection.setter
    def LockViewDirection(self, lockViewDirection:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(lockViewDirection) as arg_lockViewDirection:
            agcls.evaluate_hresult(self.__dict__["_SetLockViewDirection"](arg_lockViewDirection.COM_val))

    @property
    def FieldOfView(self) -> float:
        """Gets or sets field of view. The field of view is applied to the larger of the window dimensions. For example, if the window width was 640 and the height was 480, the field of view applies to the horizontal..."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetFieldOfView"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @FieldOfView.setter
    def FieldOfView(self, fieldOfView:float) -> None:
        with agmarshall.DOUBLE_arg(fieldOfView) as arg_fieldOfView:
            agcls.evaluate_hresult(self.__dict__["_SetFieldOfView"](arg_fieldOfView.COM_val))

    @property
    def HorizontalFieldOfView(self) -> float:
        """Gets the horizontal field of view."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetHorizontalFieldOfView"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def VerticalFieldOfView(self) -> float:
        """Gets the vertical field of view."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetVerticalFieldOfView"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def NearPlane(self) -> float:
        """Gets or sets the distance from the camera to the near plane."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetNearPlane"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @NearPlane.setter
    def NearPlane(self, nearPlane:float) -> None:
        with agmarshall.DOUBLE_arg(nearPlane) as arg_nearPlane:
            agcls.evaluate_hresult(self.__dict__["_SetNearPlane"](arg_nearPlane.COM_val))

    @property
    def FarPlane(self) -> float:
        """Gets or sets the distance from the camera to the far plane."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetFarPlane"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @FarPlane.setter
    def FarPlane(self, farPlane:float) -> None:
        with agmarshall.DOUBLE_arg(farPlane) as arg_farPlane:
            agcls.evaluate_hresult(self.__dict__["_SetFarPlane"](arg_farPlane.COM_val))

    @property
    def FarNearPlaneRatio(self) -> float:
        """Gets or sets the value that is used to compute subdivisions of the viewing frustum. A large value will be faster but lose z-value precision. A small value will have better precision but perform slower..."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetFarNearPlaneRatio"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @FarNearPlaneRatio.setter
    def FarNearPlaneRatio(self, farNearPlaneRatio:float) -> None:
        with agmarshall.DOUBLE_arg(farNearPlaneRatio) as arg_farNearPlaneRatio:
            agcls.evaluate_hresult(self.__dict__["_SetFarNearPlaneRatio"](arg_farNearPlaneRatio.COM_val))

    @property
    def DistancePerRadius(self) -> float:
        """Returns the distance that the Camera's Position should be from the ReferencePoint in order to ensure that a sphere with a 1 meter radius centered at the ReferencePoint fits entirely in the view frustum."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDistancePerRadius"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Snapshot(self) -> "IStkGraphicsCameraSnapshot":
        """Gets the camera snapshot settings."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSnapshot"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def VideoRecording(self) -> "IStkGraphicsCameraVideoRecording":
        """Gets the camera video recorder."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetVideoRecording"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def PixelSizePerDistance(self) -> float:
        """Gets the approximate number of meters covered by a pixel that is 1 meter away from the camera. This is commonly multiplied by the distance from the camera to an object to compute the approximate number of meters covered by a pixel of the object."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPixelSizePerDistance"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def PositionReferenceFrame(self) -> "ICrdnSystem":
        """Gets the reference frame that the position is returned in. This reference frame is composed of the camera's from point and the axes."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPositionReferenceFrame"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def ReferencePointReferenceFrame(self) -> "ICrdnSystem":
        """Gets the reference frame that the reference point is returned in. This reference frame is composed of the camera's to point and the axes."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetReferencePointReferenceFrame"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def VisibilityTest(self, referenceFrame:"ICrdnSystem", sphere:"IStkGraphicsBoundingSphere") -> "AgEStkGraphicsVisibility":
        """Gets the visibility of a sphere against the view frustum and any occluding central bodies."""
        with agmarshall.AgInterface_in_arg(referenceFrame, ICrdnSystem) as arg_referenceFrame, \
             agmarshall.AgInterface_in_arg(sphere, IStkGraphicsBoundingSphere) as arg_sphere, \
             agmarshall.AgEnum_arg(AgEStkGraphicsVisibility) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_VisibilityTest"](arg_referenceFrame.COM_val, arg_sphere.COM_val, byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def CartographicToWindow(self, centralBody:str, position:list) -> list:
        """Converts a cartographic position to a pixel coordinate relative to the globe control. This method can throw an exception. Returns an array containing the pixel coordinate (in the order x, y) of the cartographic position relative to the globe control..."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(position) as arg_position, \
             agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_CartographicToWindow"](arg_centralBody.COM_val, byref(arg_position.COM_val), byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def TryCartographicToWindow(self, centralBody:str, position:list) -> list:
        """Converts a cartographic position to a pixel coordinate relative to the globe control. This method does not throw an exception."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(position) as arg_position, \
             agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_TryCartographicToWindow"](arg_centralBody.COM_val, byref(arg_position.COM_val), byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def WindowToCartographic(self, centralBody:str, position:list) -> list:
        """Converts a pixel coordinate relative to the globe control to a cartographic position. For speed, terrain is not considered; if the pixel coordinate does not intersect the ellipsoid, an exception is thrown. Returns the cartographic position..."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(position) as arg_position, \
             agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_WindowToCartographic"](arg_centralBody.COM_val, byref(arg_position.COM_val), byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def TryWindowToCartographic(self, centralBody:str, position:list) -> list:
        """Converts a pixel coordinate relative to the globe control to a cartographic position. For speed, terrain is not considered. This method does not throw an exception."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(position) as arg_position, \
             agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_TryWindowToCartographic"](arg_centralBody.COM_val, byref(arg_position.COM_val), byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def ViewCentralBody(self, centralBody:str, axes:"ICrdnAxes") -> None:
        """Zoom to a central body and use the specified axes for rotation. The reference point is set to the center of the central body and the camera's position is set so the entire central body is visible."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.AgInterface_in_arg(axes, ICrdnAxes) as arg_axes:
            agcls.evaluate_hresult(self.__dict__["_ViewCentralBody"](arg_centralBody.COM_val, arg_axes.COM_val))

    def ViewExtent(self, centralBody:str, extent:list) -> None:
        """Zooms to a cartographic extent on the centralBody. The camera will be looking straight down at the extent, with the up vector pointing toward local north. The axes is set to an east-north-up axes at the center of extent."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(extent) as arg_extent:
            agcls.evaluate_hresult(self.__dict__["_ViewExtent"](arg_centralBody.COM_val, byref(arg_extent.COM_val)))

    def ViewRectangularExtent(self, centralBody:str, west:float, south:float, east:float, north:float) -> None:
        """Zooms to a rectangular extent composed of west, south, east, north on the centralBody. The camera will be looking straight down at the extent, with the up vector pointing toward local north..."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.DOUBLE_arg(west) as arg_west, \
             agmarshall.DOUBLE_arg(south) as arg_south, \
             agmarshall.DOUBLE_arg(east) as arg_east, \
             agmarshall.DOUBLE_arg(north) as arg_north:
            agcls.evaluate_hresult(self.__dict__["_ViewRectangularExtent"](arg_centralBody.COM_val, arg_west.COM_val, arg_south.COM_val, arg_east.COM_val, arg_north.COM_val))

    def ViewWithUpAxis(self, axes:"ICrdnAxes", cameraPosition:"ICrdnPoint", referencePoint:"ICrdnPoint", upAxis:list) -> None:
        """Views from a point to a point. Sets the camera's position and the reference point the camera is looking at."""
        with agmarshall.AgInterface_in_arg(axes, ICrdnAxes) as arg_axes, \
             agmarshall.AgInterface_in_arg(cameraPosition, ICrdnPoint) as arg_cameraPosition, \
             agmarshall.AgInterface_in_arg(referencePoint, ICrdnPoint) as arg_referencePoint, \
             agmarshall.SAFEARRAY_arg(upAxis) as arg_upAxis:
            agcls.evaluate_hresult(self.__dict__["_ViewWithUpAxis"](arg_axes.COM_val, arg_cameraPosition.COM_val, arg_referencePoint.COM_val, byref(arg_upAxis.COM_val)))

    def View(self, axes:"ICrdnAxes", cameraPosition:"ICrdnPoint", referencePoint:"ICrdnPoint") -> None:
        """Views from a point to a point. Sets the camera's position and the reference point the camera is looking at."""
        with agmarshall.AgInterface_in_arg(axes, ICrdnAxes) as arg_axes, \
             agmarshall.AgInterface_in_arg(cameraPosition, ICrdnPoint) as arg_cameraPosition, \
             agmarshall.AgInterface_in_arg(referencePoint, ICrdnPoint) as arg_referencePoint:
            agcls.evaluate_hresult(self.__dict__["_View"](arg_axes.COM_val, arg_cameraPosition.COM_val, arg_referencePoint.COM_val))

    def ViewDirectionWithUpAxis(self, axes:"ICrdnAxes", cameraPosition:"ICrdnPoint", direction:"ICrdnVector", upAxis:list) -> None:
        """Views from a point to a direction. Sets the camera's position and the direction vector indicating where the camera is looking."""
        with agmarshall.AgInterface_in_arg(axes, ICrdnAxes) as arg_axes, \
             agmarshall.AgInterface_in_arg(cameraPosition, ICrdnPoint) as arg_cameraPosition, \
             agmarshall.AgInterface_in_arg(direction, ICrdnVector) as arg_direction, \
             agmarshall.SAFEARRAY_arg(upAxis) as arg_upAxis:
            agcls.evaluate_hresult(self.__dict__["_ViewDirectionWithUpAxis"](arg_axes.COM_val, arg_cameraPosition.COM_val, arg_direction.COM_val, byref(arg_upAxis.COM_val)))

    def ViewDirection(self, axes:"ICrdnAxes", cameraPosition:"ICrdnPoint", direction:"ICrdnVector") -> None:
        """Views from a point to a direction. Sets the camera's position and the direction vector indicating where the camera is looking."""
        with agmarshall.AgInterface_in_arg(axes, ICrdnAxes) as arg_axes, \
             agmarshall.AgInterface_in_arg(cameraPosition, ICrdnPoint) as arg_cameraPosition, \
             agmarshall.AgInterface_in_arg(direction, ICrdnVector) as arg_direction:
            agcls.evaluate_hresult(self.__dict__["_ViewDirection"](arg_axes.COM_val, arg_cameraPosition.COM_val, arg_direction.COM_val))

    def ViewOffsetWithUpAxis(self, axes:"ICrdnAxes", referencePoint:"ICrdnPoint", offset:list, upAxis:list) -> None:
        """Sets the camera's reference point - the point the camera is looking at. The camera's position is the reference point translated by the offset."""
        with agmarshall.AgInterface_in_arg(axes, ICrdnAxes) as arg_axes, \
             agmarshall.AgInterface_in_arg(referencePoint, ICrdnPoint) as arg_referencePoint, \
             agmarshall.SAFEARRAY_arg(offset) as arg_offset, \
             agmarshall.SAFEARRAY_arg(upAxis) as arg_upAxis:
            agcls.evaluate_hresult(self.__dict__["_ViewOffsetWithUpAxis"](arg_axes.COM_val, arg_referencePoint.COM_val, byref(arg_offset.COM_val), byref(arg_upAxis.COM_val)))

    def ViewOffset(self, axes:"ICrdnAxes", referencePoint:"ICrdnPoint", offset:list) -> None:
        """Sets the camera's reference point - the point the camera is looking at. The camera's position is the reference point translated by the offset."""
        with agmarshall.AgInterface_in_arg(axes, ICrdnAxes) as arg_axes, \
             agmarshall.AgInterface_in_arg(referencePoint, ICrdnPoint) as arg_referencePoint, \
             agmarshall.SAFEARRAY_arg(offset) as arg_offset:
            agcls.evaluate_hresult(self.__dict__["_ViewOffset"](arg_axes.COM_val, arg_referencePoint.COM_val, byref(arg_offset.COM_val)))

    def ViewOffsetDirectionWithUpAxis(self, axes:"ICrdnAxes", referencePoint:"ICrdnPoint", direction:"ICrdnVector", upAxis:list) -> None:
        """Sets the camera's reference point - the point the camera is looking at. The camera's position is the reference point translated by the direction vector."""
        with agmarshall.AgInterface_in_arg(axes, ICrdnAxes) as arg_axes, \
             agmarshall.AgInterface_in_arg(referencePoint, ICrdnPoint) as arg_referencePoint, \
             agmarshall.AgInterface_in_arg(direction, ICrdnVector) as arg_direction, \
             agmarshall.SAFEARRAY_arg(upAxis) as arg_upAxis:
            agcls.evaluate_hresult(self.__dict__["_ViewOffsetDirectionWithUpAxis"](arg_axes.COM_val, arg_referencePoint.COM_val, arg_direction.COM_val, byref(arg_upAxis.COM_val)))

    def ViewOffsetDirection(self, axes:"ICrdnAxes", referencePoint:"ICrdnPoint", direction:"ICrdnVector") -> None:
        """Sets the camera's reference point - the point the camera is looking at. The camera's position is the reference point translated by the direction vector."""
        with agmarshall.AgInterface_in_arg(axes, ICrdnAxes) as arg_axes, \
             agmarshall.AgInterface_in_arg(referencePoint, ICrdnPoint) as arg_referencePoint, \
             agmarshall.AgInterface_in_arg(direction, ICrdnVector) as arg_direction:
            agcls.evaluate_hresult(self.__dict__["_ViewOffsetDirection"](arg_axes.COM_val, arg_referencePoint.COM_val, arg_direction.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{c9a35fc4-8868-4b28-8622-13cfa470c315}", IStkGraphicsCamera)
agcls.AgTypeNameMap["IStkGraphicsCamera"] = IStkGraphicsCamera

class IStkGraphicsCentralBodyGraphics(object):
    """The graphical properties associated with a particular central body. Changing the central body graphics will affect how the associated central body is rendered in a scene. For instance, to show or hide the central body, use the show property..."""
    _uuid = "{27f5d32b-5adf-4fc7-a8b8-83ada5ebc0ca}"
    _num_methods = 23
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetColor"] = _raise_uninitialized_error
        self.__dict__["_SetColor"] = _raise_uninitialized_error
        self.__dict__["_GetSpecularColor"] = _raise_uninitialized_error
        self.__dict__["_SetSpecularColor"] = _raise_uninitialized_error
        self.__dict__["_GetShininess"] = _raise_uninitialized_error
        self.__dict__["_SetShininess"] = _raise_uninitialized_error
        self.__dict__["_GetShowImagery"] = _raise_uninitialized_error
        self.__dict__["_SetShowImagery"] = _raise_uninitialized_error
        self.__dict__["_GetShow"] = _raise_uninitialized_error
        self.__dict__["_SetShow"] = _raise_uninitialized_error
        self.__dict__["_GetShowLabel"] = _raise_uninitialized_error
        self.__dict__["_SetShowLabel"] = _raise_uninitialized_error
        self.__dict__["_GetAltitudeOffset"] = _raise_uninitialized_error
        self.__dict__["_SetAltitudeOffset"] = _raise_uninitialized_error
        self.__dict__["_GetBaseOverlay"] = _raise_uninitialized_error
        self.__dict__["_SetBaseOverlay"] = _raise_uninitialized_error
        self.__dict__["_GetNightOverlay"] = _raise_uninitialized_error
        self.__dict__["_SetNightOverlay"] = _raise_uninitialized_error
        self.__dict__["_GetSpecularOverlay"] = _raise_uninitialized_error
        self.__dict__["_SetSpecularOverlay"] = _raise_uninitialized_error
        self.__dict__["_GetTerrain"] = _raise_uninitialized_error
        self.__dict__["_GetImagery"] = _raise_uninitialized_error
        self.__dict__["_GetKml"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsCentralBodyGraphics._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsCentralBodyGraphics from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsCentralBodyGraphics = agcom.GUID(IStkGraphicsCentralBodyGraphics._uuid)
        vtable_offset_local = IStkGraphicsCentralBodyGraphics._vtable_offset - 1
        self.__dict__["_GetColor"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCentralBodyGraphics, vtable_offset_local+1, POINTER(agcom.OLE_COLOR))
        self.__dict__["_SetColor"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCentralBodyGraphics, vtable_offset_local+2, agcom.OLE_COLOR)
        self.__dict__["_GetSpecularColor"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCentralBodyGraphics, vtable_offset_local+3, POINTER(agcom.OLE_COLOR))
        self.__dict__["_SetSpecularColor"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCentralBodyGraphics, vtable_offset_local+4, agcom.OLE_COLOR)
        self.__dict__["_GetShininess"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCentralBodyGraphics, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetShininess"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCentralBodyGraphics, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetShowImagery"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCentralBodyGraphics, vtable_offset_local+7, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetShowImagery"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCentralBodyGraphics, vtable_offset_local+8, agcom.VARIANT_BOOL)
        self.__dict__["_GetShow"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCentralBodyGraphics, vtable_offset_local+9, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetShow"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCentralBodyGraphics, vtable_offset_local+10, agcom.VARIANT_BOOL)
        self.__dict__["_GetShowLabel"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCentralBodyGraphics, vtable_offset_local+11, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetShowLabel"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCentralBodyGraphics, vtable_offset_local+12, agcom.VARIANT_BOOL)
        self.__dict__["_GetAltitudeOffset"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCentralBodyGraphics, vtable_offset_local+13, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAltitudeOffset"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCentralBodyGraphics, vtable_offset_local+14, agcom.DOUBLE)
        self.__dict__["_GetBaseOverlay"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCentralBodyGraphics, vtable_offset_local+15, POINTER(agcom.PVOID))
        self.__dict__["_SetBaseOverlay"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCentralBodyGraphics, vtable_offset_local+16, agcom.PVOID)
        self.__dict__["_GetNightOverlay"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCentralBodyGraphics, vtable_offset_local+17, POINTER(agcom.PVOID))
        self.__dict__["_SetNightOverlay"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCentralBodyGraphics, vtable_offset_local+18, agcom.PVOID)
        self.__dict__["_GetSpecularOverlay"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCentralBodyGraphics, vtable_offset_local+19, POINTER(agcom.PVOID))
        self.__dict__["_SetSpecularOverlay"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCentralBodyGraphics, vtable_offset_local+20, agcom.PVOID)
        self.__dict__["_GetTerrain"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCentralBodyGraphics, vtable_offset_local+21, POINTER(agcom.PVOID))
        self.__dict__["_GetImagery"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCentralBodyGraphics, vtable_offset_local+22, POINTER(agcom.PVOID))
        self.__dict__["_GetKml"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCentralBodyGraphics, vtable_offset_local+23, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsCentralBodyGraphics.__dict__ and type(IStkGraphicsCentralBodyGraphics.__dict__[attrname]) == property:
            return IStkGraphicsCentralBodyGraphics.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsCentralBodyGraphics.")
    
    @property
    def Color(self) -> agcolor.Color:
        """Gets or sets the color of the central body in the scene."""
        with agmarshall.OLE_COLOR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetColor"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Color.setter
    def Color(self, color:agcolor.Color) -> None:
        with agmarshall.OLE_COLOR_arg(color) as arg_color:
            agcls.evaluate_hresult(self.__dict__["_SetColor"](arg_color.COM_val))

    @property
    def SpecularColor(self) -> agcolor.Color:
        """Gets or sets the specular color of the central body in the scene. The specular color is associated with the specular overlay."""
        with agmarshall.OLE_COLOR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSpecularColor"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @SpecularColor.setter
    def SpecularColor(self, specularColor:agcolor.Color) -> None:
        with agmarshall.OLE_COLOR_arg(specularColor) as arg_specularColor:
            agcls.evaluate_hresult(self.__dict__["_SetSpecularColor"](arg_specularColor.COM_val))

    @property
    def Shininess(self) -> float:
        """Gets or sets the shininess of the central body in the scene. The shininess affects the size and brightness of specular reflection associated with the specular overlay."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetShininess"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Shininess.setter
    def Shininess(self, shininess:float) -> None:
        with agmarshall.DOUBLE_arg(shininess) as arg_shininess:
            agcls.evaluate_hresult(self.__dict__["_SetShininess"](arg_shininess.COM_val))

    @property
    def ShowImagery(self) -> bool:
        """Gets or sets whether the imagery for central body in the scene is shown or hidden."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetShowImagery"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @ShowImagery.setter
    def ShowImagery(self, showImagery:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(showImagery) as arg_showImagery:
            agcls.evaluate_hresult(self.__dict__["_SetShowImagery"](arg_showImagery.COM_val))

    @property
    def Show(self) -> bool:
        """Gets or sets whether the central body is shown or hidden in the scene. This only affects the central body itself, not the primitives that are associated with it."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetShow"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Show.setter
    def Show(self, show:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(show) as arg_show:
            agcls.evaluate_hresult(self.__dict__["_SetShow"](arg_show.COM_val))

    @property
    def ShowLabel(self) -> bool:
        """Gets or sets whether a label with the name of the central body should be rendered in the scene when the camera is at certain distance away from the central body."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetShowLabel"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @ShowLabel.setter
    def ShowLabel(self, showLabel:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(showLabel) as arg_showLabel:
            agcls.evaluate_hresult(self.__dict__["_SetShowLabel"](arg_showLabel.COM_val))

    @property
    def AltitudeOffset(self) -> float:
        """Gets or sets the altitude that all terrain and imagery will be offset from the surface of the central body in the scene."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitudeOffset"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @AltitudeOffset.setter
    def AltitudeOffset(self, altitudeOffset:float) -> None:
        with agmarshall.DOUBLE_arg(altitudeOffset) as arg_altitudeOffset:
            agcls.evaluate_hresult(self.__dict__["_SetAltitudeOffset"](arg_altitudeOffset.COM_val))

    @property
    def BaseOverlay(self) -> "IStkGraphicsGlobeImageOverlay":
        """Gets or sets the base globe image overlay associated with the central body in the scene. The base overlay is always rendered before any other imagery..."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBaseOverlay"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @BaseOverlay.setter
    def BaseOverlay(self, baseOverlay:"IStkGraphicsGlobeImageOverlay") -> None:
        with agmarshall.AgInterface_in_arg(baseOverlay, IStkGraphicsGlobeImageOverlay) as arg_baseOverlay:
            agcls.evaluate_hresult(self.__dict__["_SetBaseOverlay"](arg_baseOverlay.COM_val))

    @property
    def NightOverlay(self) -> "IStkGraphicsGlobeImageOverlay":
        """Gets or sets the night globe image overlay associated with the central body in the scene. The night overlay is displayed only on parts of the central body that are not in sun light..."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetNightOverlay"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @NightOverlay.setter
    def NightOverlay(self, nightOverlay:"IStkGraphicsGlobeImageOverlay") -> None:
        with agmarshall.AgInterface_in_arg(nightOverlay, IStkGraphicsGlobeImageOverlay) as arg_nightOverlay:
            agcls.evaluate_hresult(self.__dict__["_SetNightOverlay"](arg_nightOverlay.COM_val))

    @property
    def SpecularOverlay(self) -> "IStkGraphicsGlobeImageOverlay":
        """Gets or sets the specular globe image overlay associated with the central body in the scene. The specular overlay is displayed only in the specular highlight of the central body."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSpecularOverlay"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @SpecularOverlay.setter
    def SpecularOverlay(self, specularOverlay:"IStkGraphicsGlobeImageOverlay") -> None:
        with agmarshall.AgInterface_in_arg(specularOverlay, IStkGraphicsGlobeImageOverlay) as arg_specularOverlay:
            agcls.evaluate_hresult(self.__dict__["_SetSpecularOverlay"](arg_specularOverlay.COM_val))

    @property
    def Terrain(self) -> "IStkGraphicsTerrainCollection":
        """Gets the collection of terrain overlay associated with the central body in the scene."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTerrain"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Imagery(self) -> "IStkGraphicsImageCollection":
        """Gets the collection of imagery associated with the central body in the scene."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetImagery"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Kml(self) -> "IStkGraphicsKmlGraphics":
        """Gets the kml graphics associated with the central body in the scene."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetKml"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{27f5d32b-5adf-4fc7-a8b8-83ada5ebc0ca}", IStkGraphicsCentralBodyGraphics)
agcls.AgTypeNameMap["IStkGraphicsCentralBodyGraphics"] = IStkGraphicsCentralBodyGraphics

class IStkGraphicsClouds(object):
    """Load, show and hide clouds in the scene."""
    _uuid = "{0f5265b8-2d96-440a-9b86-522d90bf2bc3}"
    _num_methods = 9
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetShow"] = _raise_uninitialized_error
        self.__dict__["_SetShow"] = _raise_uninitialized_error
        self.__dict__["_GetCloudsUri"] = _raise_uninitialized_error
        self.__dict__["_SetCloudsUri"] = _raise_uninitialized_error
        self.__dict__["_GetRoundness"] = _raise_uninitialized_error
        self.__dict__["_SetRoundness"] = _raise_uninitialized_error
        self.__dict__["_GetAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetIsValid"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsClouds._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsClouds from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsClouds = agcom.GUID(IStkGraphicsClouds._uuid)
        vtable_offset_local = IStkGraphicsClouds._vtable_offset - 1
        self.__dict__["_GetShow"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsClouds, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetShow"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsClouds, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetCloudsUri"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsClouds, vtable_offset_local+3, POINTER(agcom.BSTR))
        self.__dict__["_SetCloudsUri"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsClouds, vtable_offset_local+4, agcom.BSTR)
        self.__dict__["_GetRoundness"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsClouds, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetRoundness"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsClouds, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetAltitude"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsClouds, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAltitude"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsClouds, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetIsValid"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsClouds, vtable_offset_local+9, POINTER(agcom.VARIANT_BOOL))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsClouds.__dict__ and type(IStkGraphicsClouds.__dict__[attrname]) == property:
            return IStkGraphicsClouds.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsClouds.")
    
    @property
    def Show(self) -> bool:
        """Gets or sets whether clouds are rendered."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetShow"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Show.setter
    def Show(self, show:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(show) as arg_show:
            agcls.evaluate_hresult(self.__dict__["_SetShow"](arg_show.COM_val))

    @property
    def CloudsUri(self) -> str:
        """The URI of the clouds index file. A cloud index file is an ascii file that contains a time-ordered list of images that display over the globe."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCloudsUri"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @CloudsUri.setter
    def CloudsUri(self, cloudsUri:str) -> None:
        with agmarshall.BSTR_arg(cloudsUri) as arg_cloudsUri:
            agcls.evaluate_hresult(self.__dict__["_SetCloudsUri"](arg_cloudsUri.COM_val))

    @property
    def Roundness(self) -> float:
        """The roundness of the clouds."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetRoundness"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Roundness.setter
    def Roundness(self, roundness:float) -> None:
        with agmarshall.DOUBLE_arg(roundness) as arg_roundness:
            agcls.evaluate_hresult(self.__dict__["_SetRoundness"](arg_roundness.COM_val))

    @property
    def Altitude(self) -> float:
        """The altitude of the clouds."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitude"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Altitude.setter
    def Altitude(self, altitude:float) -> None:
        with agmarshall.DOUBLE_arg(altitude) as arg_altitude:
            agcls.evaluate_hresult(self.__dict__["_SetAltitude"](arg_altitude.COM_val))

    @property
    def IsValid(self) -> bool:
        """Returns whether or not the clouds file is valid."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetIsValid"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{0f5265b8-2d96-440a-9b86-522d90bf2bc3}", IStkGraphicsClouds)
agcls.AgTypeNameMap["IStkGraphicsClouds"] = IStkGraphicsClouds

class IStkGraphicsCompositeDisplayCondition(object):
    """A composite of display conditions combined using a binary logic operation. For example, several time interval display condition objects can be added to a composite..."""
    _uuid = "{afe0e66f-0fc5-46ad-801f-22670cfe99a9}"
    _num_methods = 18
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        self.__dict__["_GetCapacity"] = _raise_uninitialized_error
        self.__dict__["_GetLogicOperation"] = _raise_uninitialized_error
        self.__dict__["_SetLogicOperation"] = _raise_uninitialized_error
        self.__dict__["_Item"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        self.__dict__["_Reserve"] = _raise_uninitialized_error
        self.__dict__["_AddWithNegate"] = _raise_uninitialized_error
        self.__dict__["_Add"] = _raise_uninitialized_error
        self.__dict__["_InsertWithNegate"] = _raise_uninitialized_error
        self.__dict__["_Insert"] = _raise_uninitialized_error
        self.__dict__["_Remove"] = _raise_uninitialized_error
        self.__dict__["_RemoveAt"] = _raise_uninitialized_error
        self.__dict__["_Clear"] = _raise_uninitialized_error
        self.__dict__["_GetNegate"] = _raise_uninitialized_error
        self.__dict__["_SetNegate"] = _raise_uninitialized_error
        self.__dict__["_GetNegateAt"] = _raise_uninitialized_error
        self.__dict__["_SetNegateAt"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsCompositeDisplayCondition._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsCompositeDisplayCondition from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsCompositeDisplayCondition = agcom.GUID(IStkGraphicsCompositeDisplayCondition._uuid)
        vtable_offset_local = IStkGraphicsCompositeDisplayCondition._vtable_offset - 1
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCompositeDisplayCondition, vtable_offset_local+1, POINTER(agcom.INT))
        self.__dict__["_GetCapacity"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCompositeDisplayCondition, vtable_offset_local+2, POINTER(agcom.INT))
        self.__dict__["_GetLogicOperation"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCompositeDisplayCondition, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetLogicOperation"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCompositeDisplayCondition, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_Item"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCompositeDisplayCondition, vtable_offset_local+5, agcom.INT, POINTER(agcom.PVOID))
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCompositeDisplayCondition, vtable_offset_local+6, POINTER(agcom.PVOID))
        self.__dict__["_Reserve"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCompositeDisplayCondition, vtable_offset_local+7, agcom.INT)
        self.__dict__["_AddWithNegate"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCompositeDisplayCondition, vtable_offset_local+8, agcom.PVOID, agcom.VARIANT_BOOL)
        self.__dict__["_Add"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCompositeDisplayCondition, vtable_offset_local+9, agcom.PVOID)
        self.__dict__["_InsertWithNegate"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCompositeDisplayCondition, vtable_offset_local+10, agcom.INT, agcom.PVOID, agcom.VARIANT_BOOL)
        self.__dict__["_Insert"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCompositeDisplayCondition, vtable_offset_local+11, agcom.INT, agcom.PVOID)
        self.__dict__["_Remove"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCompositeDisplayCondition, vtable_offset_local+12, agcom.PVOID)
        self.__dict__["_RemoveAt"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCompositeDisplayCondition, vtable_offset_local+13, agcom.INT)
        self.__dict__["_Clear"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCompositeDisplayCondition, vtable_offset_local+14, )
        self.__dict__["_GetNegate"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCompositeDisplayCondition, vtable_offset_local+15, agcom.PVOID, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetNegate"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCompositeDisplayCondition, vtable_offset_local+16, agcom.PVOID, agcom.VARIANT_BOOL)
        self.__dict__["_GetNegateAt"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCompositeDisplayCondition, vtable_offset_local+17, agcom.INT, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetNegateAt"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCompositeDisplayCondition, vtable_offset_local+18, agcom.INT, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsCompositeDisplayCondition.__dict__ and type(IStkGraphicsCompositeDisplayCondition.__dict__[attrname]) == property:
            return IStkGraphicsCompositeDisplayCondition.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsCompositeDisplayCondition.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> "IStkGraphicsDisplayCondition":
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    
    @property
    def Count(self) -> int:
        """Gets the number of display conditions in the composite."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Capacity(self) -> int:
        """Gets the number of display conditions for which memory has been allocated. This will always be greater or equal to count."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCapacity"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def LogicOperation(self) -> "AgEStkGraphicsBinaryLogicOperation":
        """Gets or sets the binary logic operation applied to all display conditions in the composite when the composite is evaluated. To combine logical and and or operations in the same expression, create composites containing composites."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsBinaryLogicOperation) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetLogicOperation"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @LogicOperation.setter
    def LogicOperation(self, logicOperation:"AgEStkGraphicsBinaryLogicOperation") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsBinaryLogicOperation, logicOperation) as arg_logicOperation:
            agcls.evaluate_hresult(self.__dict__["_SetLogicOperation"](arg_logicOperation.COM_val))

    def Item(self, index:int) -> "IStkGraphicsDisplayCondition":
        """Returns the condition at the given zero-based index."""
        with agmarshall.INT_arg(index) as arg_index, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Item"](arg_index.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        """Returns an enumerator that iterates through the collection."""
        with agmarshall.IEnumVARIANT_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def Reserve(self, count:int) -> None:
        """Requests enough memory for the composite to contain at least count display conditions. count will not be affected but capacity may be."""
        with agmarshall.INT_arg(count) as arg_count:
            agcls.evaluate_hresult(self.__dict__["_Reserve"](arg_count.COM_val))

    def AddWithNegate(self, displayCondition:"IStkGraphicsDisplayCondition", negate:bool) -> None:
        """Adds a display condition to the end of the composite."""
        with agmarshall.AgInterface_in_arg(displayCondition, IStkGraphicsDisplayCondition) as arg_displayCondition, \
             agmarshall.VARIANT_BOOL_arg(negate) as arg_negate:
            agcls.evaluate_hresult(self.__dict__["_AddWithNegate"](arg_displayCondition.COM_val, arg_negate.COM_val))

    def Add(self, displayCondition:"IStkGraphicsDisplayCondition") -> None:
        """Adds a display condition to the end of the composite."""
        with agmarshall.AgInterface_in_arg(displayCondition, IStkGraphicsDisplayCondition) as arg_displayCondition:
            agcls.evaluate_hresult(self.__dict__["_Add"](arg_displayCondition.COM_val))

    def InsertWithNegate(self, index:int, displayCondition:"IStkGraphicsDisplayCondition", negate:bool) -> None:
        """Inserts a display condition at the given zero-based index, shifting existing display conditions."""
        with agmarshall.INT_arg(index) as arg_index, \
             agmarshall.AgInterface_in_arg(displayCondition, IStkGraphicsDisplayCondition) as arg_displayCondition, \
             agmarshall.VARIANT_BOOL_arg(negate) as arg_negate:
            agcls.evaluate_hresult(self.__dict__["_InsertWithNegate"](arg_index.COM_val, arg_displayCondition.COM_val, arg_negate.COM_val))

    def Insert(self, index:int, displayCondition:"IStkGraphicsDisplayCondition") -> None:
        """Inserts a display condition at the given zero-based index, shifting existing display conditions."""
        with agmarshall.INT_arg(index) as arg_index, \
             agmarshall.AgInterface_in_arg(displayCondition, IStkGraphicsDisplayCondition) as arg_displayCondition:
            agcls.evaluate_hresult(self.__dict__["_Insert"](arg_index.COM_val, arg_displayCondition.COM_val))

    def Remove(self, displayCondition:"IStkGraphicsDisplayCondition") -> None:
        """Removes a display condition from the composite."""
        with agmarshall.AgInterface_in_arg(displayCondition, IStkGraphicsDisplayCondition) as arg_displayCondition:
            agcls.evaluate_hresult(self.__dict__["_Remove"](arg_displayCondition.COM_val))

    def RemoveAt(self, index:int) -> None:
        """Removes the display condition at the given zero-based index, shifting existing display conditions."""
        with agmarshall.INT_arg(index) as arg_index:
            agcls.evaluate_hresult(self.__dict__["_RemoveAt"](arg_index.COM_val))

    def Clear(self) -> None:
        """Removes all display conditions from the composite."""
        agcls.evaluate_hresult(self.__dict__["_Clear"]())

    def GetNegate(self, displayCondition:"IStkGraphicsDisplayCondition") -> bool:
        """Determines if a logical not operation is applied to a display condition in the composite."""
        with agmarshall.AgInterface_in_arg(displayCondition, IStkGraphicsDisplayCondition) as arg_displayCondition, \
             agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetNegate"](arg_displayCondition.COM_val, byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def SetNegate(self, displayCondition:"IStkGraphicsDisplayCondition", negate:bool) -> None:
        """Sets if a logical not operation is applied to a display condition in the composite when the composite is evaluated."""
        with agmarshall.AgInterface_in_arg(displayCondition, IStkGraphicsDisplayCondition) as arg_displayCondition, \
             agmarshall.VARIANT_BOOL_arg(negate) as arg_negate:
            agcls.evaluate_hresult(self.__dict__["_SetNegate"](arg_displayCondition.COM_val, arg_negate.COM_val))

    def GetNegateAt(self, index:int) -> bool:
        """Determines if a logical not operation is applied to a display condition in the composite."""
        with agmarshall.INT_arg(index) as arg_index, \
             agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetNegateAt"](arg_index.COM_val, byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def SetNegateAt(self, index:int, negate:bool) -> None:
        """Sets if a logical not operation is applied to a display condition in the composite when the composite is evaluated."""
        with agmarshall.INT_arg(index) as arg_index, \
             agmarshall.VARIANT_BOOL_arg(negate) as arg_negate:
            agcls.evaluate_hresult(self.__dict__["_SetNegateAt"](arg_index.COM_val, arg_negate.COM_val))

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{afe0e66f-0fc5-46ad-801f-22670cfe99a9}", IStkGraphicsCompositeDisplayCondition)
agcls.AgTypeNameMap["IStkGraphicsCompositeDisplayCondition"] = IStkGraphicsCompositeDisplayCondition

class IStkGraphicsCompositePrimitive(object):
    """ A primitive that is composed of multiple other primitives. Since composites can contain other composites, they are commonly used to build hierarchies of primitives to efficiently evaluate display conditions..."""
    _uuid = "{c24448a9-4fe7-4905-86e0-70a71346fcf2}"
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        self.__dict__["_GetTranslucentPrimitivesSortOrder"] = _raise_uninitialized_error
        self.__dict__["_SetTranslucentPrimitivesSortOrder"] = _raise_uninitialized_error
        self.__dict__["_Add"] = _raise_uninitialized_error
        self.__dict__["_Remove"] = _raise_uninitialized_error
        self.__dict__["_Contains"] = _raise_uninitialized_error
        self.__dict__["_Clear"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsCompositePrimitive._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsCompositePrimitive from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsCompositePrimitive = agcom.GUID(IStkGraphicsCompositePrimitive._uuid)
        vtable_offset_local = IStkGraphicsCompositePrimitive._vtable_offset - 1
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCompositePrimitive, vtable_offset_local+1, POINTER(agcom.INT))
        self.__dict__["_GetTranslucentPrimitivesSortOrder"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCompositePrimitive, vtable_offset_local+2, POINTER(agcom.LONG))
        self.__dict__["_SetTranslucentPrimitivesSortOrder"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCompositePrimitive, vtable_offset_local+3, agcom.LONG)
        self.__dict__["_Add"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCompositePrimitive, vtable_offset_local+4, agcom.PVOID)
        self.__dict__["_Remove"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCompositePrimitive, vtable_offset_local+5, agcom.PVOID)
        self.__dict__["_Contains"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCompositePrimitive, vtable_offset_local+6, agcom.PVOID, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_Clear"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCompositePrimitive, vtable_offset_local+7, )
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCompositePrimitive, vtable_offset_local+8, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsCompositePrimitive.__dict__ and type(IStkGraphicsCompositePrimitive.__dict__[attrname]) == property:
            return IStkGraphicsCompositePrimitive.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsCompositePrimitive.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> typing.Any:
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    
    @property
    def Count(self) -> int:
        """Gets the number of primitives in the composite."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def TranslucentPrimitivesSortOrder(self) -> "AgEStkGraphicsPrimitivesSortOrder":
        """Gets or sets the sort order for translucent primitives in this composite. This determines a trade-off between rendering speed and quality..."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsPrimitivesSortOrder) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTranslucentPrimitivesSortOrder"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @TranslucentPrimitivesSortOrder.setter
    def TranslucentPrimitivesSortOrder(self, translucentPrimitivesSortOrder:"AgEStkGraphicsPrimitivesSortOrder") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsPrimitivesSortOrder, translucentPrimitivesSortOrder) as arg_translucentPrimitivesSortOrder:
            agcls.evaluate_hresult(self.__dict__["_SetTranslucentPrimitivesSortOrder"](arg_translucentPrimitivesSortOrder.COM_val))

    def Add(self, primitive:"IStkGraphicsPrimitive") -> None:
        """Adds a primitive to the composite."""
        with agmarshall.AgInterface_in_arg(primitive, IStkGraphicsPrimitive) as arg_primitive:
            agcls.evaluate_hresult(self.__dict__["_Add"](arg_primitive.COM_val))

    def Remove(self, primitive:"IStkGraphicsPrimitive") -> None:
        """Removes a primitive from the composite."""
        with agmarshall.AgInterface_in_arg(primitive, IStkGraphicsPrimitive) as arg_primitive:
            agcls.evaluate_hresult(self.__dict__["_Remove"](arg_primitive.COM_val))

    def Contains(self, primitive:"IStkGraphicsPrimitive") -> bool:
        """Determines whether the composite contains a primitive."""
        with agmarshall.AgInterface_in_arg(primitive, IStkGraphicsPrimitive) as arg_primitive, \
             agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_Contains"](arg_primitive.COM_val, byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def Clear(self) -> None:
        """Removes all primitives from the composite."""
        agcls.evaluate_hresult(self.__dict__["_Clear"]())

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        """Returns an enumerator that iterates through the collection. The order of the primitives is not guaranteed to be the order that the primitives were added."""
        with agmarshall.IEnumVARIANT_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{c24448a9-4fe7-4905-86e0-70a71346fcf2}", IStkGraphicsCompositePrimitive)
agcls.AgTypeNameMap["IStkGraphicsCompositePrimitive"] = IStkGraphicsCompositePrimitive

class IStkGraphicsConstantDisplayCondition(object):
    """A display condition that evaluates to a user-defined value. This is commonly used to hide primitives by assigning to a primitive a display condition that always returns false."""
    _uuid = "{efede07b-4d59-4622-ba51-0281a5108aab}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetDisplay"] = _raise_uninitialized_error
        self.__dict__["_SetDisplay"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsConstantDisplayCondition._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsConstantDisplayCondition from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsConstantDisplayCondition = agcom.GUID(IStkGraphicsConstantDisplayCondition._uuid)
        vtable_offset_local = IStkGraphicsConstantDisplayCondition._vtable_offset - 1
        self.__dict__["_GetDisplay"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsConstantDisplayCondition, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetDisplay"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsConstantDisplayCondition, vtable_offset_local+2, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsConstantDisplayCondition.__dict__ and type(IStkGraphicsConstantDisplayCondition.__dict__[attrname]) == property:
            return IStkGraphicsConstantDisplayCondition.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsConstantDisplayCondition.")
    
    @property
    def Display(self) -> bool:
        """Gets or sets the value the display condition evaluates to."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDisplay"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Display.setter
    def Display(self, display:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(display) as arg_display:
            agcls.evaluate_hresult(self.__dict__["_SetDisplay"](arg_display.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{efede07b-4d59-4622-ba51-0281a5108aab}", IStkGraphicsConstantDisplayCondition)
agcls.AgTypeNameMap["IStkGraphicsConstantDisplayCondition"] = IStkGraphicsConstantDisplayCondition

class IStkGraphicsDisplayCondition(object):
    """When assigned to objects, such as primitives or globe overlays, display conditions are evaluated to determine if the object should be rendered."""
    _uuid = "{5214ce90-6448-4cc7-bc5c-f06485ec5bb8}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsDisplayCondition._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsDisplayCondition from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsDisplayCondition = agcom.GUID(IStkGraphicsDisplayCondition._uuid)
        vtable_offset_local = IStkGraphicsDisplayCondition._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsDisplayCondition.__dict__ and type(IStkGraphicsDisplayCondition.__dict__[attrname]) == property:
            return IStkGraphicsDisplayCondition.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsDisplayCondition.")
    

agcls.AgClassCatalog.add_catalog_entry("{5214ce90-6448-4cc7-bc5c-f06485ec5bb8}", IStkGraphicsDisplayCondition)
agcls.AgTypeNameMap["IStkGraphicsDisplayCondition"] = IStkGraphicsDisplayCondition

class IStkGraphicsDistanceDisplayCondition(object):
    """Defines an inclusive distance interval that determines when an object, such as a primitive, is rendered based on the distance from the camera to the object."""
    _uuid = "{b1b3130c-bebb-4a64-a5b7-2357384e2b8c}"
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetMinimumDistance"] = _raise_uninitialized_error
        self.__dict__["_SetMinimumDistance"] = _raise_uninitialized_error
        self.__dict__["_GetMaximumDistance"] = _raise_uninitialized_error
        self.__dict__["_SetMaximumDistance"] = _raise_uninitialized_error
        self.__dict__["_GetMinimumDistanceSquared"] = _raise_uninitialized_error
        self.__dict__["_GetMaximumDistanceSquared"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsDistanceDisplayCondition._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsDistanceDisplayCondition from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsDistanceDisplayCondition = agcom.GUID(IStkGraphicsDistanceDisplayCondition._uuid)
        vtable_offset_local = IStkGraphicsDistanceDisplayCondition._vtable_offset - 1
        self.__dict__["_GetMinimumDistance"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsDistanceDisplayCondition, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMinimumDistance"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsDistanceDisplayCondition, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetMaximumDistance"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsDistanceDisplayCondition, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaximumDistance"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsDistanceDisplayCondition, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetMinimumDistanceSquared"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsDistanceDisplayCondition, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_GetMaximumDistanceSquared"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsDistanceDisplayCondition, vtable_offset_local+6, POINTER(agcom.DOUBLE))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsDistanceDisplayCondition.__dict__ and type(IStkGraphicsDistanceDisplayCondition.__dict__[attrname]) == property:
            return IStkGraphicsDistanceDisplayCondition.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsDistanceDisplayCondition.")
    
    @property
    def MinimumDistance(self) -> float:
        """Gets or sets the minimum distance of the inclusive distance interval."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinimumDistance"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @MinimumDistance.setter
    def MinimumDistance(self, minimumDistance:float) -> None:
        with agmarshall.DOUBLE_arg(minimumDistance) as arg_minimumDistance:
            agcls.evaluate_hresult(self.__dict__["_SetMinimumDistance"](arg_minimumDistance.COM_val))

    @property
    def MaximumDistance(self) -> float:
        """Gets or sets the maximum distance of the inclusive distance interval. Use Double.MaxValue to ignore checking the maximum distance."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaximumDistance"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @MaximumDistance.setter
    def MaximumDistance(self, maximumDistance:float) -> None:
        with agmarshall.DOUBLE_arg(maximumDistance) as arg_maximumDistance:
            agcls.evaluate_hresult(self.__dict__["_SetMaximumDistance"](arg_maximumDistance.COM_val))

    @property
    def MinimumDistanceSquared(self) -> float:
        """Gets the squared minimum distance of the inclusive distance interval."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinimumDistanceSquared"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def MaximumDistanceSquared(self) -> float:
        """Gets the squared maximum distance of the inclusive distance interval."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaximumDistanceSquared"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{b1b3130c-bebb-4a64-a5b7-2357384e2b8c}", IStkGraphicsDistanceDisplayCondition)
agcls.AgTypeNameMap["IStkGraphicsDistanceDisplayCondition"] = IStkGraphicsDistanceDisplayCondition

class IStkGraphicsDistanceToGlobeOverlayDisplayCondition(object):
    """Defines an inclusive distance interval that determines when an object, such as a primitive, is rendered based on the distance from the camera to the globe overlay..."""
    _uuid = "{212b00ec-ff3a-4f1b-9fc3-5a900c6536dc}"
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetGlobeOverlay"] = _raise_uninitialized_error
        self.__dict__["_SetGlobeOverlay"] = _raise_uninitialized_error
        self.__dict__["_GetMinimumDistance"] = _raise_uninitialized_error
        self.__dict__["_SetMinimumDistance"] = _raise_uninitialized_error
        self.__dict__["_GetMinimumDistanceSquared"] = _raise_uninitialized_error
        self.__dict__["_GetMaximumDistance"] = _raise_uninitialized_error
        self.__dict__["_SetMaximumDistance"] = _raise_uninitialized_error
        self.__dict__["_GetMaximumDistanceSquared"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsDistanceToGlobeOverlayDisplayCondition._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsDistanceToGlobeOverlayDisplayCondition from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsDistanceToGlobeOverlayDisplayCondition = agcom.GUID(IStkGraphicsDistanceToGlobeOverlayDisplayCondition._uuid)
        vtable_offset_local = IStkGraphicsDistanceToGlobeOverlayDisplayCondition._vtable_offset - 1
        self.__dict__["_GetGlobeOverlay"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsDistanceToGlobeOverlayDisplayCondition, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_SetGlobeOverlay"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsDistanceToGlobeOverlayDisplayCondition, vtable_offset_local+2, agcom.PVOID)
        self.__dict__["_GetMinimumDistance"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsDistanceToGlobeOverlayDisplayCondition, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMinimumDistance"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsDistanceToGlobeOverlayDisplayCondition, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetMinimumDistanceSquared"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsDistanceToGlobeOverlayDisplayCondition, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_GetMaximumDistance"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsDistanceToGlobeOverlayDisplayCondition, vtable_offset_local+6, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaximumDistance"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsDistanceToGlobeOverlayDisplayCondition, vtable_offset_local+7, agcom.DOUBLE)
        self.__dict__["_GetMaximumDistanceSquared"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsDistanceToGlobeOverlayDisplayCondition, vtable_offset_local+8, POINTER(agcom.DOUBLE))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsDistanceToGlobeOverlayDisplayCondition.__dict__ and type(IStkGraphicsDistanceToGlobeOverlayDisplayCondition.__dict__[attrname]) == property:
            return IStkGraphicsDistanceToGlobeOverlayDisplayCondition.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsDistanceToGlobeOverlayDisplayCondition.")
    
    @property
    def GlobeOverlay(self) -> "IStkGraphicsGlobeOverlay":
        """Gets or sets the globe overlay associated with this instance."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetGlobeOverlay"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @GlobeOverlay.setter
    def GlobeOverlay(self, globeOverlay:"IStkGraphicsGlobeOverlay") -> None:
        with agmarshall.AgInterface_in_arg(globeOverlay, IStkGraphicsGlobeOverlay) as arg_globeOverlay:
            agcls.evaluate_hresult(self.__dict__["_SetGlobeOverlay"](arg_globeOverlay.COM_val))

    @property
    def MinimumDistance(self) -> float:
        """Gets or sets the minimum distance of the inclusive distance interval."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinimumDistance"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @MinimumDistance.setter
    def MinimumDistance(self, minimumDistance:float) -> None:
        with agmarshall.DOUBLE_arg(minimumDistance) as arg_minimumDistance:
            agcls.evaluate_hresult(self.__dict__["_SetMinimumDistance"](arg_minimumDistance.COM_val))

    @property
    def MinimumDistanceSquared(self) -> float:
        """Gets the squared minimum distance of the inclusive distance interval."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinimumDistanceSquared"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def MaximumDistance(self) -> float:
        """Gets or sets the maximum distance of the inclusive distance interval. Use Double.MaxValue to ignore checking the maximum distance."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaximumDistance"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @MaximumDistance.setter
    def MaximumDistance(self, maximumDistance:float) -> None:
        with agmarshall.DOUBLE_arg(maximumDistance) as arg_maximumDistance:
            agcls.evaluate_hresult(self.__dict__["_SetMaximumDistance"](arg_maximumDistance.COM_val))

    @property
    def MaximumDistanceSquared(self) -> float:
        """Gets the squared maximum distance of the inclusive distance interval."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaximumDistanceSquared"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{212b00ec-ff3a-4f1b-9fc3-5a900c6536dc}", IStkGraphicsDistanceToGlobeOverlayDisplayCondition)
agcls.AgTypeNameMap["IStkGraphicsDistanceToGlobeOverlayDisplayCondition"] = IStkGraphicsDistanceToGlobeOverlayDisplayCondition

class IStkGraphicsDistanceToPositionDisplayCondition(object):
    """Defines an inclusive distance interval that determines when an object, such as a primitive, is rendered based on the distance from the camera to a position defined in the given reference frame."""
    _uuid = "{0110db74-d567-4804-9bec-d7cce8ed59d0}"
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetMinimumDistance"] = _raise_uninitialized_error
        self.__dict__["_SetMinimumDistance"] = _raise_uninitialized_error
        self.__dict__["_GetMinimumDistanceSquared"] = _raise_uninitialized_error
        self.__dict__["_GetMaximumDistance"] = _raise_uninitialized_error
        self.__dict__["_SetMaximumDistance"] = _raise_uninitialized_error
        self.__dict__["_GetMaximumDistanceSquared"] = _raise_uninitialized_error
        self.__dict__["_GetPosition"] = _raise_uninitialized_error
        self.__dict__["_SetPosition"] = _raise_uninitialized_error
        self.__dict__["_GetReferenceFrame"] = _raise_uninitialized_error
        self.__dict__["_SetReferenceFrame"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsDistanceToPositionDisplayCondition._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsDistanceToPositionDisplayCondition from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsDistanceToPositionDisplayCondition = agcom.GUID(IStkGraphicsDistanceToPositionDisplayCondition._uuid)
        vtable_offset_local = IStkGraphicsDistanceToPositionDisplayCondition._vtable_offset - 1
        self.__dict__["_GetMinimumDistance"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsDistanceToPositionDisplayCondition, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMinimumDistance"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsDistanceToPositionDisplayCondition, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetMinimumDistanceSquared"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsDistanceToPositionDisplayCondition, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_GetMaximumDistance"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsDistanceToPositionDisplayCondition, vtable_offset_local+4, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaximumDistance"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsDistanceToPositionDisplayCondition, vtable_offset_local+5, agcom.DOUBLE)
        self.__dict__["_GetMaximumDistanceSquared"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsDistanceToPositionDisplayCondition, vtable_offset_local+6, POINTER(agcom.DOUBLE))
        self.__dict__["_GetPosition"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsDistanceToPositionDisplayCondition, vtable_offset_local+7, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetPosition"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsDistanceToPositionDisplayCondition, vtable_offset_local+8, agcom.SAFEARRAY)
        self.__dict__["_GetReferenceFrame"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsDistanceToPositionDisplayCondition, vtable_offset_local+9, POINTER(agcom.PVOID))
        self.__dict__["_SetReferenceFrame"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsDistanceToPositionDisplayCondition, vtable_offset_local+10, agcom.PVOID)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsDistanceToPositionDisplayCondition.__dict__ and type(IStkGraphicsDistanceToPositionDisplayCondition.__dict__[attrname]) == property:
            return IStkGraphicsDistanceToPositionDisplayCondition.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsDistanceToPositionDisplayCondition.")
    
    @property
    def MinimumDistance(self) -> float:
        """Gets or sets the minimum distance of the inclusive distance interval."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinimumDistance"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @MinimumDistance.setter
    def MinimumDistance(self, minimumDistance:float) -> None:
        with agmarshall.DOUBLE_arg(minimumDistance) as arg_minimumDistance:
            agcls.evaluate_hresult(self.__dict__["_SetMinimumDistance"](arg_minimumDistance.COM_val))

    @property
    def MinimumDistanceSquared(self) -> float:
        """Gets the squared minimum distance of the inclusive distance interval."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinimumDistanceSquared"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def MaximumDistance(self) -> float:
        """Gets or sets the maximum distance of the inclusive distance interval. Use Double.MaxValue to ignore checking the maximum distance."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaximumDistance"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @MaximumDistance.setter
    def MaximumDistance(self, maximumDistance:float) -> None:
        with agmarshall.DOUBLE_arg(maximumDistance) as arg_maximumDistance:
            agcls.evaluate_hresult(self.__dict__["_SetMaximumDistance"](arg_maximumDistance.COM_val))

    @property
    def MaximumDistanceSquared(self) -> float:
        """Gets the squared maximum distance of the inclusive distance interval."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaximumDistanceSquared"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Position(self) -> list:
        """Gets or sets the position used to compute the distance from the camera. The array contains the components of the position arranged in the order x, y, z."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPosition"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @Position.setter
    def Position(self, position:list) -> None:
        with agmarshall.SAFEARRAY_arg(position) as arg_position:
            agcls.evaluate_hresult(self.__dict__["_SetPosition"](arg_position.COM_val))

    @property
    def ReferenceFrame(self) -> "ICrdnSystem":
        """Gets or sets the reference frame that position is defined in."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetReferenceFrame"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @ReferenceFrame.setter
    def ReferenceFrame(self, referenceFrame:"ICrdnSystem") -> None:
        with agmarshall.AgInterface_in_arg(referenceFrame, ICrdnSystem) as arg_referenceFrame:
            agcls.evaluate_hresult(self.__dict__["_SetReferenceFrame"](arg_referenceFrame.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{0110db74-d567-4804-9bec-d7cce8ed59d0}", IStkGraphicsDistanceToPositionDisplayCondition)
agcls.AgTypeNameMap["IStkGraphicsDistanceToPositionDisplayCondition"] = IStkGraphicsDistanceToPositionDisplayCondition

class IStkGraphicsDistanceToPrimitiveDisplayCondition(object):
    """Defines an inclusive distance interval that determines when an object, such as a screen overlay, is rendered based on the distance from the camera to the primitive..."""
    _uuid = "{bf9664c2-e8c4-471b-a071-865f1448a031}"
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetPrimitive"] = _raise_uninitialized_error
        self.__dict__["_SetPrimitive"] = _raise_uninitialized_error
        self.__dict__["_GetMinimumDistance"] = _raise_uninitialized_error
        self.__dict__["_SetMinimumDistance"] = _raise_uninitialized_error
        self.__dict__["_GetMinimumDistanceSquared"] = _raise_uninitialized_error
        self.__dict__["_GetMaximumDistance"] = _raise_uninitialized_error
        self.__dict__["_SetMaximumDistance"] = _raise_uninitialized_error
        self.__dict__["_GetMaximumDistanceSquared"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsDistanceToPrimitiveDisplayCondition._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsDistanceToPrimitiveDisplayCondition from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsDistanceToPrimitiveDisplayCondition = agcom.GUID(IStkGraphicsDistanceToPrimitiveDisplayCondition._uuid)
        vtable_offset_local = IStkGraphicsDistanceToPrimitiveDisplayCondition._vtable_offset - 1
        self.__dict__["_GetPrimitive"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsDistanceToPrimitiveDisplayCondition, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_SetPrimitive"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsDistanceToPrimitiveDisplayCondition, vtable_offset_local+2, agcom.PVOID)
        self.__dict__["_GetMinimumDistance"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsDistanceToPrimitiveDisplayCondition, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMinimumDistance"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsDistanceToPrimitiveDisplayCondition, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetMinimumDistanceSquared"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsDistanceToPrimitiveDisplayCondition, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_GetMaximumDistance"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsDistanceToPrimitiveDisplayCondition, vtable_offset_local+6, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaximumDistance"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsDistanceToPrimitiveDisplayCondition, vtable_offset_local+7, agcom.DOUBLE)
        self.__dict__["_GetMaximumDistanceSquared"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsDistanceToPrimitiveDisplayCondition, vtable_offset_local+8, POINTER(agcom.DOUBLE))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsDistanceToPrimitiveDisplayCondition.__dict__ and type(IStkGraphicsDistanceToPrimitiveDisplayCondition.__dict__[attrname]) == property:
            return IStkGraphicsDistanceToPrimitiveDisplayCondition.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsDistanceToPrimitiveDisplayCondition.")
    
    @property
    def Primitive(self) -> "IStkGraphicsPrimitive":
        """Gets or sets the primitive associated with this instance."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPrimitive"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @Primitive.setter
    def Primitive(self, primitive:"IStkGraphicsPrimitive") -> None:
        with agmarshall.AgInterface_in_arg(primitive, IStkGraphicsPrimitive) as arg_primitive:
            agcls.evaluate_hresult(self.__dict__["_SetPrimitive"](arg_primitive.COM_val))

    @property
    def MinimumDistance(self) -> float:
        """Gets or sets the minimum distance of the inclusive distance interval."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinimumDistance"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @MinimumDistance.setter
    def MinimumDistance(self, minimumDistance:float) -> None:
        with agmarshall.DOUBLE_arg(minimumDistance) as arg_minimumDistance:
            agcls.evaluate_hresult(self.__dict__["_SetMinimumDistance"](arg_minimumDistance.COM_val))

    @property
    def MinimumDistanceSquared(self) -> float:
        """Gets the squared minimum distance of the inclusive distance interval."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinimumDistanceSquared"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def MaximumDistance(self) -> float:
        """Gets or sets the maximum distance of the inclusive distance interval. Use Double.MaxValue to ignore checking the maximum distance."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaximumDistance"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @MaximumDistance.setter
    def MaximumDistance(self, maximumDistance:float) -> None:
        with agmarshall.DOUBLE_arg(maximumDistance) as arg_maximumDistance:
            agcls.evaluate_hresult(self.__dict__["_SetMaximumDistance"](arg_maximumDistance.COM_val))

    @property
    def MaximumDistanceSquared(self) -> float:
        """Gets the squared maximum distance of the inclusive distance interval."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaximumDistanceSquared"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{bf9664c2-e8c4-471b-a071-865f1448a031}", IStkGraphicsDistanceToPrimitiveDisplayCondition)
agcls.AgTypeNameMap["IStkGraphicsDistanceToPrimitiveDisplayCondition"] = IStkGraphicsDistanceToPrimitiveDisplayCondition

class IStkGraphicsDurationPathPrimitiveUpdatePolicy(object):
    """path primitive update policy that removes points from remove location after a given duration."""
    _uuid = "{23d3c9c4-b242-4a5a-89cf-58387bd9f935}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetDuration"] = _raise_uninitialized_error
        self.__dict__["_SetDuration"] = _raise_uninitialized_error
        self.__dict__["_GetRemoveLocation"] = _raise_uninitialized_error
        self.__dict__["_SetRemoveLocation"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsDurationPathPrimitiveUpdatePolicy._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsDurationPathPrimitiveUpdatePolicy from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsDurationPathPrimitiveUpdatePolicy = agcom.GUID(IStkGraphicsDurationPathPrimitiveUpdatePolicy._uuid)
        vtable_offset_local = IStkGraphicsDurationPathPrimitiveUpdatePolicy._vtable_offset - 1
        self.__dict__["_GetDuration"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsDurationPathPrimitiveUpdatePolicy, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDuration"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsDurationPathPrimitiveUpdatePolicy, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetRemoveLocation"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsDurationPathPrimitiveUpdatePolicy, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetRemoveLocation"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsDurationPathPrimitiveUpdatePolicy, vtable_offset_local+4, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsDurationPathPrimitiveUpdatePolicy.__dict__ and type(IStkGraphicsDurationPathPrimitiveUpdatePolicy.__dict__[attrname]) == property:
            return IStkGraphicsDurationPathPrimitiveUpdatePolicy.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsDurationPathPrimitiveUpdatePolicy.")
    
    @property
    def Duration(self) -> float:
        """Gets or sets the maximum duration that a point will lie on the line."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDuration"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Duration.setter
    def Duration(self, duration:float) -> None:
        with agmarshall.DOUBLE_arg(duration) as arg_duration:
            agcls.evaluate_hresult(self.__dict__["_SetDuration"](arg_duration.COM_val))

    @property
    def RemoveLocation(self) -> "AgEStkGraphicsPathPrimitiveRemoveLocation":
        """Gets or sets where the positions on the path are removed from."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsPathPrimitiveRemoveLocation) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetRemoveLocation"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @RemoveLocation.setter
    def RemoveLocation(self, removeLocation:"AgEStkGraphicsPathPrimitiveRemoveLocation") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsPathPrimitiveRemoveLocation, removeLocation) as arg_removeLocation:
            agcls.evaluate_hresult(self.__dict__["_SetRemoveLocation"](arg_removeLocation.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{23d3c9c4-b242-4a5a-89cf-58387bd9f935}", IStkGraphicsDurationPathPrimitiveUpdatePolicy)
agcls.AgTypeNameMap["IStkGraphicsDurationPathPrimitiveUpdatePolicy"] = IStkGraphicsDurationPathPrimitiveUpdatePolicy

class IStkGraphicsFrameRate(object):
    """Keeps track of how many times the scenes are rendered per second."""
    _uuid = "{9bbe1077-fcb3-4d73-ae9e-727155e14288}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetFramesPerSecond"] = _raise_uninitialized_error
        self.__dict__["_GetMaximumNumberOfFrames"] = _raise_uninitialized_error
        self.__dict__["_SetMaximumNumberOfFrames"] = _raise_uninitialized_error
        self.__dict__["_Reset"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsFrameRate._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsFrameRate from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsFrameRate = agcom.GUID(IStkGraphicsFrameRate._uuid)
        vtable_offset_local = IStkGraphicsFrameRate._vtable_offset - 1
        self.__dict__["_GetFramesPerSecond"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFrameRate, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_GetMaximumNumberOfFrames"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFrameRate, vtable_offset_local+2, POINTER(agcom.INT))
        self.__dict__["_SetMaximumNumberOfFrames"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFrameRate, vtable_offset_local+3, agcom.INT)
        self.__dict__["_Reset"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFrameRate, vtable_offset_local+4, )
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsFrameRate.__dict__ and type(IStkGraphicsFrameRate.__dict__[attrname]) == property:
            return IStkGraphicsFrameRate.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsFrameRate.")
    
    @property
    def FramesPerSecond(self) -> float:
        """Gets the current frame rate in frames per second."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetFramesPerSecond"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def MaximumNumberOfFrames(self) -> int:
        """Gets or sets the maximum number of frames used to determine frame rate. More frames means that the frame rate is averaged over a longer period of time and will fluctuate less than fewer frames would. The minimum value is 2."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaximumNumberOfFrames"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @MaximumNumberOfFrames.setter
    def MaximumNumberOfFrames(self, maximumNumberOfFrames:int) -> None:
        with agmarshall.INT_arg(maximumNumberOfFrames) as arg_maximumNumberOfFrames:
            agcls.evaluate_hresult(self.__dict__["_SetMaximumNumberOfFrames"](arg_maximumNumberOfFrames.COM_val))

    def Reset(self) -> None:
        """This resets the frame rate counter back to zero. The frame rate computation begins anew."""
        agcls.evaluate_hresult(self.__dict__["_Reset"]())


agcls.AgClassCatalog.add_catalog_entry("{9bbe1077-fcb3-4d73-ae9e-727155e14288}", IStkGraphicsFrameRate)
agcls.AgTypeNameMap["IStkGraphicsFrameRate"] = IStkGraphicsFrameRate

class IStkGraphicsGlobeImageOverlay(object):
    """A globe overlay that shows an image."""
    _uuid = "{ac17f1dd-17dc-41bd-8429-80f90234b53f}"
    _num_methods = 13
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetTranslucency"] = _raise_uninitialized_error
        self.__dict__["_SetTranslucency"] = _raise_uninitialized_error
        self.__dict__["_GetUseAltitudeBasedTranslucency"] = _raise_uninitialized_error
        self.__dict__["_SetUseAltitudeBasedTranslucency"] = _raise_uninitialized_error
        self.__dict__["_GetAltitudeBasedTranslucencyLowerTranslucency"] = _raise_uninitialized_error
        self.__dict__["_SetAltitudeBasedTranslucencyLowerTranslucency"] = _raise_uninitialized_error
        self.__dict__["_GetAltitudeBasedTranslucencyUpperTranslucency"] = _raise_uninitialized_error
        self.__dict__["_SetAltitudeBasedTranslucencyUpperTranslucency"] = _raise_uninitialized_error
        self.__dict__["_GetAltitudeBasedTranslucencyLowerAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetAltitudeBasedTranslucencyLowerAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetAltitudeBasedTranslucencyUpperAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetAltitudeBasedTranslucencyUpperAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetMoreThanOneImageGlobeOverlaySupported"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsGlobeImageOverlay._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsGlobeImageOverlay from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsGlobeImageOverlay = agcom.GUID(IStkGraphicsGlobeImageOverlay._uuid)
        vtable_offset_local = IStkGraphicsGlobeImageOverlay._vtable_offset - 1
        self.__dict__["_GetTranslucency"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsGlobeImageOverlay, vtable_offset_local+1, POINTER(agcom.FLOAT))
        self.__dict__["_SetTranslucency"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsGlobeImageOverlay, vtable_offset_local+2, agcom.FLOAT)
        self.__dict__["_GetUseAltitudeBasedTranslucency"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsGlobeImageOverlay, vtable_offset_local+3, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseAltitudeBasedTranslucency"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsGlobeImageOverlay, vtable_offset_local+4, agcom.VARIANT_BOOL)
        self.__dict__["_GetAltitudeBasedTranslucencyLowerTranslucency"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsGlobeImageOverlay, vtable_offset_local+5, POINTER(agcom.FLOAT))
        self.__dict__["_SetAltitudeBasedTranslucencyLowerTranslucency"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsGlobeImageOverlay, vtable_offset_local+6, agcom.FLOAT)
        self.__dict__["_GetAltitudeBasedTranslucencyUpperTranslucency"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsGlobeImageOverlay, vtable_offset_local+7, POINTER(agcom.FLOAT))
        self.__dict__["_SetAltitudeBasedTranslucencyUpperTranslucency"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsGlobeImageOverlay, vtable_offset_local+8, agcom.FLOAT)
        self.__dict__["_GetAltitudeBasedTranslucencyLowerAltitude"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsGlobeImageOverlay, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAltitudeBasedTranslucencyLowerAltitude"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsGlobeImageOverlay, vtable_offset_local+10, agcom.DOUBLE)
        self.__dict__["_GetAltitudeBasedTranslucencyUpperAltitude"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsGlobeImageOverlay, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAltitudeBasedTranslucencyUpperAltitude"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsGlobeImageOverlay, vtable_offset_local+12, agcom.DOUBLE)
        self.__dict__["_GetMoreThanOneImageGlobeOverlaySupported"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsGlobeImageOverlay, vtable_offset_local+13, POINTER(agcom.VARIANT_BOOL))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsGlobeImageOverlay.__dict__ and type(IStkGraphicsGlobeImageOverlay.__dict__[attrname]) == property:
            return IStkGraphicsGlobeImageOverlay.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsGlobeImageOverlay.")
    
    @property
    def Translucency(self) -> float:
        """Gets or sets the translucency value for the image. The translucency is between 0 and 1, where 0 is fully opaque and 1 is invisible."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTranslucency"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Translucency.setter
    def Translucency(self, translucency:float) -> None:
        with agmarshall.FLOAT_arg(translucency) as arg_translucency:
            agcls.evaluate_hresult(self.__dict__["_SetTranslucency"](arg_translucency.COM_val))

    @property
    def UseAltitudeBasedTranslucency(self) -> bool:
        """Gets or sets whether to use altitude to determine the translucency value for the image or not. If <see langword='false' />, the translucency value is used..."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseAltitudeBasedTranslucency"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @UseAltitudeBasedTranslucency.setter
    def UseAltitudeBasedTranslucency(self, useAltitudeBasedTranslucency:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(useAltitudeBasedTranslucency) as arg_useAltitudeBasedTranslucency:
            agcls.evaluate_hresult(self.__dict__["_SetUseAltitudeBasedTranslucency"](arg_useAltitudeBasedTranslucency.COM_val))

    @property
    def AltitudeBasedTranslucencyLowerTranslucency(self) -> float:
        """Gets or sets the lower translucency value for the image when use altitude based translucency is set to <see langword='true' />..."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitudeBasedTranslucencyLowerTranslucency"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @AltitudeBasedTranslucencyLowerTranslucency.setter
    def AltitudeBasedTranslucencyLowerTranslucency(self, altitudeBasedTranslucencyLowerTranslucency:float) -> None:
        with agmarshall.FLOAT_arg(altitudeBasedTranslucencyLowerTranslucency) as arg_altitudeBasedTranslucencyLowerTranslucency:
            agcls.evaluate_hresult(self.__dict__["_SetAltitudeBasedTranslucencyLowerTranslucency"](arg_altitudeBasedTranslucencyLowerTranslucency.COM_val))

    @property
    def AltitudeBasedTranslucencyUpperTranslucency(self) -> float:
        """Gets or sets the upper translucency value for the image when use altitude based translucency is set to <see langword='true' />..."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitudeBasedTranslucencyUpperTranslucency"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @AltitudeBasedTranslucencyUpperTranslucency.setter
    def AltitudeBasedTranslucencyUpperTranslucency(self, altitudeBasedTranslucencyUpperTranslucency:float) -> None:
        with agmarshall.FLOAT_arg(altitudeBasedTranslucencyUpperTranslucency) as arg_altitudeBasedTranslucencyUpperTranslucency:
            agcls.evaluate_hresult(self.__dict__["_SetAltitudeBasedTranslucencyUpperTranslucency"](arg_altitudeBasedTranslucencyUpperTranslucency.COM_val))

    @property
    def AltitudeBasedTranslucencyLowerAltitude(self) -> float:
        """Gets or sets the lower altitude bound used to calculate translucency for the image when use altitude based translucency is set to <see langword='true' />..."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitudeBasedTranslucencyLowerAltitude"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @AltitudeBasedTranslucencyLowerAltitude.setter
    def AltitudeBasedTranslucencyLowerAltitude(self, altitudeBasedTranslucencyLowerAltitude:float) -> None:
        with agmarshall.DOUBLE_arg(altitudeBasedTranslucencyLowerAltitude) as arg_altitudeBasedTranslucencyLowerAltitude:
            agcls.evaluate_hresult(self.__dict__["_SetAltitudeBasedTranslucencyLowerAltitude"](arg_altitudeBasedTranslucencyLowerAltitude.COM_val))

    @property
    def AltitudeBasedTranslucencyUpperAltitude(self) -> float:
        """Gets or sets the upper altitude bound used to calculate translucency for the image when use altitude based translucency is set to <see langword='true' />..."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitudeBasedTranslucencyUpperAltitude"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @AltitudeBasedTranslucencyUpperAltitude.setter
    def AltitudeBasedTranslucencyUpperAltitude(self, altitudeBasedTranslucencyUpperAltitude:float) -> None:
        with agmarshall.DOUBLE_arg(altitudeBasedTranslucencyUpperAltitude) as arg_altitudeBasedTranslucencyUpperAltitude:
            agcls.evaluate_hresult(self.__dict__["_SetAltitudeBasedTranslucencyUpperAltitude"](arg_altitudeBasedTranslucencyUpperAltitude.COM_val))

    @property
    def MoreThanOneImageGlobeOverlaySupported(self) -> bool:
        """Gets whether or not the video card allows for more than one image globe overlay globe image overlay to be added."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMoreThanOneImageGlobeOverlaySupported"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{ac17f1dd-17dc-41bd-8429-80f90234b53f}", IStkGraphicsGlobeImageOverlay)
agcls.AgTypeNameMap["IStkGraphicsGlobeImageOverlay"] = IStkGraphicsGlobeImageOverlay

class IStkGraphicsGraphicsFont(object):
    """A font that is suitable for use with the text batch primitive. For best performance, avoid creating duplicate font objects. Instead assign the same font object to several text batch primitives."""
    _uuid = "{36a67d60-3f13-435b-92d8-b6a76ed1a74a}"
    _num_methods = 9
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetName"] = _raise_uninitialized_error
        self.__dict__["_GetSize"] = _raise_uninitialized_error
        self.__dict__["_GetBold"] = _raise_uninitialized_error
        self.__dict__["_GetItalic"] = _raise_uninitialized_error
        self.__dict__["_GetUnderline"] = _raise_uninitialized_error
        self.__dict__["_GetStrikeout"] = _raise_uninitialized_error
        self.__dict__["_GetOutline"] = _raise_uninitialized_error
        self.__dict__["_GetStyle"] = _raise_uninitialized_error
        self.__dict__["_GetAntialias"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsGraphicsFont._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsGraphicsFont from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsGraphicsFont = agcom.GUID(IStkGraphicsGraphicsFont._uuid)
        vtable_offset_local = IStkGraphicsGraphicsFont._vtable_offset - 1
        self.__dict__["_GetName"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsGraphicsFont, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_GetSize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsGraphicsFont, vtable_offset_local+2, POINTER(agcom.INT))
        self.__dict__["_GetBold"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsGraphicsFont, vtable_offset_local+3, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetItalic"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsGraphicsFont, vtable_offset_local+4, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetUnderline"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsGraphicsFont, vtable_offset_local+5, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetStrikeout"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsGraphicsFont, vtable_offset_local+6, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetOutline"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsGraphicsFont, vtable_offset_local+7, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetStyle"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsGraphicsFont, vtable_offset_local+8, POINTER(agcom.LONG))
        self.__dict__["_GetAntialias"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsGraphicsFont, vtable_offset_local+9, POINTER(agcom.VARIANT_BOOL))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsGraphicsFont.__dict__ and type(IStkGraphicsGraphicsFont.__dict__[attrname]) == property:
            return IStkGraphicsGraphicsFont.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsGraphicsFont.")
    
    @property
    def Name(self) -> str:
        """Gets the typeface name of the font."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetName"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Size(self) -> int:
        """Gets the size of the font."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSize"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Bold(self) -> bool:
        """Gets a value that indicates whether this font is bold."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBold"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Italic(self) -> bool:
        """Gets a value that indicates whether this font is italic."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetItalic"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Underline(self) -> bool:
        """Gets a value that indicates whether this font is underlined."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetUnderline"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Strikeout(self) -> bool:
        """Gets a value that indicates whether this font has a horizontal line through its characters."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetStrikeout"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Outline(self) -> bool:
        """Gets a value that indicates whether this font has an outline around its characters."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetOutline"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Style(self) -> "AgEStkGraphicsFontStyle":
        """Gets the font style enumeration that contains the style for this font. This does not include the outline property."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsFontStyle) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetStyle"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Antialias(self) -> bool:
        """Gets a value that indicates whether this font is antialiased."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAntialias"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{36a67d60-3f13-435b-92d8-b6a76ed1a74a}", IStkGraphicsGraphicsFont)
agcls.AgTypeNameMap["IStkGraphicsGraphicsFont"] = IStkGraphicsGraphicsFont

class IStkGraphicsGreatArcInterpolator(object):
    """The great arc interpolator computes interpolated positions along a great arc. A great arc is the shortest path between two positions on an ellipsoid."""
    _uuid = "{8de070c1-de8f-48ee-96ea-5dc046706d28}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCentralBody"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBody"] = _raise_uninitialized_error
        self.__dict__["_GetGranularity"] = _raise_uninitialized_error
        self.__dict__["_SetGranularity"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsGreatArcInterpolator._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsGreatArcInterpolator from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsGreatArcInterpolator = agcom.GUID(IStkGraphicsGreatArcInterpolator._uuid)
        vtable_offset_local = IStkGraphicsGreatArcInterpolator._vtable_offset - 1
        self.__dict__["_GetCentralBody"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsGreatArcInterpolator, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCentralBody"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsGreatArcInterpolator, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetGranularity"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsGreatArcInterpolator, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetGranularity"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsGreatArcInterpolator, vtable_offset_local+4, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsGreatArcInterpolator.__dict__ and type(IStkGraphicsGreatArcInterpolator.__dict__[attrname]) == property:
            return IStkGraphicsGreatArcInterpolator.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsGreatArcInterpolator.")
    
    @property
    def CentralBody(self) -> str:
        """Gets or sets the central body used when interpolating with interpolate."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBody"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @CentralBody.setter
    def CentralBody(self, centralBody:str) -> None:
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBody"](arg_centralBody.COM_val))

    @property
    def Granularity(self) -> float:
        """Gets or sets the granularity used when interpolating with interpolate. Lower granularities are more precise but create more positions."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetGranularity"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Granularity.setter
    def Granularity(self, granularity:float) -> None:
        with agmarshall.DOUBLE_arg(granularity) as arg_granularity:
            agcls.evaluate_hresult(self.__dict__["_SetGranularity"](arg_granularity.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{8de070c1-de8f-48ee-96ea-5dc046706d28}", IStkGraphicsGreatArcInterpolator)
agcls.AgTypeNameMap["IStkGraphicsGreatArcInterpolator"] = IStkGraphicsGreatArcInterpolator

class IStkGraphicsImageCollection(object):
    """A collection of globe image overlay objects."""
    _uuid = "{797b7253-9205-47a1-b49b-edf6e06326c0}"
    _num_methods = 20
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        self.__dict__["_GetIsReadOnly"] = _raise_uninitialized_error
        self.__dict__["_Item"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        self.__dict__["_Contains"] = _raise_uninitialized_error
        self.__dict__["_ContainsUriString"] = _raise_uninitialized_error
        self.__dict__["_Remove"] = _raise_uninitialized_error
        self.__dict__["_Clear"] = _raise_uninitialized_error
        self.__dict__["_Add"] = _raise_uninitialized_error
        self.__dict__["_AddAsync"] = _raise_uninitialized_error
        self.__dict__["_IndexOf"] = _raise_uninitialized_error
        self.__dict__["_IndexOfUriString"] = _raise_uninitialized_error
        self.__dict__["_AddUriString"] = _raise_uninitialized_error
        self.__dict__["_AddAsyncUriString"] = _raise_uninitialized_error
        self.__dict__["_Swap"] = _raise_uninitialized_error
        self.__dict__["_SwapByIndex"] = _raise_uninitialized_error
        self.__dict__["_Move"] = _raise_uninitialized_error
        self.__dict__["_MoveByIndex"] = _raise_uninitialized_error
        self.__dict__["_BringToFront"] = _raise_uninitialized_error
        self.__dict__["_SendToBack"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsImageCollection._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsImageCollection from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsImageCollection = agcom.GUID(IStkGraphicsImageCollection._uuid)
        vtable_offset_local = IStkGraphicsImageCollection._vtable_offset - 1
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsImageCollection, vtable_offset_local+1, POINTER(agcom.INT))
        self.__dict__["_GetIsReadOnly"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsImageCollection, vtable_offset_local+2, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_Item"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsImageCollection, vtable_offset_local+3, agcom.INT, POINTER(agcom.PVOID))
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsImageCollection, vtable_offset_local+4, POINTER(agcom.PVOID))
        self.__dict__["_Contains"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsImageCollection, vtable_offset_local+5, agcom.PVOID, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_ContainsUriString"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsImageCollection, vtable_offset_local+6, agcom.BSTR, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_Remove"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsImageCollection, vtable_offset_local+7, agcom.PVOID, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_Clear"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsImageCollection, vtable_offset_local+8, )
        self.__dict__["_Add"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsImageCollection, vtable_offset_local+9, agcom.PVOID)
        self.__dict__["_AddAsync"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsImageCollection, vtable_offset_local+10, agcom.PVOID)
        self.__dict__["_IndexOf"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsImageCollection, vtable_offset_local+11, agcom.PVOID, POINTER(agcom.INT))
        self.__dict__["_IndexOfUriString"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsImageCollection, vtable_offset_local+12, agcom.BSTR, POINTER(agcom.INT))
        self.__dict__["_AddUriString"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsImageCollection, vtable_offset_local+13, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_AddAsyncUriString"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsImageCollection, vtable_offset_local+14, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_Swap"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsImageCollection, vtable_offset_local+15, agcom.PVOID, agcom.PVOID)
        self.__dict__["_SwapByIndex"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsImageCollection, vtable_offset_local+16, agcom.INT, agcom.INT)
        self.__dict__["_Move"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsImageCollection, vtable_offset_local+17, agcom.PVOID, agcom.INT)
        self.__dict__["_MoveByIndex"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsImageCollection, vtable_offset_local+18, agcom.INT, agcom.INT)
        self.__dict__["_BringToFront"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsImageCollection, vtable_offset_local+19, agcom.PVOID)
        self.__dict__["_SendToBack"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsImageCollection, vtable_offset_local+20, agcom.PVOID)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsImageCollection.__dict__ and type(IStkGraphicsImageCollection.__dict__[attrname]) == property:
            return IStkGraphicsImageCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsImageCollection.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> "IStkGraphicsGlobeImageOverlay":
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    def Subscribe(self) -> IStkGraphicsImageCollectionEventHandler:
        """Returns an IStkGraphicsImageCollectionEventHandler that is subscribed to handle events associated with this instance of IStkGraphicsImageCollection."""
        return IStkGraphicsImageCollectionEventHandler(self._pUnk)    
    @property
    def Count(self) -> int:
        """Gets the number of globe overlay objects in the collection."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def IsReadOnly(self) -> bool:
        """Gets whether or not the collection is read only."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetIsReadOnly"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def Item(self, index:int) -> "IStkGraphicsGlobeImageOverlay":
        """Gets the globe image overlay at the specified index."""
        with agmarshall.INT_arg(index) as arg_index, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Item"](arg_index.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        """Constructs an iterator that can be used to iterate the collection."""
        with agmarshall.IEnumVARIANT_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def Contains(self, imageryOverlay:"IStkGraphicsGlobeImageOverlay") -> bool:
        """Checks the presence of a globe image overlay in the collection."""
        with agmarshall.AgInterface_in_arg(imageryOverlay, IStkGraphicsGlobeImageOverlay) as arg_imageryOverlay, \
             agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_Contains"](arg_imageryOverlay.COM_val, byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def ContainsUriString(self, stringUri:str) -> bool:
        """Checks the presence of a globe image overlay with the specified Uri in the collection."""
        with agmarshall.BSTR_arg(stringUri) as arg_stringUri, \
             agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_ContainsUriString"](arg_stringUri.COM_val, byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def Remove(self, globeOverlay:"IStkGraphicsGlobeImageOverlay") -> bool:
        """Removes a globe image overlay from the collection."""
        with agmarshall.AgInterface_in_arg(globeOverlay, IStkGraphicsGlobeImageOverlay) as arg_globeOverlay, \
             agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_Remove"](arg_globeOverlay.COM_val, byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def Clear(self) -> None:
        """Removes all globe image overlay objects from the collection."""
        agcls.evaluate_hresult(self.__dict__["_Clear"]())

    def Add(self, imageryOverlay:"IStkGraphicsGlobeImageOverlay") -> None:
        """Adds imageryOverlay to the collection."""
        with agmarshall.AgInterface_in_arg(imageryOverlay, IStkGraphicsGlobeImageOverlay) as arg_imageryOverlay:
            agcls.evaluate_hresult(self.__dict__["_Add"](arg_imageryOverlay.COM_val))

    def AddAsync(self, imageryOverlay:"IStkGraphicsGlobeImageOverlay") -> None:
        """Adds imageryOverlay to the collection asynchronously."""
        with agmarshall.AgInterface_in_arg(imageryOverlay, IStkGraphicsGlobeImageOverlay) as arg_imageryOverlay:
            agcls.evaluate_hresult(self.__dict__["_AddAsync"](arg_imageryOverlay.COM_val))

    def IndexOf(self, imageryOverlay:"IStkGraphicsGlobeImageOverlay") -> int:
        """Gets the index of the specified globe image overlay."""
        with agmarshall.AgInterface_in_arg(imageryOverlay, IStkGraphicsGlobeImageOverlay) as arg_imageryOverlay, \
             agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_IndexOf"](arg_imageryOverlay.COM_val, byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def IndexOfUriString(self, stringUri:str) -> int:
        """Gets the index of the globe image overlay with the specified Uri."""
        with agmarshall.BSTR_arg(stringUri) as arg_stringUri, \
             agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_IndexOfUriString"](arg_stringUri.COM_val, byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def AddUriString(self, uri:str) -> "IStkGraphicsGlobeImageOverlay":
        """Creates a globe overlay from the uri, which represents a uri, and adds it to the collection."""
        with agmarshall.BSTR_arg(uri) as arg_uri, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_AddUriString"](arg_uri.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def AddAsyncUriString(self, uri:str) -> "IStkGraphicsGlobeImageOverlay":
        """Creates a globe image overlay from the uri, which represents a uri, and adds it to the collection asynchronously."""
        with agmarshall.BSTR_arg(uri) as arg_uri, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_AddAsyncUriString"](arg_uri.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def Swap(self, imageryOverlay1:"IStkGraphicsGlobeImageOverlay", imageryOverlay2:"IStkGraphicsGlobeImageOverlay") -> None:
        """Swaps the position of two globe image overlay objects."""
        with agmarshall.AgInterface_in_arg(imageryOverlay1, IStkGraphicsGlobeImageOverlay) as arg_imageryOverlay1, \
             agmarshall.AgInterface_in_arg(imageryOverlay2, IStkGraphicsGlobeImageOverlay) as arg_imageryOverlay2:
            agcls.evaluate_hresult(self.__dict__["_Swap"](arg_imageryOverlay1.COM_val, arg_imageryOverlay2.COM_val))

    def SwapByIndex(self, index1:int, index2:int) -> None:
        """Swaps the position of two globe image overlay objects at the specified indices."""
        with agmarshall.INT_arg(index1) as arg_index1, \
             agmarshall.INT_arg(index2) as arg_index2:
            agcls.evaluate_hresult(self.__dict__["_SwapByIndex"](arg_index1.COM_val, arg_index2.COM_val))

    def Move(self, imageryOverlay:"IStkGraphicsGlobeImageOverlay", newPosition:int) -> None:
        """Moves the globe image overlay to the specified position."""
        with agmarshall.AgInterface_in_arg(imageryOverlay, IStkGraphicsGlobeImageOverlay) as arg_imageryOverlay, \
             agmarshall.INT_arg(newPosition) as arg_newPosition:
            agcls.evaluate_hresult(self.__dict__["_Move"](arg_imageryOverlay.COM_val, arg_newPosition.COM_val))

    def MoveByIndex(self, index:int, newPosition:int) -> None:
        """Moves the globe image overlay at the specified index to the specified position."""
        with agmarshall.INT_arg(index) as arg_index, \
             agmarshall.INT_arg(newPosition) as arg_newPosition:
            agcls.evaluate_hresult(self.__dict__["_MoveByIndex"](arg_index.COM_val, arg_newPosition.COM_val))

    def BringToFront(self, imageryOverlay:"IStkGraphicsGlobeImageOverlay") -> None:
        """Brings the globe image overlay to the front of the collection so it is rendered first or on the bottom."""
        with agmarshall.AgInterface_in_arg(imageryOverlay, IStkGraphicsGlobeImageOverlay) as arg_imageryOverlay:
            agcls.evaluate_hresult(self.__dict__["_BringToFront"](arg_imageryOverlay.COM_val))

    def SendToBack(self, imageryOverlay:"IStkGraphicsGlobeImageOverlay") -> None:
        """Sends the globe image overlay to the back of the collection so it is rendered last or on the top."""
        with agmarshall.AgInterface_in_arg(imageryOverlay, IStkGraphicsGlobeImageOverlay) as arg_imageryOverlay:
            agcls.evaluate_hresult(self.__dict__["_SendToBack"](arg_imageryOverlay.COM_val))

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{797b7253-9205-47a1-b49b-edf6e06326c0}", IStkGraphicsImageCollection)
agcls.AgTypeNameMap["IStkGraphicsImageCollection"] = IStkGraphicsImageCollection

class IStkGraphicsAlphaFromLuminanceFilter(object):
    """Adds an alpha band to the source raster derived from the luminance of the raster's color bands."""
    _uuid = "{9ee1933e-8f0d-4fca-8386-e03194e483da}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsAlphaFromLuminanceFilter._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsAlphaFromLuminanceFilter from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsAlphaFromLuminanceFilter = agcom.GUID(IStkGraphicsAlphaFromLuminanceFilter._uuid)
        vtable_offset_local = IStkGraphicsAlphaFromLuminanceFilter._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsAlphaFromLuminanceFilter.__dict__ and type(IStkGraphicsAlphaFromLuminanceFilter.__dict__[attrname]) == property:
            return IStkGraphicsAlphaFromLuminanceFilter.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsAlphaFromLuminanceFilter.")
    

agcls.AgClassCatalog.add_catalog_entry("{9ee1933e-8f0d-4fca-8386-e03194e483da}", IStkGraphicsAlphaFromLuminanceFilter)
agcls.AgTypeNameMap["IStkGraphicsAlphaFromLuminanceFilter"] = IStkGraphicsAlphaFromLuminanceFilter

class IStkGraphicsAlphaFromPixelFilter(object):
    """Adds an alpha band to the source raster based on the value of its first pixel. All pixels in the source raster that are the same color as the first pixel will be made transparent."""
    _uuid = "{071460a3-f86a-4c28-b2bf-22946db06ac8}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsAlphaFromPixelFilter._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsAlphaFromPixelFilter from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsAlphaFromPixelFilter = agcom.GUID(IStkGraphicsAlphaFromPixelFilter._uuid)
        vtable_offset_local = IStkGraphicsAlphaFromPixelFilter._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsAlphaFromPixelFilter.__dict__ and type(IStkGraphicsAlphaFromPixelFilter.__dict__[attrname]) == property:
            return IStkGraphicsAlphaFromPixelFilter.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsAlphaFromPixelFilter.")
    

agcls.AgClassCatalog.add_catalog_entry("{071460a3-f86a-4c28-b2bf-22946db06ac8}", IStkGraphicsAlphaFromPixelFilter)
agcls.AgTypeNameMap["IStkGraphicsAlphaFromPixelFilter"] = IStkGraphicsAlphaFromPixelFilter

class IStkGraphicsAlphaFromRasterFilter(object):
    """Adds an alpha band to the source raster derived from the color bands or alpha of another raster. This filter can be used to apply an alpha mask to the source raster."""
    _uuid = "{77326f5e-c3f3-4660-8df4-6225cfdc0870}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetRaster"] = _raise_uninitialized_error
        self.__dict__["_SetRaster"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsAlphaFromRasterFilter._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsAlphaFromRasterFilter from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsAlphaFromRasterFilter = agcom.GUID(IStkGraphicsAlphaFromRasterFilter._uuid)
        vtable_offset_local = IStkGraphicsAlphaFromRasterFilter._vtable_offset - 1
        self.__dict__["_GetRaster"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsAlphaFromRasterFilter, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_SetRaster"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsAlphaFromRasterFilter, vtable_offset_local+2, agcom.PVOID)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsAlphaFromRasterFilter.__dict__ and type(IStkGraphicsAlphaFromRasterFilter.__dict__[attrname]) == property:
            return IStkGraphicsAlphaFromRasterFilter.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsAlphaFromRasterFilter.")
    
    @property
    def Raster(self) -> "IStkGraphicsRaster":
        """Gets or sets the raster that the source raster will use to derive an alpha band."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetRaster"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @Raster.setter
    def Raster(self, raster:"IStkGraphicsRaster") -> None:
        with agmarshall.AgInterface_in_arg(raster, IStkGraphicsRaster) as arg_raster:
            agcls.evaluate_hresult(self.__dict__["_SetRaster"](arg_raster.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{77326f5e-c3f3-4660-8df4-6225cfdc0870}", IStkGraphicsAlphaFromRasterFilter)
agcls.AgTypeNameMap["IStkGraphicsAlphaFromRasterFilter"] = IStkGraphicsAlphaFromRasterFilter

class IStkGraphicsBandExtractFilter(object):
    """Extracts a band or set of bands from the source raster. The extract format property specifies the bands and the order of the bands that will be extracted."""
    _uuid = "{68723ebb-619a-4d11-bb5a-27200ef0e15c}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetExtractFormat"] = _raise_uninitialized_error
        self.__dict__["_SetExtractFormat"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsBandExtractFilter._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsBandExtractFilter from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsBandExtractFilter = agcom.GUID(IStkGraphicsBandExtractFilter._uuid)
        vtable_offset_local = IStkGraphicsBandExtractFilter._vtable_offset - 1
        self.__dict__["_GetExtractFormat"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsBandExtractFilter, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetExtractFormat"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsBandExtractFilter, vtable_offset_local+2, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsBandExtractFilter.__dict__ and type(IStkGraphicsBandExtractFilter.__dict__[attrname]) == property:
            return IStkGraphicsBandExtractFilter.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsBandExtractFilter.")
    
    @property
    def ExtractFormat(self) -> "AgEStkGraphicsRasterFormat":
        """Gets or sets the raster format containing the bands and the order of the bands that will be extracted."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsRasterFormat) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetExtractFormat"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @ExtractFormat.setter
    def ExtractFormat(self, extractFormat:"AgEStkGraphicsRasterFormat") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsRasterFormat, extractFormat) as arg_extractFormat:
            agcls.evaluate_hresult(self.__dict__["_SetExtractFormat"](arg_extractFormat.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{68723ebb-619a-4d11-bb5a-27200ef0e15c}", IStkGraphicsBandExtractFilter)
agcls.AgTypeNameMap["IStkGraphicsBandExtractFilter"] = IStkGraphicsBandExtractFilter

class IStkGraphicsBandOrderFilter(object):
    """Reorders or swizzles the bands of the source raster to match the band order of the raster format specified by the band order property. When maintain raster format is true, the source raster's format is maintained after swizzling."""
    _uuid = "{a4a76805-e8e4-4bb6-878c-dcb0da6d84d3}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetBandOrder"] = _raise_uninitialized_error
        self.__dict__["_SetBandOrder"] = _raise_uninitialized_error
        self.__dict__["_GetMaintainRasterFormat"] = _raise_uninitialized_error
        self.__dict__["_SetMaintainRasterFormat"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsBandOrderFilter._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsBandOrderFilter from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsBandOrderFilter = agcom.GUID(IStkGraphicsBandOrderFilter._uuid)
        vtable_offset_local = IStkGraphicsBandOrderFilter._vtable_offset - 1
        self.__dict__["_GetBandOrder"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsBandOrderFilter, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetBandOrder"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsBandOrderFilter, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetMaintainRasterFormat"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsBandOrderFilter, vtable_offset_local+3, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetMaintainRasterFormat"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsBandOrderFilter, vtable_offset_local+4, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsBandOrderFilter.__dict__ and type(IStkGraphicsBandOrderFilter.__dict__[attrname]) == property:
            return IStkGraphicsBandOrderFilter.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsBandOrderFilter.")
    
    @property
    def BandOrder(self) -> "AgEStkGraphicsRasterFormat":
        """Gets or sets the raster format indicating the desired order of the bands in the source raster."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsRasterFormat) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBandOrder"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @BandOrder.setter
    def BandOrder(self, bandOrder:"AgEStkGraphicsRasterFormat") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsRasterFormat, bandOrder) as arg_bandOrder:
            agcls.evaluate_hresult(self.__dict__["_SetBandOrder"](arg_bandOrder.COM_val))

    @property
    def MaintainRasterFormat(self) -> bool:
        """Gets or sets a value indicating whether to maintain the source raster's format after the filter is applied. When true, the source raster's format is maintained after swizzling."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaintainRasterFormat"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @MaintainRasterFormat.setter
    def MaintainRasterFormat(self, maintainRasterFormat:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(maintainRasterFormat) as arg_maintainRasterFormat:
            agcls.evaluate_hresult(self.__dict__["_SetMaintainRasterFormat"](arg_maintainRasterFormat.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{a4a76805-e8e4-4bb6-878c-dcb0da6d84d3}", IStkGraphicsBandOrderFilter)
agcls.AgTypeNameMap["IStkGraphicsBandOrderFilter"] = IStkGraphicsBandOrderFilter

class IStkGraphicsBlurFilter(object):
    """Applies a convolution filter to blur or smooth the source raster. Can be used to reduce noise in the raster."""
    _uuid = "{78e623b1-dc80-478d-acb8-a552fa136ccc}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetMethod"] = _raise_uninitialized_error
        self.__dict__["_SetMethod"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsBlurFilter._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsBlurFilter from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsBlurFilter = agcom.GUID(IStkGraphicsBlurFilter._uuid)
        vtable_offset_local = IStkGraphicsBlurFilter._vtable_offset - 1
        self.__dict__["_GetMethod"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsBlurFilter, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetMethod"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsBlurFilter, vtable_offset_local+2, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsBlurFilter.__dict__ and type(IStkGraphicsBlurFilter.__dict__[attrname]) == property:
            return IStkGraphicsBlurFilter.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsBlurFilter.")
    
    @property
    def Method(self) -> "AgEStkGraphicsBlurMethod":
        """Gets or sets the method used to blur the source raster."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsBlurMethod) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMethod"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Method.setter
    def Method(self, method:"AgEStkGraphicsBlurMethod") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsBlurMethod, method) as arg_method:
            agcls.evaluate_hresult(self.__dict__["_SetMethod"](arg_method.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{78e623b1-dc80-478d-acb8-a552fa136ccc}", IStkGraphicsBlurFilter)
agcls.AgTypeNameMap["IStkGraphicsBlurFilter"] = IStkGraphicsBlurFilter

class IStkGraphicsBrightnessFilter(object):
    """Adjusts the brightness of the source raster's color bands. The adjustment to brightness is a value between -1 and 1, corresponding to least bright to most bright."""
    _uuid = "{fd8324ea-dbc2-42a5-88ba-c2769fd4a28e}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAdjustment"] = _raise_uninitialized_error
        self.__dict__["_SetAdjustment"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsBrightnessFilter._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsBrightnessFilter from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsBrightnessFilter = agcom.GUID(IStkGraphicsBrightnessFilter._uuid)
        vtable_offset_local = IStkGraphicsBrightnessFilter._vtable_offset - 1
        self.__dict__["_GetAdjustment"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsBrightnessFilter, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAdjustment"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsBrightnessFilter, vtable_offset_local+2, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsBrightnessFilter.__dict__ and type(IStkGraphicsBrightnessFilter.__dict__[attrname]) == property:
            return IStkGraphicsBrightnessFilter.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsBrightnessFilter.")
    
    @property
    def Adjustment(self) -> float:
        """Gets or sets the brightness adjustment value for the filter. The value must be between -1 and 1, corresponding to least bright to most bright."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAdjustment"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Adjustment.setter
    def Adjustment(self, adjustment:float) -> None:
        with agmarshall.DOUBLE_arg(adjustment) as arg_adjustment:
            agcls.evaluate_hresult(self.__dict__["_SetAdjustment"](arg_adjustment.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{fd8324ea-dbc2-42a5-88ba-c2769fd4a28e}", IStkGraphicsBrightnessFilter)
agcls.AgTypeNameMap["IStkGraphicsBrightnessFilter"] = IStkGraphicsBrightnessFilter

class IStkGraphicsColorToLuminanceFilter(object):
    """Extracts a luminance band derived from the color bands of the source raster."""
    _uuid = "{bc1d198f-705b-452b-8e51-1c600c547594}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsColorToLuminanceFilter._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsColorToLuminanceFilter from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsColorToLuminanceFilter = agcom.GUID(IStkGraphicsColorToLuminanceFilter._uuid)
        vtable_offset_local = IStkGraphicsColorToLuminanceFilter._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsColorToLuminanceFilter.__dict__ and type(IStkGraphicsColorToLuminanceFilter.__dict__[attrname]) == property:
            return IStkGraphicsColorToLuminanceFilter.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsColorToLuminanceFilter.")
    

agcls.AgClassCatalog.add_catalog_entry("{bc1d198f-705b-452b-8e51-1c600c547594}", IStkGraphicsColorToLuminanceFilter)
agcls.AgTypeNameMap["IStkGraphicsColorToLuminanceFilter"] = IStkGraphicsColorToLuminanceFilter

class IStkGraphicsContrastFilter(object):
    """Adjusts the contrast of the source raster. The adjustment to contrast is a value between -1 and 1, corresponding to least contrast to most contrast."""
    _uuid = "{47ea43c3-5ffd-4935-8569-bb19ee6b0799}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAdjustment"] = _raise_uninitialized_error
        self.__dict__["_SetAdjustment"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsContrastFilter._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsContrastFilter from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsContrastFilter = agcom.GUID(IStkGraphicsContrastFilter._uuid)
        vtable_offset_local = IStkGraphicsContrastFilter._vtable_offset - 1
        self.__dict__["_GetAdjustment"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsContrastFilter, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAdjustment"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsContrastFilter, vtable_offset_local+2, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsContrastFilter.__dict__ and type(IStkGraphicsContrastFilter.__dict__[attrname]) == property:
            return IStkGraphicsContrastFilter.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsContrastFilter.")
    
    @property
    def Adjustment(self) -> float:
        """Gets or sets the contrast adjustment value for the filter. The value must be between -1 and 1, corresponding to least contrast to most contrast."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAdjustment"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Adjustment.setter
    def Adjustment(self, adjustment:float) -> None:
        with agmarshall.DOUBLE_arg(adjustment) as arg_adjustment:
            agcls.evaluate_hresult(self.__dict__["_SetAdjustment"](arg_adjustment.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{47ea43c3-5ffd-4935-8569-bb19ee6b0799}", IStkGraphicsContrastFilter)
agcls.AgTypeNameMap["IStkGraphicsContrastFilter"] = IStkGraphicsContrastFilter

class IStkGraphicsConvolutionFilter(object):
    """Applies convolution to the source raster. Convolution is the modification of a pixel's value based on the values of its surrounding pixels. The kernel is the numerical matrix that is applied to each pixel in this process..."""
    _uuid = "{65e3646d-dfac-40af-b37f-15596ef13292}"
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetDivisor"] = _raise_uninitialized_error
        self.__dict__["_SetDivisor"] = _raise_uninitialized_error
        self.__dict__["_GetOffset"] = _raise_uninitialized_error
        self.__dict__["_SetOffset"] = _raise_uninitialized_error
        self.__dict__["_GetKernel"] = _raise_uninitialized_error
        self.__dict__["_SetKernel"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsConvolutionFilter._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsConvolutionFilter from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsConvolutionFilter = agcom.GUID(IStkGraphicsConvolutionFilter._uuid)
        vtable_offset_local = IStkGraphicsConvolutionFilter._vtable_offset - 1
        self.__dict__["_GetDivisor"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsConvolutionFilter, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDivisor"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsConvolutionFilter, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetOffset"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsConvolutionFilter, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetOffset"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsConvolutionFilter, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetKernel"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsConvolutionFilter, vtable_offset_local+5, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetKernel"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsConvolutionFilter, vtable_offset_local+6, agcom.SAFEARRAY)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsConvolutionFilter.__dict__ and type(IStkGraphicsConvolutionFilter.__dict__[attrname]) == property:
            return IStkGraphicsConvolutionFilter.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsConvolutionFilter.")
    
    @property
    def Divisor(self) -> float:
        """Gets or sets the divisor for the result of the convolution kernel operation."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDivisor"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Divisor.setter
    def Divisor(self, divisor:float) -> None:
        with agmarshall.DOUBLE_arg(divisor) as arg_divisor:
            agcls.evaluate_hresult(self.__dict__["_SetDivisor"](arg_divisor.COM_val))

    @property
    def Offset(self) -> float:
        """Gets or sets the offset for the result of the convolution kernel operation. The value is added to the result of the operation."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetOffset"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Offset.setter
    def Offset(self, offset:float) -> None:
        with agmarshall.DOUBLE_arg(offset) as arg_offset:
            agcls.evaluate_hresult(self.__dict__["_SetOffset"](arg_offset.COM_val))

    @property
    def Kernel(self) -> list:
        """Gets or sets the convolution kernel of the filter. The array contains the 9 elements of the kernel of the convolution matrix..."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetKernel"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @Kernel.setter
    def Kernel(self, kernel:list) -> None:
        with agmarshall.SAFEARRAY_arg(kernel) as arg_kernel:
            agcls.evaluate_hresult(self.__dict__["_SetKernel"](arg_kernel.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{65e3646d-dfac-40af-b37f-15596ef13292}", IStkGraphicsConvolutionFilter)
agcls.AgTypeNameMap["IStkGraphicsConvolutionFilter"] = IStkGraphicsConvolutionFilter

class IStkGraphicsEdgeDetectFilter(object):
    """Applies a convolution filter to detect edges in the source raster."""
    _uuid = "{0919d5b6-9497-4027-9fa2-69afe60c5f02}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetMethod"] = _raise_uninitialized_error
        self.__dict__["_SetMethod"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsEdgeDetectFilter._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsEdgeDetectFilter from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsEdgeDetectFilter = agcom.GUID(IStkGraphicsEdgeDetectFilter._uuid)
        vtable_offset_local = IStkGraphicsEdgeDetectFilter._vtable_offset - 1
        self.__dict__["_GetMethod"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsEdgeDetectFilter, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetMethod"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsEdgeDetectFilter, vtable_offset_local+2, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsEdgeDetectFilter.__dict__ and type(IStkGraphicsEdgeDetectFilter.__dict__[attrname]) == property:
            return IStkGraphicsEdgeDetectFilter.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsEdgeDetectFilter.")
    
    @property
    def Method(self) -> "AgEStkGraphicsEdgeDetectMethod":
        """Gets or sets the method used to detect edges in the source raster."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsEdgeDetectMethod) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMethod"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Method.setter
    def Method(self, method:"AgEStkGraphicsEdgeDetectMethod") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsEdgeDetectMethod, method) as arg_method:
            agcls.evaluate_hresult(self.__dict__["_SetMethod"](arg_method.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{0919d5b6-9497-4027-9fa2-69afe60c5f02}", IStkGraphicsEdgeDetectFilter)
agcls.AgTypeNameMap["IStkGraphicsEdgeDetectFilter"] = IStkGraphicsEdgeDetectFilter

class IStkGraphicsFilteringRasterStream(object):
    """A class decorator for applying a raster filter to each update of a raster stream. Can be used to apply filters to videos and other raster streams as they are updated."""
    _uuid = "{75917a6b-c2f9-4350-879a-248bcc239e6b}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetFilter"] = _raise_uninitialized_error
        self.__dict__["_GetStream"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsFilteringRasterStream._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsFilteringRasterStream from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsFilteringRasterStream = agcom.GUID(IStkGraphicsFilteringRasterStream._uuid)
        vtable_offset_local = IStkGraphicsFilteringRasterStream._vtable_offset - 1
        self.__dict__["_GetFilter"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFilteringRasterStream, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetStream"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFilteringRasterStream, vtable_offset_local+2, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsFilteringRasterStream.__dict__ and type(IStkGraphicsFilteringRasterStream.__dict__[attrname]) == property:
            return IStkGraphicsFilteringRasterStream.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsFilteringRasterStream.")
    
    @property
    def Filter(self) -> "IStkGraphicsRasterFilter":
        """Gets the raster filter that will be applied to the raster stream on each update."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetFilter"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Stream(self) -> "IStkGraphicsRasterStream":
        """Gets the raster stream that will have the raster filter applied on each update."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetStream"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{75917a6b-c2f9-4350-879a-248bcc239e6b}", IStkGraphicsFilteringRasterStream)
agcls.AgTypeNameMap["IStkGraphicsFilteringRasterStream"] = IStkGraphicsFilteringRasterStream

class IStkGraphicsFlipFilter(object):
    """Flips the source raster along the given flip axis."""
    _uuid = "{478edb08-272a-42b6-b486-a81a5bcaf92b}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetFlipAxis"] = _raise_uninitialized_error
        self.__dict__["_SetFlipAxis"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsFlipFilter._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsFlipFilter from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsFlipFilter = agcom.GUID(IStkGraphicsFlipFilter._uuid)
        vtable_offset_local = IStkGraphicsFlipFilter._vtable_offset - 1
        self.__dict__["_GetFlipAxis"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFlipFilter, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetFlipAxis"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFlipFilter, vtable_offset_local+2, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsFlipFilter.__dict__ and type(IStkGraphicsFlipFilter.__dict__[attrname]) == property:
            return IStkGraphicsFlipFilter.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsFlipFilter.")
    
    @property
    def FlipAxis(self) -> "AgEStkGraphicsFlipAxis":
        """Gets or sets the flip axis along which the source raster will be flipped."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsFlipAxis) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetFlipAxis"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @FlipAxis.setter
    def FlipAxis(self, flipAxis:"AgEStkGraphicsFlipAxis") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsFlipAxis, flipAxis) as arg_flipAxis:
            agcls.evaluate_hresult(self.__dict__["_SetFlipAxis"](arg_flipAxis.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{478edb08-272a-42b6-b486-a81a5bcaf92b}", IStkGraphicsFlipFilter)
agcls.AgTypeNameMap["IStkGraphicsFlipFilter"] = IStkGraphicsFlipFilter

class IStkGraphicsGammaCorrectionFilter(object):
    """Applies gamma correction to the source raster. The gamma is a value between .2 and 5. The default gamma value is 2.2."""
    _uuid = "{c4b3703d-c059-47c7-8b49-11bbedd7975a}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetGamma"] = _raise_uninitialized_error
        self.__dict__["_SetGamma"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsGammaCorrectionFilter._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsGammaCorrectionFilter from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsGammaCorrectionFilter = agcom.GUID(IStkGraphicsGammaCorrectionFilter._uuid)
        vtable_offset_local = IStkGraphicsGammaCorrectionFilter._vtable_offset - 1
        self.__dict__["_GetGamma"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsGammaCorrectionFilter, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetGamma"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsGammaCorrectionFilter, vtable_offset_local+2, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsGammaCorrectionFilter.__dict__ and type(IStkGraphicsGammaCorrectionFilter.__dict__[attrname]) == property:
            return IStkGraphicsGammaCorrectionFilter.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsGammaCorrectionFilter.")
    
    @property
    def Gamma(self) -> float:
        """Gets or sets the gamma value for the filter. The value must be between .2 and 5. The default gamma value is 2.2."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetGamma"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Gamma.setter
    def Gamma(self, gamma:float) -> None:
        with agmarshall.DOUBLE_arg(gamma) as arg_gamma:
            agcls.evaluate_hresult(self.__dict__["_SetGamma"](arg_gamma.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{c4b3703d-c059-47c7-8b49-11bbedd7975a}", IStkGraphicsGammaCorrectionFilter)
agcls.AgTypeNameMap["IStkGraphicsGammaCorrectionFilter"] = IStkGraphicsGammaCorrectionFilter

class IStkGraphicsGaussianBlurFilter(object):
    """Applies a convolution filter to blur the source raster using the Gaussian function."""
    _uuid = "{b5b0a55e-980a-453f-b7b4-7c7024f92ef4}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsGaussianBlurFilter._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsGaussianBlurFilter from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsGaussianBlurFilter = agcom.GUID(IStkGraphicsGaussianBlurFilter._uuid)
        vtable_offset_local = IStkGraphicsGaussianBlurFilter._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsGaussianBlurFilter.__dict__ and type(IStkGraphicsGaussianBlurFilter.__dict__[attrname]) == property:
            return IStkGraphicsGaussianBlurFilter.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsGaussianBlurFilter.")
    

agcls.AgClassCatalog.add_catalog_entry("{b5b0a55e-980a-453f-b7b4-7c7024f92ef4}", IStkGraphicsGaussianBlurFilter)
agcls.AgTypeNameMap["IStkGraphicsGaussianBlurFilter"] = IStkGraphicsGaussianBlurFilter

class IStkGraphicsGradientDetectFilter(object):
    """Applies a convolution filter to detect gradients in the source raster."""
    _uuid = "{5a9e0d4c-4f36-47c8-8f81-ffdfe63cb112}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetMethod"] = _raise_uninitialized_error
        self.__dict__["_SetMethod"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsGradientDetectFilter._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsGradientDetectFilter from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsGradientDetectFilter = agcom.GUID(IStkGraphicsGradientDetectFilter._uuid)
        vtable_offset_local = IStkGraphicsGradientDetectFilter._vtable_offset - 1
        self.__dict__["_GetMethod"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsGradientDetectFilter, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetMethod"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsGradientDetectFilter, vtable_offset_local+2, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsGradientDetectFilter.__dict__ and type(IStkGraphicsGradientDetectFilter.__dict__[attrname]) == property:
            return IStkGraphicsGradientDetectFilter.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsGradientDetectFilter.")
    
    @property
    def Method(self) -> "AgEStkGraphicsGradientDetectMethod":
        """Gets or sets the method used to detect gradients in the source raster."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsGradientDetectMethod) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMethod"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Method.setter
    def Method(self, method:"AgEStkGraphicsGradientDetectMethod") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsGradientDetectMethod, method) as arg_method:
            agcls.evaluate_hresult(self.__dict__["_SetMethod"](arg_method.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{5a9e0d4c-4f36-47c8-8f81-ffdfe63cb112}", IStkGraphicsGradientDetectFilter)
agcls.AgTypeNameMap["IStkGraphicsGradientDetectFilter"] = IStkGraphicsGradientDetectFilter

class IStkGraphicsLevelsFilter(object):
    """Adjusts the band levels of the source raster linearly."""
    _uuid = "{e0d6dad5-cfcb-476a-95fd-2cd486114a68}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_SetLevelAdjustment"] = _raise_uninitialized_error
        self.__dict__["_ClearAdjustments"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsLevelsFilter._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsLevelsFilter from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsLevelsFilter = agcom.GUID(IStkGraphicsLevelsFilter._uuid)
        vtable_offset_local = IStkGraphicsLevelsFilter._vtable_offset - 1
        self.__dict__["_SetLevelAdjustment"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsLevelsFilter, vtable_offset_local+1, agcom.LONG, agcom.INT)
        self.__dict__["_ClearAdjustments"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsLevelsFilter, vtable_offset_local+2, )
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsLevelsFilter.__dict__ and type(IStkGraphicsLevelsFilter.__dict__[attrname]) == property:
            return IStkGraphicsLevelsFilter.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsLevelsFilter.")
    
    def SetLevelAdjustment(self, band:"AgEStkGraphicsRasterBand", adjustment:int) -> None:
        """Sets the linear level adjustment value for the given raster band. Both negative and positive values are accepted."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsRasterBand, band) as arg_band, \
             agmarshall.INT_arg(adjustment) as arg_adjustment:
            agcls.evaluate_hresult(self.__dict__["_SetLevelAdjustment"](arg_band.COM_val, arg_adjustment.COM_val))

    def ClearAdjustments(self) -> None:
        """Clears the level adjustment values for all bands."""
        agcls.evaluate_hresult(self.__dict__["_ClearAdjustments"]())


agcls.AgClassCatalog.add_catalog_entry("{e0d6dad5-cfcb-476a-95fd-2cd486114a68}", IStkGraphicsLevelsFilter)
agcls.AgTypeNameMap["IStkGraphicsLevelsFilter"] = IStkGraphicsLevelsFilter

class IStkGraphicsProjectionRasterStreamPluginActivator(object):
    """The Activator class provides methods to load COM plugins that implement projection and raster streaming. For more information about the projection and raster plugins, see the STK Programming Interface."""
    _uuid = "{0c1e9236-42e6-4539-9003-06e06f906432}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_CreateFromDisplayName"] = _raise_uninitialized_error
        self.__dict__["_GetAvailableDisplayNames"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsProjectionRasterStreamPluginActivator._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsProjectionRasterStreamPluginActivator from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsProjectionRasterStreamPluginActivator = agcom.GUID(IStkGraphicsProjectionRasterStreamPluginActivator._uuid)
        vtable_offset_local = IStkGraphicsProjectionRasterStreamPluginActivator._vtable_offset - 1
        self.__dict__["_CreateFromDisplayName"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsProjectionRasterStreamPluginActivator, vtable_offset_local+1, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_GetAvailableDisplayNames"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsProjectionRasterStreamPluginActivator, vtable_offset_local+2, POINTER(agcom.SAFEARRAY))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsProjectionRasterStreamPluginActivator.__dict__ and type(IStkGraphicsProjectionRasterStreamPluginActivator.__dict__[attrname]) == property:
            return IStkGraphicsProjectionRasterStreamPluginActivator.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsProjectionRasterStreamPluginActivator.")
    
    def CreateFromDisplayName(self, displayName:str) -> "IStkGraphicsProjectionRasterStreamPluginProxy":
        """Loads a projection/raster COM plugin associated with the specified display name and returns a proxy object that allows accessing the raster and projection streams implemented by the plugin."""
        with agmarshall.BSTR_arg(displayName) as arg_displayName, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_CreateFromDisplayName"](arg_displayName.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def GetAvailableDisplayNames(self) -> list:
        """Gets a list of available projection/raster plugins' Display Names (Programmatic Identifiers)."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAvailableDisplayNames"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{0c1e9236-42e6-4539-9003-06e06f906432}", IStkGraphicsProjectionRasterStreamPluginActivator)
agcls.AgTypeNameMap["IStkGraphicsProjectionRasterStreamPluginActivator"] = IStkGraphicsProjectionRasterStreamPluginActivator

class IStkGraphicsProjectionRasterStreamPluginProxy(object):
    """A proxy class provides access to the raster and projection streams implemented by a plugin. Proxies are instantiated using projection raster stream plugin activator."""
    _uuid = "{5a28d922-9211-4860-81ae-0d98d38ca6d7}"
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetRasterStream"] = _raise_uninitialized_error
        self.__dict__["_GetProjectionStream"] = _raise_uninitialized_error
        self.__dict__["_GetIsRasterStreamSupported"] = _raise_uninitialized_error
        self.__dict__["_GetIsProjectionStreamSupported"] = _raise_uninitialized_error
        self.__dict__["_GetRealPluginObject"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsProjectionRasterStreamPluginProxy._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsProjectionRasterStreamPluginProxy from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsProjectionRasterStreamPluginProxy = agcom.GUID(IStkGraphicsProjectionRasterStreamPluginProxy._uuid)
        vtable_offset_local = IStkGraphicsProjectionRasterStreamPluginProxy._vtable_offset - 1
        self.__dict__["_GetRasterStream"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsProjectionRasterStreamPluginProxy, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetProjectionStream"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsProjectionRasterStreamPluginProxy, vtable_offset_local+2, POINTER(agcom.PVOID))
        self.__dict__["_GetIsRasterStreamSupported"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsProjectionRasterStreamPluginProxy, vtable_offset_local+3, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetIsProjectionStreamSupported"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsProjectionRasterStreamPluginProxy, vtable_offset_local+4, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetRealPluginObject"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsProjectionRasterStreamPluginProxy, vtable_offset_local+5, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsProjectionRasterStreamPluginProxy.__dict__ and type(IStkGraphicsProjectionRasterStreamPluginProxy.__dict__[attrname]) == property:
            return IStkGraphicsProjectionRasterStreamPluginProxy.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsProjectionRasterStreamPluginProxy.")
    
    @property
    def RasterStream(self) -> "IStkGraphicsRasterStream":
        """Returns a raster stream."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetRasterStream"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def ProjectionStream(self) -> "IStkGraphicsProjectionStream":
        """Returns a projection stream."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetProjectionStream"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def IsRasterStreamSupported(self) -> bool:
        """Returns true if the raster streaming is supported."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetIsRasterStreamSupported"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def IsProjectionStreamSupported(self) -> bool:
        """Returns true if the projection streaming is supported."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetIsProjectionStreamSupported"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def RealPluginObject(self) -> typing.Any:
        """Returns a pointer to plugin object's IUnknown interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetRealPluginObject"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{5a28d922-9211-4860-81ae-0d98d38ca6d7}", IStkGraphicsProjectionRasterStreamPluginProxy)
agcls.AgTypeNameMap["IStkGraphicsProjectionRasterStreamPluginProxy"] = IStkGraphicsProjectionRasterStreamPluginProxy

class IStkGraphicsRaster(object):
    """A raster dataset. A raster consists of one or more bands, or sets of values, which are most commonly associated with colors when the raster represents an image..."""
    _uuid = "{e0113161-7dd5-4411-bca9-6175aad19b4e}"
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAttributes"] = _raise_uninitialized_error
        self.__dict__["_GetWidth"] = _raise_uninitialized_error
        self.__dict__["_GetHeight"] = _raise_uninitialized_error
        self.__dict__["_Flip"] = _raise_uninitialized_error
        self.__dict__["_Rotate"] = _raise_uninitialized_error
        self.__dict__["_Apply"] = _raise_uninitialized_error
        self.__dict__["_ApplyInPlace"] = _raise_uninitialized_error
        self.__dict__["_ExtractBand"] = _raise_uninitialized_error
        self.__dict__["_ExtractBandFromRasterFormat"] = _raise_uninitialized_error
        self.__dict__["_CopyFromRaster"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsRaster._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsRaster from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsRaster = agcom.GUID(IStkGraphicsRaster._uuid)
        vtable_offset_local = IStkGraphicsRaster._vtable_offset - 1
        self.__dict__["_GetAttributes"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsRaster, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetWidth"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsRaster, vtable_offset_local+2, POINTER(agcom.INT))
        self.__dict__["_GetHeight"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsRaster, vtable_offset_local+3, POINTER(agcom.INT))
        self.__dict__["_Flip"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsRaster, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_Rotate"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsRaster, vtable_offset_local+5, agcom.DOUBLE)
        self.__dict__["_Apply"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsRaster, vtable_offset_local+6, agcom.PVOID, POINTER(agcom.PVOID))
        self.__dict__["_ApplyInPlace"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsRaster, vtable_offset_local+7, agcom.PVOID)
        self.__dict__["_ExtractBand"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsRaster, vtable_offset_local+8, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_ExtractBandFromRasterFormat"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsRaster, vtable_offset_local+9, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_CopyFromRaster"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsRaster, vtable_offset_local+10, agcom.PVOID)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsRaster.__dict__ and type(IStkGraphicsRaster.__dict__[attrname]) == property:
            return IStkGraphicsRaster.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsRaster.")
    
    @property
    def Attributes(self) -> "IStkGraphicsRasterAttributes":
        """Gets the raster attributes that define the raster data."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAttributes"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Width(self) -> int:
        """Gets the width of the raster in pixels."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetWidth"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Height(self) -> int:
        """Gets the height of the raster in pixels."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetHeight"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def Flip(self, axis:"AgEStkGraphicsFlipAxis") -> None:
        """Flips the raster along the given axis."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsFlipAxis, axis) as arg_axis:
            agcls.evaluate_hresult(self.__dict__["_Flip"](arg_axis.COM_val))

    def Rotate(self, angle:float) -> None:
        """Rotates the raster by the given angle."""
        with agmarshall.DOUBLE_arg(angle) as arg_angle:
            agcls.evaluate_hresult(self.__dict__["_Rotate"](arg_angle.COM_val))

    def Apply(self, filter:"IStkGraphicsRasterFilter") -> "IStkGraphicsRaster":
        """Applies a raster filter to the raster and returns a new raster with the results of the filtering. The current raster is not modified."""
        with agmarshall.AgInterface_in_arg(filter, IStkGraphicsRasterFilter) as arg_filter, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Apply"](arg_filter.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def ApplyInPlace(self, filter:"IStkGraphicsRasterFilter") -> None:
        """Applies a raster filter to the raster. The current raster will contain the results of the filtering."""
        with agmarshall.AgInterface_in_arg(filter, IStkGraphicsRasterFilter) as arg_filter:
            agcls.evaluate_hresult(self.__dict__["_ApplyInPlace"](arg_filter.COM_val))

    def ExtractBand(self, band:"AgEStkGraphicsRasterBand") -> "IStkGraphicsRaster":
        """Extracts the band of raster data associated with the given raster band."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsRasterBand, band) as arg_band, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_ExtractBand"](arg_band.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def ExtractBandFromRasterFormat(self, format:"AgEStkGraphicsRasterFormat") -> "IStkGraphicsRaster":
        """Extracts the bands of raster data associated with the given raster format."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsRasterFormat, format) as arg_format, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_ExtractBandFromRasterFormat"](arg_format.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def CopyFromRaster(self, raster:"IStkGraphicsRaster") -> None:
        """Copies the data associated with the given raster into this raster."""
        with agmarshall.AgInterface_in_arg(raster, IStkGraphicsRaster) as arg_raster:
            agcls.evaluate_hresult(self.__dict__["_CopyFromRaster"](arg_raster.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{e0113161-7dd5-4411-bca9-6175aad19b4e}", IStkGraphicsRaster)
agcls.AgTypeNameMap["IStkGraphicsRaster"] = IStkGraphicsRaster

class IStkGraphicsRasterAttributes(object):
    """The attributes describing a raster dataset. raster attributes define the memory layout of a raster, and includes properties defining the order of each raster band that the raster contains, as specified by the raster format..."""
    _uuid = "{067e0cd7-c1c5-41b7-93a8-f9ae8b67df25}"
    _num_methods = 11
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetFormat"] = _raise_uninitialized_error
        self.__dict__["_GetType"] = _raise_uninitialized_error
        self.__dict__["_GetOrientation"] = _raise_uninitialized_error
        self.__dict__["_GetByteLength"] = _raise_uninitialized_error
        self.__dict__["_GetWidth"] = _raise_uninitialized_error
        self.__dict__["_GetHeight"] = _raise_uninitialized_error
        self.__dict__["_GetPixelAspectRatio"] = _raise_uninitialized_error
        self.__dict__["_GetRowAlignment"] = _raise_uninitialized_error
        self.__dict__["_GetNumberOfBands"] = _raise_uninitialized_error
        self.__dict__["_GetRowStride"] = _raise_uninitialized_error
        self.__dict__["_HasBand"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsRasterAttributes._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsRasterAttributes from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsRasterAttributes = agcom.GUID(IStkGraphicsRasterAttributes._uuid)
        vtable_offset_local = IStkGraphicsRasterAttributes._vtable_offset - 1
        self.__dict__["_GetFormat"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsRasterAttributes, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_GetType"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsRasterAttributes, vtable_offset_local+2, POINTER(agcom.LONG))
        self.__dict__["_GetOrientation"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsRasterAttributes, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_GetByteLength"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsRasterAttributes, vtable_offset_local+4, POINTER(agcom.INT))
        self.__dict__["_GetWidth"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsRasterAttributes, vtable_offset_local+5, POINTER(agcom.INT))
        self.__dict__["_GetHeight"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsRasterAttributes, vtable_offset_local+6, POINTER(agcom.INT))
        self.__dict__["_GetPixelAspectRatio"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsRasterAttributes, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_GetRowAlignment"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsRasterAttributes, vtable_offset_local+8, POINTER(agcom.INT))
        self.__dict__["_GetNumberOfBands"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsRasterAttributes, vtable_offset_local+9, POINTER(agcom.INT))
        self.__dict__["_GetRowStride"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsRasterAttributes, vtable_offset_local+10, POINTER(agcom.INT))
        self.__dict__["_HasBand"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsRasterAttributes, vtable_offset_local+11, agcom.LONG, POINTER(agcom.VARIANT_BOOL))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsRasterAttributes.__dict__ and type(IStkGraphicsRasterAttributes.__dict__[attrname]) == property:
            return IStkGraphicsRasterAttributes.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsRasterAttributes.")
    
    @property
    def Format(self) -> "AgEStkGraphicsRasterFormat":
        """Gets the raster format associated with the attributes."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsRasterFormat) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetFormat"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Type(self) -> "AgEStkGraphicsRasterType":
        """Gets the raster type associated with the attributes."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsRasterType) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetType"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Orientation(self) -> "AgEStkGraphicsRasterOrientation":
        """Gets the raster orientation associated with the attributes."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsRasterOrientation) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetOrientation"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def ByteLength(self) -> int:
        """Gets the size of the raster data in bytes."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetByteLength"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Width(self) -> int:
        """Gets the width of the raster in pixels."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetWidth"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Height(self) -> int:
        """Gets the height of the raster in pixels."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetHeight"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def PixelAspectRatio(self) -> float:
        """Gets the pixel aspect ratio of the raster."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPixelAspectRatio"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def RowAlignment(self) -> int:
        """Gets the row alignment of the raster data in bytes."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetRowAlignment"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def NumberOfBands(self) -> int:
        """Gets the number of bands comprising the raster."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetNumberOfBands"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def RowStride(self) -> int:
        """Gets the stride or scan/row width in bytes of the raster data."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetRowStride"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def HasBand(self, band:"AgEStkGraphicsRasterBand") -> bool:
        """Gets whether the raster contains the given band."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsRasterBand, band) as arg_band, \
             agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_HasBand"](arg_band.COM_val, byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{067e0cd7-c1c5-41b7-93a8-f9ae8b67df25}", IStkGraphicsRasterAttributes)
agcls.AgTypeNameMap["IStkGraphicsRasterAttributes"] = IStkGraphicsRasterAttributes

class IStkGraphicsRasterFilter(object):
    """A filter for processing raster datasets. RasterFilter is the base class for all raster filters..."""
    _uuid = "{1d21525d-4204-47cc-8457-996e1a6eab7e}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsRasterFilter._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsRasterFilter from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsRasterFilter = agcom.GUID(IStkGraphicsRasterFilter._uuid)
        vtable_offset_local = IStkGraphicsRasterFilter._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsRasterFilter.__dict__ and type(IStkGraphicsRasterFilter.__dict__[attrname]) == property:
            return IStkGraphicsRasterFilter.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsRasterFilter.")
    

agcls.AgClassCatalog.add_catalog_entry("{1d21525d-4204-47cc-8457-996e1a6eab7e}", IStkGraphicsRasterFilter)
agcls.AgTypeNameMap["IStkGraphicsRasterFilter"] = IStkGraphicsRasterFilter

class IStkGraphicsRasterStream(object):
    """A raster, the data of which, is updated dynamically at the specified update delta. The class can be used to stream video and other dynamic raster data to textures and other raster clients..."""
    _uuid = "{63f024ca-7113-4841-8d26-7a286458bd7c}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetUpdateDelta"] = _raise_uninitialized_error
        self.__dict__["_SetUpdateDelta"] = _raise_uninitialized_error
        self.__dict__["_Update"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsRasterStream._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsRasterStream from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsRasterStream = agcom.GUID(IStkGraphicsRasterStream._uuid)
        vtable_offset_local = IStkGraphicsRasterStream._vtable_offset - 1
        self.__dict__["_GetUpdateDelta"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsRasterStream, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetUpdateDelta"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsRasterStream, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_Update"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsRasterStream, vtable_offset_local+3, agcom.PVOID, agcom.PVOID, POINTER(agcom.VARIANT_BOOL))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsRasterStream.__dict__ and type(IStkGraphicsRasterStream.__dict__[attrname]) == property:
            return IStkGraphicsRasterStream.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsRasterStream.")
    
    @property
    def UpdateDelta(self) -> float:
        """Gets or sets the update delta of the raster stream in seconds. The update delta defines the interval at which the Update method will be called. The default update delta is 0, which will call the Update method every time the scene manager time changes..."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetUpdateDelta"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @UpdateDelta.setter
    def UpdateDelta(self, updateDelta:float) -> None:
        with agmarshall.DOUBLE_arg(updateDelta) as arg_updateDelta:
            agcls.evaluate_hresult(self.__dict__["_SetUpdateDelta"](arg_updateDelta.COM_val))

    def Update(self, time:"IDate", nextTime:"IDate") -> bool:
        """When overridden in a derived class, updates the raster data associated with the raster stream at the specified time..."""
        with agmarshall.AgInterface_in_arg(time, IDate) as arg_time, \
             agmarshall.AgInterface_in_arg(nextTime, IDate) as arg_nextTime, \
             agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_Update"](arg_time.COM_val, arg_nextTime.COM_val, byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{63f024ca-7113-4841-8d26-7a286458bd7c}", IStkGraphicsRasterStream)
agcls.AgTypeNameMap["IStkGraphicsRasterStream"] = IStkGraphicsRasterStream

class IStkGraphicsRotateFilter(object):
    """Rotates the source raster clockwise by the specified angle."""
    _uuid = "{4b6dc620-04e1-4956-be55-890fdb25bd40}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAngle"] = _raise_uninitialized_error
        self.__dict__["_SetAngle"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsRotateFilter._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsRotateFilter from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsRotateFilter = agcom.GUID(IStkGraphicsRotateFilter._uuid)
        vtable_offset_local = IStkGraphicsRotateFilter._vtable_offset - 1
        self.__dict__["_GetAngle"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsRotateFilter, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAngle"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsRotateFilter, vtable_offset_local+2, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsRotateFilter.__dict__ and type(IStkGraphicsRotateFilter.__dict__[attrname]) == property:
            return IStkGraphicsRotateFilter.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsRotateFilter.")
    
    @property
    def Angle(self) -> float:
        """Gets or sets the counterclockwise rotation angle."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAngle"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Angle.setter
    def Angle(self, angle:float) -> None:
        with agmarshall.DOUBLE_arg(angle) as arg_angle:
            agcls.evaluate_hresult(self.__dict__["_SetAngle"](arg_angle.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{4b6dc620-04e1-4956-be55-890fdb25bd40}", IStkGraphicsRotateFilter)
agcls.AgTypeNameMap["IStkGraphicsRotateFilter"] = IStkGraphicsRotateFilter

class IStkGraphicsSequenceFilter(object):
    """Applies a sequence of filters to the source raster in the order in which they were added. When continue on failure is set to true, subsequent filters will still be applied to the source raster even if one or more filters in the sequence cannot be applied."""
    _uuid = "{72e2b4cb-2be3-418e-b0c8-69f33164e475}"
    _num_methods = 7
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetContinueOnFailure"] = _raise_uninitialized_error
        self.__dict__["_SetContinueOnFailure"] = _raise_uninitialized_error
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        self.__dict__["_Add"] = _raise_uninitialized_error
        self.__dict__["_Remove"] = _raise_uninitialized_error
        self.__dict__["_Clear"] = _raise_uninitialized_error
        self.__dict__["_Contains"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsSequenceFilter._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsSequenceFilter from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsSequenceFilter = agcom.GUID(IStkGraphicsSequenceFilter._uuid)
        vtable_offset_local = IStkGraphicsSequenceFilter._vtable_offset - 1
        self.__dict__["_GetContinueOnFailure"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSequenceFilter, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetContinueOnFailure"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSequenceFilter, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSequenceFilter, vtable_offset_local+3, POINTER(agcom.INT))
        self.__dict__["_Add"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSequenceFilter, vtable_offset_local+4, agcom.PVOID)
        self.__dict__["_Remove"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSequenceFilter, vtable_offset_local+5, agcom.PVOID)
        self.__dict__["_Clear"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSequenceFilter, vtable_offset_local+6, )
        self.__dict__["_Contains"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSequenceFilter, vtable_offset_local+7, agcom.PVOID, POINTER(agcom.VARIANT_BOOL))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsSequenceFilter.__dict__ and type(IStkGraphicsSequenceFilter.__dict__[attrname]) == property:
            return IStkGraphicsSequenceFilter.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsSequenceFilter.")
    
    @property
    def ContinueOnFailure(self) -> bool:
        """Gets or sets whether to continue applying filters in the sequence regardless of individual filter failures. When set to true, subsequent filters will still be applied to the source raster even if one or more filters in the sequence cannot be applied."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetContinueOnFailure"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @ContinueOnFailure.setter
    def ContinueOnFailure(self, continueOnFailure:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(continueOnFailure) as arg_continueOnFailure:
            agcls.evaluate_hresult(self.__dict__["_SetContinueOnFailure"](arg_continueOnFailure.COM_val))

    @property
    def Count(self) -> int:
        """Gets the number of filters in the collection."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def Add(self, filter:"IStkGraphicsRasterFilter") -> None:
        """Adds a filter to the sequence."""
        with agmarshall.AgInterface_in_arg(filter, IStkGraphicsRasterFilter) as arg_filter:
            agcls.evaluate_hresult(self.__dict__["_Add"](arg_filter.COM_val))

    def Remove(self, filter:"IStkGraphicsRasterFilter") -> None:
        """Removes a filter from the sequence."""
        with agmarshall.AgInterface_in_arg(filter, IStkGraphicsRasterFilter) as arg_filter:
            agcls.evaluate_hresult(self.__dict__["_Remove"](arg_filter.COM_val))

    def Clear(self) -> None:
        """Clears all filters from the sequence."""
        agcls.evaluate_hresult(self.__dict__["_Clear"]())

    def Contains(self, filter:"IStkGraphicsRasterFilter") -> bool:
        """Returns true if the sequence contains the filter."""
        with agmarshall.AgInterface_in_arg(filter, IStkGraphicsRasterFilter) as arg_filter, \
             agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_Contains"](arg_filter.COM_val, byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{72e2b4cb-2be3-418e-b0c8-69f33164e475}", IStkGraphicsSequenceFilter)
agcls.AgTypeNameMap["IStkGraphicsSequenceFilter"] = IStkGraphicsSequenceFilter

class IStkGraphicsSharpenFilter(object):
    """Applies a convolution filter to increase the sharpness of the source raster."""
    _uuid = "{927e244d-ace0-4387-8e3e-6f14bfe230eb}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetMethod"] = _raise_uninitialized_error
        self.__dict__["_SetMethod"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsSharpenFilter._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsSharpenFilter from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsSharpenFilter = agcom.GUID(IStkGraphicsSharpenFilter._uuid)
        vtable_offset_local = IStkGraphicsSharpenFilter._vtable_offset - 1
        self.__dict__["_GetMethod"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSharpenFilter, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetMethod"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSharpenFilter, vtable_offset_local+2, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsSharpenFilter.__dict__ and type(IStkGraphicsSharpenFilter.__dict__[attrname]) == property:
            return IStkGraphicsSharpenFilter.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsSharpenFilter.")
    
    @property
    def Method(self) -> "AgEStkGraphicsSharpenMethod":
        """Gets or sets the method used to sharpen the source raster."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsSharpenMethod) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMethod"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Method.setter
    def Method(self, method:"AgEStkGraphicsSharpenMethod") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsSharpenMethod, method) as arg_method:
            agcls.evaluate_hresult(self.__dict__["_SetMethod"](arg_method.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{927e244d-ace0-4387-8e3e-6f14bfe230eb}", IStkGraphicsSharpenFilter)
agcls.AgTypeNameMap["IStkGraphicsSharpenFilter"] = IStkGraphicsSharpenFilter

class IStkGraphicsVideoStream(object):
    """A raster stream that streams from a video. The video can be read from a file, or streamed from an HTTP, RTP, UDP, or TCP source. See the Video Streams Overview for a list of supported video formats and Uri usage."""
    _uuid = "{95fcc91e-a95a-48c4-a34f-9ed67f8e4f4a}"
    _num_methods = 35
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetUri"] = _raise_uninitialized_error
        self.__dict__["_GetPlayback"] = _raise_uninitialized_error
        self.__dict__["_SetPlayback"] = _raise_uninitialized_error
        self.__dict__["_GetFrameRate"] = _raise_uninitialized_error
        self.__dict__["_SetFrameRate"] = _raise_uninitialized_error
        self.__dict__["_GetIntervalStartTime"] = _raise_uninitialized_error
        self.__dict__["_SetIntervalStartTime"] = _raise_uninitialized_error
        self.__dict__["_GetIntervalEndTime"] = _raise_uninitialized_error
        self.__dict__["_SetIntervalEndTime"] = _raise_uninitialized_error
        self.__dict__["_GetStartTime"] = _raise_uninitialized_error
        self.__dict__["_SetStartTime"] = _raise_uninitialized_error
        self.__dict__["_GetEndTime"] = _raise_uninitialized_error
        self.__dict__["_SetEndTime"] = _raise_uninitialized_error
        self.__dict__["_GetStartFrame"] = _raise_uninitialized_error
        self.__dict__["_SetStartFrame"] = _raise_uninitialized_error
        self.__dict__["_GetEndFrame"] = _raise_uninitialized_error
        self.__dict__["_SetEndFrame"] = _raise_uninitialized_error
        self.__dict__["_GetLoop"] = _raise_uninitialized_error
        self.__dict__["_SetLoop"] = _raise_uninitialized_error
        self.__dict__["_GetIsPlaying"] = _raise_uninitialized_error
        self.__dict__["_GetPacketAcquirementYieldTime"] = _raise_uninitialized_error
        self.__dict__["_SetPacketAcquirementYieldTime"] = _raise_uninitialized_error
        self.__dict__["_GetPacketBufferLimit"] = _raise_uninitialized_error
        self.__dict__["_SetPacketBufferLimit"] = _raise_uninitialized_error
        self.__dict__["_GetAllowFrameDrop"] = _raise_uninitialized_error
        self.__dict__["_SetAllowFrameDrop"] = _raise_uninitialized_error
        self.__dict__["_GetEnableAudio"] = _raise_uninitialized_error
        self.__dict__["_SetEnableAudio"] = _raise_uninitialized_error
        self.__dict__["_ReinitializeWithStringUri"] = _raise_uninitialized_error
        self.__dict__["_Play"] = _raise_uninitialized_error
        self.__dict__["_Pause"] = _raise_uninitialized_error
        self.__dict__["_Stop"] = _raise_uninitialized_error
        self.__dict__["_Reset"] = _raise_uninitialized_error
        self.__dict__["_Close"] = _raise_uninitialized_error
        self.__dict__["_GetAudioUri"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsVideoStream._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsVideoStream from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsVideoStream = agcom.GUID(IStkGraphicsVideoStream._uuid)
        vtable_offset_local = IStkGraphicsVideoStream._vtable_offset - 1
        self.__dict__["_GetUri"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVideoStream, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_GetPlayback"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVideoStream, vtable_offset_local+2, POINTER(agcom.LONG))
        self.__dict__["_SetPlayback"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVideoStream, vtable_offset_local+3, agcom.LONG)
        self.__dict__["_GetFrameRate"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVideoStream, vtable_offset_local+4, POINTER(agcom.DOUBLE))
        self.__dict__["_SetFrameRate"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVideoStream, vtable_offset_local+5, agcom.DOUBLE)
        self.__dict__["_GetIntervalStartTime"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVideoStream, vtable_offset_local+6, POINTER(agcom.PVOID))
        self.__dict__["_SetIntervalStartTime"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVideoStream, vtable_offset_local+7, agcom.PVOID)
        self.__dict__["_GetIntervalEndTime"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVideoStream, vtable_offset_local+8, POINTER(agcom.PVOID))
        self.__dict__["_SetIntervalEndTime"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVideoStream, vtable_offset_local+9, agcom.PVOID)
        self.__dict__["_GetStartTime"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVideoStream, vtable_offset_local+10, POINTER(agcom.DOUBLE))
        self.__dict__["_SetStartTime"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVideoStream, vtable_offset_local+11, agcom.DOUBLE)
        self.__dict__["_GetEndTime"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVideoStream, vtable_offset_local+12, POINTER(agcom.DOUBLE))
        self.__dict__["_SetEndTime"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVideoStream, vtable_offset_local+13, agcom.DOUBLE)
        self.__dict__["_GetStartFrame"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVideoStream, vtable_offset_local+14, POINTER(agcom.INT))
        self.__dict__["_SetStartFrame"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVideoStream, vtable_offset_local+15, agcom.INT)
        self.__dict__["_GetEndFrame"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVideoStream, vtable_offset_local+16, POINTER(agcom.INT))
        self.__dict__["_SetEndFrame"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVideoStream, vtable_offset_local+17, agcom.INT)
        self.__dict__["_GetLoop"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVideoStream, vtable_offset_local+18, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetLoop"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVideoStream, vtable_offset_local+19, agcom.VARIANT_BOOL)
        self.__dict__["_GetIsPlaying"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVideoStream, vtable_offset_local+20, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetPacketAcquirementYieldTime"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVideoStream, vtable_offset_local+21, POINTER(agcom.INT))
        self.__dict__["_SetPacketAcquirementYieldTime"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVideoStream, vtable_offset_local+22, agcom.INT)
        self.__dict__["_GetPacketBufferLimit"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVideoStream, vtable_offset_local+23, POINTER(agcom.INT))
        self.__dict__["_SetPacketBufferLimit"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVideoStream, vtable_offset_local+24, agcom.INT)
        self.__dict__["_GetAllowFrameDrop"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVideoStream, vtable_offset_local+25, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetAllowFrameDrop"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVideoStream, vtable_offset_local+26, agcom.VARIANT_BOOL)
        self.__dict__["_GetEnableAudio"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVideoStream, vtable_offset_local+27, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetEnableAudio"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVideoStream, vtable_offset_local+28, agcom.VARIANT_BOOL)
        self.__dict__["_ReinitializeWithStringUri"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVideoStream, vtable_offset_local+29, agcom.BSTR)
        self.__dict__["_Play"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVideoStream, vtable_offset_local+30, )
        self.__dict__["_Pause"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVideoStream, vtable_offset_local+31, )
        self.__dict__["_Stop"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVideoStream, vtable_offset_local+32, )
        self.__dict__["_Reset"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVideoStream, vtable_offset_local+33, )
        self.__dict__["_Close"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVideoStream, vtable_offset_local+34, )
        self.__dict__["_GetAudioUri"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVideoStream, vtable_offset_local+35, POINTER(agcom.BSTR))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsVideoStream.__dict__ and type(IStkGraphicsVideoStream.__dict__[attrname]) == property:
            return IStkGraphicsVideoStream.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsVideoStream.")
    
    @property
    def Uri(self) -> str:
        """Gets the uri of the video."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetUri"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Playback(self) -> "AgEStkGraphicsVideoPlayback":
        """Gets or sets the video playback mode of the video."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsVideoPlayback) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPlayback"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Playback.setter
    def Playback(self, playback:"AgEStkGraphicsVideoPlayback") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsVideoPlayback, playback) as arg_playback:
            agcls.evaluate_hresult(self.__dict__["_SetPlayback"](arg_playback.COM_val))

    @property
    def FrameRate(self) -> float:
        """Gets or sets the frame rate of the video when the playback property is set to real time. If this property is not set, the internal framerate of the video is used."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetFrameRate"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @FrameRate.setter
    def FrameRate(self, frameRate:float) -> None:
        with agmarshall.DOUBLE_arg(frameRate) as arg_frameRate:
            agcls.evaluate_hresult(self.__dict__["_SetFrameRate"](arg_frameRate.COM_val))

    @property
    def IntervalStartTime(self) -> "IDate":
        """Gets or sets the scene manager time at which the video will begin playing when the playback property is set to time interval."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetIntervalStartTime"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @IntervalStartTime.setter
    def IntervalStartTime(self, intervalStartTime:"IDate") -> None:
        with agmarshall.AgInterface_in_arg(intervalStartTime, IDate) as arg_intervalStartTime:
            agcls.evaluate_hresult(self.__dict__["_SetIntervalStartTime"](arg_intervalStartTime.COM_val))

    @property
    def IntervalEndTime(self) -> "IDate":
        """Gets or sets the scene manager time at which the video will stop playing when the playback property is set to time interval."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetIntervalEndTime"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @IntervalEndTime.setter
    def IntervalEndTime(self, intervalEndTime:"IDate") -> None:
        with agmarshall.AgInterface_in_arg(intervalEndTime, IDate) as arg_intervalEndTime:
            agcls.evaluate_hresult(self.__dict__["_SetIntervalEndTime"](arg_intervalEndTime.COM_val))

    @property
    def StartTime(self) -> float:
        """Gets or sets the start time of the video in seconds. Changing the start time property also changes the start frame property to the frame in the video that corresponds to the specified time."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetStartTime"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @StartTime.setter
    def StartTime(self, startTime:float) -> None:
        with agmarshall.DOUBLE_arg(startTime) as arg_startTime:
            agcls.evaluate_hresult(self.__dict__["_SetStartTime"](arg_startTime.COM_val))

    @property
    def EndTime(self) -> float:
        """Gets or sets the end time of the video in seconds. Changing the end time property also changes the end frame property to the frame in the video that corresponds to the specified time."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetEndTime"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @EndTime.setter
    def EndTime(self, endTime:float) -> None:
        with agmarshall.DOUBLE_arg(endTime) as arg_endTime:
            agcls.evaluate_hresult(self.__dict__["_SetEndTime"](arg_endTime.COM_val))

    @property
    def StartFrame(self) -> int:
        """Gets or sets the start frame of the video. Changing the start frame property also changes the start time property to the time in the video that corresponds to the specified frame."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetStartFrame"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @StartFrame.setter
    def StartFrame(self, startFrame:int) -> None:
        with agmarshall.INT_arg(startFrame) as arg_startFrame:
            agcls.evaluate_hresult(self.__dict__["_SetStartFrame"](arg_startFrame.COM_val))

    @property
    def EndFrame(self) -> int:
        """Gets or sets the end frame of the video. Changing the end frame property also changes the end time property to the time in the video that corresponds to the specified frame."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetEndFrame"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @EndFrame.setter
    def EndFrame(self, endFrame:int) -> None:
        with agmarshall.INT_arg(endFrame) as arg_endFrame:
            agcls.evaluate_hresult(self.__dict__["_SetEndFrame"](arg_endFrame.COM_val))

    @property
    def Loop(self) -> bool:
        """Gets or sets whether the video will loop when it reaches its last frame when the playback property is set to real time."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetLoop"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Loop.setter
    def Loop(self, loop:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(loop) as arg_loop:
            agcls.evaluate_hresult(self.__dict__["_SetLoop"](arg_loop.COM_val))

    @property
    def IsPlaying(self) -> bool:
        """Gets whether or not the video is playing. Use the play, pause, stop, and Reset methods to control the playback of the video when the playback property is set to real time."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetIsPlaying"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def PacketAcquirementYieldTime(self) -> int:
        """Gets or sets the thread processing yield time for asynchronous streaming of video over common protocols like udp. Setting a high value may increase performance, but may cause frames or packets to drop, effecting visual quality..."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPacketAcquirementYieldTime"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @PacketAcquirementYieldTime.setter
    def PacketAcquirementYieldTime(self, packetAcquirementYieldTime:int) -> None:
        with agmarshall.INT_arg(packetAcquirementYieldTime) as arg_packetAcquirementYieldTime:
            agcls.evaluate_hresult(self.__dict__["_SetPacketAcquirementYieldTime"](arg_packetAcquirementYieldTime.COM_val))

    @property
    def PacketBufferLimit(self) -> int:
        """Gets or sets a value indicating the buffering limit for packets when processing a video stream..."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPacketBufferLimit"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @PacketBufferLimit.setter
    def PacketBufferLimit(self, packetBufferLimit:int) -> None:
        with agmarshall.INT_arg(packetBufferLimit) as arg_packetBufferLimit:
            agcls.evaluate_hresult(self.__dict__["_SetPacketBufferLimit"](arg_packetBufferLimit.COM_val))

    @property
    def AllowFrameDrop(self) -> bool:
        """Gets or sets a value indicating if frames should be dropped if video processing can not keep up with a video stream. If this is set to false, the video quality may degrade when the processing load is too high..."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAllowFrameDrop"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @AllowFrameDrop.setter
    def AllowFrameDrop(self, allowFrameDrop:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(allowFrameDrop) as arg_allowFrameDrop:
            agcls.evaluate_hresult(self.__dict__["_SetAllowFrameDrop"](arg_allowFrameDrop.COM_val))

    @property
    def EnableAudio(self) -> bool:
        """Gets or sets a value indicating if the encoded audio stream should be synchronized to video playback If this is set to false, the audio stream will be disabled..."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnableAudio"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @EnableAudio.setter
    def EnableAudio(self, enableAudio:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(enableAudio) as arg_enableAudio:
            agcls.evaluate_hresult(self.__dict__["_SetEnableAudio"](arg_enableAudio.COM_val))

    def ReinitializeWithStringUri(self, uri:str) -> None:
        """Reinitializes the video stream from a Uri, which can be a file, HTTP, RTP, UDP, or TCP source. See the Video Streams Overview for a list of supported video formats and Uri usage."""
        with agmarshall.BSTR_arg(uri) as arg_uri:
            agcls.evaluate_hresult(self.__dict__["_ReinitializeWithStringUri"](arg_uri.COM_val))

    def Play(self) -> None:
        """Begins playing the video when the playback property is set to real time."""
        agcls.evaluate_hresult(self.__dict__["_Play"]())

    def Pause(self) -> None:
        """Pauses the video when the playback property is set to real time."""
        agcls.evaluate_hresult(self.__dict__["_Pause"]())

    def Stop(self) -> None:
        """Stops the video when the playback property is set to real time. Stopping the video will seek to the first frame and pause playback. Use the Play method to begin playing the video again."""
        agcls.evaluate_hresult(self.__dict__["_Stop"]())

    def Reset(self) -> None:
        """Seeks the video to its first frame and begins playing the video when the playback property is set to real time."""
        agcls.evaluate_hresult(self.__dict__["_Reset"]())

    def Close(self) -> None:
        """Closes the video stream and any associated resources."""
        agcls.evaluate_hresult(self.__dict__["_Close"]())

    @property
    def AudioUri(self) -> str:
        """Gets the uri of the audio."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAudioUri"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{95fcc91e-a95a-48c4-a34f-9ed67f8e4f4a}", IStkGraphicsVideoStream)
agcls.AgTypeNameMap["IStkGraphicsVideoStream"] = IStkGraphicsVideoStream

class IStkGraphicsKmlContainer(object):
    """A KmlContainer contains a collection of children kml features."""
    _uuid = "{32147ba1-8610-4270-9365-b8966730dd6f}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetChildren"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsKmlContainer._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsKmlContainer from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsKmlContainer = agcom.GUID(IStkGraphicsKmlContainer._uuid)
        vtable_offset_local = IStkGraphicsKmlContainer._vtable_offset - 1
        self.__dict__["_GetChildren"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsKmlContainer, vtable_offset_local+1, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsKmlContainer.__dict__ and type(IStkGraphicsKmlContainer.__dict__[attrname]) == property:
            return IStkGraphicsKmlContainer.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsKmlContainer.")
    
    @property
    def Children(self) -> "IStkGraphicsKmlFeatureCollection":
        """The collection of kml features that are children of this container."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetChildren"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{32147ba1-8610-4270-9365-b8966730dd6f}", IStkGraphicsKmlContainer)
agcls.AgTypeNameMap["IStkGraphicsKmlContainer"] = IStkGraphicsKmlContainer

class IStkGraphicsKmlDocument(object):
    """A KML document."""
    _uuid = "{2e284efe-3dda-4fac-91ab-7b8c84eb3ad2}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetUri"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsKmlDocument._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsKmlDocument from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsKmlDocument = agcom.GUID(IStkGraphicsKmlDocument._uuid)
        vtable_offset_local = IStkGraphicsKmlDocument._vtable_offset - 1
        self.__dict__["_GetUri"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsKmlDocument, vtable_offset_local+1, POINTER(agcom.BSTR))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsKmlDocument.__dict__ and type(IStkGraphicsKmlDocument.__dict__[attrname]) == property:
            return IStkGraphicsKmlDocument.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsKmlDocument.")
    
    @property
    def Uri(self) -> str:
        """Gets the uri of the document."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetUri"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{2e284efe-3dda-4fac-91ab-7b8c84eb3ad2}", IStkGraphicsKmlDocument)
agcls.AgTypeNameMap["IStkGraphicsKmlDocument"] = IStkGraphicsKmlDocument

class IStkGraphicsKmlFeature(object):
    """A KML feature."""
    _uuid = "{bc7646ca-da52-4a62-8ef4-838382f21a08}"
    _num_methods = 9
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetIsLoaded"] = _raise_uninitialized_error
        self.__dict__["_GetDisplay"] = _raise_uninitialized_error
        self.__dict__["_SetDisplay"] = _raise_uninitialized_error
        self.__dict__["_GetContent"] = _raise_uninitialized_error
        self.__dict__["_GetName"] = _raise_uninitialized_error
        self.__dict__["_GetDescription"] = _raise_uninitialized_error
        self.__dict__["_GetSnippet"] = _raise_uninitialized_error
        self.__dict__["_GetBoundingSphere"] = _raise_uninitialized_error
        self.__dict__["_FlyTo"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsKmlFeature._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsKmlFeature from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsKmlFeature = agcom.GUID(IStkGraphicsKmlFeature._uuid)
        vtable_offset_local = IStkGraphicsKmlFeature._vtable_offset - 1
        self.__dict__["_GetIsLoaded"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsKmlFeature, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetDisplay"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsKmlFeature, vtable_offset_local+2, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetDisplay"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsKmlFeature, vtable_offset_local+3, agcom.VARIANT_BOOL)
        self.__dict__["_GetContent"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsKmlFeature, vtable_offset_local+4, POINTER(agcom.BSTR))
        self.__dict__["_GetName"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsKmlFeature, vtable_offset_local+5, POINTER(agcom.BSTR))
        self.__dict__["_GetDescription"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsKmlFeature, vtable_offset_local+6, POINTER(agcom.BSTR))
        self.__dict__["_GetSnippet"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsKmlFeature, vtable_offset_local+7, POINTER(agcom.BSTR))
        self.__dict__["_GetBoundingSphere"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsKmlFeature, vtable_offset_local+8, POINTER(agcom.PVOID))
        self.__dict__["_FlyTo"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsKmlFeature, vtable_offset_local+9, )
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsKmlFeature.__dict__ and type(IStkGraphicsKmlFeature.__dict__[attrname]) == property:
            return IStkGraphicsKmlFeature.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsKmlFeature.")
    
    @property
    def IsLoaded(self) -> bool:
        """Gets whether the document associated with this feature is loaded."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetIsLoaded"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Display(self) -> bool:
        """Gets or sets whether this feature will be displayed in the Scene."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDisplay"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Display.setter
    def Display(self, display:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(display) as arg_display:
            agcls.evaluate_hresult(self.__dict__["_SetDisplay"](arg_display.COM_val))

    @property
    def Content(self) -> str:
        """Gets the content associated with this feature."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetContent"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Name(self) -> str:
        """Gets the name of this feature."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetName"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Description(self) -> str:
        """Gets the description associated with this feature."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDescription"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Snippet(self) -> str:
        """Gets the snippet associated with this feature."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSnippet"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def BoundingSphere(self) -> "IStkGraphicsBoundingSphere":
        """The bounding sphere encompassing the area associated with this feature."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBoundingSphere"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def FlyTo(self) -> None:
        """Moves the camera to the area encompassing this feature."""
        agcls.evaluate_hresult(self.__dict__["_FlyTo"]())


agcls.AgClassCatalog.add_catalog_entry("{bc7646ca-da52-4a62-8ef4-838382f21a08}", IStkGraphicsKmlFeature)
agcls.AgTypeNameMap["IStkGraphicsKmlFeature"] = IStkGraphicsKmlFeature

class IStkGraphicsKmlFolder(object):
    """A KML folder."""
    _uuid = "{28b2dfb1-4f4c-4697-a0f9-076ebd92eb1f}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsKmlFolder._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsKmlFolder from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsKmlFolder = agcom.GUID(IStkGraphicsKmlFolder._uuid)
        vtable_offset_local = IStkGraphicsKmlFolder._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsKmlFolder.__dict__ and type(IStkGraphicsKmlFolder.__dict__[attrname]) == property:
            return IStkGraphicsKmlFolder.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsKmlFolder.")
    

agcls.AgClassCatalog.add_catalog_entry("{28b2dfb1-4f4c-4697-a0f9-076ebd92eb1f}", IStkGraphicsKmlFolder)
agcls.AgTypeNameMap["IStkGraphicsKmlFolder"] = IStkGraphicsKmlFolder

class IStkGraphicsKmlGraphics(object):
    """Provides loading and unloading of kml documents for a particular central body."""
    _uuid = "{056eb708-4504-4d62-b4d8-3ca00b0b91fa}"
    _num_methods = 9
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetDocuments"] = _raise_uninitialized_error
        self.__dict__["_LoadDocument"] = _raise_uninitialized_error
        self.__dict__["_LoadDocumentString"] = _raise_uninitialized_error
        self.__dict__["_Load"] = _raise_uninitialized_error
        self.__dict__["_LoadDocumentAsync"] = _raise_uninitialized_error
        self.__dict__["_LoadDocumentAsyncString"] = _raise_uninitialized_error
        self.__dict__["_LoadAsync"] = _raise_uninitialized_error
        self.__dict__["_Unload"] = _raise_uninitialized_error
        self.__dict__["_UnloadAll"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsKmlGraphics._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsKmlGraphics from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsKmlGraphics = agcom.GUID(IStkGraphicsKmlGraphics._uuid)
        vtable_offset_local = IStkGraphicsKmlGraphics._vtable_offset - 1
        self.__dict__["_GetDocuments"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsKmlGraphics, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_LoadDocument"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsKmlGraphics, vtable_offset_local+2, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_LoadDocumentString"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsKmlGraphics, vtable_offset_local+3, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_Load"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsKmlGraphics, vtable_offset_local+4, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_LoadDocumentAsync"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsKmlGraphics, vtable_offset_local+5, agcom.BSTR)
        self.__dict__["_LoadDocumentAsyncString"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsKmlGraphics, vtable_offset_local+6, agcom.BSTR)
        self.__dict__["_LoadAsync"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsKmlGraphics, vtable_offset_local+7, agcom.BSTR)
        self.__dict__["_Unload"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsKmlGraphics, vtable_offset_local+8, agcom.PVOID)
        self.__dict__["_UnloadAll"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsKmlGraphics, vtable_offset_local+9, )
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsKmlGraphics.__dict__ and type(IStkGraphicsKmlGraphics.__dict__[attrname]) == property:
            return IStkGraphicsKmlGraphics.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsKmlGraphics.")
    def Subscribe(self) -> IStkGraphicsKmlGraphicsEventHandler:
        """Returns an IStkGraphicsKmlGraphicsEventHandler that is subscribed to handle events associated with this instance of IStkGraphicsKmlGraphics."""
        return IStkGraphicsKmlGraphicsEventHandler(self._pUnk)    
    @property
    def Documents(self) -> "IStkGraphicsKmlDocumentCollection":
        """The collection of kml documents that are currently loaded."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDocuments"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def LoadDocument(self, kmlUri:str) -> "IStkGraphicsKmlDocument":
        """Loads a kml document from a uri."""
        with agmarshall.BSTR_arg(kmlUri) as arg_kmlUri, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_LoadDocument"](arg_kmlUri.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def LoadDocumentString(self, kmlUri:str) -> "IStkGraphicsKmlDocument":
        """Loads a kml document from a Uri."""
        with agmarshall.BSTR_arg(kmlUri) as arg_kmlUri, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_LoadDocumentString"](arg_kmlUri.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def Load(self, kmlDocument:str) -> "IStkGraphicsKmlDocument":
        """Loads a kml document from a string containing the document."""
        with agmarshall.BSTR_arg(kmlDocument) as arg_kmlDocument, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Load"](arg_kmlDocument.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def LoadDocumentAsync(self, kmlUri:str) -> None:
        """Loads a kml document asynchronously from a uri. The document loaded event is raised when the document is loaded."""
        with agmarshall.BSTR_arg(kmlUri) as arg_kmlUri:
            agcls.evaluate_hresult(self.__dict__["_LoadDocumentAsync"](arg_kmlUri.COM_val))

    def LoadDocumentAsyncString(self, kmlUri:str) -> None:
        """Loads a kml document asynchronously from a Uri. The document loaded event is raised when the document is loaded."""
        with agmarshall.BSTR_arg(kmlUri) as arg_kmlUri:
            agcls.evaluate_hresult(self.__dict__["_LoadDocumentAsyncString"](arg_kmlUri.COM_val))

    def LoadAsync(self, kmlDocument:str) -> None:
        """Loads a kml document asynchronously from a string containing the document. The document loaded event is raised when the document is loaded."""
        with agmarshall.BSTR_arg(kmlDocument) as arg_kmlDocument:
            agcls.evaluate_hresult(self.__dict__["_LoadAsync"](arg_kmlDocument.COM_val))

    def Unload(self, kmlDocument:"IStkGraphicsKmlDocument") -> None:
        """Unloads a kml document. All associated visual features will be removed from the Scene. Once a KmlDocument is unloaded, it is no longer valid and will throw when accessing properties or methods."""
        with agmarshall.AgInterface_in_arg(kmlDocument, IStkGraphicsKmlDocument) as arg_kmlDocument:
            agcls.evaluate_hresult(self.__dict__["_Unload"](arg_kmlDocument.COM_val))

    def UnloadAll(self) -> None:
        """Unloads all kml documents associated with this central body. All associated visual features will be removed from the Scene. Once a KmlDocument is unloaded, it is no longer valid and will throw when accessing properties or methods."""
        agcls.evaluate_hresult(self.__dict__["_UnloadAll"]())


agcls.AgClassCatalog.add_catalog_entry("{056eb708-4504-4d62-b4d8-3ca00b0b91fa}", IStkGraphicsKmlGraphics)
agcls.AgTypeNameMap["IStkGraphicsKmlGraphics"] = IStkGraphicsKmlGraphics

class IStkGraphicsKmlNetworkLink(object):
    """A KML network link."""
    _uuid = "{0b66ea82-dd0d-444f-b097-dda9427e1b87}"
    _num_methods = 17
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetUri"] = _raise_uninitialized_error
        self.__dict__["_GetRefreshMode"] = _raise_uninitialized_error
        self.__dict__["_SetRefreshMode"] = _raise_uninitialized_error
        self.__dict__["_GetRefreshInterval"] = _raise_uninitialized_error
        self.__dict__["_SetRefreshInterval"] = _raise_uninitialized_error
        self.__dict__["_GetViewRefreshMode"] = _raise_uninitialized_error
        self.__dict__["_SetViewRefreshMode"] = _raise_uninitialized_error
        self.__dict__["_GetViewRefreshTime"] = _raise_uninitialized_error
        self.__dict__["_SetViewRefreshTime"] = _raise_uninitialized_error
        self.__dict__["_GetViewBoundScale"] = _raise_uninitialized_error
        self.__dict__["_SetViewBoundScale"] = _raise_uninitialized_error
        self.__dict__["_GetMinimumRefreshPeriod"] = _raise_uninitialized_error
        self.__dict__["_GetCookie"] = _raise_uninitialized_error
        self.__dict__["_GetMessage"] = _raise_uninitialized_error
        self.__dict__["_GetLinkSnippet"] = _raise_uninitialized_error
        self.__dict__["_GetExpires"] = _raise_uninitialized_error
        self.__dict__["_Refresh"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsKmlNetworkLink._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsKmlNetworkLink from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsKmlNetworkLink = agcom.GUID(IStkGraphicsKmlNetworkLink._uuid)
        vtable_offset_local = IStkGraphicsKmlNetworkLink._vtable_offset - 1
        self.__dict__["_GetUri"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsKmlNetworkLink, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_GetRefreshMode"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsKmlNetworkLink, vtable_offset_local+2, POINTER(agcom.LONG))
        self.__dict__["_SetRefreshMode"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsKmlNetworkLink, vtable_offset_local+3, agcom.LONG)
        self.__dict__["_GetRefreshInterval"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsKmlNetworkLink, vtable_offset_local+4, POINTER(agcom.DOUBLE))
        self.__dict__["_SetRefreshInterval"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsKmlNetworkLink, vtable_offset_local+5, agcom.DOUBLE)
        self.__dict__["_GetViewRefreshMode"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsKmlNetworkLink, vtable_offset_local+6, POINTER(agcom.LONG))
        self.__dict__["_SetViewRefreshMode"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsKmlNetworkLink, vtable_offset_local+7, agcom.LONG)
        self.__dict__["_GetViewRefreshTime"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsKmlNetworkLink, vtable_offset_local+8, POINTER(agcom.DOUBLE))
        self.__dict__["_SetViewRefreshTime"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsKmlNetworkLink, vtable_offset_local+9, agcom.DOUBLE)
        self.__dict__["_GetViewBoundScale"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsKmlNetworkLink, vtable_offset_local+10, POINTER(agcom.DOUBLE))
        self.__dict__["_SetViewBoundScale"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsKmlNetworkLink, vtable_offset_local+11, agcom.DOUBLE)
        self.__dict__["_GetMinimumRefreshPeriod"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsKmlNetworkLink, vtable_offset_local+12, POINTER(agcom.DOUBLE))
        self.__dict__["_GetCookie"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsKmlNetworkLink, vtable_offset_local+13, POINTER(agcom.BSTR))
        self.__dict__["_GetMessage"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsKmlNetworkLink, vtable_offset_local+14, POINTER(agcom.BSTR))
        self.__dict__["_GetLinkSnippet"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsKmlNetworkLink, vtable_offset_local+15, POINTER(agcom.BSTR))
        self.__dict__["_GetExpires"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsKmlNetworkLink, vtable_offset_local+16, POINTER(agcom.BSTR))
        self.__dict__["_Refresh"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsKmlNetworkLink, vtable_offset_local+17, )
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsKmlNetworkLink.__dict__ and type(IStkGraphicsKmlNetworkLink.__dict__[attrname]) == property:
            return IStkGraphicsKmlNetworkLink.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsKmlNetworkLink.")
    
    @property
    def Uri(self) -> str:
        """Gets the uri of the network link."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetUri"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def RefreshMode(self) -> "AgEStkGraphicsKmlNetworkLinkRefreshMode":
        """Gets or sets the refresh mode of the network link. The refresh mode specifies a time-based refresh policy for this link."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsKmlNetworkLinkRefreshMode) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetRefreshMode"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @RefreshMode.setter
    def RefreshMode(self, refreshMode:"AgEStkGraphicsKmlNetworkLinkRefreshMode") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsKmlNetworkLinkRefreshMode, refreshMode) as arg_refreshMode:
            agcls.evaluate_hresult(self.__dict__["_SetRefreshMode"](arg_refreshMode.COM_val))

    @property
    def RefreshInterval(self) -> float:
        """Gets or sets the interval duration at which this network link will refresh, when refresh mode is set to on interval."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetRefreshInterval"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @RefreshInterval.setter
    def RefreshInterval(self, refreshInterval:float) -> None:
        with agmarshall.DOUBLE_arg(refreshInterval) as arg_refreshInterval:
            agcls.evaluate_hresult(self.__dict__["_SetRefreshInterval"](arg_refreshInterval.COM_val))

    @property
    def ViewRefreshMode(self) -> "AgEStkGraphicsKmlNetworkLinkViewRefreshMode":
        """Gets or sets the view refresh mode of the network link. The view refresh mode specifies the refresh policy for the when the camera's view changes."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsKmlNetworkLinkViewRefreshMode) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetViewRefreshMode"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @ViewRefreshMode.setter
    def ViewRefreshMode(self, viewRefreshMode:"AgEStkGraphicsKmlNetworkLinkViewRefreshMode") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsKmlNetworkLinkViewRefreshMode, viewRefreshMode) as arg_viewRefreshMode:
            agcls.evaluate_hresult(self.__dict__["_SetViewRefreshMode"](arg_viewRefreshMode.COM_val))

    @property
    def ViewRefreshTime(self) -> float:
        """Gets or sets the duration after camera view movement stops that this network link will refresh, when view refresh mode is set to on stop."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetViewRefreshTime"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @ViewRefreshTime.setter
    def ViewRefreshTime(self, viewRefreshTime:float) -> None:
        with agmarshall.DOUBLE_arg(viewRefreshTime) as arg_viewRefreshTime:
            agcls.evaluate_hresult(self.__dict__["_SetViewRefreshTime"](arg_viewRefreshTime.COM_val))

    @property
    def ViewBoundScale(self) -> float:
        """Gets or sets the value that scales the bounding box defining the view associated with this network link. A value less than 1.0 specifies to use less than the full view (screen). A value greater than 1..."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetViewBoundScale"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @ViewBoundScale.setter
    def ViewBoundScale(self, viewBoundScale:float) -> None:
        with agmarshall.DOUBLE_arg(viewBoundScale) as arg_viewBoundScale:
            agcls.evaluate_hresult(self.__dict__["_SetViewBoundScale"](arg_viewBoundScale.COM_val))

    @property
    def MinimumRefreshPeriod(self) -> float:
        """Gets the duration that is the minimum allowed time between refreshes of this network link."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinimumRefreshPeriod"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Cookie(self) -> str:
        """Gets the cookie string associated with this network link."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCookie"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Message(self) -> str:
        """Gets the message string associated with this network link."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMessage"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def LinkSnippet(self) -> str:
        """Gets the link snippet associated with this network link."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetLinkSnippet"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Expires(self) -> str:
        """Gets the string specifying the date/time this network should expire and be refreshed."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetExpires"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def Refresh(self) -> None:
        """Refreshes the network link."""
        agcls.evaluate_hresult(self.__dict__["_Refresh"]())


agcls.AgClassCatalog.add_catalog_entry("{0b66ea82-dd0d-444f-b097-dda9427e1b87}", IStkGraphicsKmlNetworkLink)
agcls.AgTypeNameMap["IStkGraphicsKmlNetworkLink"] = IStkGraphicsKmlNetworkLink

class IStkGraphicsMarkerBatchPrimitive(object):
    """ Renders one or more markers in the 3D scene. Markers are 2D images that always face the viewer which can be sized in pixels or meters. Markers are also referred to as sprites or billboards..."""
    _uuid = "{235878c1-62d9-4ce6-85ff-9d82aff701e9}"
    _num_methods = 54
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetSizeSource"] = _raise_uninitialized_error
        self.__dict__["_GetSortOrder"] = _raise_uninitialized_error
        self.__dict__["_GetSetHint"] = _raise_uninitialized_error
        self.__dict__["_GetRenderingMethod"] = _raise_uninitialized_error
        self.__dict__["_GetRenderPass"] = _raise_uninitialized_error
        self.__dict__["_SetRenderPass"] = _raise_uninitialized_error
        self.__dict__["_GetBoundingSphereScale"] = _raise_uninitialized_error
        self.__dict__["_SetBoundingSphereScale"] = _raise_uninitialized_error
        self.__dict__["_GetDistanceDisplayConditionPerMarker"] = _raise_uninitialized_error
        self.__dict__["_SetDistanceDisplayConditionPerMarker"] = _raise_uninitialized_error
        self.__dict__["_GetTexture"] = _raise_uninitialized_error
        self.__dict__["_SetTexture"] = _raise_uninitialized_error
        self.__dict__["_GetSizeUnit"] = _raise_uninitialized_error
        self.__dict__["_SetSizeUnit"] = _raise_uninitialized_error
        self.__dict__["_GetSize"] = _raise_uninitialized_error
        self.__dict__["_SetSize"] = _raise_uninitialized_error
        self.__dict__["_GetOrigin"] = _raise_uninitialized_error
        self.__dict__["_SetOrigin"] = _raise_uninitialized_error
        self.__dict__["_GetPixelOffset"] = _raise_uninitialized_error
        self.__dict__["_SetPixelOffset"] = _raise_uninitialized_error
        self.__dict__["_GetEyeOffset"] = _raise_uninitialized_error
        self.__dict__["_SetEyeOffset"] = _raise_uninitialized_error
        self.__dict__["_GetRotation"] = _raise_uninitialized_error
        self.__dict__["_SetRotation"] = _raise_uninitialized_error
        self.__dict__["_GetTextureCoordinate"] = _raise_uninitialized_error
        self.__dict__["_SetTextureCoordinate"] = _raise_uninitialized_error
        self.__dict__["_GetWireframe"] = _raise_uninitialized_error
        self.__dict__["_SetWireframe"] = _raise_uninitialized_error
        self.__dict__["_GetPerItemPickingEnabled"] = _raise_uninitialized_error
        self.__dict__["_SetPerItemPickingEnabled"] = _raise_uninitialized_error
        self.__dict__["_GetTextureFilter"] = _raise_uninitialized_error
        self.__dict__["_SetTextureFilter"] = _raise_uninitialized_error
        self.__dict__["_Set"] = _raise_uninitialized_error
        self.__dict__["_SetWithOptionalParameters"] = _raise_uninitialized_error
        self.__dict__["_SetWithOptionalParametersAndRenderPassHint"] = _raise_uninitialized_error
        self.__dict__["_SetCartographic"] = _raise_uninitialized_error
        self.__dict__["_SetCartographicWithOptionalParameters"] = _raise_uninitialized_error
        self.__dict__["_SetCartographicWithOptionalParametersAndRenderPassHint"] = _raise_uninitialized_error
        self.__dict__["_SetPartial"] = _raise_uninitialized_error
        self.__dict__["_SetPartialWithIndicesOrder"] = _raise_uninitialized_error
        self.__dict__["_SetPartialWithOptionalParameters"] = _raise_uninitialized_error
        self.__dict__["_SetPartialWithOptionalParametersIndicesOrderAndRenderPass"] = _raise_uninitialized_error
        self.__dict__["_SetPartialCartographic"] = _raise_uninitialized_error
        self.__dict__["_SetPartialCartographicWithIndicesOrder"] = _raise_uninitialized_error
        self.__dict__["_SetPartialCartographicWithOptionalParameters"] = _raise_uninitialized_error
        self.__dict__["_SetPartialCartographicWithOptionalParametersIndicesOrderAndRenderPass"] = _raise_uninitialized_error
        self.__dict__["_Supported"] = _raise_uninitialized_error
        self.__dict__["_GetClampToPixel"] = _raise_uninitialized_error
        self.__dict__["_SetClampToPixel"] = _raise_uninitialized_error
        self.__dict__["_GetCentralBodyClipped"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBodyClipped"] = _raise_uninitialized_error
        self.__dict__["_AlignToScreen"] = _raise_uninitialized_error
        self.__dict__["_AlignToNorth"] = _raise_uninitialized_error
        self.__dict__["_AlignToAxis"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsMarkerBatchPrimitive._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsMarkerBatchPrimitive from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsMarkerBatchPrimitive = agcom.GUID(IStkGraphicsMarkerBatchPrimitive._uuid)
        vtable_offset_local = IStkGraphicsMarkerBatchPrimitive._vtable_offset - 1
        self.__dict__["_GetSizeSource"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitive, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_GetSortOrder"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitive, vtable_offset_local+2, POINTER(agcom.LONG))
        self.__dict__["_GetSetHint"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitive, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_GetRenderingMethod"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitive, vtable_offset_local+4, POINTER(agcom.LONG))
        self.__dict__["_GetRenderPass"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitive, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetRenderPass"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitive, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_GetBoundingSphereScale"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitive, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetBoundingSphereScale"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitive, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetDistanceDisplayConditionPerMarker"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitive, vtable_offset_local+9, POINTER(agcom.PVOID))
        self.__dict__["_SetDistanceDisplayConditionPerMarker"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitive, vtable_offset_local+10, agcom.PVOID)
        self.__dict__["_GetTexture"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitive, vtable_offset_local+11, POINTER(agcom.PVOID))
        self.__dict__["_SetTexture"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitive, vtable_offset_local+12, agcom.PVOID)
        self.__dict__["_GetSizeUnit"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitive, vtable_offset_local+13, POINTER(agcom.LONG))
        self.__dict__["_SetSizeUnit"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitive, vtable_offset_local+14, agcom.LONG)
        self.__dict__["_GetSize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitive, vtable_offset_local+15, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetSize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitive, vtable_offset_local+16, agcom.SAFEARRAY)
        self.__dict__["_GetOrigin"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitive, vtable_offset_local+17, POINTER(agcom.LONG))
        self.__dict__["_SetOrigin"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitive, vtable_offset_local+18, agcom.LONG)
        self.__dict__["_GetPixelOffset"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitive, vtable_offset_local+19, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetPixelOffset"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitive, vtable_offset_local+20, agcom.SAFEARRAY)
        self.__dict__["_GetEyeOffset"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitive, vtable_offset_local+21, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetEyeOffset"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitive, vtable_offset_local+22, agcom.SAFEARRAY)
        self.__dict__["_GetRotation"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitive, vtable_offset_local+23, POINTER(agcom.DOUBLE))
        self.__dict__["_SetRotation"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitive, vtable_offset_local+24, agcom.DOUBLE)
        self.__dict__["_GetTextureCoordinate"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitive, vtable_offset_local+25, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetTextureCoordinate"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitive, vtable_offset_local+26, agcom.SAFEARRAY)
        self.__dict__["_GetWireframe"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitive, vtable_offset_local+27, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetWireframe"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitive, vtable_offset_local+28, agcom.VARIANT_BOOL)
        self.__dict__["_GetPerItemPickingEnabled"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitive, vtable_offset_local+29, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetPerItemPickingEnabled"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitive, vtable_offset_local+30, agcom.VARIANT_BOOL)
        self.__dict__["_GetTextureFilter"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitive, vtable_offset_local+31, POINTER(agcom.PVOID))
        self.__dict__["_SetTextureFilter"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitive, vtable_offset_local+32, agcom.PVOID)
        self.__dict__["_Set"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitive, vtable_offset_local+33, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetWithOptionalParameters"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitive, vtable_offset_local+34, POINTER(agcom.SAFEARRAY), agcom.PVOID)
        self.__dict__["_SetWithOptionalParametersAndRenderPassHint"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitive, vtable_offset_local+35, POINTER(agcom.SAFEARRAY), agcom.PVOID, agcom.LONG)
        self.__dict__["_SetCartographic"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitive, vtable_offset_local+36, agcom.BSTR, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetCartographicWithOptionalParameters"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitive, vtable_offset_local+37, agcom.BSTR, POINTER(agcom.SAFEARRAY), agcom.PVOID)
        self.__dict__["_SetCartographicWithOptionalParametersAndRenderPassHint"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitive, vtable_offset_local+38, agcom.BSTR, POINTER(agcom.SAFEARRAY), agcom.PVOID, agcom.LONG)
        self.__dict__["_SetPartial"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitive, vtable_offset_local+39, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetPartialWithIndicesOrder"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitive, vtable_offset_local+40, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.LONG)
        self.__dict__["_SetPartialWithOptionalParameters"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitive, vtable_offset_local+41, POINTER(agcom.SAFEARRAY), agcom.PVOID, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetPartialWithOptionalParametersIndicesOrderAndRenderPass"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitive, vtable_offset_local+42, POINTER(agcom.SAFEARRAY), agcom.PVOID, POINTER(agcom.SAFEARRAY), agcom.LONG, agcom.LONG)
        self.__dict__["_SetPartialCartographic"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitive, vtable_offset_local+43, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetPartialCartographicWithIndicesOrder"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitive, vtable_offset_local+44, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.LONG)
        self.__dict__["_SetPartialCartographicWithOptionalParameters"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitive, vtable_offset_local+45, agcom.BSTR, POINTER(agcom.SAFEARRAY), agcom.PVOID, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetPartialCartographicWithOptionalParametersIndicesOrderAndRenderPass"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitive, vtable_offset_local+46, agcom.BSTR, POINTER(agcom.SAFEARRAY), agcom.PVOID, POINTER(agcom.SAFEARRAY), agcom.LONG, agcom.LONG)
        self.__dict__["_Supported"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitive, vtable_offset_local+47, agcom.LONG, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetClampToPixel"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitive, vtable_offset_local+48, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetClampToPixel"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitive, vtable_offset_local+49, agcom.VARIANT_BOOL)
        self.__dict__["_GetCentralBodyClipped"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitive, vtable_offset_local+50, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetCentralBodyClipped"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitive, vtable_offset_local+51, agcom.VARIANT_BOOL)
        self.__dict__["_AlignToScreen"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitive, vtable_offset_local+52, )
        self.__dict__["_AlignToNorth"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitive, vtable_offset_local+53, agcom.BSTR)
        self.__dict__["_AlignToAxis"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitive, vtable_offset_local+54, agcom.BSTR, POINTER(agcom.SAFEARRAY))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsMarkerBatchPrimitive.__dict__ and type(IStkGraphicsMarkerBatchPrimitive.__dict__[attrname]) == property:
            return IStkGraphicsMarkerBatchPrimitive.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsMarkerBatchPrimitive.")
    
    @property
    def SizeSource(self) -> "AgEStkGraphicsMarkerBatchSizeSource":
        """Gets the source used for the size of markers in the batch."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsMarkerBatchSizeSource) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSizeSource"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def SortOrder(self) -> "AgEStkGraphicsMarkerBatchSortOrder":
        """Gets the order in which markers in the marker batch are sorted before rendering."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsMarkerBatchSortOrder) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSortOrder"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def SetHint(self) -> "AgEStkGraphicsSetHint":
        """Gets the primitive's set hint. See the Set Hint Performance Overview for selecting an appropriate value to construct the primitive with."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsSetHint) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSetHint"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def RenderingMethod(self) -> "AgEStkGraphicsMarkerBatchRenderingMethod":
        """Gets the rendering method used to render the marker batch."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsMarkerBatchRenderingMethod) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetRenderingMethod"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def RenderPass(self) -> "AgEStkGraphicsMarkerBatchRenderPass":
        """Gets or sets the pass during which the marker batch is rendered."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsMarkerBatchRenderPass) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetRenderPass"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @RenderPass.setter
    def RenderPass(self, renderPass:"AgEStkGraphicsMarkerBatchRenderPass") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsMarkerBatchRenderPass, renderPass) as arg_renderPass:
            agcls.evaluate_hresult(self.__dict__["_SetRenderPass"](arg_renderPass.COM_val))

    @property
    def BoundingSphereScale(self) -> float:
        """Gets or sets the scale applied to the radius of this primitive's bounding sphere."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBoundingSphereScale"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @BoundingSphereScale.setter
    def BoundingSphereScale(self, boundingSphereScale:float) -> None:
        with agmarshall.DOUBLE_arg(boundingSphereScale) as arg_boundingSphereScale:
            agcls.evaluate_hresult(self.__dict__["_SetBoundingSphereScale"](arg_boundingSphereScale.COM_val))

    @property
    def DistanceDisplayConditionPerMarker(self) -> "IStkGraphicsDistanceDisplayCondition":
        """Gets or sets a distance display condition that is evaluated per marker in the marker batch during rendering. This is different than display condition, which is evaluated once for the entire marker batch..."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDistanceDisplayConditionPerMarker"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @DistanceDisplayConditionPerMarker.setter
    def DistanceDisplayConditionPerMarker(self, distanceDisplayConditionPerMarker:"IStkGraphicsDistanceDisplayCondition") -> None:
        with agmarshall.AgInterface_in_arg(distanceDisplayConditionPerMarker, IStkGraphicsDistanceDisplayCondition) as arg_distanceDisplayConditionPerMarker:
            agcls.evaluate_hresult(self.__dict__["_SetDistanceDisplayConditionPerMarker"](arg_distanceDisplayConditionPerMarker.COM_val))

    @property
    def Texture(self) -> "IStkGraphicsRendererTexture2D":
        """Gets or sets the per-batch texture, which is applied to each marker in the batch."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTexture"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @Texture.setter
    def Texture(self, texture:"IStkGraphicsRendererTexture2D") -> None:
        with agmarshall.AgInterface_in_arg(texture, IStkGraphicsRendererTexture2D) as arg_texture:
            agcls.evaluate_hresult(self.__dict__["_SetTexture"](arg_texture.COM_val))

    @property
    def SizeUnit(self) -> "AgEStkGraphicsMarkerBatchUnit":
        """Gets or sets the unit that each marker's size is defined in."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsMarkerBatchUnit) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSizeUnit"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @SizeUnit.setter
    def SizeUnit(self, sizeUnit:"AgEStkGraphicsMarkerBatchUnit") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsMarkerBatchUnit, sizeUnit) as arg_sizeUnit:
            agcls.evaluate_hresult(self.__dict__["_SetSizeUnit"](arg_sizeUnit.COM_val))

    @property
    def Size(self) -> list:
        """Gets or sets the per-batch size, which is applied to each marker in the batch. The array contains one width followed by one height."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @Size.setter
    def Size(self, size:list) -> None:
        with agmarshall.SAFEARRAY_arg(size) as arg_size:
            agcls.evaluate_hresult(self.__dict__["_SetSize"](arg_size.COM_val))

    @property
    def Origin(self) -> "AgEStkGraphicsOrigin":
        """Gets or sets the per-batch origin, which is applied to each marker in the batch."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsOrigin) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetOrigin"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Origin.setter
    def Origin(self, origin:"AgEStkGraphicsOrigin") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsOrigin, origin) as arg_origin:
            agcls.evaluate_hresult(self.__dict__["_SetOrigin"](arg_origin.COM_val))

    @property
    def PixelOffset(self) -> list:
        """Gets or sets the per-batch pixel offset, which is applied to each marker in the batch. The array contains one x pixel offset followed by one y pixel offset."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPixelOffset"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @PixelOffset.setter
    def PixelOffset(self, pixelOffset:list) -> None:
        with agmarshall.SAFEARRAY_arg(pixelOffset) as arg_pixelOffset:
            agcls.evaluate_hresult(self.__dict__["_SetPixelOffset"](arg_pixelOffset.COM_val))

    @property
    def EyeOffset(self) -> list:
        """Gets or sets the per-batch eye offset, which is applied to each marker in the batch. The array contains the components of the eye offset in the order x, y, z."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetEyeOffset"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @EyeOffset.setter
    def EyeOffset(self, eyeOffset:list) -> None:
        with agmarshall.SAFEARRAY_arg(eyeOffset) as arg_eyeOffset:
            agcls.evaluate_hresult(self.__dict__["_SetEyeOffset"](arg_eyeOffset.COM_val))

    @property
    def Rotation(self) -> float:
        """Gets or sets the per-batch rotation angle which is applied to each marker in the batch."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetRotation"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Rotation.setter
    def Rotation(self, rotation:float) -> None:
        with agmarshall.DOUBLE_arg(rotation) as arg_rotation:
            agcls.evaluate_hresult(self.__dict__["_SetRotation"](arg_rotation.COM_val))

    @property
    def TextureCoordinate(self) -> list:
        """Gets or sets the per-batch texture coordinate, which is applied to each marker in the batch. The array contains the texture coordinates arranged in the order s, t, p, q."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTextureCoordinate"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @TextureCoordinate.setter
    def TextureCoordinate(self, textureCoordinate:list) -> None:
        with agmarshall.SAFEARRAY_arg(textureCoordinate) as arg_textureCoordinate:
            agcls.evaluate_hresult(self.__dict__["_SetTextureCoordinate"](arg_textureCoordinate.COM_val))

    @property
    def Wireframe(self) -> bool:
        """Gets or sets whether the primitive is rendered in wireframe. This is useful for debugging."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetWireframe"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Wireframe.setter
    def Wireframe(self, wireframe:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(wireframe) as arg_wireframe:
            agcls.evaluate_hresult(self.__dict__["_SetWireframe"](arg_wireframe.COM_val))

    @property
    def PerItemPickingEnabled(self) -> bool:
        """Gets or sets whether individual marker indices will be included in the pick results returned from the scene's Pick method. Each marker index that is picked will be returned as a batch primitive index."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPerItemPickingEnabled"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @PerItemPickingEnabled.setter
    def PerItemPickingEnabled(self, perItemPickingEnabled:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(perItemPickingEnabled) as arg_perItemPickingEnabled:
            agcls.evaluate_hresult(self.__dict__["_SetPerItemPickingEnabled"](arg_perItemPickingEnabled.COM_val))

    @property
    def TextureFilter(self) -> "IStkGraphicsTextureFilter2D":
        """Gets or sets the filter used for per-marker or per-batch textures."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTextureFilter"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @TextureFilter.setter
    def TextureFilter(self, textureFilter:"IStkGraphicsTextureFilter2D") -> None:
        with agmarshall.AgInterface_in_arg(textureFilter, IStkGraphicsTextureFilter2D) as arg_textureFilter:
            agcls.evaluate_hresult(self.__dict__["_SetTextureFilter"](arg_textureFilter.COM_val))

    def Set(self, positions:list) -> None:
        """Defines the positions of markers in a marker batch. The markers are rendered in the primitive's reference frame."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions:
            agcls.evaluate_hresult(self.__dict__["_Set"](byref(arg_positions.COM_val)))

    def SetWithOptionalParameters(self, positions:list, optionalParameters:"IStkGraphicsMarkerBatchPrimitiveOptionalParameters") -> None:
        """Defines the positions and optional per-marker parameters of markers in a marker batch. The markers are rendered in the primitive's reference frame."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.AgInterface_in_arg(optionalParameters, IStkGraphicsMarkerBatchPrimitiveOptionalParameters) as arg_optionalParameters:
            agcls.evaluate_hresult(self.__dict__["_SetWithOptionalParameters"](byref(arg_positions.COM_val), arg_optionalParameters.COM_val))

    def SetWithOptionalParametersAndRenderPassHint(self, positions:list, optionalParameters:"IStkGraphicsMarkerBatchPrimitiveOptionalParameters", renderPassHint:"AgEStkGraphicsRenderPassHint") -> None:
        """Defines the positions and optional per-marker parameters of markers in a marker batch. The markers are rendered in the primitive's reference frame. renderPassHint is provided for efficiency."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.AgInterface_in_arg(optionalParameters, IStkGraphicsMarkerBatchPrimitiveOptionalParameters) as arg_optionalParameters, \
             agmarshall.AgEnum_arg(AgEStkGraphicsRenderPassHint, renderPassHint) as arg_renderPassHint:
            agcls.evaluate_hresult(self.__dict__["_SetWithOptionalParametersAndRenderPassHint"](byref(arg_positions.COM_val), arg_optionalParameters.COM_val, arg_renderPassHint.COM_val))

    def SetCartographic(self, centralBody:str, positions:list) -> None:
        """For convenience. Defines the positions of markers in a marker batch using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling Set."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions:
            agcls.evaluate_hresult(self.__dict__["_SetCartographic"](arg_centralBody.COM_val, byref(arg_positions.COM_val)))

    def SetCartographicWithOptionalParameters(self, centralBody:str, positions:list, optionalParameters:"IStkGraphicsMarkerBatchPrimitiveOptionalParameters") -> None:
        """For convenience. Defines the positions and optional per-marker parameters of markers in a marker batch using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling Set."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.AgInterface_in_arg(optionalParameters, IStkGraphicsMarkerBatchPrimitiveOptionalParameters) as arg_optionalParameters:
            agcls.evaluate_hresult(self.__dict__["_SetCartographicWithOptionalParameters"](arg_centralBody.COM_val, byref(arg_positions.COM_val), arg_optionalParameters.COM_val))

    def SetCartographicWithOptionalParametersAndRenderPassHint(self, centralBody:str, positions:list, optionalParameters:"IStkGraphicsMarkerBatchPrimitiveOptionalParameters", renderPassHint:"AgEStkGraphicsRenderPassHint") -> None:
        """For convenience. Defines the positions and optional per-marker parameters of markers in a marker batch using cartographic positions. renderPassHint is provided for efficiency..."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.AgInterface_in_arg(optionalParameters, IStkGraphicsMarkerBatchPrimitiveOptionalParameters) as arg_optionalParameters, \
             agmarshall.AgEnum_arg(AgEStkGraphicsRenderPassHint, renderPassHint) as arg_renderPassHint:
            agcls.evaluate_hresult(self.__dict__["_SetCartographicWithOptionalParametersAndRenderPassHint"](arg_centralBody.COM_val, byref(arg_positions.COM_val), arg_optionalParameters.COM_val, arg_renderPassHint.COM_val))

    def SetPartial(self, positions:list, indices:list) -> None:
        """Updates a subset of marker positions in a marker batch."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices:
            agcls.evaluate_hresult(self.__dict__["_SetPartial"](byref(arg_positions.COM_val), byref(arg_indices.COM_val)))

    def SetPartialWithIndicesOrder(self, positions:list, indices:list, indicesOrderHint:"AgEStkGraphicsIndicesOrderHint") -> None:
        """Updates a subset of marker positions in a marker batch."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices, \
             agmarshall.AgEnum_arg(AgEStkGraphicsIndicesOrderHint, indicesOrderHint) as arg_indicesOrderHint:
            agcls.evaluate_hresult(self.__dict__["_SetPartialWithIndicesOrder"](byref(arg_positions.COM_val), byref(arg_indices.COM_val), arg_indicesOrderHint.COM_val))

    def SetPartialWithOptionalParameters(self, positions:list, optionalParameters:"IStkGraphicsMarkerBatchPrimitiveOptionalParameters", indices:list) -> None:
        """Updates a subset of marker positions and/or per-marker parameters in a marker batch."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.AgInterface_in_arg(optionalParameters, IStkGraphicsMarkerBatchPrimitiveOptionalParameters) as arg_optionalParameters, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices:
            agcls.evaluate_hresult(self.__dict__["_SetPartialWithOptionalParameters"](byref(arg_positions.COM_val), arg_optionalParameters.COM_val, byref(arg_indices.COM_val)))

    def SetPartialWithOptionalParametersIndicesOrderAndRenderPass(self, positions:list, optionalParameters:"IStkGraphicsMarkerBatchPrimitiveOptionalParameters", indices:list, indicesOrderHint:"AgEStkGraphicsIndicesOrderHint", renderPassHint:"AgEStkGraphicsRenderPassHint") -> None:
        """Updates a subset of marker positions and/or per-marker parameters in a marker batch."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.AgInterface_in_arg(optionalParameters, IStkGraphicsMarkerBatchPrimitiveOptionalParameters) as arg_optionalParameters, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices, \
             agmarshall.AgEnum_arg(AgEStkGraphicsIndicesOrderHint, indicesOrderHint) as arg_indicesOrderHint, \
             agmarshall.AgEnum_arg(AgEStkGraphicsRenderPassHint, renderPassHint) as arg_renderPassHint:
            agcls.evaluate_hresult(self.__dict__["_SetPartialWithOptionalParametersIndicesOrderAndRenderPass"](byref(arg_positions.COM_val), arg_optionalParameters.COM_val, byref(arg_indices.COM_val), arg_indicesOrderHint.COM_val, arg_renderPassHint.COM_val))

    def SetPartialCartographic(self, centralBody:str, positions:list, indices:list) -> None:
        """For convenience. Updates a subset of positions in a marker batch using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling SetPartial."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices:
            agcls.evaluate_hresult(self.__dict__["_SetPartialCartographic"](arg_centralBody.COM_val, byref(arg_positions.COM_val), byref(arg_indices.COM_val)))

    def SetPartialCartographicWithIndicesOrder(self, centralBody:str, positions:list, indices:list, indicesOrderHint:"AgEStkGraphicsIndicesOrderHint") -> None:
        """For convenience. Updates a subset of positions in a marker batch using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling SetPartial."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices, \
             agmarshall.AgEnum_arg(AgEStkGraphicsIndicesOrderHint, indicesOrderHint) as arg_indicesOrderHint:
            agcls.evaluate_hresult(self.__dict__["_SetPartialCartographicWithIndicesOrder"](arg_centralBody.COM_val, byref(arg_positions.COM_val), byref(arg_indices.COM_val), arg_indicesOrderHint.COM_val))

    def SetPartialCartographicWithOptionalParameters(self, centralBody:str, positions:list, optionalParameters:"IStkGraphicsMarkerBatchPrimitiveOptionalParameters", indices:list) -> None:
        """For convenience. Updates a subset of positions and/or optional per-marker parameters of markers in a marker batch using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling SetPartial."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.AgInterface_in_arg(optionalParameters, IStkGraphicsMarkerBatchPrimitiveOptionalParameters) as arg_optionalParameters, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices:
            agcls.evaluate_hresult(self.__dict__["_SetPartialCartographicWithOptionalParameters"](arg_centralBody.COM_val, byref(arg_positions.COM_val), arg_optionalParameters.COM_val, byref(arg_indices.COM_val)))

    def SetPartialCartographicWithOptionalParametersIndicesOrderAndRenderPass(self, centralBody:str, positions:list, optionalParameters:"IStkGraphicsMarkerBatchPrimitiveOptionalParameters", indices:list, indicesOrderHint:"AgEStkGraphicsIndicesOrderHint", renderPassHint:"AgEStkGraphicsRenderPassHint") -> None:
        """For convenience. Updates a subset of positions and/or optional per-marker parameters of markers in a marker batch using cartographic positions. renderPassHint is provided for efficiency..."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.AgInterface_in_arg(optionalParameters, IStkGraphicsMarkerBatchPrimitiveOptionalParameters) as arg_optionalParameters, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices, \
             agmarshall.AgEnum_arg(AgEStkGraphicsIndicesOrderHint, indicesOrderHint) as arg_indicesOrderHint, \
             agmarshall.AgEnum_arg(AgEStkGraphicsRenderPassHint, renderPassHint) as arg_renderPassHint:
            agcls.evaluate_hresult(self.__dict__["_SetPartialCartographicWithOptionalParametersIndicesOrderAndRenderPass"](arg_centralBody.COM_val, byref(arg_positions.COM_val), arg_optionalParameters.COM_val, byref(arg_indices.COM_val), arg_indicesOrderHint.COM_val, arg_renderPassHint.COM_val))

    def Supported(self, renderingMethod:"AgEStkGraphicsMarkerBatchRenderingMethod") -> bool:
        """Determines whether or not the video card supports the marker batch primitive with the given renderingMethod."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsMarkerBatchRenderingMethod, renderingMethod) as arg_renderingMethod, \
             agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_Supported"](arg_renderingMethod.COM_val, byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def ClampToPixel(self) -> bool:
        """Gets or sets whether the screen space position of each marker is clamped to a pixel."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetClampToPixel"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @ClampToPixel.setter
    def ClampToPixel(self, clampToPixel:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(clampToPixel) as arg_clampToPixel:
            agcls.evaluate_hresult(self.__dict__["_SetClampToPixel"](arg_clampToPixel.COM_val))

    @property
    def CentralBodyClipped(self) -> bool:
        """Gets or sets whether the markers are clipped by the central body."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyClipped"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @CentralBodyClipped.setter
    def CentralBodyClipped(self, centralBodyClipped:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(centralBodyClipped) as arg_centralBodyClipped:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBodyClipped"](arg_centralBodyClipped.COM_val))

    def AlignToScreen(self) -> None:
        """Sets the up vector of the markers to always be aligned to the up vector of the camera. This is the default alignment."""
        agcls.evaluate_hresult(self.__dict__["_AlignToScreen"]())

    def AlignToNorth(self, centralBody:str) -> None:
        """Sets the up vector of the markers to point towards the north axis of centralBody. It will be aligned with the tangent vector of the surface that points north."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody:
            agcls.evaluate_hresult(self.__dict__["_AlignToNorth"](arg_centralBody.COM_val))

    def AlignToAxis(self, centralBody:str, axis:list) -> None:
        """Sets the up vector of the markers to point towards the axis of centralBody. It will be aligned with the tangent vector of the surface that points towards the axis..."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(axis) as arg_axis:
            agcls.evaluate_hresult(self.__dict__["_AlignToAxis"](arg_centralBody.COM_val, byref(arg_axis.COM_val)))


agcls.AgClassCatalog.add_catalog_entry("{235878c1-62d9-4ce6-85ff-9d82aff701e9}", IStkGraphicsMarkerBatchPrimitive)
agcls.AgTypeNameMap["IStkGraphicsMarkerBatchPrimitive"] = IStkGraphicsMarkerBatchPrimitive

class IStkGraphicsMarkerBatchPrimitiveOptionalParameters(object):
    """Optional per-marker parameters for marker batch primitive that overrides the marker batch's per-batch parameters..."""
    _uuid = "{7303b63e-a1b7-445e-90e0-508a6937de86}"
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_SetTextures"] = _raise_uninitialized_error
        self.__dict__["_SetSizes"] = _raise_uninitialized_error
        self.__dict__["_SetColors"] = _raise_uninitialized_error
        self.__dict__["_SetOrigins"] = _raise_uninitialized_error
        self.__dict__["_SetPixelOffsets"] = _raise_uninitialized_error
        self.__dict__["_SetEyeOffsets"] = _raise_uninitialized_error
        self.__dict__["_SetRotations"] = _raise_uninitialized_error
        self.__dict__["_SetTextureCoordinates"] = _raise_uninitialized_error
        self.__dict__["_SetTimeIntervalDisplayConditions"] = _raise_uninitialized_error
        self.__dict__["_SetDisplays"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsMarkerBatchPrimitiveOptionalParameters._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsMarkerBatchPrimitiveOptionalParameters from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsMarkerBatchPrimitiveOptionalParameters = agcom.GUID(IStkGraphicsMarkerBatchPrimitiveOptionalParameters._uuid)
        vtable_offset_local = IStkGraphicsMarkerBatchPrimitiveOptionalParameters._vtable_offset - 1
        self.__dict__["_SetTextures"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitiveOptionalParameters, vtable_offset_local+1, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetSizes"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitiveOptionalParameters, vtable_offset_local+2, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetColors"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitiveOptionalParameters, vtable_offset_local+3, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetOrigins"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitiveOptionalParameters, vtable_offset_local+4, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetPixelOffsets"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitiveOptionalParameters, vtable_offset_local+5, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetEyeOffsets"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitiveOptionalParameters, vtable_offset_local+6, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetRotations"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitiveOptionalParameters, vtable_offset_local+7, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetTextureCoordinates"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitiveOptionalParameters, vtable_offset_local+8, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetTimeIntervalDisplayConditions"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitiveOptionalParameters, vtable_offset_local+9, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetDisplays"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitiveOptionalParameters, vtable_offset_local+10, POINTER(agcom.SAFEARRAY))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsMarkerBatchPrimitiveOptionalParameters.__dict__ and type(IStkGraphicsMarkerBatchPrimitiveOptionalParameters.__dict__[attrname]) == property:
            return IStkGraphicsMarkerBatchPrimitiveOptionalParameters.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsMarkerBatchPrimitiveOptionalParameters.")
    
    def SetTextures(self, textures:list) -> None:
        """Defines a collection of textures, one for each marker in the batch."""
        with agmarshall.SAFEARRAY_arg(textures) as arg_textures:
            agcls.evaluate_hresult(self.__dict__["_SetTextures"](byref(arg_textures.COM_val)))

    def SetSizes(self, sizes:list) -> None:
        """Defines a collection of sizes, one for each marker in the batch."""
        with agmarshall.SAFEARRAY_arg(sizes) as arg_sizes:
            agcls.evaluate_hresult(self.__dict__["_SetSizes"](byref(arg_sizes.COM_val)))

    def SetColors(self, colors:list) -> None:
        """Defines a collection of colors, one for each marker in the batch."""
        with agmarshall.SAFEARRAY_arg(colors) as arg_colors:
            agcls.evaluate_hresult(self.__dict__["_SetColors"](byref(arg_colors.COM_val)))

    def SetOrigins(self, origins:list) -> None:
        """Defines a collection of origins, one for each marker in the batch."""
        with agmarshall.SAFEARRAY_arg(origins) as arg_origins:
            agcls.evaluate_hresult(self.__dict__["_SetOrigins"](byref(arg_origins.COM_val)))

    def SetPixelOffsets(self, pixelOffsets:list) -> None:
        """Defines a collection of pixel offsets, one for each marker in the batch."""
        with agmarshall.SAFEARRAY_arg(pixelOffsets) as arg_pixelOffsets:
            agcls.evaluate_hresult(self.__dict__["_SetPixelOffsets"](byref(arg_pixelOffsets.COM_val)))

    def SetEyeOffsets(self, eyeOffsets:list) -> None:
        """Defines a collection of eye offsets, one for each marker in the batch."""
        with agmarshall.SAFEARRAY_arg(eyeOffsets) as arg_eyeOffsets:
            agcls.evaluate_hresult(self.__dict__["_SetEyeOffsets"](byref(arg_eyeOffsets.COM_val)))

    def SetRotations(self, rotationAngles:list) -> None:
        """Defines a collection of rotation angles, one for each marker in the batch."""
        with agmarshall.SAFEARRAY_arg(rotationAngles) as arg_rotationAngles:
            agcls.evaluate_hresult(self.__dict__["_SetRotations"](byref(arg_rotationAngles.COM_val)))

    def SetTextureCoordinates(self, textureCoordinates:list) -> None:
        """Defines a collection of texture coordinates, one for each marker in the batch."""
        with agmarshall.SAFEARRAY_arg(textureCoordinates) as arg_textureCoordinates:
            agcls.evaluate_hresult(self.__dict__["_SetTextureCoordinates"](byref(arg_textureCoordinates.COM_val)))

    def SetTimeIntervalDisplayConditions(self, timeIntervals:list) -> None:
        """Defines a collection of time interval display conditions, one for each marker in the batch."""
        with agmarshall.SAFEARRAY_arg(timeIntervals) as arg_timeIntervals:
            agcls.evaluate_hresult(self.__dict__["_SetTimeIntervalDisplayConditions"](byref(arg_timeIntervals.COM_val)))

    def SetDisplays(self, displays:list) -> None:
        """Defines a collection of boolean display flags, one for each marker in the batch."""
        with agmarshall.SAFEARRAY_arg(displays) as arg_displays:
            agcls.evaluate_hresult(self.__dict__["_SetDisplays"](byref(arg_displays.COM_val)))


agcls.AgClassCatalog.add_catalog_entry("{7303b63e-a1b7-445e-90e0-508a6937de86}", IStkGraphicsMarkerBatchPrimitiveOptionalParameters)
agcls.AgTypeNameMap["IStkGraphicsMarkerBatchPrimitiveOptionalParameters"] = IStkGraphicsMarkerBatchPrimitiveOptionalParameters

class IStkGraphicsMaximumCountPathPrimitiveUpdatePolicy(object):
    """path primitive update policy that removes points from remove location when the number of points in the path exceeds maximum count."""
    _uuid = "{fcacfb20-3ffb-46c4-9e07-495b1446c52b}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetMaximumCount"] = _raise_uninitialized_error
        self.__dict__["_SetMaximumCount"] = _raise_uninitialized_error
        self.__dict__["_GetRemoveLocation"] = _raise_uninitialized_error
        self.__dict__["_SetRemoveLocation"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsMaximumCountPathPrimitiveUpdatePolicy._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsMaximumCountPathPrimitiveUpdatePolicy from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsMaximumCountPathPrimitiveUpdatePolicy = agcom.GUID(IStkGraphicsMaximumCountPathPrimitiveUpdatePolicy._uuid)
        vtable_offset_local = IStkGraphicsMaximumCountPathPrimitiveUpdatePolicy._vtable_offset - 1
        self.__dict__["_GetMaximumCount"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMaximumCountPathPrimitiveUpdatePolicy, vtable_offset_local+1, POINTER(agcom.INT))
        self.__dict__["_SetMaximumCount"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMaximumCountPathPrimitiveUpdatePolicy, vtable_offset_local+2, agcom.INT)
        self.__dict__["_GetRemoveLocation"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMaximumCountPathPrimitiveUpdatePolicy, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetRemoveLocation"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMaximumCountPathPrimitiveUpdatePolicy, vtable_offset_local+4, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsMaximumCountPathPrimitiveUpdatePolicy.__dict__ and type(IStkGraphicsMaximumCountPathPrimitiveUpdatePolicy.__dict__[attrname]) == property:
            return IStkGraphicsMaximumCountPathPrimitiveUpdatePolicy.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsMaximumCountPathPrimitiveUpdatePolicy.")
    
    @property
    def MaximumCount(self) -> int:
        """Gets or sets the maximum number of points in the path."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaximumCount"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @MaximumCount.setter
    def MaximumCount(self, maximumCount:int) -> None:
        with agmarshall.INT_arg(maximumCount) as arg_maximumCount:
            agcls.evaluate_hresult(self.__dict__["_SetMaximumCount"](arg_maximumCount.COM_val))

    @property
    def RemoveLocation(self) -> "AgEStkGraphicsPathPrimitiveRemoveLocation":
        """Gets or sets where the positions on the path are removed from."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsPathPrimitiveRemoveLocation) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetRemoveLocation"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @RemoveLocation.setter
    def RemoveLocation(self, removeLocation:"AgEStkGraphicsPathPrimitiveRemoveLocation") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsPathPrimitiveRemoveLocation, removeLocation) as arg_removeLocation:
            agcls.evaluate_hresult(self.__dict__["_SetRemoveLocation"](arg_removeLocation.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{fcacfb20-3ffb-46c4-9e07-495b1446c52b}", IStkGraphicsMaximumCountPathPrimitiveUpdatePolicy)
agcls.AgTypeNameMap["IStkGraphicsMaximumCountPathPrimitiveUpdatePolicy"] = IStkGraphicsMaximumCountPathPrimitiveUpdatePolicy

class IStkGraphicsModelArticulation(object):
    """A model articulation identifies geometry on the model and is a collection of transformations that can be applied to that geometry."""
    _uuid = "{4554a375-123b-4a39-b727-3e9131879196}"
    _num_methods = 7
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetName"] = _raise_uninitialized_error
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        self.__dict__["_Item"] = _raise_uninitialized_error
        self.__dict__["_GetItemByString"] = _raise_uninitialized_error
        self.__dict__["_GetByName"] = _raise_uninitialized_error
        self.__dict__["_Contains"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsModelArticulation._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsModelArticulation from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsModelArticulation = agcom.GUID(IStkGraphicsModelArticulation._uuid)
        vtable_offset_local = IStkGraphicsModelArticulation._vtable_offset - 1
        self.__dict__["_GetName"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsModelArticulation, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsModelArticulation, vtable_offset_local+2, POINTER(agcom.INT))
        self.__dict__["_Item"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsModelArticulation, vtable_offset_local+3, agcom.INT, POINTER(agcom.PVOID))
        self.__dict__["_GetItemByString"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsModelArticulation, vtable_offset_local+4, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_GetByName"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsModelArticulation, vtable_offset_local+5, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_Contains"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsModelArticulation, vtable_offset_local+6, agcom.BSTR, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsModelArticulation, vtable_offset_local+7, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsModelArticulation.__dict__ and type(IStkGraphicsModelArticulation.__dict__[attrname]) == property:
            return IStkGraphicsModelArticulation.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsModelArticulation.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> "IStkGraphicsModelTransformation":
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    
    @property
    def Name(self) -> str:
        """Gets the name of the articulation."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetName"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Count(self) -> int:
        """Gets the number of transformations in the collection."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def Item(self, index:int) -> "IStkGraphicsModelTransformation":
        """Gets the transformation at the given index. The index is zero-based."""
        with agmarshall.INT_arg(index) as arg_index, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Item"](arg_index.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def GetItemByString(self, name:str) -> "IStkGraphicsModelTransformation":
        """Gets a transformation by name."""
        with agmarshall.BSTR_arg(name) as arg_name, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetItemByString"](arg_name.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def GetByName(self, name:str) -> "IStkGraphicsModelTransformation":
        """Gets a transformation by name."""
        with agmarshall.BSTR_arg(name) as arg_name, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetByName"](arg_name.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def Contains(self, name:str) -> bool:
        """Returns true if the collection contains the transformation."""
        with agmarshall.BSTR_arg(name) as arg_name, \
             agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_Contains"](arg_name.COM_val, byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        """Returns the enumerator for this collection."""
        with agmarshall.IEnumVARIANT_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{4554a375-123b-4a39-b727-3e9131879196}", IStkGraphicsModelArticulation)
agcls.AgTypeNameMap["IStkGraphicsModelArticulation"] = IStkGraphicsModelArticulation

class IStkGraphicsModelArticulationCollection(object):
    """A collection containing a model primitive's available articulations. A model articulation identifies geometry on the model and is a collection of transformations that can be applied to that geometry."""
    _uuid = "{cf6e3054-4d92-42f8-ac4d-e43bfd93d23d}"
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        self.__dict__["_Item"] = _raise_uninitialized_error
        self.__dict__["_GetItemByString"] = _raise_uninitialized_error
        self.__dict__["_GetByName"] = _raise_uninitialized_error
        self.__dict__["_Contains"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsModelArticulationCollection._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsModelArticulationCollection from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsModelArticulationCollection = agcom.GUID(IStkGraphicsModelArticulationCollection._uuid)
        vtable_offset_local = IStkGraphicsModelArticulationCollection._vtable_offset - 1
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsModelArticulationCollection, vtable_offset_local+1, POINTER(agcom.INT))
        self.__dict__["_Item"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsModelArticulationCollection, vtable_offset_local+2, agcom.INT, POINTER(agcom.PVOID))
        self.__dict__["_GetItemByString"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsModelArticulationCollection, vtable_offset_local+3, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_GetByName"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsModelArticulationCollection, vtable_offset_local+4, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_Contains"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsModelArticulationCollection, vtable_offset_local+5, agcom.BSTR, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsModelArticulationCollection, vtable_offset_local+6, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsModelArticulationCollection.__dict__ and type(IStkGraphicsModelArticulationCollection.__dict__[attrname]) == property:
            return IStkGraphicsModelArticulationCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsModelArticulationCollection.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> "IStkGraphicsModelArticulation":
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    
    @property
    def Count(self) -> int:
        """Gets the number of articulations in the collection."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def Item(self, index:int) -> "IStkGraphicsModelArticulation":
        """Gets the articulation at the given index. The index is zero-based."""
        with agmarshall.INT_arg(index) as arg_index, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Item"](arg_index.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def GetItemByString(self, name:str) -> "IStkGraphicsModelArticulation":
        """Gets an articulation by name."""
        with agmarshall.BSTR_arg(name) as arg_name, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetItemByString"](arg_name.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def GetByName(self, name:str) -> "IStkGraphicsModelArticulation":
        """Gets an articulation by name."""
        with agmarshall.BSTR_arg(name) as arg_name, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetByName"](arg_name.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def Contains(self, name:str) -> bool:
        """Returns true if the collection contains the articulation."""
        with agmarshall.BSTR_arg(name) as arg_name, \
             agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_Contains"](arg_name.COM_val, byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        """Returns the enumerator for this collection."""
        with agmarshall.IEnumVARIANT_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{cf6e3054-4d92-42f8-ac4d-e43bfd93d23d}", IStkGraphicsModelArticulationCollection)
agcls.AgTypeNameMap["IStkGraphicsModelArticulationCollection"] = IStkGraphicsModelArticulationCollection

class IStkGraphicsModelPrimitive(object):
    """The model primitive loads and renders <a href='http://www.collada.org/'>COLLADA</a> (DAE) and AGI <a href='https://support.agi.com/3d-models'>MDL</a> (MDL) models."""
    _uuid = "{67a2ad57-e9b2-4dc9-b509-62cbebc405ca}"
    _num_methods = 11
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetUriAsString"] = _raise_uninitialized_error
        self.__dict__["_GetScale"] = _raise_uninitialized_error
        self.__dict__["_SetScale"] = _raise_uninitialized_error
        self.__dict__["_GetPosition"] = _raise_uninitialized_error
        self.__dict__["_SetPosition"] = _raise_uninitialized_error
        self.__dict__["_GetOrientation"] = _raise_uninitialized_error
        self.__dict__["_SetOrientation"] = _raise_uninitialized_error
        self.__dict__["_GetArticulations"] = _raise_uninitialized_error
        self.__dict__["_LoadWithStringUri"] = _raise_uninitialized_error
        self.__dict__["_LoadWithStringUriAndUpAxis"] = _raise_uninitialized_error
        self.__dict__["_SetPositionCartographic"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsModelPrimitive._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsModelPrimitive from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsModelPrimitive = agcom.GUID(IStkGraphicsModelPrimitive._uuid)
        vtable_offset_local = IStkGraphicsModelPrimitive._vtable_offset - 1
        self.__dict__["_GetUriAsString"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsModelPrimitive, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_GetScale"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsModelPrimitive, vtable_offset_local+2, POINTER(agcom.DOUBLE))
        self.__dict__["_SetScale"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsModelPrimitive, vtable_offset_local+3, agcom.DOUBLE)
        self.__dict__["_GetPosition"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsModelPrimitive, vtable_offset_local+4, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetPosition"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsModelPrimitive, vtable_offset_local+5, agcom.SAFEARRAY)
        self.__dict__["_GetOrientation"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsModelPrimitive, vtable_offset_local+6, POINTER(agcom.PVOID))
        self.__dict__["_SetOrientation"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsModelPrimitive, vtable_offset_local+7, agcom.PVOID)
        self.__dict__["_GetArticulations"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsModelPrimitive, vtable_offset_local+8, POINTER(agcom.PVOID))
        self.__dict__["_LoadWithStringUri"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsModelPrimitive, vtable_offset_local+9, agcom.BSTR)
        self.__dict__["_LoadWithStringUriAndUpAxis"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsModelPrimitive, vtable_offset_local+10, agcom.BSTR, agcom.LONG)
        self.__dict__["_SetPositionCartographic"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsModelPrimitive, vtable_offset_local+11, agcom.BSTR, POINTER(agcom.SAFEARRAY))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsModelPrimitive.__dict__ and type(IStkGraphicsModelPrimitive.__dict__[attrname]) == property:
            return IStkGraphicsModelPrimitive.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsModelPrimitive.")
    
    @property
    def UriAsString(self) -> str:
        """Gets the URI of the file used to load the file."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetUriAsString"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Scale(self) -> float:
        """Gets or sets the linear scale used to increase or decrease the size of the rendered model."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetScale"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Scale.setter
    def Scale(self, scale:float) -> None:
        with agmarshall.DOUBLE_arg(scale) as arg_scale:
            agcls.evaluate_hresult(self.__dict__["_SetScale"](arg_scale.COM_val))

    @property
    def Position(self) -> list:
        """Gets or sets the position of the model. The position is defined in the model's reference frame. The array contains the components of the position in the order x, y, z."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPosition"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @Position.setter
    def Position(self, position:list) -> None:
        with agmarshall.SAFEARRAY_arg(position) as arg_position:
            agcls.evaluate_hresult(self.__dict__["_SetPosition"](arg_position.COM_val))

    @property
    def Orientation(self) -> "IOrientation":
        """Gets or sets the model's orientation. The quaternion is a rotation from the model's local axes to the axes of the model's reference frame."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetOrientation"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @Orientation.setter
    def Orientation(self, orientation:"IOrientation") -> None:
        with agmarshall.AgInterface_in_arg(orientation, IOrientation) as arg_orientation:
            agcls.evaluate_hresult(self.__dict__["_SetOrientation"](arg_orientation.COM_val))

    @property
    def Articulations(self) -> "IStkGraphicsModelArticulationCollection":
        """Gets the model's articulations. Articulations identify geometry and contain transformations for manipulating that geometry."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetArticulations"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def LoadWithStringUri(self, uri:str) -> None:
        """For convenience. Loads a <a href='http://www.collada.org/'>COLLADA</a> (DAE) or AGI <a href='https://support.agi.com/3d-models'>MDL</a> (MDL) model using a file path."""
        with agmarshall.BSTR_arg(uri) as arg_uri:
            agcls.evaluate_hresult(self.__dict__["_LoadWithStringUri"](arg_uri.COM_val))

    def LoadWithStringUriAndUpAxis(self, uri:str, upAxis:"AgEStkGraphicsModelUpAxis") -> None:
        """For convenience. Loads a <a href='http://www.collada.org/'>COLLADA</a> (DAE) or AGI <a href='https://support.agi.com/3d-models'>MDL</a> (MDL) model using a file path."""
        with agmarshall.BSTR_arg(uri) as arg_uri, \
             agmarshall.AgEnum_arg(AgEStkGraphicsModelUpAxis, upAxis) as arg_upAxis:
            agcls.evaluate_hresult(self.__dict__["_LoadWithStringUriAndUpAxis"](arg_uri.COM_val, arg_upAxis.COM_val))

    def SetPositionCartographic(self, centralBody:str, position:list) -> None:
        """For convenience. Sets the cartographic position of the model. This also sets position."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(position) as arg_position:
            agcls.evaluate_hresult(self.__dict__["_SetPositionCartographic"](arg_centralBody.COM_val, byref(arg_position.COM_val)))


agcls.AgClassCatalog.add_catalog_entry("{67a2ad57-e9b2-4dc9-b509-62cbebc405ca}", IStkGraphicsModelPrimitive)
agcls.AgTypeNameMap["IStkGraphicsModelPrimitive"] = IStkGraphicsModelPrimitive

class IStkGraphicsModelTransformation(object):
    """A model transformation defines a transformation that is applied to geometry on a model primitive. That geometry is identified by the model articulation which contains the transformation..."""
    _uuid = "{c58f7fc4-2f63-494d-a461-2c385a53b9a2}"
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCurrentValue"] = _raise_uninitialized_error
        self.__dict__["_SetCurrentValue"] = _raise_uninitialized_error
        self.__dict__["_GetMinimumValue"] = _raise_uninitialized_error
        self.__dict__["_GetMaximumValue"] = _raise_uninitialized_error
        self.__dict__["_GetDefaultValue"] = _raise_uninitialized_error
        self.__dict__["_GetRange"] = _raise_uninitialized_error
        self.__dict__["_GetName"] = _raise_uninitialized_error
        self.__dict__["_GetType"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsModelTransformation._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsModelTransformation from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsModelTransformation = agcom.GUID(IStkGraphicsModelTransformation._uuid)
        vtable_offset_local = IStkGraphicsModelTransformation._vtable_offset - 1
        self.__dict__["_GetCurrentValue"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsModelTransformation, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetCurrentValue"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsModelTransformation, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetMinimumValue"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsModelTransformation, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_GetMaximumValue"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsModelTransformation, vtable_offset_local+4, POINTER(agcom.DOUBLE))
        self.__dict__["_GetDefaultValue"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsModelTransformation, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_GetRange"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsModelTransformation, vtable_offset_local+6, POINTER(agcom.DOUBLE))
        self.__dict__["_GetName"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsModelTransformation, vtable_offset_local+7, POINTER(agcom.BSTR))
        self.__dict__["_GetType"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsModelTransformation, vtable_offset_local+8, POINTER(agcom.LONG))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsModelTransformation.__dict__ and type(IStkGraphicsModelTransformation.__dict__[attrname]) == property:
            return IStkGraphicsModelTransformation.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsModelTransformation.")
    
    @property
    def CurrentValue(self) -> float:
        """Gets or sets the current value of the transformation. The current value of the transformation will be reflected in the geometry of the model primitive that it is associated with."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCurrentValue"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @CurrentValue.setter
    def CurrentValue(self, currentValue:float) -> None:
        with agmarshall.DOUBLE_arg(currentValue) as arg_currentValue:
            agcls.evaluate_hresult(self.__dict__["_SetCurrentValue"](arg_currentValue.COM_val))

    @property
    def MinimumValue(self) -> float:
        """Gets the minimum value of the transformation."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinimumValue"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def MaximumValue(self) -> float:
        """Gets the maximum value of the transformation."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaximumValue"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def DefaultValue(self) -> float:
        """Gets the default value of the transformation. The current value property of the transformation will have this value when the model primitive is initialized."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDefaultValue"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Range(self) -> float:
        """Gets the value range of the transformation. Equivalent to the difference of the maximum value and minimum value properties."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetRange"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Name(self) -> str:
        """Gets the name of the transformation."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetName"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Type(self) -> "AgEStkGraphicsModelTransformationType":
        """Gets the model transformation type associated with the transformation."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsModelTransformationType) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetType"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{c58f7fc4-2f63-494d-a461-2c385a53b9a2}", IStkGraphicsModelTransformation)
agcls.AgTypeNameMap["IStkGraphicsModelTransformation"] = IStkGraphicsModelTransformation

class IStkGraphicsOverlay(object):
    """A visible element drawn in screen space. Overlays are useful for floating logos, heads up displays, and integrating user interfaces into the 3D window."""
    _uuid = "{b7007235-5a52-450b-83af-1e8080d3b0be}"
    _num_methods = 76
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetPosition"] = _raise_uninitialized_error
        self.__dict__["_SetPosition"] = _raise_uninitialized_error
        self.__dict__["_GetPinningPosition"] = _raise_uninitialized_error
        self.__dict__["_SetPinningPosition"] = _raise_uninitialized_error
        self.__dict__["_GetX"] = _raise_uninitialized_error
        self.__dict__["_SetX"] = _raise_uninitialized_error
        self.__dict__["_GetXUnit"] = _raise_uninitialized_error
        self.__dict__["_SetXUnit"] = _raise_uninitialized_error
        self.__dict__["_GetY"] = _raise_uninitialized_error
        self.__dict__["_SetY"] = _raise_uninitialized_error
        self.__dict__["_GetYUnit"] = _raise_uninitialized_error
        self.__dict__["_SetYUnit"] = _raise_uninitialized_error
        self.__dict__["_GetSize"] = _raise_uninitialized_error
        self.__dict__["_SetSize"] = _raise_uninitialized_error
        self.__dict__["_GetWidth"] = _raise_uninitialized_error
        self.__dict__["_SetWidth"] = _raise_uninitialized_error
        self.__dict__["_GetWidthUnit"] = _raise_uninitialized_error
        self.__dict__["_SetWidthUnit"] = _raise_uninitialized_error
        self.__dict__["_GetHeight"] = _raise_uninitialized_error
        self.__dict__["_SetHeight"] = _raise_uninitialized_error
        self.__dict__["_GetHeightUnit"] = _raise_uninitialized_error
        self.__dict__["_SetHeightUnit"] = _raise_uninitialized_error
        self.__dict__["_GetMinimumSize"] = _raise_uninitialized_error
        self.__dict__["_SetMinimumSize"] = _raise_uninitialized_error
        self.__dict__["_GetMaximumSize"] = _raise_uninitialized_error
        self.__dict__["_SetMaximumSize"] = _raise_uninitialized_error
        self.__dict__["_GetBounds"] = _raise_uninitialized_error
        self.__dict__["_GetBorderColor"] = _raise_uninitialized_error
        self.__dict__["_SetBorderColor"] = _raise_uninitialized_error
        self.__dict__["_GetBorderSize"] = _raise_uninitialized_error
        self.__dict__["_SetBorderSize"] = _raise_uninitialized_error
        self.__dict__["_GetBorderTranslucency"] = _raise_uninitialized_error
        self.__dict__["_SetBorderTranslucency"] = _raise_uninitialized_error
        self.__dict__["_GetTranslationX"] = _raise_uninitialized_error
        self.__dict__["_SetTranslationX"] = _raise_uninitialized_error
        self.__dict__["_GetTranslationY"] = _raise_uninitialized_error
        self.__dict__["_SetTranslationY"] = _raise_uninitialized_error
        self.__dict__["_GetRotationAngle"] = _raise_uninitialized_error
        self.__dict__["_SetRotationAngle"] = _raise_uninitialized_error
        self.__dict__["_GetRotationPoint"] = _raise_uninitialized_error
        self.__dict__["_SetRotationPoint"] = _raise_uninitialized_error
        self.__dict__["_GetScale"] = _raise_uninitialized_error
        self.__dict__["_SetScale"] = _raise_uninitialized_error
        self.__dict__["_GetFlipX"] = _raise_uninitialized_error
        self.__dict__["_SetFlipX"] = _raise_uninitialized_error
        self.__dict__["_GetFlipY"] = _raise_uninitialized_error
        self.__dict__["_SetFlipY"] = _raise_uninitialized_error
        self.__dict__["_GetOrigin"] = _raise_uninitialized_error
        self.__dict__["_SetOrigin"] = _raise_uninitialized_error
        self.__dict__["_GetPinningOrigin"] = _raise_uninitialized_error
        self.__dict__["_SetPinningOrigin"] = _raise_uninitialized_error
        self.__dict__["_GetParent"] = _raise_uninitialized_error
        self.__dict__["_GetTranslucency"] = _raise_uninitialized_error
        self.__dict__["_SetTranslucency"] = _raise_uninitialized_error
        self.__dict__["_GetColor"] = _raise_uninitialized_error
        self.__dict__["_SetColor"] = _raise_uninitialized_error
        self.__dict__["_GetPickingEnabled"] = _raise_uninitialized_error
        self.__dict__["_SetPickingEnabled"] = _raise_uninitialized_error
        self.__dict__["_GetClipToParent"] = _raise_uninitialized_error
        self.__dict__["_SetClipToParent"] = _raise_uninitialized_error
        self.__dict__["_GetDisplay"] = _raise_uninitialized_error
        self.__dict__["_SetDisplay"] = _raise_uninitialized_error
        self.__dict__["_GetControlPosition"] = _raise_uninitialized_error
        self.__dict__["_GetControlSize"] = _raise_uninitialized_error
        self.__dict__["_GetControlBounds"] = _raise_uninitialized_error
        self.__dict__["_GetDisplayCondition"] = _raise_uninitialized_error
        self.__dict__["_SetDisplayCondition"] = _raise_uninitialized_error
        self.__dict__["_GetOverlays"] = _raise_uninitialized_error
        self.__dict__["_GetPadding"] = _raise_uninitialized_error
        self.__dict__["_SetPadding"] = _raise_uninitialized_error
        self.__dict__["_BringToFront"] = _raise_uninitialized_error
        self.__dict__["_SendToBack"] = _raise_uninitialized_error
        self.__dict__["_OverlayToControl"] = _raise_uninitialized_error
        self.__dict__["_ControlToOverlay"] = _raise_uninitialized_error
        self.__dict__["_GetTag"] = _raise_uninitialized_error
        self.__dict__["_SetTag"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsOverlay._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsOverlay from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsOverlay = agcom.GUID(IStkGraphicsOverlay._uuid)
        vtable_offset_local = IStkGraphicsOverlay._vtable_offset - 1
        self.__dict__["_GetPosition"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+1, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetPosition"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+2, agcom.SAFEARRAY)
        self.__dict__["_GetPinningPosition"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+3, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetPinningPosition"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+4, agcom.SAFEARRAY)
        self.__dict__["_GetX"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetX"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetXUnit"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+7, POINTER(agcom.LONG))
        self.__dict__["_SetXUnit"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+8, agcom.LONG)
        self.__dict__["_GetY"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetY"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+10, agcom.DOUBLE)
        self.__dict__["_GetYUnit"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+11, POINTER(agcom.LONG))
        self.__dict__["_SetYUnit"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+12, agcom.LONG)
        self.__dict__["_GetSize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+13, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetSize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+14, agcom.SAFEARRAY)
        self.__dict__["_GetWidth"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+15, POINTER(agcom.DOUBLE))
        self.__dict__["_SetWidth"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+16, agcom.DOUBLE)
        self.__dict__["_GetWidthUnit"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+17, POINTER(agcom.LONG))
        self.__dict__["_SetWidthUnit"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+18, agcom.LONG)
        self.__dict__["_GetHeight"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+19, POINTER(agcom.DOUBLE))
        self.__dict__["_SetHeight"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+20, agcom.DOUBLE)
        self.__dict__["_GetHeightUnit"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+21, POINTER(agcom.LONG))
        self.__dict__["_SetHeightUnit"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+22, agcom.LONG)
        self.__dict__["_GetMinimumSize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+23, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetMinimumSize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+24, agcom.SAFEARRAY)
        self.__dict__["_GetMaximumSize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+25, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetMaximumSize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+26, agcom.SAFEARRAY)
        self.__dict__["_GetBounds"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+27, POINTER(agcom.SAFEARRAY))
        self.__dict__["_GetBorderColor"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+28, POINTER(agcom.OLE_COLOR))
        self.__dict__["_SetBorderColor"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+29, agcom.OLE_COLOR)
        self.__dict__["_GetBorderSize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+30, POINTER(agcom.INT))
        self.__dict__["_SetBorderSize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+31, agcom.INT)
        self.__dict__["_GetBorderTranslucency"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+32, POINTER(agcom.FLOAT))
        self.__dict__["_SetBorderTranslucency"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+33, agcom.FLOAT)
        self.__dict__["_GetTranslationX"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+34, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTranslationX"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+35, agcom.DOUBLE)
        self.__dict__["_GetTranslationY"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+36, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTranslationY"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+37, agcom.DOUBLE)
        self.__dict__["_GetRotationAngle"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+38, POINTER(agcom.DOUBLE))
        self.__dict__["_SetRotationAngle"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+39, agcom.DOUBLE)
        self.__dict__["_GetRotationPoint"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+40, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetRotationPoint"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+41, agcom.SAFEARRAY)
        self.__dict__["_GetScale"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+42, POINTER(agcom.DOUBLE))
        self.__dict__["_SetScale"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+43, agcom.DOUBLE)
        self.__dict__["_GetFlipX"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+44, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetFlipX"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+45, agcom.VARIANT_BOOL)
        self.__dict__["_GetFlipY"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+46, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetFlipY"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+47, agcom.VARIANT_BOOL)
        self.__dict__["_GetOrigin"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+48, POINTER(agcom.LONG))
        self.__dict__["_SetOrigin"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+49, agcom.LONG)
        self.__dict__["_GetPinningOrigin"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+50, POINTER(agcom.LONG))
        self.__dict__["_SetPinningOrigin"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+51, agcom.LONG)
        self.__dict__["_GetParent"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+52, POINTER(agcom.PVOID))
        self.__dict__["_GetTranslucency"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+53, POINTER(agcom.FLOAT))
        self.__dict__["_SetTranslucency"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+54, agcom.FLOAT)
        self.__dict__["_GetColor"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+55, POINTER(agcom.OLE_COLOR))
        self.__dict__["_SetColor"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+56, agcom.OLE_COLOR)
        self.__dict__["_GetPickingEnabled"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+57, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetPickingEnabled"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+58, agcom.VARIANT_BOOL)
        self.__dict__["_GetClipToParent"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+59, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetClipToParent"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+60, agcom.VARIANT_BOOL)
        self.__dict__["_GetDisplay"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+61, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetDisplay"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+62, agcom.VARIANT_BOOL)
        self.__dict__["_GetControlPosition"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+63, POINTER(agcom.SAFEARRAY))
        self.__dict__["_GetControlSize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+64, POINTER(agcom.SAFEARRAY))
        self.__dict__["_GetControlBounds"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+65, POINTER(agcom.SAFEARRAY))
        self.__dict__["_GetDisplayCondition"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+66, POINTER(agcom.PVOID))
        self.__dict__["_SetDisplayCondition"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+67, agcom.PVOID)
        self.__dict__["_GetOverlays"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+68, POINTER(agcom.PVOID))
        self.__dict__["_GetPadding"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+69, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetPadding"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+70, agcom.SAFEARRAY)
        self.__dict__["_BringToFront"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+71, )
        self.__dict__["_SendToBack"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+72, )
        self.__dict__["_OverlayToControl"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+73, agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.SAFEARRAY))
        self.__dict__["_ControlToOverlay"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+74, agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.SAFEARRAY))
        self.__dict__["_GetTag"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+75, POINTER(agcom.VARIANT))
        self.__dict__["_SetTag"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsOverlay, vtable_offset_local+76, agcom.VARIANT)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsOverlay.__dict__ and type(IStkGraphicsOverlay.__dict__[attrname]) == property:
            return IStkGraphicsOverlay.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsOverlay.")
    
    @property
    def Position(self) -> list:
        """Gets or sets the position of the overlay relative to its parent. The array represents the position of the overlay and has a size of 4. The elements are in the order x position, y position, x screen overlay unit, y screen overlay unit."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPosition"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @Position.setter
    def Position(self, position:list) -> None:
        with agmarshall.SAFEARRAY_arg(position) as arg_position:
            agcls.evaluate_hresult(self.__dict__["_SetPosition"](arg_position.COM_val))

    @property
    def PinningPosition(self) -> list:
        """Gets or sets the pinning position of the overlay, relative to the overlay, which determines the point on the overlay that corresponds to the position property. The array represents the pinning position of the overlay and has a size of 4..."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPinningPosition"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @PinningPosition.setter
    def PinningPosition(self, pinningPosition:list) -> None:
        with agmarshall.SAFEARRAY_arg(pinningPosition) as arg_pinningPosition:
            agcls.evaluate_hresult(self.__dict__["_SetPinningPosition"](arg_pinningPosition.COM_val))

    @property
    def X(self) -> float:
        """Gets or sets the X position of the overlay relative to its parent. The unit in which the position is defined is specified by the x unit property. The position is measured horizontally from the origin, which is, by default, the lower-left corner."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetX"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @X.setter
    def X(self, x:float) -> None:
        with agmarshall.DOUBLE_arg(x) as arg_x:
            agcls.evaluate_hresult(self.__dict__["_SetX"](arg_x.COM_val))

    @property
    def XUnit(self) -> "AgEStkGraphicsScreenOverlayUnit":
        """Gets or sets the unit of the x property."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsScreenOverlayUnit) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetXUnit"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @XUnit.setter
    def XUnit(self, xUnit:"AgEStkGraphicsScreenOverlayUnit") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsScreenOverlayUnit, xUnit) as arg_xUnit:
            agcls.evaluate_hresult(self.__dict__["_SetXUnit"](arg_xUnit.COM_val))

    @property
    def Y(self) -> float:
        """Gets or sets the Y position of the overlay relative to its parent. The unit in which the position is defined is specified by the y unit property. The position is measured vertically from the origin, which is, by default, the lower-left corner."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetY"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Y.setter
    def Y(self, y:float) -> None:
        with agmarshall.DOUBLE_arg(y) as arg_y:
            agcls.evaluate_hresult(self.__dict__["_SetY"](arg_y.COM_val))

    @property
    def YUnit(self) -> "AgEStkGraphicsScreenOverlayUnit":
        """Gets or sets the unit of the y property."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsScreenOverlayUnit) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetYUnit"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @YUnit.setter
    def YUnit(self, yUnit:"AgEStkGraphicsScreenOverlayUnit") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsScreenOverlayUnit, yUnit) as arg_yUnit:
            agcls.evaluate_hresult(self.__dict__["_SetYUnit"](arg_yUnit.COM_val))

    @property
    def Size(self) -> list:
        """Gets or sets the size of the overlay. The array elements represent the size of the overlay in the order width, height, width screen overlay unit, height screen overlay unit."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @Size.setter
    def Size(self, size:list) -> None:
        with agmarshall.SAFEARRAY_arg(size) as arg_size:
            agcls.evaluate_hresult(self.__dict__["_SetSize"](arg_size.COM_val))

    @property
    def Width(self) -> float:
        """Gets or sets the width of the overlay. The unit in which the width is defined is specified by the width unit property."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetWidth"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Width.setter
    def Width(self, width:float) -> None:
        with agmarshall.DOUBLE_arg(width) as arg_width:
            agcls.evaluate_hresult(self.__dict__["_SetWidth"](arg_width.COM_val))

    @property
    def WidthUnit(self) -> "AgEStkGraphicsScreenOverlayUnit":
        """Gets or sets the unit of the width property."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsScreenOverlayUnit) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetWidthUnit"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @WidthUnit.setter
    def WidthUnit(self, widthUnit:"AgEStkGraphicsScreenOverlayUnit") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsScreenOverlayUnit, widthUnit) as arg_widthUnit:
            agcls.evaluate_hresult(self.__dict__["_SetWidthUnit"](arg_widthUnit.COM_val))

    @property
    def Height(self) -> float:
        """Gets or sets the height of the overlay. The unit in which the height is defined is specified by the height unit property."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetHeight"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Height.setter
    def Height(self, height:float) -> None:
        with agmarshall.DOUBLE_arg(height) as arg_height:
            agcls.evaluate_hresult(self.__dict__["_SetHeight"](arg_height.COM_val))

    @property
    def HeightUnit(self) -> "AgEStkGraphicsScreenOverlayUnit":
        """Gets or sets the unit of the height property."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsScreenOverlayUnit) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetHeightUnit"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @HeightUnit.setter
    def HeightUnit(self, heightUnit:"AgEStkGraphicsScreenOverlayUnit") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsScreenOverlayUnit, heightUnit) as arg_heightUnit:
            agcls.evaluate_hresult(self.__dict__["_SetHeightUnit"](arg_heightUnit.COM_val))

    @property
    def MinimumSize(self) -> list:
        """Gets or sets the minimum size of the overlay. The overlay will never be smaller than this size, even if the overlay's size is specified as a percentage of its parent and its parent is very small..."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinimumSize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @MinimumSize.setter
    def MinimumSize(self, minimumSize:list) -> None:
        with agmarshall.SAFEARRAY_arg(minimumSize) as arg_minimumSize:
            agcls.evaluate_hresult(self.__dict__["_SetMinimumSize"](arg_minimumSize.COM_val))

    @property
    def MaximumSize(self) -> list:
        """Gets or sets the maximum size of the overlay. The overlay will never be larger than this size, even if the overlay's size is specified as a percentage of its parent and its parent is very large..."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaximumSize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @MaximumSize.setter
    def MaximumSize(self, maximumSize:list) -> None:
        with agmarshall.SAFEARRAY_arg(maximumSize) as arg_maximumSize:
            agcls.evaluate_hresult(self.__dict__["_SetMaximumSize"](arg_maximumSize.COM_val))

    @property
    def Bounds(self) -> list:
        """Gets the bounds of the overlay relative to its parent. The array contains the properties defining the bounds in the order left x location, top y location, width, height."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBounds"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def BorderColor(self) -> agcolor.Color:
        """Gets or sets the overlay's border color. By default, the border color is white. However, also by default, the overlay has a border size of 0.0 so the border is not displayed."""
        with agmarshall.OLE_COLOR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBorderColor"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @BorderColor.setter
    def BorderColor(self, borderColor:agcolor.Color) -> None:
        with agmarshall.OLE_COLOR_arg(borderColor) as arg_borderColor:
            agcls.evaluate_hresult(self.__dict__["_SetBorderColor"](arg_borderColor.COM_val))

    @property
    def BorderSize(self) -> int:
        """Gets or sets the size of the overlay's border. By default, this is 0.0 so the border is not displayed."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBorderSize"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @BorderSize.setter
    def BorderSize(self, borderSize:int) -> None:
        with agmarshall.INT_arg(borderSize) as arg_borderSize:
            agcls.evaluate_hresult(self.__dict__["_SetBorderSize"](arg_borderSize.COM_val))

    @property
    def BorderTranslucency(self) -> float:
        """Gets or sets the translucency of the overlay border. Translucency is a value between 0.0 and 1.0, where 0.0 is completely opaque and 1.0 is completely transparent."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBorderTranslucency"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @BorderTranslucency.setter
    def BorderTranslucency(self, borderTranslucency:float) -> None:
        with agmarshall.FLOAT_arg(borderTranslucency) as arg_borderTranslucency:
            agcls.evaluate_hresult(self.__dict__["_SetBorderTranslucency"](arg_borderTranslucency.COM_val))

    @property
    def TranslationX(self) -> float:
        """Gets or sets the value with which the overlay will be translated from the X value of the position property."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTranslationX"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @TranslationX.setter
    def TranslationX(self, translationX:float) -> None:
        with agmarshall.DOUBLE_arg(translationX) as arg_translationX:
            agcls.evaluate_hresult(self.__dict__["_SetTranslationX"](arg_translationX.COM_val))

    @property
    def TranslationY(self) -> float:
        """Gets or sets the value with which the overlay will be translated from the Y value of the position property."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTranslationY"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @TranslationY.setter
    def TranslationY(self, translationY:float) -> None:
        with agmarshall.DOUBLE_arg(translationY) as arg_translationY:
            agcls.evaluate_hresult(self.__dict__["_SetTranslationY"](arg_translationY.COM_val))

    @property
    def RotationAngle(self) -> float:
        """Gets or sets the counter-clockwise rotation of the overlay. The overlay is rotated around the point specified by the rotation point property."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetRotationAngle"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @RotationAngle.setter
    def RotationAngle(self, rotationAngle:float) -> None:
        with agmarshall.DOUBLE_arg(rotationAngle) as arg_rotationAngle:
            agcls.evaluate_hresult(self.__dict__["_SetRotationAngle"](arg_rotationAngle.COM_val))

    @property
    def RotationPoint(self) -> list:
        """Gets or sets the point that the overlay is rotated around when the rotation angle property has a value other than 0.0. The array contains seven elements defining the properties of the rotation point..."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetRotationPoint"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @RotationPoint.setter
    def RotationPoint(self, rotationPoint:list) -> None:
        with agmarshall.SAFEARRAY_arg(rotationPoint) as arg_rotationPoint:
            agcls.evaluate_hresult(self.__dict__["_SetRotationPoint"](arg_rotationPoint.COM_val))

    @property
    def Scale(self) -> float:
        """Gets or sets the fractional value used to scale the overlay's size property. A value greater than 1.0 will make the overlay larger while a value less than 1.0 will make it smaller."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetScale"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Scale.setter
    def Scale(self, scale:float) -> None:
        with agmarshall.DOUBLE_arg(scale) as arg_scale:
            agcls.evaluate_hresult(self.__dict__["_SetScale"](arg_scale.COM_val))

    @property
    def FlipX(self) -> bool:
        """Gets or sets whether the overlay will be flipped along its X axis."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetFlipX"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @FlipX.setter
    def FlipX(self, flipX:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(flipX) as arg_flipX:
            agcls.evaluate_hresult(self.__dict__["_SetFlipX"](arg_flipX.COM_val))

    @property
    def FlipY(self) -> bool:
        """Gets or sets whether the overlay will be flipped along its Y axis."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetFlipY"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @FlipY.setter
    def FlipY(self, flipY:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(flipY) as arg_flipY:
            agcls.evaluate_hresult(self.__dict__["_SetFlipY"](arg_flipY.COM_val))

    @property
    def Origin(self) -> "AgEStkGraphicsScreenOverlayOrigin":
        """Gets or sets the origin from which the overlay's position is defined. By default, the value of this property is bottom left..."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsScreenOverlayOrigin) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetOrigin"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Origin.setter
    def Origin(self, origin:"AgEStkGraphicsScreenOverlayOrigin") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsScreenOverlayOrigin, origin) as arg_origin:
            agcls.evaluate_hresult(self.__dict__["_SetOrigin"](arg_origin.COM_val))

    @property
    def PinningOrigin(self) -> "AgEStkGraphicsScreenOverlayPinningOrigin":
        """Gets or sets the origin of the pinning position property, relative to the overlay..."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsScreenOverlayPinningOrigin) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPinningOrigin"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @PinningOrigin.setter
    def PinningOrigin(self, pinningOrigin:"AgEStkGraphicsScreenOverlayPinningOrigin") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsScreenOverlayPinningOrigin, pinningOrigin) as arg_pinningOrigin:
            agcls.evaluate_hresult(self.__dict__["_SetPinningOrigin"](arg_pinningOrigin.COM_val))

    @property
    def Parent(self) -> "IStkGraphicsScreenOverlayContainer":
        """Gets the overlay's parent. This may be another overlay if this overlay was added to that overlay's overlays collection. Or, it may be the screen overlay manager if this overlay was added to the scene manager'sscreen overlays collection."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetParent"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Translucency(self) -> float:
        """Gets or sets the overlay's translucency. Translucency is a value between 0.0 and 1.0, where 0.0 is completely opaque and 1.0 is completely transparent."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTranslucency"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Translucency.setter
    def Translucency(self, translucency:float) -> None:
        with agmarshall.FLOAT_arg(translucency) as arg_translucency:
            agcls.evaluate_hresult(self.__dict__["_SetTranslucency"](arg_translucency.COM_val))

    @property
    def Color(self) -> agcolor.Color:
        """Gets or sets the overlay's color. By default, the overlay is white."""
        with agmarshall.OLE_COLOR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetColor"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Color.setter
    def Color(self, color:agcolor.Color) -> None:
        with agmarshall.OLE_COLOR_arg(color) as arg_color:
            agcls.evaluate_hresult(self.__dict__["_SetColor"](arg_color.COM_val))

    @property
    def PickingEnabled(self) -> bool:
        """Gets or sets a value indicating whether or not picking on the overlay is enabled. If picking is disabled, this overlay will never show up in the result of PickScreenOverlay, even if it occupies the specified pick position."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPickingEnabled"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @PickingEnabled.setter
    def PickingEnabled(self, pickingEnabled:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(pickingEnabled) as arg_pickingEnabled:
            agcls.evaluate_hresult(self.__dict__["_SetPickingEnabled"](arg_pickingEnabled.COM_val))

    @property
    def ClipToParent(self) -> bool:
        """Gets or sets a value indicating whether or not the overlay will be clipped by the bounds of its parent. If this property is <see langword='false' />, part of this overlay may be visible outside of its parent's bounds."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetClipToParent"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @ClipToParent.setter
    def ClipToParent(self, clipToParent:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(clipToParent) as arg_clipToParent:
            agcls.evaluate_hresult(self.__dict__["_SetClipToParent"](arg_clipToParent.COM_val))

    @property
    def Display(self) -> bool:
        """Gets or sets if this overlay and the collection of overlays that are contained within this overlay should be rendered."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDisplay"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Display.setter
    def Display(self, display:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(display) as arg_display:
            agcls.evaluate_hresult(self.__dict__["_SetDisplay"](arg_display.COM_val))

    @property
    def ControlPosition(self) -> list:
        """Gets the position of the overlay in coordinates relative to the overall globe control. The array represents the position of the overlay and has a size of 4. The elements are in the order x position, y position, x screen overlay unit, y screen overlay unit."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetControlPosition"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def ControlSize(self) -> list:
        """Gets the size of the overlay in coordinates relative to the overall globe control. The elements are in the order width, height, width screen overlay unit, height screen overlay unit."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetControlSize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def ControlBounds(self) -> list:
        """Gets the bounds of the overlay in coordinates relative to the overall globe control. The array contains the properties defining the bounds in the order left x location, top y location, width, height."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetControlBounds"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def DisplayCondition(self) -> "IStkGraphicsDisplayCondition":
        """Gets or sets the display condition that determines if the overlay should be rendered. Both this and display must evaluate to true for the overlay to be rendered."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDisplayCondition"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @DisplayCondition.setter
    def DisplayCondition(self, displayCondition:"IStkGraphicsDisplayCondition") -> None:
        with agmarshall.AgInterface_in_arg(displayCondition, IStkGraphicsDisplayCondition) as arg_displayCondition:
            agcls.evaluate_hresult(self.__dict__["_SetDisplayCondition"](arg_displayCondition.COM_val))

    @property
    def Overlays(self) -> "IStkGraphicsScreenOverlayCollection":
        """Gets the collection of overlays that are contained within this overlay."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetOverlays"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Padding(self) -> list:
        """Gets or sets the padding surrounding the overlays that are contained within this overlay. The array contains the components of the padding arranged in the order left, top, right, bottom."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPadding"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @Padding.setter
    def Padding(self, padding:list) -> None:
        with agmarshall.SAFEARRAY_arg(padding) as arg_padding:
            agcls.evaluate_hresult(self.__dict__["_SetPadding"](arg_padding.COM_val))

    def BringToFront(self) -> None:
        """Brings the overlay to the front of the z-order, so it is on top of all other overlays with the same parent"""
        agcls.evaluate_hresult(self.__dict__["_BringToFront"]())

    def SendToBack(self) -> None:
        """Sends the overlay to the back of the z-order, so it is underneath all other overlays with the same parent"""
        agcls.evaluate_hresult(self.__dict__["_SendToBack"]())

    def OverlayToControl(self, x:float, y:float) -> list:
        """Transforms a given position, specified relative to the overlay, into coordinates relative to the overall globe control..."""
        with agmarshall.DOUBLE_arg(x) as arg_x, \
             agmarshall.DOUBLE_arg(y) as arg_y, \
             agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_OverlayToControl"](arg_x.COM_val, arg_y.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def ControlToOverlay(self, x:float, y:float) -> list:
        """Transforms a given position, specified relative to the overall globe control, into coordinates relative to this overlay..."""
        with agmarshall.DOUBLE_arg(x) as arg_x, \
             agmarshall.DOUBLE_arg(y) as arg_y, \
             agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_ControlToOverlay"](arg_x.COM_val, arg_y.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Tag(self) -> typing.Any:
        """Gets or sets custom value associated with this primitive."""
        with agmarshall.VARIANT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTag"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Tag.setter
    def Tag(self, tag:typing.Any) -> None:
        with agmarshall.VARIANT_arg(tag) as arg_tag:
            agcls.evaluate_hresult(self.__dict__["_SetTag"](arg_tag.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{b7007235-5a52-450b-83af-1e8080d3b0be}", IStkGraphicsOverlay)
agcls.AgTypeNameMap["IStkGraphicsOverlay"] = IStkGraphicsOverlay

class IStkGraphicsPathPrimitive(object):
    """Renders a line to the 3D scene. Similar to the polyline primitive; however, the PathPrimitive was designed for the efficient addition/removal of points to/from the front or back of the line."""
    _uuid = "{264ef2e0-ae0d-412d-9d89-f5f17f095a52}"
    _num_methods = 31
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        self.__dict__["_GetCapacity"] = _raise_uninitialized_error
        self.__dict__["_GetUpdatePolicy"] = _raise_uninitialized_error
        self.__dict__["_SetUpdatePolicy"] = _raise_uninitialized_error
        self.__dict__["_GetPolylineType"] = _raise_uninitialized_error
        self.__dict__["_SetPolylineType"] = _raise_uninitialized_error
        self.__dict__["_GetWidth"] = _raise_uninitialized_error
        self.__dict__["_SetWidth"] = _raise_uninitialized_error
        self.__dict__["_GetMinimumWidthSupported"] = _raise_uninitialized_error
        self.__dict__["_GetMaximumWidthSupported"] = _raise_uninitialized_error
        self.__dict__["_GetDisplayOutline"] = _raise_uninitialized_error
        self.__dict__["_SetDisplayOutline"] = _raise_uninitialized_error
        self.__dict__["_GetOutlineWidth"] = _raise_uninitialized_error
        self.__dict__["_SetOutlineWidth"] = _raise_uninitialized_error
        self.__dict__["_GetPerItemPickingEnabled"] = _raise_uninitialized_error
        self.__dict__["_SetPerItemPickingEnabled"] = _raise_uninitialized_error
        self.__dict__["_Item"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        self.__dict__["_AddFront"] = _raise_uninitialized_error
        self.__dict__["_AddRangeToFront"] = _raise_uninitialized_error
        self.__dict__["_AddBack"] = _raise_uninitialized_error
        self.__dict__["_AddRangeToBack"] = _raise_uninitialized_error
        self.__dict__["_RemoveFront"] = _raise_uninitialized_error
        self.__dict__["_RemoveAllBefore"] = _raise_uninitialized_error
        self.__dict__["_RemoveBack"] = _raise_uninitialized_error
        self.__dict__["_RemoveAllAfter"] = _raise_uninitialized_error
        self.__dict__["_Front"] = _raise_uninitialized_error
        self.__dict__["_Back"] = _raise_uninitialized_error
        self.__dict__["_Clear"] = _raise_uninitialized_error
        self.__dict__["_GetCentralBodyClipped"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBodyClipped"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsPathPrimitive._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsPathPrimitive from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsPathPrimitive = agcom.GUID(IStkGraphicsPathPrimitive._uuid)
        vtable_offset_local = IStkGraphicsPathPrimitive._vtable_offset - 1
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPathPrimitive, vtable_offset_local+1, POINTER(agcom.INT))
        self.__dict__["_GetCapacity"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPathPrimitive, vtable_offset_local+2, POINTER(agcom.INT))
        self.__dict__["_GetUpdatePolicy"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPathPrimitive, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_SetUpdatePolicy"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPathPrimitive, vtable_offset_local+4, agcom.PVOID)
        self.__dict__["_GetPolylineType"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPathPrimitive, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetPolylineType"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPathPrimitive, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_GetWidth"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPathPrimitive, vtable_offset_local+7, POINTER(agcom.FLOAT))
        self.__dict__["_SetWidth"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPathPrimitive, vtable_offset_local+8, agcom.FLOAT)
        self.__dict__["_GetMinimumWidthSupported"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPathPrimitive, vtable_offset_local+9, POINTER(agcom.FLOAT))
        self.__dict__["_GetMaximumWidthSupported"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPathPrimitive, vtable_offset_local+10, POINTER(agcom.FLOAT))
        self.__dict__["_GetDisplayOutline"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPathPrimitive, vtable_offset_local+11, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetDisplayOutline"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPathPrimitive, vtable_offset_local+12, agcom.VARIANT_BOOL)
        self.__dict__["_GetOutlineWidth"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPathPrimitive, vtable_offset_local+13, POINTER(agcom.FLOAT))
        self.__dict__["_SetOutlineWidth"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPathPrimitive, vtable_offset_local+14, agcom.FLOAT)
        self.__dict__["_GetPerItemPickingEnabled"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPathPrimitive, vtable_offset_local+15, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetPerItemPickingEnabled"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPathPrimitive, vtable_offset_local+16, agcom.VARIANT_BOOL)
        self.__dict__["_Item"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPathPrimitive, vtable_offset_local+17, agcom.INT, POINTER(agcom.PVOID))
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPathPrimitive, vtable_offset_local+18, POINTER(agcom.PVOID))
        self.__dict__["_AddFront"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPathPrimitive, vtable_offset_local+19, agcom.PVOID)
        self.__dict__["_AddRangeToFront"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPathPrimitive, vtable_offset_local+20, POINTER(agcom.SAFEARRAY))
        self.__dict__["_AddBack"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPathPrimitive, vtable_offset_local+21, agcom.PVOID)
        self.__dict__["_AddRangeToBack"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPathPrimitive, vtable_offset_local+22, POINTER(agcom.SAFEARRAY))
        self.__dict__["_RemoveFront"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPathPrimitive, vtable_offset_local+23, )
        self.__dict__["_RemoveAllBefore"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPathPrimitive, vtable_offset_local+24, agcom.INT)
        self.__dict__["_RemoveBack"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPathPrimitive, vtable_offset_local+25, )
        self.__dict__["_RemoveAllAfter"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPathPrimitive, vtable_offset_local+26, agcom.INT)
        self.__dict__["_Front"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPathPrimitive, vtable_offset_local+27, POINTER(agcom.PVOID))
        self.__dict__["_Back"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPathPrimitive, vtable_offset_local+28, POINTER(agcom.PVOID))
        self.__dict__["_Clear"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPathPrimitive, vtable_offset_local+29, )
        self.__dict__["_GetCentralBodyClipped"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPathPrimitive, vtable_offset_local+30, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetCentralBodyClipped"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPathPrimitive, vtable_offset_local+31, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsPathPrimitive.__dict__ and type(IStkGraphicsPathPrimitive.__dict__[attrname]) == property:
            return IStkGraphicsPathPrimitive.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsPathPrimitive.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> "IStkGraphicsPathPoint":
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    
    @property
    def Count(self) -> int:
        """Returns the number of points."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Capacity(self) -> int:
        """Returns the capacity that was set during object construction. The capacity is the amount of memory reserved for storing the points on the path. This will be automatically updated when adding/removing points."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCapacity"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def UpdatePolicy(self) -> "IStkGraphicsPathPrimitiveUpdatePolicy":
        """Gets or sets how the primitive will be updated based on the current animation time."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetUpdatePolicy"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @UpdatePolicy.setter
    def UpdatePolicy(self, updatePolicy:"IStkGraphicsPathPrimitiveUpdatePolicy") -> None:
        with agmarshall.AgInterface_in_arg(updatePolicy, IStkGraphicsPathPrimitiveUpdatePolicy) as arg_updatePolicy:
            agcls.evaluate_hresult(self.__dict__["_SetUpdatePolicy"](arg_updatePolicy.COM_val))

    @property
    def PolylineType(self) -> "AgEStkGraphicsPolylineType":
        """Gets or sets how the primitive interprets the positions."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsPolylineType) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPolylineType"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @PolylineType.setter
    def PolylineType(self, polylineType:"AgEStkGraphicsPolylineType") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsPolylineType, polylineType) as arg_polylineType:
            agcls.evaluate_hresult(self.__dict__["_SetPolylineType"](arg_polylineType.COM_val))

    @property
    def Width(self) -> float:
        """Gets or sets the line width, in pixels."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetWidth"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Width.setter
    def Width(self, width:float) -> None:
        with agmarshall.FLOAT_arg(width) as arg_width:
            agcls.evaluate_hresult(self.__dict__["_SetWidth"](arg_width.COM_val))

    @property
    def MinimumWidthSupported(self) -> float:
        """Gets the minimum width, in pixels, supported by the video card."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinimumWidthSupported"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def MaximumWidthSupported(self) -> float:
        """Gets the maximum width, in pixels, supported by the video card."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaximumWidthSupported"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def DisplayOutline(self) -> bool:
        """Gets or sets whether an outline is rendered around the line."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDisplayOutline"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @DisplayOutline.setter
    def DisplayOutline(self, displayOutline:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(displayOutline) as arg_displayOutline:
            agcls.evaluate_hresult(self.__dict__["_SetDisplayOutline"](arg_displayOutline.COM_val))

    @property
    def OutlineWidth(self) -> float:
        """Gets or sets the width, in pixels, of the outline around the line."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetOutlineWidth"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @OutlineWidth.setter
    def OutlineWidth(self, outlineWidth:float) -> None:
        with agmarshall.FLOAT_arg(outlineWidth) as arg_outlineWidth:
            agcls.evaluate_hresult(self.__dict__["_SetOutlineWidth"](arg_outlineWidth.COM_val))

    @property
    def PerItemPickingEnabled(self) -> bool:
        """Gets or sets whether individual line indices will be included in the pick results returned from the scene's Pick method. Each line index that is picked will be returned as a batch primitive index."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPerItemPickingEnabled"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @PerItemPickingEnabled.setter
    def PerItemPickingEnabled(self, perItemPickingEnabled:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(perItemPickingEnabled) as arg_perItemPickingEnabled:
            agcls.evaluate_hresult(self.__dict__["_SetPerItemPickingEnabled"](arg_perItemPickingEnabled.COM_val))

    def Item(self, index:int) -> "IStkGraphicsPathPoint":
        """Returns the point at the given zero-based index."""
        with agmarshall.INT_arg(index) as arg_index, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Item"](arg_index.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        """Returns an enumerator that iterates through the collection."""
        with agmarshall.IEnumVARIANT_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def AddFront(self, pathPoint:"IStkGraphicsPathPoint") -> None:
        """Add a path point to the front of the line."""
        with agmarshall.AgInterface_in_arg(pathPoint, IStkGraphicsPathPoint) as arg_pathPoint:
            agcls.evaluate_hresult(self.__dict__["_AddFront"](arg_pathPoint.COM_val))

    def AddRangeToFront(self, positions:list) -> None:
        """Add the range of path points to the front of the line."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions:
            agcls.evaluate_hresult(self.__dict__["_AddRangeToFront"](byref(arg_positions.COM_val)))

    def AddBack(self, pathPoint:"IStkGraphicsPathPoint") -> None:
        """Add a path point to the back of the line."""
        with agmarshall.AgInterface_in_arg(pathPoint, IStkGraphicsPathPoint) as arg_pathPoint:
            agcls.evaluate_hresult(self.__dict__["_AddBack"](arg_pathPoint.COM_val))

    def AddRangeToBack(self, positions:list) -> None:
        """Add the range of path points to the back of the line."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions:
            agcls.evaluate_hresult(self.__dict__["_AddRangeToBack"](byref(arg_positions.COM_val)))

    def RemoveFront(self) -> None:
        """Remove a path point to the front of the line."""
        agcls.evaluate_hresult(self.__dict__["_RemoveFront"]())

    def RemoveAllBefore(self, index:int) -> None:
        """Remove all points before index."""
        with agmarshall.INT_arg(index) as arg_index:
            agcls.evaluate_hresult(self.__dict__["_RemoveAllBefore"](arg_index.COM_val))

    def RemoveBack(self) -> None:
        """Remove a path point to the back of the line."""
        agcls.evaluate_hresult(self.__dict__["_RemoveBack"]())

    def RemoveAllAfter(self, index:int) -> None:
        """Remove all points after index."""
        with agmarshall.INT_arg(index) as arg_index:
            agcls.evaluate_hresult(self.__dict__["_RemoveAllAfter"](arg_index.COM_val))

    def Front(self) -> "IStkGraphicsPathPoint":
        """Access the path point at the front of the line."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Front"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def Back(self) -> "IStkGraphicsPathPoint":
        """Access the path point at the back of the line."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Back"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def Clear(self) -> None:
        """Removes all of the points."""
        agcls.evaluate_hresult(self.__dict__["_Clear"]())

    @property
    def CentralBodyClipped(self) -> bool:
        """Gets or sets whether the polyline will be clipped by the central body."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyClipped"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @CentralBodyClipped.setter
    def CentralBodyClipped(self, centralBodyClipped:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(centralBodyClipped) as arg_centralBodyClipped:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBodyClipped"](arg_centralBodyClipped.COM_val))

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{264ef2e0-ae0d-412d-9d89-f5f17f095a52}", IStkGraphicsPathPrimitive)
agcls.AgTypeNameMap["IStkGraphicsPathPrimitive"] = IStkGraphicsPathPrimitive

class IStkGraphicsPickResult(object):
    """A single result from Pick."""
    _uuid = "{55238a64-4c7f-4be7-abcb-1d2321f8f64a}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetObjects"] = _raise_uninitialized_error
        self.__dict__["_GetDepth"] = _raise_uninitialized_error
        self.__dict__["_GetPosition"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsPickResult._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsPickResult from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsPickResult = agcom.GUID(IStkGraphicsPickResult._uuid)
        vtable_offset_local = IStkGraphicsPickResult._vtable_offset - 1
        self.__dict__["_GetObjects"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPickResult, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetDepth"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPickResult, vtable_offset_local+2, POINTER(agcom.FLOAT))
        self.__dict__["_GetPosition"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPickResult, vtable_offset_local+3, POINTER(agcom.SAFEARRAY))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsPickResult.__dict__ and type(IStkGraphicsPickResult.__dict__[attrname]) == property:
            return IStkGraphicsPickResult.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsPickResult.")
    
    @property
    def Objects(self) -> "IStkGraphicsObjectCollection":
        """Gets a collection of objects that were on the pick stack for the picked object."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetObjects"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Depth(self) -> float:
        """Gets the depth of the picked location in the 3D scene."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDepth"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Position(self) -> list:
        """Gets the position of the picked location in the central body's fixed reference frame. The array contains the components of the position arranged in the order x, y, z."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPosition"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{55238a64-4c7f-4be7-abcb-1d2321f8f64a}", IStkGraphicsPickResult)
agcls.AgTypeNameMap["IStkGraphicsPickResult"] = IStkGraphicsPickResult

class IStkGraphicsPixelSizeDisplayCondition(object):
    """Defines an inclusive interval, in pixels, that determines when an object, such as a primitive, is rendered based on the number of pixels the object's bounding sphere (or in the case of screen overlays, bounding rectangle) covers on the screen..."""
    _uuid = "{e5ccd610-a3b3-4f0c-9d51-e367a9ea5abf}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetMinimumPixelSize"] = _raise_uninitialized_error
        self.__dict__["_SetMinimumPixelSize"] = _raise_uninitialized_error
        self.__dict__["_GetMaximumPixelSize"] = _raise_uninitialized_error
        self.__dict__["_SetMaximumPixelSize"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsPixelSizeDisplayCondition._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsPixelSizeDisplayCondition from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsPixelSizeDisplayCondition = agcom.GUID(IStkGraphicsPixelSizeDisplayCondition._uuid)
        vtable_offset_local = IStkGraphicsPixelSizeDisplayCondition._vtable_offset - 1
        self.__dict__["_GetMinimumPixelSize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPixelSizeDisplayCondition, vtable_offset_local+1, POINTER(agcom.INT))
        self.__dict__["_SetMinimumPixelSize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPixelSizeDisplayCondition, vtable_offset_local+2, agcom.INT)
        self.__dict__["_GetMaximumPixelSize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPixelSizeDisplayCondition, vtable_offset_local+3, POINTER(agcom.INT))
        self.__dict__["_SetMaximumPixelSize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPixelSizeDisplayCondition, vtable_offset_local+4, agcom.INT)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsPixelSizeDisplayCondition.__dict__ and type(IStkGraphicsPixelSizeDisplayCondition.__dict__[attrname]) == property:
            return IStkGraphicsPixelSizeDisplayCondition.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsPixelSizeDisplayCondition.")
    
    @property
    def MinimumPixelSize(self) -> int:
        """Gets or sets the minimum pixel size of the inclusive distance interval."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinimumPixelSize"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @MinimumPixelSize.setter
    def MinimumPixelSize(self, minimumPixelSize:int) -> None:
        with agmarshall.INT_arg(minimumPixelSize) as arg_minimumPixelSize:
            agcls.evaluate_hresult(self.__dict__["_SetMinimumPixelSize"](arg_minimumPixelSize.COM_val))

    @property
    def MaximumPixelSize(self) -> int:
        """Gets or sets the maximum pixel size of the inclusive distance interval. Use Int32.MaxValue to ignore checking the maximum distance."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaximumPixelSize"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @MaximumPixelSize.setter
    def MaximumPixelSize(self, maximumPixelSize:int) -> None:
        with agmarshall.INT_arg(maximumPixelSize) as arg_maximumPixelSize:
            agcls.evaluate_hresult(self.__dict__["_SetMaximumPixelSize"](arg_maximumPixelSize.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{e5ccd610-a3b3-4f0c-9d51-e367a9ea5abf}", IStkGraphicsPixelSizeDisplayCondition)
agcls.AgTypeNameMap["IStkGraphicsPixelSizeDisplayCondition"] = IStkGraphicsPixelSizeDisplayCondition

class IStkGraphicsPointBatchPrimitive(object):
    """ Renders one or more points in the 3D scene. Each point in the batch has a unique position and an optional color. All points in the batch share the same pixel size. For best performance, avoid creating lots of batches with only a few points each..."""
    _uuid = "{ae6c6dca-3afe-4419-8aad-dd56bee51446}"
    _num_methods = 34
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetDisplayOutline"] = _raise_uninitialized_error
        self.__dict__["_SetDisplayOutline"] = _raise_uninitialized_error
        self.__dict__["_GetOutlineColor"] = _raise_uninitialized_error
        self.__dict__["_SetOutlineColor"] = _raise_uninitialized_error
        self.__dict__["_GetOutlineTranslucency"] = _raise_uninitialized_error
        self.__dict__["_SetOutlineTranslucency"] = _raise_uninitialized_error
        self.__dict__["_GetOutlineWidth"] = _raise_uninitialized_error
        self.__dict__["_SetOutlineWidth"] = _raise_uninitialized_error
        self.__dict__["_GetPixelSize"] = _raise_uninitialized_error
        self.__dict__["_SetPixelSize"] = _raise_uninitialized_error
        self.__dict__["_GetMinimumPixelSizeSupported"] = _raise_uninitialized_error
        self.__dict__["_GetMaximumPixelSizeSupported"] = _raise_uninitialized_error
        self.__dict__["_GetDistanceDisplayConditionPerPoint"] = _raise_uninitialized_error
        self.__dict__["_SetDistanceDisplayConditionPerPoint"] = _raise_uninitialized_error
        self.__dict__["_GetSetHint"] = _raise_uninitialized_error
        self.__dict__["_GetPerItemPickingEnabled"] = _raise_uninitialized_error
        self.__dict__["_SetPerItemPickingEnabled"] = _raise_uninitialized_error
        self.__dict__["_Set"] = _raise_uninitialized_error
        self.__dict__["_SetWithColors"] = _raise_uninitialized_error
        self.__dict__["_SetWithColorsAndRenderPass"] = _raise_uninitialized_error
        self.__dict__["_SetCartographic"] = _raise_uninitialized_error
        self.__dict__["_SetCartographicWithColors"] = _raise_uninitialized_error
        self.__dict__["_SetCartographicWithColorsAndRenderPass"] = _raise_uninitialized_error
        self.__dict__["_SetPartial"] = _raise_uninitialized_error
        self.__dict__["_SetPartialWithIndicesOrder"] = _raise_uninitialized_error
        self.__dict__["_SetPartialWithColors"] = _raise_uninitialized_error
        self.__dict__["_SetPartialWithColorsIndicesOrderAndRenderPass"] = _raise_uninitialized_error
        self.__dict__["_SetPartialCartographic"] = _raise_uninitialized_error
        self.__dict__["_SetPartialCartographicWithIndicesOrder"] = _raise_uninitialized_error
        self.__dict__["_SetPartialCartographicWithColors"] = _raise_uninitialized_error
        self.__dict__["_SetPartialCartographicWithColorsIndicesOrderAndRenderPass"] = _raise_uninitialized_error
        self.__dict__["_GetCentralBodyClipped"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBodyClipped"] = _raise_uninitialized_error
        self.__dict__["_SetWithOptionalParameters"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsPointBatchPrimitive._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsPointBatchPrimitive from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsPointBatchPrimitive = agcom.GUID(IStkGraphicsPointBatchPrimitive._uuid)
        vtable_offset_local = IStkGraphicsPointBatchPrimitive._vtable_offset - 1
        self.__dict__["_GetDisplayOutline"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPointBatchPrimitive, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetDisplayOutline"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPointBatchPrimitive, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetOutlineColor"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPointBatchPrimitive, vtable_offset_local+3, POINTER(agcom.OLE_COLOR))
        self.__dict__["_SetOutlineColor"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPointBatchPrimitive, vtable_offset_local+4, agcom.OLE_COLOR)
        self.__dict__["_GetOutlineTranslucency"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPointBatchPrimitive, vtable_offset_local+5, POINTER(agcom.FLOAT))
        self.__dict__["_SetOutlineTranslucency"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPointBatchPrimitive, vtable_offset_local+6, agcom.FLOAT)
        self.__dict__["_GetOutlineWidth"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPointBatchPrimitive, vtable_offset_local+7, POINTER(agcom.FLOAT))
        self.__dict__["_SetOutlineWidth"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPointBatchPrimitive, vtable_offset_local+8, agcom.FLOAT)
        self.__dict__["_GetPixelSize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPointBatchPrimitive, vtable_offset_local+9, POINTER(agcom.FLOAT))
        self.__dict__["_SetPixelSize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPointBatchPrimitive, vtable_offset_local+10, agcom.FLOAT)
        self.__dict__["_GetMinimumPixelSizeSupported"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPointBatchPrimitive, vtable_offset_local+11, POINTER(agcom.FLOAT))
        self.__dict__["_GetMaximumPixelSizeSupported"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPointBatchPrimitive, vtable_offset_local+12, POINTER(agcom.FLOAT))
        self.__dict__["_GetDistanceDisplayConditionPerPoint"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPointBatchPrimitive, vtable_offset_local+13, POINTER(agcom.PVOID))
        self.__dict__["_SetDistanceDisplayConditionPerPoint"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPointBatchPrimitive, vtable_offset_local+14, agcom.PVOID)
        self.__dict__["_GetSetHint"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPointBatchPrimitive, vtable_offset_local+15, POINTER(agcom.LONG))
        self.__dict__["_GetPerItemPickingEnabled"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPointBatchPrimitive, vtable_offset_local+16, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetPerItemPickingEnabled"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPointBatchPrimitive, vtable_offset_local+17, agcom.VARIANT_BOOL)
        self.__dict__["_Set"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPointBatchPrimitive, vtable_offset_local+18, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetWithColors"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPointBatchPrimitive, vtable_offset_local+19, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetWithColorsAndRenderPass"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPointBatchPrimitive, vtable_offset_local+20, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.LONG)
        self.__dict__["_SetCartographic"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPointBatchPrimitive, vtable_offset_local+21, agcom.BSTR, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetCartographicWithColors"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPointBatchPrimitive, vtable_offset_local+22, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetCartographicWithColorsAndRenderPass"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPointBatchPrimitive, vtable_offset_local+23, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.LONG)
        self.__dict__["_SetPartial"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPointBatchPrimitive, vtable_offset_local+24, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetPartialWithIndicesOrder"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPointBatchPrimitive, vtable_offset_local+25, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.LONG)
        self.__dict__["_SetPartialWithColors"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPointBatchPrimitive, vtable_offset_local+26, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetPartialWithColorsIndicesOrderAndRenderPass"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPointBatchPrimitive, vtable_offset_local+27, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.LONG, agcom.LONG)
        self.__dict__["_SetPartialCartographic"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPointBatchPrimitive, vtable_offset_local+28, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetPartialCartographicWithIndicesOrder"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPointBatchPrimitive, vtable_offset_local+29, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.LONG)
        self.__dict__["_SetPartialCartographicWithColors"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPointBatchPrimitive, vtable_offset_local+30, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetPartialCartographicWithColorsIndicesOrderAndRenderPass"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPointBatchPrimitive, vtable_offset_local+31, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.LONG, agcom.LONG)
        self.__dict__["_GetCentralBodyClipped"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPointBatchPrimitive, vtable_offset_local+32, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetCentralBodyClipped"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPointBatchPrimitive, vtable_offset_local+33, agcom.VARIANT_BOOL)
        self.__dict__["_SetWithOptionalParameters"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPointBatchPrimitive, vtable_offset_local+34, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.PVOID, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsPointBatchPrimitive.__dict__ and type(IStkGraphicsPointBatchPrimitive.__dict__[attrname]) == property:
            return IStkGraphicsPointBatchPrimitive.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsPointBatchPrimitive.")
    
    @property
    def DisplayOutline(self) -> bool:
        """Gets or sets whether an outline is rendered around each point in the batch."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDisplayOutline"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @DisplayOutline.setter
    def DisplayOutline(self, displayOutline:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(displayOutline) as arg_displayOutline:
            agcls.evaluate_hresult(self.__dict__["_SetDisplayOutline"](arg_displayOutline.COM_val))

    @property
    def OutlineColor(self) -> agcolor.Color:
        """Gets or sets the outline's color."""
        with agmarshall.OLE_COLOR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetOutlineColor"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @OutlineColor.setter
    def OutlineColor(self, outlineColor:agcolor.Color) -> None:
        with agmarshall.OLE_COLOR_arg(outlineColor) as arg_outlineColor:
            agcls.evaluate_hresult(self.__dict__["_SetOutlineColor"](arg_outlineColor.COM_val))

    @property
    def OutlineTranslucency(self) -> float:
        """Gets or sets the translucency of the outline. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetOutlineTranslucency"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @OutlineTranslucency.setter
    def OutlineTranslucency(self, outlineTranslucency:float) -> None:
        with agmarshall.FLOAT_arg(outlineTranslucency) as arg_outlineTranslucency:
            agcls.evaluate_hresult(self.__dict__["_SetOutlineTranslucency"](arg_outlineTranslucency.COM_val))

    @property
    def OutlineWidth(self) -> float:
        """Gets or sets the size, in pixels, of the outline around each point in the batch."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetOutlineWidth"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @OutlineWidth.setter
    def OutlineWidth(self, outlineWidth:float) -> None:
        with agmarshall.FLOAT_arg(outlineWidth) as arg_outlineWidth:
            agcls.evaluate_hresult(self.__dict__["_SetOutlineWidth"](arg_outlineWidth.COM_val))

    @property
    def PixelSize(self) -> float:
        """Gets or sets the size, in pixels, of each point in the point batch."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPixelSize"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @PixelSize.setter
    def PixelSize(self, pixelSize:float) -> None:
        with agmarshall.FLOAT_arg(pixelSize) as arg_pixelSize:
            agcls.evaluate_hresult(self.__dict__["_SetPixelSize"](arg_pixelSize.COM_val))

    @property
    def MinimumPixelSizeSupported(self) -> float:
        """Gets the minimum pixel size supported by the video card."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinimumPixelSizeSupported"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def MaximumPixelSizeSupported(self) -> float:
        """Gets the maximum pixel size supported by the video card."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaximumPixelSizeSupported"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def DistanceDisplayConditionPerPoint(self) -> "IStkGraphicsDistanceDisplayCondition":
        """Gets or sets a distance display condition that is evaluated per point in the point batch during rendering. This is different than display condition, which is evaluated once for the entire point batch..."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDistanceDisplayConditionPerPoint"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @DistanceDisplayConditionPerPoint.setter
    def DistanceDisplayConditionPerPoint(self, distanceDisplayConditionPerPoint:"IStkGraphicsDistanceDisplayCondition") -> None:
        with agmarshall.AgInterface_in_arg(distanceDisplayConditionPerPoint, IStkGraphicsDistanceDisplayCondition) as arg_distanceDisplayConditionPerPoint:
            agcls.evaluate_hresult(self.__dict__["_SetDistanceDisplayConditionPerPoint"](arg_distanceDisplayConditionPerPoint.COM_val))

    @property
    def SetHint(self) -> "AgEStkGraphicsSetHint":
        """Gets the primitive's set hint. See the Set Hint Performance Overview for selecting an appropriate value to construct the primitive with."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsSetHint) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSetHint"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def PerItemPickingEnabled(self) -> bool:
        """Gets or sets whether individual point indices will be included in the pick results returned from the scene's Pick method. Each point index that is picked will be returned as a batch primitive index."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPerItemPickingEnabled"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @PerItemPickingEnabled.setter
    def PerItemPickingEnabled(self, perItemPickingEnabled:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(perItemPickingEnabled) as arg_perItemPickingEnabled:
            agcls.evaluate_hresult(self.__dict__["_SetPerItemPickingEnabled"](arg_perItemPickingEnabled.COM_val))

    def Set(self, positions:list) -> None:
        """Defines the positions of points in a point batch. The points are rendered in the primitive's reference frame."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions:
            agcls.evaluate_hresult(self.__dict__["_Set"](byref(arg_positions.COM_val)))

    def SetWithColors(self, positions:list, colors:list) -> None:
        """Defines the positions and colors of points in a point batch. The points are rendered in the primitive's reference frame."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(colors) as arg_colors:
            agcls.evaluate_hresult(self.__dict__["_SetWithColors"](byref(arg_positions.COM_val), byref(arg_colors.COM_val)))

    def SetWithColorsAndRenderPass(self, positions:list, colors:list, renderPassHint:"AgEStkGraphicsRenderPassHint") -> None:
        """Defines the positions and colors of points in a point batch. The points are rendered in the primitive's reference frame. renderPassHint is provided for efficiency."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(colors) as arg_colors, \
             agmarshall.AgEnum_arg(AgEStkGraphicsRenderPassHint, renderPassHint) as arg_renderPassHint:
            agcls.evaluate_hresult(self.__dict__["_SetWithColorsAndRenderPass"](byref(arg_positions.COM_val), byref(arg_colors.COM_val), arg_renderPassHint.COM_val))

    def SetCartographic(self, centralBody:str, positions:list) -> None:
        """For convenience. Defines the positions of points in a point batch using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling Set."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions:
            agcls.evaluate_hresult(self.__dict__["_SetCartographic"](arg_centralBody.COM_val, byref(arg_positions.COM_val)))

    def SetCartographicWithColors(self, centralBody:str, positions:list, colors:list) -> None:
        """For convenience. Defines the positions and colors of points in a point batch using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling Set."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(colors) as arg_colors:
            agcls.evaluate_hresult(self.__dict__["_SetCartographicWithColors"](arg_centralBody.COM_val, byref(arg_positions.COM_val), byref(arg_colors.COM_val)))

    def SetCartographicWithColorsAndRenderPass(self, centralBody:str, positions:list, colors:list, renderPassHint:"AgEStkGraphicsRenderPassHint") -> None:
        """For convenience. Defines the positions and colors of points in a point batch using cartographic positions. renderPassHint is provided for efficiency. This is equivalent to converting each position in positions to cartesian and calling Set."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(colors) as arg_colors, \
             agmarshall.AgEnum_arg(AgEStkGraphicsRenderPassHint, renderPassHint) as arg_renderPassHint:
            agcls.evaluate_hresult(self.__dict__["_SetCartographicWithColorsAndRenderPass"](arg_centralBody.COM_val, byref(arg_positions.COM_val), byref(arg_colors.COM_val), arg_renderPassHint.COM_val))

    def SetPartial(self, positions:list, indices:list) -> None:
        """Updates a subset of positions in a point batch."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices:
            agcls.evaluate_hresult(self.__dict__["_SetPartial"](byref(arg_positions.COM_val), byref(arg_indices.COM_val)))

    def SetPartialWithIndicesOrder(self, positions:list, indices:list, indicesOrderHint:"AgEStkGraphicsIndicesOrderHint") -> None:
        """Updates a subset of positions in a point batch."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices, \
             agmarshall.AgEnum_arg(AgEStkGraphicsIndicesOrderHint, indicesOrderHint) as arg_indicesOrderHint:
            agcls.evaluate_hresult(self.__dict__["_SetPartialWithIndicesOrder"](byref(arg_positions.COM_val), byref(arg_indices.COM_val), arg_indicesOrderHint.COM_val))

    def SetPartialWithColors(self, positions:list, colors:list, indices:list) -> None:
        """Updates a subset of positions and/or colors in a point batch."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(colors) as arg_colors, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices:
            agcls.evaluate_hresult(self.__dict__["_SetPartialWithColors"](byref(arg_positions.COM_val), byref(arg_colors.COM_val), byref(arg_indices.COM_val)))

    def SetPartialWithColorsIndicesOrderAndRenderPass(self, positions:list, colors:list, indices:list, indicesOrderHint:"AgEStkGraphicsIndicesOrderHint", renderPassHint:"AgEStkGraphicsRenderPassHint") -> None:
        """Updates a subset of positions and/or colors in a point batch."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(colors) as arg_colors, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices, \
             agmarshall.AgEnum_arg(AgEStkGraphicsIndicesOrderHint, indicesOrderHint) as arg_indicesOrderHint, \
             agmarshall.AgEnum_arg(AgEStkGraphicsRenderPassHint, renderPassHint) as arg_renderPassHint:
            agcls.evaluate_hresult(self.__dict__["_SetPartialWithColorsIndicesOrderAndRenderPass"](byref(arg_positions.COM_val), byref(arg_colors.COM_val), byref(arg_indices.COM_val), arg_indicesOrderHint.COM_val, arg_renderPassHint.COM_val))

    def SetPartialCartographic(self, centralBody:str, positions:list, indices:list) -> None:
        """For convenience. Updates a subset of positions in a point batch using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling SetPartial"""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices:
            agcls.evaluate_hresult(self.__dict__["_SetPartialCartographic"](arg_centralBody.COM_val, byref(arg_positions.COM_val), byref(arg_indices.COM_val)))

    def SetPartialCartographicWithIndicesOrder(self, centralBody:str, positions:list, indices:list, indicesOrderHint:"AgEStkGraphicsIndicesOrderHint") -> None:
        """For convenience. Updates a subset of positions in a point batch using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling SetPartial"""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices, \
             agmarshall.AgEnum_arg(AgEStkGraphicsIndicesOrderHint, indicesOrderHint) as arg_indicesOrderHint:
            agcls.evaluate_hresult(self.__dict__["_SetPartialCartographicWithIndicesOrder"](arg_centralBody.COM_val, byref(arg_positions.COM_val), byref(arg_indices.COM_val), arg_indicesOrderHint.COM_val))

    def SetPartialCartographicWithColors(self, centralBody:str, positions:list, colors:list, indices:list) -> None:
        """For convenience. Updates a subset of positions and/or colors in a point batch using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling SetPartial"""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(colors) as arg_colors, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices:
            agcls.evaluate_hresult(self.__dict__["_SetPartialCartographicWithColors"](arg_centralBody.COM_val, byref(arg_positions.COM_val), byref(arg_colors.COM_val), byref(arg_indices.COM_val)))

    def SetPartialCartographicWithColorsIndicesOrderAndRenderPass(self, centralBody:str, positions:list, colors:list, indices:list, indicesOrderHint:"AgEStkGraphicsIndicesOrderHint", renderPassHint:"AgEStkGraphicsRenderPassHint") -> None:
        """For convenience. Updates a subset of positions and/or colors in a point batch using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling SetPartial"""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(colors) as arg_colors, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices, \
             agmarshall.AgEnum_arg(AgEStkGraphicsIndicesOrderHint, indicesOrderHint) as arg_indicesOrderHint, \
             agmarshall.AgEnum_arg(AgEStkGraphicsRenderPassHint, renderPassHint) as arg_renderPassHint:
            agcls.evaluate_hresult(self.__dict__["_SetPartialCartographicWithColorsIndicesOrderAndRenderPass"](arg_centralBody.COM_val, byref(arg_positions.COM_val), byref(arg_colors.COM_val), byref(arg_indices.COM_val), arg_indicesOrderHint.COM_val, arg_renderPassHint.COM_val))

    @property
    def CentralBodyClipped(self) -> bool:
        """Gets or sets whether individual points will be clipped by the central body."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyClipped"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @CentralBodyClipped.setter
    def CentralBodyClipped(self, centralBodyClipped:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(centralBodyClipped) as arg_centralBodyClipped:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBodyClipped"](arg_centralBodyClipped.COM_val))

    def SetWithOptionalParameters(self, positions:list, colors:list, optionalParameters:"IStkGraphicsPointBatchPrimitiveOptionalParameters", renderPassHint:"AgEStkGraphicsRenderPassHint") -> None:
        """Defines the positions, colors, and optional parameters of points in a point batch. The points are rendered in the primitive's reference frame. renderPassHint is provided for efficiency."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(colors) as arg_colors, \
             agmarshall.AgInterface_in_arg(optionalParameters, IStkGraphicsPointBatchPrimitiveOptionalParameters) as arg_optionalParameters, \
             agmarshall.AgEnum_arg(AgEStkGraphicsRenderPassHint, renderPassHint) as arg_renderPassHint:
            agcls.evaluate_hresult(self.__dict__["_SetWithOptionalParameters"](byref(arg_positions.COM_val), byref(arg_colors.COM_val), arg_optionalParameters.COM_val, arg_renderPassHint.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{ae6c6dca-3afe-4419-8aad-dd56bee51446}", IStkGraphicsPointBatchPrimitive)
agcls.AgTypeNameMap["IStkGraphicsPointBatchPrimitive"] = IStkGraphicsPointBatchPrimitive

class IStkGraphicsPointBatchPrimitiveOptionalParameters(object):
    """Optional per-point parameters for point batch primitive that overrides the point batch primitive's global parameters..."""
    _uuid = "{e8b88732-1377-483c-bf19-ffafeb1d8d52}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_SetPixelSizes"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsPointBatchPrimitiveOptionalParameters._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsPointBatchPrimitiveOptionalParameters from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsPointBatchPrimitiveOptionalParameters = agcom.GUID(IStkGraphicsPointBatchPrimitiveOptionalParameters._uuid)
        vtable_offset_local = IStkGraphicsPointBatchPrimitiveOptionalParameters._vtable_offset - 1
        self.__dict__["_SetPixelSizes"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPointBatchPrimitiveOptionalParameters, vtable_offset_local+1, POINTER(agcom.SAFEARRAY))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsPointBatchPrimitiveOptionalParameters.__dict__ and type(IStkGraphicsPointBatchPrimitiveOptionalParameters.__dict__[attrname]) == property:
            return IStkGraphicsPointBatchPrimitiveOptionalParameters.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsPointBatchPrimitiveOptionalParameters.")
    
    def SetPixelSizes(self, pixelSizes:list) -> None:
        """Defines a collection of pixel sizes, one for each point in the point batch."""
        with agmarshall.SAFEARRAY_arg(pixelSizes) as arg_pixelSizes:
            agcls.evaluate_hresult(self.__dict__["_SetPixelSizes"](byref(arg_pixelSizes.COM_val)))


agcls.AgClassCatalog.add_catalog_entry("{e8b88732-1377-483c-bf19-ffafeb1d8d52}", IStkGraphicsPointBatchPrimitiveOptionalParameters)
agcls.AgTypeNameMap["IStkGraphicsPointBatchPrimitiveOptionalParameters"] = IStkGraphicsPointBatchPrimitiveOptionalParameters

class IStkGraphicsPolylinePrimitive(object):
    """Renders a polyline in the 3D scene. Each line segment may have a different color. A polyline can be constructed with a position interpolator to render great arcs or rhumb lines."""
    _uuid = "{0122dc2b-4232-443d-b8da-09b42967b841}"
    _num_methods = 42
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetWidth"] = _raise_uninitialized_error
        self.__dict__["_SetWidth"] = _raise_uninitialized_error
        self.__dict__["_GetMinimumWidthSupported"] = _raise_uninitialized_error
        self.__dict__["_GetMaximumWidthSupported"] = _raise_uninitialized_error
        self.__dict__["_GetPositionInterpolator"] = _raise_uninitialized_error
        self.__dict__["_GetPolylineType"] = _raise_uninitialized_error
        self.__dict__["_GetSetHint"] = _raise_uninitialized_error
        self.__dict__["_GetDisplayOutline"] = _raise_uninitialized_error
        self.__dict__["_SetDisplayOutline"] = _raise_uninitialized_error
        self.__dict__["_GetOutlineColor"] = _raise_uninitialized_error
        self.__dict__["_SetOutlineColor"] = _raise_uninitialized_error
        self.__dict__["_GetOutlineTranslucency"] = _raise_uninitialized_error
        self.__dict__["_SetOutlineTranslucency"] = _raise_uninitialized_error
        self.__dict__["_GetOutlineWidth"] = _raise_uninitialized_error
        self.__dict__["_SetOutlineWidth"] = _raise_uninitialized_error
        self.__dict__["_GetPerItemPickingEnabled"] = _raise_uninitialized_error
        self.__dict__["_SetPerItemPickingEnabled"] = _raise_uninitialized_error
        self.__dict__["_Set"] = _raise_uninitialized_error
        self.__dict__["_SetWithColors"] = _raise_uninitialized_error
        self.__dict__["_SetWithColorsAndHint"] = _raise_uninitialized_error
        self.__dict__["_SetWithSurfaceShapesResult"] = _raise_uninitialized_error
        self.__dict__["_SetWithSurfaceTriangulatorResult"] = _raise_uninitialized_error
        self.__dict__["_SetWithSolidTriangulatorResult"] = _raise_uninitialized_error
        self.__dict__["_SetCartographic"] = _raise_uninitialized_error
        self.__dict__["_SetCartographicWithColors"] = _raise_uninitialized_error
        self.__dict__["_SetCartographicWithColorsAndHint"] = _raise_uninitialized_error
        self.__dict__["_SetSubset"] = _raise_uninitialized_error
        self.__dict__["_SetSubsetCartographic"] = _raise_uninitialized_error
        self.__dict__["_SetPartial"] = _raise_uninitialized_error
        self.__dict__["_SetPartialWithIndicesOrder"] = _raise_uninitialized_error
        self.__dict__["_SetPartialWithColors"] = _raise_uninitialized_error
        self.__dict__["_SetPartialWithColorsIndicesOrderAndRenderPassHint"] = _raise_uninitialized_error
        self.__dict__["_SetPartialCartographic"] = _raise_uninitialized_error
        self.__dict__["_SetPartialCartographicWithIndicesOrder"] = _raise_uninitialized_error
        self.__dict__["_SetPartialCartographicWithColors"] = _raise_uninitialized_error
        self.__dict__["_SetPartialCartographicWithColorsIndicesOrderAndRenderPass"] = _raise_uninitialized_error
        self.__dict__["_GetCentralBodyClipped"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBodyClipped"] = _raise_uninitialized_error
        self.__dict__["_SetWithColorsAndOptionalParameters"] = _raise_uninitialized_error
        self.__dict__["_SetCartographicWithColorsAndOptionalParameters"] = _raise_uninitialized_error
        self.__dict__["_SetPartialWithColorsAndOptionalParameters"] = _raise_uninitialized_error
        self.__dict__["_SetPartialCartographicWithOptionalParameters"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsPolylinePrimitive._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsPolylinePrimitive from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsPolylinePrimitive = agcom.GUID(IStkGraphicsPolylinePrimitive._uuid)
        vtable_offset_local = IStkGraphicsPolylinePrimitive._vtable_offset - 1
        self.__dict__["_GetWidth"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPolylinePrimitive, vtable_offset_local+1, POINTER(agcom.FLOAT))
        self.__dict__["_SetWidth"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPolylinePrimitive, vtable_offset_local+2, agcom.FLOAT)
        self.__dict__["_GetMinimumWidthSupported"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPolylinePrimitive, vtable_offset_local+3, POINTER(agcom.FLOAT))
        self.__dict__["_GetMaximumWidthSupported"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPolylinePrimitive, vtable_offset_local+4, POINTER(agcom.FLOAT))
        self.__dict__["_GetPositionInterpolator"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPolylinePrimitive, vtable_offset_local+5, POINTER(agcom.PVOID))
        self.__dict__["_GetPolylineType"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPolylinePrimitive, vtable_offset_local+6, POINTER(agcom.LONG))
        self.__dict__["_GetSetHint"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPolylinePrimitive, vtable_offset_local+7, POINTER(agcom.LONG))
        self.__dict__["_GetDisplayOutline"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPolylinePrimitive, vtable_offset_local+8, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetDisplayOutline"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPolylinePrimitive, vtable_offset_local+9, agcom.VARIANT_BOOL)
        self.__dict__["_GetOutlineColor"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPolylinePrimitive, vtable_offset_local+10, POINTER(agcom.OLE_COLOR))
        self.__dict__["_SetOutlineColor"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPolylinePrimitive, vtable_offset_local+11, agcom.OLE_COLOR)
        self.__dict__["_GetOutlineTranslucency"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPolylinePrimitive, vtable_offset_local+12, POINTER(agcom.FLOAT))
        self.__dict__["_SetOutlineTranslucency"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPolylinePrimitive, vtable_offset_local+13, agcom.FLOAT)
        self.__dict__["_GetOutlineWidth"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPolylinePrimitive, vtable_offset_local+14, POINTER(agcom.FLOAT))
        self.__dict__["_SetOutlineWidth"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPolylinePrimitive, vtable_offset_local+15, agcom.FLOAT)
        self.__dict__["_GetPerItemPickingEnabled"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPolylinePrimitive, vtable_offset_local+16, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetPerItemPickingEnabled"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPolylinePrimitive, vtable_offset_local+17, agcom.VARIANT_BOOL)
        self.__dict__["_Set"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPolylinePrimitive, vtable_offset_local+18, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetWithColors"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPolylinePrimitive, vtable_offset_local+19, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetWithColorsAndHint"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPolylinePrimitive, vtable_offset_local+20, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.LONG)
        self.__dict__["_SetWithSurfaceShapesResult"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPolylinePrimitive, vtable_offset_local+21, agcom.PVOID)
        self.__dict__["_SetWithSurfaceTriangulatorResult"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPolylinePrimitive, vtable_offset_local+22, agcom.PVOID)
        self.__dict__["_SetWithSolidTriangulatorResult"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPolylinePrimitive, vtable_offset_local+23, agcom.PVOID)
        self.__dict__["_SetCartographic"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPolylinePrimitive, vtable_offset_local+24, agcom.BSTR, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetCartographicWithColors"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPolylinePrimitive, vtable_offset_local+25, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetCartographicWithColorsAndHint"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPolylinePrimitive, vtable_offset_local+26, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.LONG)
        self.__dict__["_SetSubset"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPolylinePrimitive, vtable_offset_local+27, POINTER(agcom.SAFEARRAY), agcom.INT, agcom.INT)
        self.__dict__["_SetSubsetCartographic"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPolylinePrimitive, vtable_offset_local+28, agcom.BSTR, POINTER(agcom.SAFEARRAY), agcom.INT, agcom.INT)
        self.__dict__["_SetPartial"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPolylinePrimitive, vtable_offset_local+29, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetPartialWithIndicesOrder"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPolylinePrimitive, vtable_offset_local+30, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.LONG)
        self.__dict__["_SetPartialWithColors"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPolylinePrimitive, vtable_offset_local+31, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetPartialWithColorsIndicesOrderAndRenderPassHint"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPolylinePrimitive, vtable_offset_local+32, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.LONG, agcom.LONG)
        self.__dict__["_SetPartialCartographic"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPolylinePrimitive, vtable_offset_local+33, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetPartialCartographicWithIndicesOrder"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPolylinePrimitive, vtable_offset_local+34, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.LONG)
        self.__dict__["_SetPartialCartographicWithColors"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPolylinePrimitive, vtable_offset_local+35, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetPartialCartographicWithColorsIndicesOrderAndRenderPass"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPolylinePrimitive, vtable_offset_local+36, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.LONG, agcom.LONG)
        self.__dict__["_GetCentralBodyClipped"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPolylinePrimitive, vtable_offset_local+37, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetCentralBodyClipped"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPolylinePrimitive, vtable_offset_local+38, agcom.VARIANT_BOOL)
        self.__dict__["_SetWithColorsAndOptionalParameters"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPolylinePrimitive, vtable_offset_local+39, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.PVOID)
        self.__dict__["_SetCartographicWithColorsAndOptionalParameters"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPolylinePrimitive, vtable_offset_local+40, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.PVOID)
        self.__dict__["_SetPartialWithColorsAndOptionalParameters"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPolylinePrimitive, vtable_offset_local+41, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.PVOID, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetPartialCartographicWithOptionalParameters"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPolylinePrimitive, vtable_offset_local+42, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.PVOID, POINTER(agcom.SAFEARRAY))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsPolylinePrimitive.__dict__ and type(IStkGraphicsPolylinePrimitive.__dict__[attrname]) == property:
            return IStkGraphicsPolylinePrimitive.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsPolylinePrimitive.")
    
    @property
    def Width(self) -> float:
        """Gets or sets the line width, in pixels."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetWidth"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Width.setter
    def Width(self, width:float) -> None:
        with agmarshall.FLOAT_arg(width) as arg_width:
            agcls.evaluate_hresult(self.__dict__["_SetWidth"](arg_width.COM_val))

    @property
    def MinimumWidthSupported(self) -> float:
        """Gets the minimum width, in pixels, supported by the video card."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinimumWidthSupported"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def MaximumWidthSupported(self) -> float:
        """Gets the maximum width, in pixels, supported by the video card."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaximumWidthSupported"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def PositionInterpolator(self) -> "IStkGraphicsPositionInterpolator":
        """Gets the position interpolator applied to positions passed to Set, SetCartographic, SetSubset, and SetSubsetCartographic methods. When this property is null, linear interpolation is used."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPositionInterpolator"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def PolylineType(self) -> "AgEStkGraphicsPolylineType":
        """Gets how the polyline interprets the positions passed to Set methods."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsPolylineType) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPolylineType"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def SetHint(self) -> "AgEStkGraphicsSetHint":
        """Gets the primitive's set hint. See the Set Hint Performance Overview for selecting an appropriate value to construct the primitive with."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsSetHint) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSetHint"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def DisplayOutline(self) -> bool:
        """Gets or sets whether an outline is rendered around the polyline."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDisplayOutline"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @DisplayOutline.setter
    def DisplayOutline(self, displayOutline:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(displayOutline) as arg_displayOutline:
            agcls.evaluate_hresult(self.__dict__["_SetDisplayOutline"](arg_displayOutline.COM_val))

    @property
    def OutlineColor(self) -> agcolor.Color:
        """Gets or sets the outline's color."""
        with agmarshall.OLE_COLOR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetOutlineColor"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @OutlineColor.setter
    def OutlineColor(self, outlineColor:agcolor.Color) -> None:
        with agmarshall.OLE_COLOR_arg(outlineColor) as arg_outlineColor:
            agcls.evaluate_hresult(self.__dict__["_SetOutlineColor"](arg_outlineColor.COM_val))

    @property
    def OutlineTranslucency(self) -> float:
        """Gets or sets the translucency of the outline. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetOutlineTranslucency"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @OutlineTranslucency.setter
    def OutlineTranslucency(self, outlineTranslucency:float) -> None:
        with agmarshall.FLOAT_arg(outlineTranslucency) as arg_outlineTranslucency:
            agcls.evaluate_hresult(self.__dict__["_SetOutlineTranslucency"](arg_outlineTranslucency.COM_val))

    @property
    def OutlineWidth(self) -> float:
        """Gets or sets the width, in pixels, of the outline around the polyline."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetOutlineWidth"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @OutlineWidth.setter
    def OutlineWidth(self, outlineWidth:float) -> None:
        with agmarshall.FLOAT_arg(outlineWidth) as arg_outlineWidth:
            agcls.evaluate_hresult(self.__dict__["_SetOutlineWidth"](arg_outlineWidth.COM_val))

    @property
    def PerItemPickingEnabled(self) -> bool:
        """Gets or sets whether individual line indices will be included in the pick results returned from the scene's Pick method. Each line index that is picked will be returned as a batch primitive index."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPerItemPickingEnabled"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @PerItemPickingEnabled.setter
    def PerItemPickingEnabled(self, perItemPickingEnabled:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(perItemPickingEnabled) as arg_perItemPickingEnabled:
            agcls.evaluate_hresult(self.__dict__["_SetPerItemPickingEnabled"](arg_perItemPickingEnabled.COM_val))

    def Set(self, positions:list) -> None:
        """Defines the positions for a polyline primitive. The polyline is rendered in its reference frame."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions:
            agcls.evaluate_hresult(self.__dict__["_Set"](byref(arg_positions.COM_val)))

    def SetWithColors(self, positions:list, colors:list) -> None:
        """Defines the positions and colors of a polyline. The polyline is rendered in its reference frame."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(colors) as arg_colors:
            agcls.evaluate_hresult(self.__dict__["_SetWithColors"](byref(arg_positions.COM_val), byref(arg_colors.COM_val)))

    def SetWithColorsAndHint(self, positions:list, colors:list, renderPassHint:"AgEStkGraphicsRenderPassHint") -> None:
        """Defines the positions and colors of a polyline. The polyline is rendered in its reference frame. renderPassHint is provided for efficiency."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(colors) as arg_colors, \
             agmarshall.AgEnum_arg(AgEStkGraphicsRenderPassHint, renderPassHint) as arg_renderPassHint:
            agcls.evaluate_hresult(self.__dict__["_SetWithColorsAndHint"](byref(arg_positions.COM_val), byref(arg_colors.COM_val), arg_renderPassHint.COM_val))

    def SetWithSurfaceShapesResult(self, surfaceShapesResult:"IStkGraphicsSurfaceShapesResult") -> None:
        """Defines the positions of a polyline using the positions of the specified surfaceShapesResult."""
        with agmarshall.AgInterface_in_arg(surfaceShapesResult, IStkGraphicsSurfaceShapesResult) as arg_surfaceShapesResult:
            agcls.evaluate_hresult(self.__dict__["_SetWithSurfaceShapesResult"](arg_surfaceShapesResult.COM_val))

    def SetWithSurfaceTriangulatorResult(self, surfaceTriangulatorResult:"IStkGraphicsSurfaceTriangulatorResult") -> None:
        """Defines the positions of a polyline using the boundary positions of the specified surfaceTriangulatorResult."""
        with agmarshall.AgInterface_in_arg(surfaceTriangulatorResult, IStkGraphicsSurfaceTriangulatorResult) as arg_surfaceTriangulatorResult:
            agcls.evaluate_hresult(self.__dict__["_SetWithSurfaceTriangulatorResult"](arg_surfaceTriangulatorResult.COM_val))

    def SetWithSolidTriangulatorResult(self, solidTriangulatorResult:"IStkGraphicsSolidTriangulatorResult") -> None:
        """Defines the positions of a polyline using the outline positions of the specified solidTriangulatorResult."""
        with agmarshall.AgInterface_in_arg(solidTriangulatorResult, IStkGraphicsSolidTriangulatorResult) as arg_solidTriangulatorResult:
            agcls.evaluate_hresult(self.__dict__["_SetWithSolidTriangulatorResult"](arg_solidTriangulatorResult.COM_val))

    def SetCartographic(self, centralBody:str, positions:list) -> None:
        """For convenience. Defines the positions of a polyline using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling Set."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions:
            agcls.evaluate_hresult(self.__dict__["_SetCartographic"](arg_centralBody.COM_val, byref(arg_positions.COM_val)))

    def SetCartographicWithColors(self, centralBody:str, positions:list, colors:list) -> None:
        """For convenience. Defines the positions and colors of a polyline using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling Set."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(colors) as arg_colors:
            agcls.evaluate_hresult(self.__dict__["_SetCartographicWithColors"](arg_centralBody.COM_val, byref(arg_positions.COM_val), byref(arg_colors.COM_val)))

    def SetCartographicWithColorsAndHint(self, centralBody:str, positions:list, colors:list, renderPassHint:"AgEStkGraphicsRenderPassHint") -> None:
        """For convenience. Defines the positions and colors of a polyline using cartographic positions. renderPassHint is provided for efficiency. This is equivalent to converting each position in positions to cartesian and calling Set."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(colors) as arg_colors, \
             agmarshall.AgEnum_arg(AgEStkGraphicsRenderPassHint, renderPassHint) as arg_renderPassHint:
            agcls.evaluate_hresult(self.__dict__["_SetCartographicWithColorsAndHint"](arg_centralBody.COM_val, byref(arg_positions.COM_val), byref(arg_colors.COM_val), arg_renderPassHint.COM_val))

    def SetSubset(self, positions:list, index:int, count:int) -> None:
        """Defines the positions of a polyline using a subset of input positions."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.INT_arg(index) as arg_index, \
             agmarshall.INT_arg(count) as arg_count:
            agcls.evaluate_hresult(self.__dict__["_SetSubset"](byref(arg_positions.COM_val), arg_index.COM_val, arg_count.COM_val))

    def SetSubsetCartographic(self, centralBody:str, positions:list, index:int, count:int) -> None:
        """For convenience. Defines the positions of a polyline using a subset of input cartographic positions. This is equivalent to converting the subset of positions to cartesian and calling SetSubset."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.INT_arg(index) as arg_index, \
             agmarshall.INT_arg(count) as arg_count:
            agcls.evaluate_hresult(self.__dict__["_SetSubsetCartographic"](arg_centralBody.COM_val, byref(arg_positions.COM_val), arg_index.COM_val, arg_count.COM_val))

    def SetPartial(self, positions:list, indices:list) -> None:
        """Updates a subset of positions in a polyline."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices:
            agcls.evaluate_hresult(self.__dict__["_SetPartial"](byref(arg_positions.COM_val), byref(arg_indices.COM_val)))

    def SetPartialWithIndicesOrder(self, positions:list, indices:list, indicesOrderHint:"AgEStkGraphicsIndicesOrderHint") -> None:
        """Updates a subset of positions in a polyline."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices, \
             agmarshall.AgEnum_arg(AgEStkGraphicsIndicesOrderHint, indicesOrderHint) as arg_indicesOrderHint:
            agcls.evaluate_hresult(self.__dict__["_SetPartialWithIndicesOrder"](byref(arg_positions.COM_val), byref(arg_indices.COM_val), arg_indicesOrderHint.COM_val))

    def SetPartialWithColors(self, positions:list, colors:list, indices:list) -> None:
        """Updates a subset of positions and/or colors in a polyline."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(colors) as arg_colors, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices:
            agcls.evaluate_hresult(self.__dict__["_SetPartialWithColors"](byref(arg_positions.COM_val), byref(arg_colors.COM_val), byref(arg_indices.COM_val)))

    def SetPartialWithColorsIndicesOrderAndRenderPassHint(self, positions:list, colors:list, indices:list, indicesOrderHint:"AgEStkGraphicsIndicesOrderHint", renderPassHint:"AgEStkGraphicsRenderPassHint") -> None:
        """Updates a subset of positions and/or colors in a polyline."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(colors) as arg_colors, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices, \
             agmarshall.AgEnum_arg(AgEStkGraphicsIndicesOrderHint, indicesOrderHint) as arg_indicesOrderHint, \
             agmarshall.AgEnum_arg(AgEStkGraphicsRenderPassHint, renderPassHint) as arg_renderPassHint:
            agcls.evaluate_hresult(self.__dict__["_SetPartialWithColorsIndicesOrderAndRenderPassHint"](byref(arg_positions.COM_val), byref(arg_colors.COM_val), byref(arg_indices.COM_val), arg_indicesOrderHint.COM_val, arg_renderPassHint.COM_val))

    def SetPartialCartographic(self, centralBody:str, positions:list, indices:list) -> None:
        """For convenience. Updates a subset of positions in a polyline using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling SetPartial"""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices:
            agcls.evaluate_hresult(self.__dict__["_SetPartialCartographic"](arg_centralBody.COM_val, byref(arg_positions.COM_val), byref(arg_indices.COM_val)))

    def SetPartialCartographicWithIndicesOrder(self, centralBody:str, positions:list, indices:list, indicesOrderHint:"AgEStkGraphicsIndicesOrderHint") -> None:
        """For convenience. Updates a subset of positions in a polyline using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling SetPartial"""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices, \
             agmarshall.AgEnum_arg(AgEStkGraphicsIndicesOrderHint, indicesOrderHint) as arg_indicesOrderHint:
            agcls.evaluate_hresult(self.__dict__["_SetPartialCartographicWithIndicesOrder"](arg_centralBody.COM_val, byref(arg_positions.COM_val), byref(arg_indices.COM_val), arg_indicesOrderHint.COM_val))

    def SetPartialCartographicWithColors(self, centralBody:str, positions:list, colors:list, indices:list) -> None:
        """For convenience. Updates a subset of positions and/or colors in a polyline using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling SetPartial"""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(colors) as arg_colors, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices:
            agcls.evaluate_hresult(self.__dict__["_SetPartialCartographicWithColors"](arg_centralBody.COM_val, byref(arg_positions.COM_val), byref(arg_colors.COM_val), byref(arg_indices.COM_val)))

    def SetPartialCartographicWithColorsIndicesOrderAndRenderPass(self, centralBody:str, positions:list, colors:list, indices:list, indicesOrderHint:"AgEStkGraphicsIndicesOrderHint", renderPassHint:"AgEStkGraphicsRenderPassHint") -> None:
        """For convenience. Updates a subset of positions and/or colors in a polyline using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling SetPartial"""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(colors) as arg_colors, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices, \
             agmarshall.AgEnum_arg(AgEStkGraphicsIndicesOrderHint, indicesOrderHint) as arg_indicesOrderHint, \
             agmarshall.AgEnum_arg(AgEStkGraphicsRenderPassHint, renderPassHint) as arg_renderPassHint:
            agcls.evaluate_hresult(self.__dict__["_SetPartialCartographicWithColorsIndicesOrderAndRenderPass"](arg_centralBody.COM_val, byref(arg_positions.COM_val), byref(arg_colors.COM_val), byref(arg_indices.COM_val), arg_indicesOrderHint.COM_val, arg_renderPassHint.COM_val))

    @property
    def CentralBodyClipped(self) -> bool:
        """Gets or sets whether the polyline will be clipped by the central body."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyClipped"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @CentralBodyClipped.setter
    def CentralBodyClipped(self, centralBodyClipped:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(centralBodyClipped) as arg_centralBodyClipped:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBodyClipped"](arg_centralBodyClipped.COM_val))

    def SetWithColorsAndOptionalParameters(self, positions:list, colors:list, optionalParameters:"IStkGraphicsPolylinePrimitiveOptionalParameters") -> None:
        """Defines the positions, colors, and/or optional point properties of a polyline. The polyline is rendered in its reference frame."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(colors) as arg_colors, \
             agmarshall.AgInterface_in_arg(optionalParameters, IStkGraphicsPolylinePrimitiveOptionalParameters) as arg_optionalParameters:
            agcls.evaluate_hresult(self.__dict__["_SetWithColorsAndOptionalParameters"](byref(arg_positions.COM_val), byref(arg_colors.COM_val), arg_optionalParameters.COM_val))

    def SetCartographicWithColorsAndOptionalParameters(self, centralBody:str, positions:list, colors:list, optionalParameters:"IStkGraphicsPolylinePrimitiveOptionalParameters") -> None:
        """For convenience. Defines the positions, colors, and/or optional point properties of a polyline using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling Set."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(colors) as arg_colors, \
             agmarshall.AgInterface_in_arg(optionalParameters, IStkGraphicsPolylinePrimitiveOptionalParameters) as arg_optionalParameters:
            agcls.evaluate_hresult(self.__dict__["_SetCartographicWithColorsAndOptionalParameters"](arg_centralBody.COM_val, byref(arg_positions.COM_val), byref(arg_colors.COM_val), arg_optionalParameters.COM_val))

    def SetPartialWithColorsAndOptionalParameters(self, positions:list, colors:list, optionalParameters:"IStkGraphicsPolylinePrimitiveOptionalParameters", indices:list) -> None:
        """Updates a subset of positions, colors, and/or optional point properties in a polyline."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(colors) as arg_colors, \
             agmarshall.AgInterface_in_arg(optionalParameters, IStkGraphicsPolylinePrimitiveOptionalParameters) as arg_optionalParameters, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices:
            agcls.evaluate_hresult(self.__dict__["_SetPartialWithColorsAndOptionalParameters"](byref(arg_positions.COM_val), byref(arg_colors.COM_val), arg_optionalParameters.COM_val, byref(arg_indices.COM_val)))

    def SetPartialCartographicWithOptionalParameters(self, centralBody:str, positions:list, colors:list, optionalParameters:"IStkGraphicsPolylinePrimitiveOptionalParameters", indices:list) -> None:
        """For convenience. Updates a subset of positions, colors, and/or optional point properties in a polyline using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling SetPartial"""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(colors) as arg_colors, \
             agmarshall.AgInterface_in_arg(optionalParameters, IStkGraphicsPolylinePrimitiveOptionalParameters) as arg_optionalParameters, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices:
            agcls.evaluate_hresult(self.__dict__["_SetPartialCartographicWithOptionalParameters"](arg_centralBody.COM_val, byref(arg_positions.COM_val), byref(arg_colors.COM_val), arg_optionalParameters.COM_val, byref(arg_indices.COM_val)))


agcls.AgClassCatalog.add_catalog_entry("{0122dc2b-4232-443d-b8da-09b42967b841}", IStkGraphicsPolylinePrimitive)
agcls.AgTypeNameMap["IStkGraphicsPolylinePrimitive"] = IStkGraphicsPolylinePrimitive

class IStkGraphicsPolylinePrimitiveOptionalParameters(object):
    """Optional per-point or per-segment parameters for polyline primitive that overrides the polyline primitive's global parameters..."""
    _uuid = "{7ccefc1c-372f-43ff-91ca-fca3de401669}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_SetTimeIntervals"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsPolylinePrimitiveOptionalParameters._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsPolylinePrimitiveOptionalParameters from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsPolylinePrimitiveOptionalParameters = agcom.GUID(IStkGraphicsPolylinePrimitiveOptionalParameters._uuid)
        vtable_offset_local = IStkGraphicsPolylinePrimitiveOptionalParameters._vtable_offset - 1
        self.__dict__["_SetTimeIntervals"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPolylinePrimitiveOptionalParameters, vtable_offset_local+1, POINTER(agcom.SAFEARRAY))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsPolylinePrimitiveOptionalParameters.__dict__ and type(IStkGraphicsPolylinePrimitiveOptionalParameters.__dict__[attrname]) == property:
            return IStkGraphicsPolylinePrimitiveOptionalParameters.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsPolylinePrimitiveOptionalParameters.")
    
    def SetTimeIntervals(self, timeIntervals:list) -> None:
        """Defines a collection of TimeIntervals defined by MinimumTime and MaximumTime in Epoch Seconds, one for each point in the Polyline"""
        with agmarshall.SAFEARRAY_arg(timeIntervals) as arg_timeIntervals:
            agcls.evaluate_hresult(self.__dict__["_SetTimeIntervals"](byref(arg_timeIntervals.COM_val)))


agcls.AgClassCatalog.add_catalog_entry("{7ccefc1c-372f-43ff-91ca-fca3de401669}", IStkGraphicsPolylinePrimitiveOptionalParameters)
agcls.AgTypeNameMap["IStkGraphicsPolylinePrimitiveOptionalParameters"] = IStkGraphicsPolylinePrimitiveOptionalParameters

class IStkGraphicsPositionInterpolator(object):
    """Position interpolators compute positions based on a collection of input positions. Position interpolators are used in conjunction with the polyline primitive to render things such as great arcs and rhumb lines."""
    _uuid = "{512c0d62-559e-42ce-98e2-218c02662290}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetPolylineType"] = _raise_uninitialized_error
        self.__dict__["_Interpolate"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsPositionInterpolator._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsPositionInterpolator from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsPositionInterpolator = agcom.GUID(IStkGraphicsPositionInterpolator._uuid)
        vtable_offset_local = IStkGraphicsPositionInterpolator._vtable_offset - 1
        self.__dict__["_GetPolylineType"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPositionInterpolator, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_Interpolate"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPositionInterpolator, vtable_offset_local+2, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsPositionInterpolator.__dict__ and type(IStkGraphicsPositionInterpolator.__dict__[attrname]) == property:
            return IStkGraphicsPositionInterpolator.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsPositionInterpolator.")
    
    @property
    def PolylineType(self) -> "AgEStkGraphicsPolylineType":
        """Gets the polyline type of positions returned from interpolate"""
        with agmarshall.AgEnum_arg(AgEStkGraphicsPolylineType) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPolylineType"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def Interpolate(self, positions:list) -> list:
        """Computes interpolated positions based on the input positions. Returns an array of positions in the order x, y, z."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Interpolate"](byref(arg_positions.COM_val), byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{512c0d62-559e-42ce-98e2-218c02662290}", IStkGraphicsPositionInterpolator)
agcls.AgTypeNameMap["IStkGraphicsPositionInterpolator"] = IStkGraphicsPositionInterpolator

class IStkGraphicsPrimitive(object):
    """Primitives represent objects rendered in the 3D scene."""
    _uuid = "{b593dc7b-315a-4c37-9f3c-42dfbd996ac2}"
    _num_methods = 16
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetReferenceFrame"] = _raise_uninitialized_error
        self.__dict__["_SetReferenceFrame"] = _raise_uninitialized_error
        self.__dict__["_GetBoundingSphere"] = _raise_uninitialized_error
        self.__dict__["_SetBoundingSphere"] = _raise_uninitialized_error
        self.__dict__["_GetAutomaticallyComputeBoundingSphere"] = _raise_uninitialized_error
        self.__dict__["_SetAutomaticallyComputeBoundingSphere"] = _raise_uninitialized_error
        self.__dict__["_GetDisplayCondition"] = _raise_uninitialized_error
        self.__dict__["_SetDisplayCondition"] = _raise_uninitialized_error
        self.__dict__["_GetDisplay"] = _raise_uninitialized_error
        self.__dict__["_SetDisplay"] = _raise_uninitialized_error
        self.__dict__["_GetColor"] = _raise_uninitialized_error
        self.__dict__["_SetColor"] = _raise_uninitialized_error
        self.__dict__["_GetTranslucency"] = _raise_uninitialized_error
        self.__dict__["_SetTranslucency"] = _raise_uninitialized_error
        self.__dict__["_GetTag"] = _raise_uninitialized_error
        self.__dict__["_SetTag"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsPrimitive._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsPrimitive from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsPrimitive = agcom.GUID(IStkGraphicsPrimitive._uuid)
        vtable_offset_local = IStkGraphicsPrimitive._vtable_offset - 1
        self.__dict__["_GetReferenceFrame"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPrimitive, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_SetReferenceFrame"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPrimitive, vtable_offset_local+2, agcom.PVOID)
        self.__dict__["_GetBoundingSphere"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPrimitive, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_SetBoundingSphere"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPrimitive, vtable_offset_local+4, agcom.PVOID)
        self.__dict__["_GetAutomaticallyComputeBoundingSphere"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPrimitive, vtable_offset_local+5, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetAutomaticallyComputeBoundingSphere"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPrimitive, vtable_offset_local+6, agcom.VARIANT_BOOL)
        self.__dict__["_GetDisplayCondition"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPrimitive, vtable_offset_local+7, POINTER(agcom.PVOID))
        self.__dict__["_SetDisplayCondition"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPrimitive, vtable_offset_local+8, agcom.PVOID)
        self.__dict__["_GetDisplay"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPrimitive, vtable_offset_local+9, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetDisplay"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPrimitive, vtable_offset_local+10, agcom.VARIANT_BOOL)
        self.__dict__["_GetColor"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPrimitive, vtable_offset_local+11, POINTER(agcom.OLE_COLOR))
        self.__dict__["_SetColor"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPrimitive, vtable_offset_local+12, agcom.OLE_COLOR)
        self.__dict__["_GetTranslucency"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPrimitive, vtable_offset_local+13, POINTER(agcom.FLOAT))
        self.__dict__["_SetTranslucency"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPrimitive, vtable_offset_local+14, agcom.FLOAT)
        self.__dict__["_GetTag"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPrimitive, vtable_offset_local+15, POINTER(agcom.VARIANT))
        self.__dict__["_SetTag"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPrimitive, vtable_offset_local+16, agcom.VARIANT)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsPrimitive.__dict__ and type(IStkGraphicsPrimitive.__dict__[attrname]) == property:
            return IStkGraphicsPrimitive.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsPrimitive.")
    
    @property
    def ReferenceFrame(self) -> "ICrdnSystem":
        """Gets or sets the reference frame this primitive is defined and rendered in."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetReferenceFrame"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @ReferenceFrame.setter
    def ReferenceFrame(self, referenceFrame:"ICrdnSystem") -> None:
        with agmarshall.AgInterface_in_arg(referenceFrame, ICrdnSystem) as arg_referenceFrame:
            agcls.evaluate_hresult(self.__dict__["_SetReferenceFrame"](arg_referenceFrame.COM_val))

    @property
    def BoundingSphere(self) -> "IStkGraphicsBoundingSphere":
        """Gets or sets the bounding sphere that encompasses the primitive. The center is defined in the primitive's reference frame."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBoundingSphere"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @BoundingSphere.setter
    def BoundingSphere(self, boundingSphere:"IStkGraphicsBoundingSphere") -> None:
        with agmarshall.AgInterface_in_arg(boundingSphere, IStkGraphicsBoundingSphere) as arg_boundingSphere:
            agcls.evaluate_hresult(self.__dict__["_SetBoundingSphere"](arg_boundingSphere.COM_val))

    @property
    def AutomaticallyComputeBoundingSphere(self) -> bool:
        """Gets or sets if the primitive's bounding sphere is automatically computed."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAutomaticallyComputeBoundingSphere"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @AutomaticallyComputeBoundingSphere.setter
    def AutomaticallyComputeBoundingSphere(self, automaticallyComputeBoundingSphere:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(automaticallyComputeBoundingSphere) as arg_automaticallyComputeBoundingSphere:
            agcls.evaluate_hresult(self.__dict__["_SetAutomaticallyComputeBoundingSphere"](arg_automaticallyComputeBoundingSphere.COM_val))

    @property
    def DisplayCondition(self) -> "IStkGraphicsDisplayCondition":
        """Gets or sets the display condition that determines if the primitive should be rendered. Both this and display must evaluate to true for the primitive to be rendered."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDisplayCondition"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @DisplayCondition.setter
    def DisplayCondition(self, displayCondition:"IStkGraphicsDisplayCondition") -> None:
        with agmarshall.AgInterface_in_arg(displayCondition, IStkGraphicsDisplayCondition) as arg_displayCondition:
            agcls.evaluate_hresult(self.__dict__["_SetDisplayCondition"](arg_displayCondition.COM_val))

    @property
    def Display(self) -> bool:
        """Gets or sets if the primitive should be rendered. Both this and display condition must evaluate to true for the primitive to be rendered."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDisplay"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Display.setter
    def Display(self, display:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(display) as arg_display:
            agcls.evaluate_hresult(self.__dict__["_SetDisplay"](arg_display.COM_val))

    @property
    def Color(self) -> agcolor.Color:
        """Gets or sets the primitive's color."""
        with agmarshall.OLE_COLOR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetColor"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Color.setter
    def Color(self, color:agcolor.Color) -> None:
        with agmarshall.OLE_COLOR_arg(color) as arg_color:
            agcls.evaluate_hresult(self.__dict__["_SetColor"](arg_color.COM_val))

    @property
    def Translucency(self) -> float:
        """Gets or sets the primitive's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTranslucency"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Translucency.setter
    def Translucency(self, translucency:float) -> None:
        with agmarshall.FLOAT_arg(translucency) as arg_translucency:
            agcls.evaluate_hresult(self.__dict__["_SetTranslucency"](arg_translucency.COM_val))

    @property
    def Tag(self) -> typing.Any:
        """Gets or sets custom value associated with this primitive."""
        with agmarshall.VARIANT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTag"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Tag.setter
    def Tag(self, tag:typing.Any) -> None:
        with agmarshall.VARIANT_arg(tag) as arg_tag:
            agcls.evaluate_hresult(self.__dict__["_SetTag"](arg_tag.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{b593dc7b-315a-4c37-9f3c-42dfbd996ac2}", IStkGraphicsPrimitive)
agcls.AgTypeNameMap["IStkGraphicsPrimitive"] = IStkGraphicsPrimitive

class IStkGraphicsPrimitiveManager(object):
    """The primitive manager contains spatial data structures used to efficiently render primitives. Once a primitive is constructed, it must be added to the primitive manager before it will be rendered."""
    _uuid = "{39006599-c2ac-4f46-a190-958d173714fc}"
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        self.__dict__["_GetPrecisionExponent"] = _raise_uninitialized_error
        self.__dict__["_SetPrecisionExponent"] = _raise_uninitialized_error
        self.__dict__["_GetTranslucentPrimitivesSortOrder"] = _raise_uninitialized_error
        self.__dict__["_SetTranslucentPrimitivesSortOrder"] = _raise_uninitialized_error
        self.__dict__["_Add"] = _raise_uninitialized_error
        self.__dict__["_Remove"] = _raise_uninitialized_error
        self.__dict__["_Contains"] = _raise_uninitialized_error
        self.__dict__["_Clear"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsPrimitiveManager._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsPrimitiveManager from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsPrimitiveManager = agcom.GUID(IStkGraphicsPrimitiveManager._uuid)
        vtable_offset_local = IStkGraphicsPrimitiveManager._vtable_offset - 1
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPrimitiveManager, vtable_offset_local+1, POINTER(agcom.INT))
        self.__dict__["_GetPrecisionExponent"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPrimitiveManager, vtable_offset_local+2, POINTER(agcom.INT))
        self.__dict__["_SetPrecisionExponent"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPrimitiveManager, vtable_offset_local+3, agcom.INT)
        self.__dict__["_GetTranslucentPrimitivesSortOrder"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPrimitiveManager, vtable_offset_local+4, POINTER(agcom.LONG))
        self.__dict__["_SetTranslucentPrimitivesSortOrder"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPrimitiveManager, vtable_offset_local+5, agcom.LONG)
        self.__dict__["_Add"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPrimitiveManager, vtable_offset_local+6, agcom.PVOID)
        self.__dict__["_Remove"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPrimitiveManager, vtable_offset_local+7, agcom.PVOID)
        self.__dict__["_Contains"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPrimitiveManager, vtable_offset_local+8, agcom.PVOID, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_Clear"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPrimitiveManager, vtable_offset_local+9, )
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPrimitiveManager, vtable_offset_local+10, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsPrimitiveManager.__dict__ and type(IStkGraphicsPrimitiveManager.__dict__[attrname]) == property:
            return IStkGraphicsPrimitiveManager.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsPrimitiveManager.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> typing.Any:
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    
    @property
    def Count(self) -> int:
        """Gets the number of primitives in the manager."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def PrecisionExponent(self) -> int:
        """This property is deprecated. This property is no longer in use Gets or sets the exponent used to compute the maximum precision for primitive rendering. For example, a value of -3 indicates the maximum precision of 2^-3, 0.125 m along the x, y, or z axis..."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPrecisionExponent"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @PrecisionExponent.setter
    def PrecisionExponent(self, precisionExponent:int) -> None:
        with agmarshall.INT_arg(precisionExponent) as arg_precisionExponent:
            agcls.evaluate_hresult(self.__dict__["_SetPrecisionExponent"](arg_precisionExponent.COM_val))

    @property
    def TranslucentPrimitivesSortOrder(self) -> "AgEStkGraphicsPrimitivesSortOrder":
        """Gets or sets the sort order for translucent primitives in the primitive manager. This determines a trade-off between rendering speed and quality..."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsPrimitivesSortOrder) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTranslucentPrimitivesSortOrder"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @TranslucentPrimitivesSortOrder.setter
    def TranslucentPrimitivesSortOrder(self, translucentPrimitivesSortOrder:"AgEStkGraphicsPrimitivesSortOrder") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsPrimitivesSortOrder, translucentPrimitivesSortOrder) as arg_translucentPrimitivesSortOrder:
            agcls.evaluate_hresult(self.__dict__["_SetTranslucentPrimitivesSortOrder"](arg_translucentPrimitivesSortOrder.COM_val))

    def Add(self, primitive:"IStkGraphicsPrimitive") -> None:
        """Adds a primitive to the manager. Primitives must be added to the manager to be rendered."""
        with agmarshall.AgInterface_in_arg(primitive, IStkGraphicsPrimitive) as arg_primitive:
            agcls.evaluate_hresult(self.__dict__["_Add"](arg_primitive.COM_val))

    def Remove(self, primitive:"IStkGraphicsPrimitive") -> None:
        """Removes a primitive from the manager. The primitive is no longer rendered unless it is added back into the manager."""
        with agmarshall.AgInterface_in_arg(primitive, IStkGraphicsPrimitive) as arg_primitive:
            agcls.evaluate_hresult(self.__dict__["_Remove"](arg_primitive.COM_val))

    def Contains(self, primitive:"IStkGraphicsPrimitive") -> bool:
        """Determines whether the manager contains a primitive."""
        with agmarshall.AgInterface_in_arg(primitive, IStkGraphicsPrimitive) as arg_primitive, \
             agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_Contains"](arg_primitive.COM_val, byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def Clear(self) -> None:
        """Removes all primitives from the manager."""
        agcls.evaluate_hresult(self.__dict__["_Clear"]())

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        """Returns an enumerator that iterates through the collection. The order of the primitives is not guaranteed to be the order that the primitives were added."""
        with agmarshall.IEnumVARIANT_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{39006599-c2ac-4f46-a190-958d173714fc}", IStkGraphicsPrimitiveManager)
agcls.AgTypeNameMap["IStkGraphicsPrimitiveManager"] = IStkGraphicsPrimitiveManager

class IStkGraphicsRasterImageGlobeOverlay(object):
    """A globe image overlay for handling rasters."""
    _uuid = "{de016591-933e-4085-b6a4-401e117109e9}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetUseTransparentColor"] = _raise_uninitialized_error
        self.__dict__["_SetUseTransparentColor"] = _raise_uninitialized_error
        self.__dict__["_GetTransparentColor"] = _raise_uninitialized_error
        self.__dict__["_SetTransparentColor"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsRasterImageGlobeOverlay._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsRasterImageGlobeOverlay from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsRasterImageGlobeOverlay = agcom.GUID(IStkGraphicsRasterImageGlobeOverlay._uuid)
        vtable_offset_local = IStkGraphicsRasterImageGlobeOverlay._vtable_offset - 1
        self.__dict__["_GetUseTransparentColor"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsRasterImageGlobeOverlay, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseTransparentColor"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsRasterImageGlobeOverlay, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetTransparentColor"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsRasterImageGlobeOverlay, vtable_offset_local+3, POINTER(agcom.OLE_COLOR))
        self.__dict__["_SetTransparentColor"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsRasterImageGlobeOverlay, vtable_offset_local+4, agcom.OLE_COLOR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsRasterImageGlobeOverlay.__dict__ and type(IStkGraphicsRasterImageGlobeOverlay.__dict__[attrname]) == property:
            return IStkGraphicsRasterImageGlobeOverlay.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsRasterImageGlobeOverlay.")
    
    @property
    def UseTransparentColor(self) -> bool:
        """Gets or sets whether transparent color should be used."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseTransparentColor"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @UseTransparentColor.setter
    def UseTransparentColor(self, useTransparentColor:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(useTransparentColor) as arg_useTransparentColor:
            agcls.evaluate_hresult(self.__dict__["_SetUseTransparentColor"](arg_useTransparentColor.COM_val))

    @property
    def TransparentColor(self) -> agcolor.Color:
        """Gets or sets the color that will become transparent."""
        with agmarshall.OLE_COLOR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTransparentColor"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @TransparentColor.setter
    def TransparentColor(self, transparentColor:agcolor.Color) -> None:
        with agmarshall.OLE_COLOR_arg(transparentColor) as arg_transparentColor:
            agcls.evaluate_hresult(self.__dict__["_SetTransparentColor"](arg_transparentColor.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{de016591-933e-4085-b6a4-401e117109e9}", IStkGraphicsRasterImageGlobeOverlay)
agcls.AgTypeNameMap["IStkGraphicsRasterImageGlobeOverlay"] = IStkGraphicsRasterImageGlobeOverlay

class IStkGraphicsRhumbLineInterpolator(object):
    """The rhumb line interpolator computes interpolated positions along a rhumb line. Rhumb lines are lines of constant bearing. They appear as straight lines on a Mercator 2D map projection and are well suited to navigation."""
    _uuid = "{ccdec605-222e-4dea-a897-2632b43af87f}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCentralBody"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBody"] = _raise_uninitialized_error
        self.__dict__["_GetGranularity"] = _raise_uninitialized_error
        self.__dict__["_SetGranularity"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsRhumbLineInterpolator._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsRhumbLineInterpolator from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsRhumbLineInterpolator = agcom.GUID(IStkGraphicsRhumbLineInterpolator._uuid)
        vtable_offset_local = IStkGraphicsRhumbLineInterpolator._vtable_offset - 1
        self.__dict__["_GetCentralBody"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsRhumbLineInterpolator, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCentralBody"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsRhumbLineInterpolator, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetGranularity"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsRhumbLineInterpolator, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetGranularity"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsRhumbLineInterpolator, vtable_offset_local+4, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsRhumbLineInterpolator.__dict__ and type(IStkGraphicsRhumbLineInterpolator.__dict__[attrname]) == property:
            return IStkGraphicsRhumbLineInterpolator.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsRhumbLineInterpolator.")
    
    @property
    def CentralBody(self) -> str:
        """Gets or sets the central body used when interpolating with interpolate."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBody"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @CentralBody.setter
    def CentralBody(self, centralBody:str) -> None:
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBody"](arg_centralBody.COM_val))

    @property
    def Granularity(self) -> float:
        """Gets or sets the granularity used when interpolating with interpolate. Lower granularities are more precise but create more positions."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetGranularity"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Granularity.setter
    def Granularity(self, granularity:float) -> None:
        with agmarshall.DOUBLE_arg(granularity) as arg_granularity:
            agcls.evaluate_hresult(self.__dict__["_SetGranularity"](arg_granularity.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{ccdec605-222e-4dea-a897-2632b43af87f}", IStkGraphicsRhumbLineInterpolator)
agcls.AgTypeNameMap["IStkGraphicsRhumbLineInterpolator"] = IStkGraphicsRhumbLineInterpolator

class IStkGraphicsScene(object):
    """A scene provides properties and functionality that are reflected in the rendering of the globe control that it is associated with. An globe control's scene is available from the scene property..."""
    _uuid = "{2d15c682-efb5-499f-8851-a49599b2097d}"
    _num_methods = 23
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCamera"] = _raise_uninitialized_error
        self.__dict__["_GetLighting"] = _raise_uninitialized_error
        self.__dict__["_GetShowSunshine"] = _raise_uninitialized_error
        self.__dict__["_SetShowSunshine"] = _raise_uninitialized_error
        self.__dict__["_GetCentralBodies"] = _raise_uninitialized_error
        self.__dict__["_GetBackgroundColor"] = _raise_uninitialized_error
        self.__dict__["_SetBackgroundColor"] = _raise_uninitialized_error
        self.__dict__["_GetShadeSkyBasedOnAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetShadeSkyBasedOnAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetShowStars"] = _raise_uninitialized_error
        self.__dict__["_SetShowStars"] = _raise_uninitialized_error
        self.__dict__["_GetGlobeOverlaySettings"] = _raise_uninitialized_error
        self.__dict__["_Render"] = _raise_uninitialized_error
        self.__dict__["_Pick"] = _raise_uninitialized_error
        self.__dict__["_PickRectangular"] = _raise_uninitialized_error
        self.__dict__["_PickScreenOverlays"] = _raise_uninitialized_error
        self.__dict__["_GetSceneID"] = _raise_uninitialized_error
        self.__dict__["_GetShowWaterSurface"] = _raise_uninitialized_error
        self.__dict__["_SetShowWaterSurface"] = _raise_uninitialized_error
        self.__dict__["_GetAntiAliasing"] = _raise_uninitialized_error
        self.__dict__["_SetAntiAliasing"] = _raise_uninitialized_error
        self.__dict__["_GetVisualEffects"] = _raise_uninitialized_error
        self.__dict__["_GetClouds"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsScene._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsScene from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsScene = agcom.GUID(IStkGraphicsScene._uuid)
        vtable_offset_local = IStkGraphicsScene._vtable_offset - 1
        self.__dict__["_GetCamera"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsScene, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetLighting"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsScene, vtable_offset_local+2, POINTER(agcom.PVOID))
        self.__dict__["_GetShowSunshine"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsScene, vtable_offset_local+3, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetShowSunshine"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsScene, vtable_offset_local+4, agcom.VARIANT_BOOL)
        self.__dict__["_GetCentralBodies"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsScene, vtable_offset_local+5, POINTER(agcom.PVOID))
        self.__dict__["_GetBackgroundColor"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsScene, vtable_offset_local+6, POINTER(agcom.OLE_COLOR))
        self.__dict__["_SetBackgroundColor"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsScene, vtable_offset_local+7, agcom.OLE_COLOR)
        self.__dict__["_GetShadeSkyBasedOnAltitude"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsScene, vtable_offset_local+8, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetShadeSkyBasedOnAltitude"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsScene, vtable_offset_local+9, agcom.VARIANT_BOOL)
        self.__dict__["_GetShowStars"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsScene, vtable_offset_local+10, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetShowStars"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsScene, vtable_offset_local+11, agcom.VARIANT_BOOL)
        self.__dict__["_GetGlobeOverlaySettings"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsScene, vtable_offset_local+12, POINTER(agcom.PVOID))
        self.__dict__["_Render"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsScene, vtable_offset_local+13, )
        self.__dict__["_Pick"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsScene, vtable_offset_local+14, agcom.INT, agcom.INT, POINTER(agcom.PVOID))
        self.__dict__["_PickRectangular"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsScene, vtable_offset_local+15, agcom.INT, agcom.INT, agcom.INT, agcom.INT, POINTER(agcom.PVOID))
        self.__dict__["_PickScreenOverlays"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsScene, vtable_offset_local+16, agcom.INT, agcom.INT, POINTER(agcom.PVOID))
        self.__dict__["_GetSceneID"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsScene, vtable_offset_local+17, POINTER(agcom.INT))
        self.__dict__["_GetShowWaterSurface"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsScene, vtable_offset_local+18, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetShowWaterSurface"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsScene, vtable_offset_local+19, agcom.VARIANT_BOOL)
        self.__dict__["_GetAntiAliasing"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsScene, vtable_offset_local+20, POINTER(agcom.LONG))
        self.__dict__["_SetAntiAliasing"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsScene, vtable_offset_local+21, agcom.LONG)
        self.__dict__["_GetVisualEffects"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsScene, vtable_offset_local+22, POINTER(agcom.PVOID))
        self.__dict__["_GetClouds"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsScene, vtable_offset_local+23, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsScene.__dict__ and type(IStkGraphicsScene.__dict__[attrname]) == property:
            return IStkGraphicsScene.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsScene.")
    def Subscribe(self) -> IStkGraphicsSceneEventHandler:
        """Returns an IStkGraphicsSceneEventHandler that is subscribed to handle events associated with this instance of IStkGraphicsScene."""
        return IStkGraphicsSceneEventHandler(self._pUnk)    
    @property
    def Camera(self) -> "IStkGraphicsCamera":
        """Gets the camera associated with the scene, which affects the view that is rendered by the scene."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCamera"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Lighting(self) -> "IStkGraphicsLighting":
        """Gets the lighting associated with the scene."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetLighting"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def ShowSunshine(self) -> bool:
        """Gets or sets whether sunshine is rendered by the Sun central body. Sunshine renders a halo effect around the sun when it is viewed in the scene."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetShowSunshine"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @ShowSunshine.setter
    def ShowSunshine(self, showSunshine:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(showSunshine) as arg_showSunshine:
            agcls.evaluate_hresult(self.__dict__["_SetShowSunshine"](arg_showSunshine.COM_val))

    @property
    def CentralBodies(self) -> "IStkGraphicsCentralBodyGraphicsIndexer":
        """Gets the central body graphics for a specified central body."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodies"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def BackgroundColor(self) -> agcolor.Color:
        """Gets or sets the background color of the scene."""
        with agmarshall.OLE_COLOR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBackgroundColor"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @BackgroundColor.setter
    def BackgroundColor(self, backgroundColor:agcolor.Color) -> None:
        with agmarshall.OLE_COLOR_arg(backgroundColor) as arg_backgroundColor:
            agcls.evaluate_hresult(self.__dict__["_SetBackgroundColor"](arg_backgroundColor.COM_val))

    @property
    def ShadeSkyBasedOnAltitude(self) -> bool:
        """Gets or sets whether the sky will be shaded based on camera altitude. When shade sky based on altitude is set to true, the sky will become more blue as the Camera gets closer to the surface of the central body."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetShadeSkyBasedOnAltitude"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @ShadeSkyBasedOnAltitude.setter
    def ShadeSkyBasedOnAltitude(self, shadeSkyBasedOnAltitude:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(shadeSkyBasedOnAltitude) as arg_shadeSkyBasedOnAltitude:
            agcls.evaluate_hresult(self.__dict__["_SetShadeSkyBasedOnAltitude"](arg_shadeSkyBasedOnAltitude.COM_val))

    @property
    def ShowStars(self) -> bool:
        """Gets or sets whether stars are shown or hidden in the scene."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetShowStars"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @ShowStars.setter
    def ShowStars(self, showStars:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(showStars) as arg_showStars:
            agcls.evaluate_hresult(self.__dict__["_SetShowStars"](arg_showStars.COM_val))

    @property
    def GlobeOverlaySettings(self) -> "IStkGraphicsSceneGlobeOverlaySettings":
        """Gets the scene globe overlay settings for the scene."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetGlobeOverlaySettings"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def Render(self) -> None:
        """Renders the scene. To render all the scenes within an application, use the Render method."""
        agcls.evaluate_hresult(self.__dict__["_Render"]())

    def Pick(self, x:int, y:int) -> "IStkGraphicsPickResultCollection":
        """Executes a pick at the given x, y and returns a depth sorted collection of picked objects. The coordinate origin is top, left. To pick screen overlays, use the PickScreenOverlays method."""
        with agmarshall.INT_arg(x) as arg_x, \
             agmarshall.INT_arg(y) as arg_y, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Pick"](arg_x.COM_val, arg_y.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def PickRectangular(self, left:int, bottom:int, right:int, top:int) -> "IStkGraphicsPickResultCollection":
        """Executes a pick in the given rectangular region and returns a depth sorted collection of picked objects. The coordinate origin is top, left. To pick screen overlays, use the PickScreenOverlays method."""
        with agmarshall.INT_arg(left) as arg_left, \
             agmarshall.INT_arg(bottom) as arg_bottom, \
             agmarshall.INT_arg(right) as arg_right, \
             agmarshall.INT_arg(top) as arg_top, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_PickRectangular"](arg_left.COM_val, arg_bottom.COM_val, arg_right.COM_val, arg_top.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def PickScreenOverlays(self, x:int, y:int) -> "IStkGraphicsScreenOverlayPickResultCollection":
        """Executes a pick on screen overlays at the given x, y and returns a front to back sorted collection of picked overlays. The coordinate origin is top, left. To pick other objects in the scene, use the Pick method."""
        with agmarshall.INT_arg(x) as arg_x, \
             agmarshall.INT_arg(y) as arg_y, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_PickScreenOverlays"](arg_x.COM_val, arg_y.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def SceneID(self) -> int:
        """Returns the scene identifier."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSceneID"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def ShowWaterSurface(self) -> bool:
        """Gets or sets whether water surface on earth is shown or hidden in the scene."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetShowWaterSurface"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @ShowWaterSurface.setter
    def ShowWaterSurface(self, showWaterSurface:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(showWaterSurface) as arg_showWaterSurface:
            agcls.evaluate_hresult(self.__dict__["_SetShowWaterSurface"](arg_showWaterSurface.COM_val))

    @property
    def AntiAliasing(self) -> "AgEStkGraphicsAntiAliasing":
        """Gets or sets the multisample anti-aliasing (MSAA) option for this scene. As the level of anti-aliasing increases, performance will generally decrease, but the quality of the anti-aliasing will improve."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsAntiAliasing) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAntiAliasing"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @AntiAliasing.setter
    def AntiAliasing(self, antiAliasing:"AgEStkGraphicsAntiAliasing") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsAntiAliasing, antiAliasing) as arg_antiAliasing:
            agcls.evaluate_hresult(self.__dict__["_SetAntiAliasing"](arg_antiAliasing.COM_val))

    @property
    def VisualEffects(self) -> "IStkGraphicsVisualEffects":
        """Gets the visual  effects associated with the scene."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetVisualEffects"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Clouds(self) -> "IStkGraphicsClouds":
        """Gets the clouds for the scene."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetClouds"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{2d15c682-efb5-499f-8851-a49599b2097d}", IStkGraphicsScene)
agcls.AgTypeNameMap["IStkGraphicsScene"] = IStkGraphicsScene

class IStkGraphicsSceneDisplayCondition(object):
    """A display condition used to control what scene or scenes an object, such as a primitive, is rendered in. This is used to show an object in some scenes and hide it in others."""
    _uuid = "{84cbf48f-1672-460e-86fd-9afda647bcca}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_SetDisplayInScene"] = _raise_uninitialized_error
        self.__dict__["_GetDisplayInScene"] = _raise_uninitialized_error
        self.__dict__["_DisplayOnlyInScene"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsSceneDisplayCondition._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsSceneDisplayCondition from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsSceneDisplayCondition = agcom.GUID(IStkGraphicsSceneDisplayCondition._uuid)
        vtable_offset_local = IStkGraphicsSceneDisplayCondition._vtable_offset - 1
        self.__dict__["_SetDisplayInScene"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSceneDisplayCondition, vtable_offset_local+1, agcom.PVOID, agcom.VARIANT_BOOL)
        self.__dict__["_GetDisplayInScene"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSceneDisplayCondition, vtable_offset_local+2, agcom.PVOID, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_DisplayOnlyInScene"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSceneDisplayCondition, vtable_offset_local+3, agcom.PVOID)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsSceneDisplayCondition.__dict__ and type(IStkGraphicsSceneDisplayCondition.__dict__[attrname]) == property:
            return IStkGraphicsSceneDisplayCondition.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsSceneDisplayCondition.")
    
    def SetDisplayInScene(self, scene:"IStkGraphicsScene", on:bool) -> None:
        """Allows or disallows rendering for in a particular scene for."""
        with agmarshall.AgInterface_in_arg(scene, IStkGraphicsScene) as arg_scene, \
             agmarshall.VARIANT_BOOL_arg(on) as arg_on:
            agcls.evaluate_hresult(self.__dict__["_SetDisplayInScene"](arg_scene.COM_val, arg_on.COM_val))

    def GetDisplayInScene(self, scene:"IStkGraphicsScene") -> bool:
        """Determines whether the display condition allows rendering rendering in the given scene."""
        with agmarshall.AgInterface_in_arg(scene, IStkGraphicsScene) as arg_scene, \
             agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDisplayInScene"](arg_scene.COM_val, byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def DisplayOnlyInScene(self, scene:"IStkGraphicsScene") -> None:
        """Allows rendering only in the given scene. The display condition will not allow rendering in other scenes, including newly created ones."""
        with agmarshall.AgInterface_in_arg(scene, IStkGraphicsScene) as arg_scene:
            agcls.evaluate_hresult(self.__dict__["_DisplayOnlyInScene"](arg_scene.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{84cbf48f-1672-460e-86fd-9afda647bcca}", IStkGraphicsSceneDisplayCondition)
agcls.AgTypeNameMap["IStkGraphicsSceneDisplayCondition"] = IStkGraphicsSceneDisplayCondition

class IStkGraphicsSceneManager(object):
    """The static scene manager class provides global properties and functionality that apply to all scenes and thus affect the rendering of every globe control..."""
    _uuid = "{257b97ef-839b-4a17-a924-c40320174d13}"
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetPrimitives"] = _raise_uninitialized_error
        self.__dict__["_GetScreenOverlays"] = _raise_uninitialized_error
        self.__dict__["_GetTextures"] = _raise_uninitialized_error
        self.__dict__["_GetGlobeOverlaySettings"] = _raise_uninitialized_error
        self.__dict__["_GetScenes"] = _raise_uninitialized_error
        self.__dict__["_Render"] = _raise_uninitialized_error
        self.__dict__["_GetInitializers"] = _raise_uninitialized_error
        self.__dict__["_GetFrameRate"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsSceneManager._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsSceneManager from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsSceneManager = agcom.GUID(IStkGraphicsSceneManager._uuid)
        vtable_offset_local = IStkGraphicsSceneManager._vtable_offset - 1
        self.__dict__["_GetPrimitives"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSceneManager, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetScreenOverlays"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSceneManager, vtable_offset_local+2, POINTER(agcom.PVOID))
        self.__dict__["_GetTextures"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSceneManager, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_GetGlobeOverlaySettings"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSceneManager, vtable_offset_local+4, POINTER(agcom.PVOID))
        self.__dict__["_GetScenes"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSceneManager, vtable_offset_local+5, POINTER(agcom.PVOID))
        self.__dict__["_Render"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSceneManager, vtable_offset_local+6, )
        self.__dict__["_GetInitializers"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSceneManager, vtable_offset_local+7, POINTER(agcom.PVOID))
        self.__dict__["_GetFrameRate"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSceneManager, vtable_offset_local+8, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsSceneManager.__dict__ and type(IStkGraphicsSceneManager.__dict__[attrname]) == property:
            return IStkGraphicsSceneManager.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsSceneManager.")
    
    @property
    def Primitives(self) -> "IStkGraphicsPrimitiveManager":
        """Gets the primitive manager, which is used to add primitives to your scenes."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPrimitives"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def ScreenOverlays(self) -> "IStkGraphicsScreenOverlayManager":
        """Gets the screen overlay manager, which is used to add screen overlays to your scenes."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetScreenOverlays"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Textures(self) -> "IStkGraphicsTexture2DFactory":
        """Gets the texture 2d factory, which can be used to create textures from various sources."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTextures"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def GlobeOverlaySettings(self) -> "IStkGraphicsGlobeOverlaySettings":
        """Gets the globe overlay settings, which are used to set global settings for all globe overlays."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetGlobeOverlaySettings"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Scenes(self) -> "IStkGraphicsSceneCollection":
        """Gets a read-only collection of scenes that are associated with the scene manager."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetScenes"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def Render(self) -> None:
        """Renders all scenes within an application. To render a specific scene, use the Render method."""
        agcls.evaluate_hresult(self.__dict__["_Render"]())

    @property
    def Initializers(self) -> "IStkGraphicsFactoryAndInitializers":
        """Allows the user to create or initialize primitives, display conditions, tringulators and other types of objects."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetInitializers"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def FrameRate(self) -> "IStkGraphicsFrameRate":
        """Gets the frame rate class, which can be used to keep track of how fast scenes are being <see ref='Render'>rendered</see>."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetFrameRate"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{257b97ef-839b-4a17-a924-c40320174d13}", IStkGraphicsSceneManager)
agcls.AgTypeNameMap["IStkGraphicsSceneManager"] = IStkGraphicsSceneManager

class IStkGraphicsScreenOverlay(object):
    """A visible element drawn in screen space. Overlays are useful for floating logos, heads up displays, and integrating user interfaces into the 3D window."""
    _uuid = "{e9bdc8ad-dc02-4b22-9513-eb0cdfa85cf3}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsScreenOverlay._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsScreenOverlay from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsScreenOverlay = agcom.GUID(IStkGraphicsScreenOverlay._uuid)
        vtable_offset_local = IStkGraphicsScreenOverlay._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsScreenOverlay.__dict__ and type(IStkGraphicsScreenOverlay.__dict__[attrname]) == property:
            return IStkGraphicsScreenOverlay.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsScreenOverlay.")
    

agcls.AgClassCatalog.add_catalog_entry("{e9bdc8ad-dc02-4b22-9513-eb0cdfa85cf3}", IStkGraphicsScreenOverlay)
agcls.AgTypeNameMap["IStkGraphicsScreenOverlay"] = IStkGraphicsScreenOverlay

class IStkGraphicsScreenOverlayCollection(object):
    """A collection of screen overlays."""
    _uuid = "{1bf5a224-26b7-4907-aa7d-fd6fc81a51f3}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsScreenOverlayCollection._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsScreenOverlayCollection from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsScreenOverlayCollection = agcom.GUID(IStkGraphicsScreenOverlayCollection._uuid)
        vtable_offset_local = IStkGraphicsScreenOverlayCollection._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsScreenOverlayCollection.__dict__ and type(IStkGraphicsScreenOverlayCollection.__dict__[attrname]) == property:
            return IStkGraphicsScreenOverlayCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsScreenOverlayCollection.")
    

agcls.AgClassCatalog.add_catalog_entry("{1bf5a224-26b7-4907-aa7d-fd6fc81a51f3}", IStkGraphicsScreenOverlayCollection)
agcls.AgTypeNameMap["IStkGraphicsScreenOverlayCollection"] = IStkGraphicsScreenOverlayCollection

class IStkGraphicsScreenOverlayManager(object):
    """The top-level container for screen overlays. All child screen overlays that are added to this container are specified relative to the overall globe control."""
    _uuid = "{25bf4e85-98ce-48e3-9c15-f517115bc794}"
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetBounds"] = _raise_uninitialized_error
        self.__dict__["_GetOverlays"] = _raise_uninitialized_error
        self.__dict__["_GetPadding"] = _raise_uninitialized_error
        self.__dict__["_SetPadding"] = _raise_uninitialized_error
        self.__dict__["_GetDisplay"] = _raise_uninitialized_error
        self.__dict__["_SetDisplay"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsScreenOverlayManager._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsScreenOverlayManager from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsScreenOverlayManager = agcom.GUID(IStkGraphicsScreenOverlayManager._uuid)
        vtable_offset_local = IStkGraphicsScreenOverlayManager._vtable_offset - 1
        self.__dict__["_GetBounds"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsScreenOverlayManager, vtable_offset_local+1, POINTER(agcom.SAFEARRAY))
        self.__dict__["_GetOverlays"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsScreenOverlayManager, vtable_offset_local+2, POINTER(agcom.PVOID))
        self.__dict__["_GetPadding"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsScreenOverlayManager, vtable_offset_local+3, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetPadding"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsScreenOverlayManager, vtable_offset_local+4, agcom.SAFEARRAY)
        self.__dict__["_GetDisplay"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsScreenOverlayManager, vtable_offset_local+5, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetDisplay"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsScreenOverlayManager, vtable_offset_local+6, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsScreenOverlayManager.__dict__ and type(IStkGraphicsScreenOverlayManager.__dict__[attrname]) == property:
            return IStkGraphicsScreenOverlayManager.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsScreenOverlayManager.")
    
    @property
    def Bounds(self) -> list:
        """Gets the overall bounds of the globe control. The array contains the properties defining the bounds in the order left x location, top y location, width, height."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBounds"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Overlays(self) -> "IStkGraphicsScreenOverlayCollection":
        """Gets the collection of overlays that are contained within this manager."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetOverlays"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Padding(self) -> list:
        """Gets or sets the padding surrounding the overlays that are contained within this manager. The array contains the components of the padding arranged in the order left, top, right, bottom."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPadding"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @Padding.setter
    def Padding(self, padding:list) -> None:
        with agmarshall.SAFEARRAY_arg(padding) as arg_padding:
            agcls.evaluate_hresult(self.__dict__["_SetPadding"](arg_padding.COM_val))

    @property
    def Display(self) -> bool:
        """Gets or sets if the collection of overlays that are contained within this manager should be rendered."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDisplay"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Display.setter
    def Display(self, display:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(display) as arg_display:
            agcls.evaluate_hresult(self.__dict__["_SetDisplay"](arg_display.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{25bf4e85-98ce-48e3-9c15-f517115bc794}", IStkGraphicsScreenOverlayManager)
agcls.AgTypeNameMap["IStkGraphicsScreenOverlayManager"] = IStkGraphicsScreenOverlayManager

class IStkGraphicsScreenOverlayPickResult(object):
    """Describes a picked screen overlay as a result of a call to pick screen overlays."""
    _uuid = "{4872a8d1-b96f-4713-96f8-5ed5e5d6b8b4}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetPosition"] = _raise_uninitialized_error
        self.__dict__["_GetControlPosition"] = _raise_uninitialized_error
        self.__dict__["_GetOverlay"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsScreenOverlayPickResult._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsScreenOverlayPickResult from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsScreenOverlayPickResult = agcom.GUID(IStkGraphicsScreenOverlayPickResult._uuid)
        vtable_offset_local = IStkGraphicsScreenOverlayPickResult._vtable_offset - 1
        self.__dict__["_GetPosition"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsScreenOverlayPickResult, vtable_offset_local+1, POINTER(agcom.SAFEARRAY))
        self.__dict__["_GetControlPosition"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsScreenOverlayPickResult, vtable_offset_local+2, POINTER(agcom.SAFEARRAY))
        self.__dict__["_GetOverlay"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsScreenOverlayPickResult, vtable_offset_local+3, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsScreenOverlayPickResult.__dict__ and type(IStkGraphicsScreenOverlayPickResult.__dict__[attrname]) == property:
            return IStkGraphicsScreenOverlayPickResult.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsScreenOverlayPickResult.")
    
    @property
    def Position(self) -> list:
        """Gets the position that was picked within the picked overlay. The array represents the picked position and has a size of 4. The elements are in the order x position, y position, x screen overlay unit, y screen overlay unit."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPosition"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def ControlPosition(self) -> list:
        """Gets the position that was picked within the overall globe control. This is essentially the same position that was passed to pick screen overlays. The array represents the picked position and has a size of 4..."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetControlPosition"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Overlay(self) -> "IStkGraphicsScreenOverlay":
        """Gets the screen overlay that was picked."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetOverlay"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{4872a8d1-b96f-4713-96f8-5ed5e5d6b8b4}", IStkGraphicsScreenOverlayPickResult)
agcls.AgTypeNameMap["IStkGraphicsScreenOverlayPickResult"] = IStkGraphicsScreenOverlayPickResult

class IStkGraphicsSolidPrimitive(object):
    """Renders filled solid objects and their outlines. Example solids include boxes and ellipsoids. Various effects are supported, such as displaying the solid's silhouette, and hiding the outline of the backside of the solid..."""
    _uuid = "{10ae68b3-ec89-4ced-9b4c-8aae9123eb24}"
    _num_methods = 39
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAffectedByLighting"] = _raise_uninitialized_error
        self.__dict__["_SetAffectedByLighting"] = _raise_uninitialized_error
        self.__dict__["_GetDisplayFill"] = _raise_uninitialized_error
        self.__dict__["_SetDisplayFill"] = _raise_uninitialized_error
        self.__dict__["_GetDisplaySilhouette"] = _raise_uninitialized_error
        self.__dict__["_SetDisplaySilhouette"] = _raise_uninitialized_error
        self.__dict__["_GetSilhouetteColor"] = _raise_uninitialized_error
        self.__dict__["_SetSilhouetteColor"] = _raise_uninitialized_error
        self.__dict__["_GetSilhouetteTranslucency"] = _raise_uninitialized_error
        self.__dict__["_SetSilhouetteTranslucency"] = _raise_uninitialized_error
        self.__dict__["_GetSilhouetteWidth"] = _raise_uninitialized_error
        self.__dict__["_SetSilhouetteWidth"] = _raise_uninitialized_error
        self.__dict__["_GetMinimumSilhouetteWidthSupported"] = _raise_uninitialized_error
        self.__dict__["_GetMaximumSilhouetteWidthSupported"] = _raise_uninitialized_error
        self.__dict__["_GetDisplayOutline"] = _raise_uninitialized_error
        self.__dict__["_SetDisplayOutline"] = _raise_uninitialized_error
        self.__dict__["_GetOutlineColor"] = _raise_uninitialized_error
        self.__dict__["_SetOutlineColor"] = _raise_uninitialized_error
        self.__dict__["_GetOutlineTranslucency"] = _raise_uninitialized_error
        self.__dict__["_SetOutlineTranslucency"] = _raise_uninitialized_error
        self.__dict__["_GetOutlineWidth"] = _raise_uninitialized_error
        self.__dict__["_SetOutlineWidth"] = _raise_uninitialized_error
        self.__dict__["_GetOutlineAppearance"] = _raise_uninitialized_error
        self.__dict__["_SetOutlineAppearance"] = _raise_uninitialized_error
        self.__dict__["_GetBackLineColor"] = _raise_uninitialized_error
        self.__dict__["_SetBackLineColor"] = _raise_uninitialized_error
        self.__dict__["_GetBackLineTranslucency"] = _raise_uninitialized_error
        self.__dict__["_SetBackLineTranslucency"] = _raise_uninitialized_error
        self.__dict__["_GetPosition"] = _raise_uninitialized_error
        self.__dict__["_SetPosition"] = _raise_uninitialized_error
        self.__dict__["_GetRotation"] = _raise_uninitialized_error
        self.__dict__["_SetRotation"] = _raise_uninitialized_error
        self.__dict__["_GetScale"] = _raise_uninitialized_error
        self.__dict__["_SetScale"] = _raise_uninitialized_error
        self.__dict__["_GetBackLineWidth"] = _raise_uninitialized_error
        self.__dict__["_SetBackLineWidth"] = _raise_uninitialized_error
        self.__dict__["_GetSetHint"] = _raise_uninitialized_error
        self.__dict__["_SetWithResult"] = _raise_uninitialized_error
        self.__dict__["_Set"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsSolidPrimitive._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsSolidPrimitive from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsSolidPrimitive = agcom.GUID(IStkGraphicsSolidPrimitive._uuid)
        vtable_offset_local = IStkGraphicsSolidPrimitive._vtable_offset - 1
        self.__dict__["_GetAffectedByLighting"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSolidPrimitive, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetAffectedByLighting"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSolidPrimitive, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetDisplayFill"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSolidPrimitive, vtable_offset_local+3, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetDisplayFill"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSolidPrimitive, vtable_offset_local+4, agcom.VARIANT_BOOL)
        self.__dict__["_GetDisplaySilhouette"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSolidPrimitive, vtable_offset_local+5, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetDisplaySilhouette"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSolidPrimitive, vtable_offset_local+6, agcom.VARIANT_BOOL)
        self.__dict__["_GetSilhouetteColor"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSolidPrimitive, vtable_offset_local+7, POINTER(agcom.OLE_COLOR))
        self.__dict__["_SetSilhouetteColor"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSolidPrimitive, vtable_offset_local+8, agcom.OLE_COLOR)
        self.__dict__["_GetSilhouetteTranslucency"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSolidPrimitive, vtable_offset_local+9, POINTER(agcom.FLOAT))
        self.__dict__["_SetSilhouetteTranslucency"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSolidPrimitive, vtable_offset_local+10, agcom.FLOAT)
        self.__dict__["_GetSilhouetteWidth"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSolidPrimitive, vtable_offset_local+11, POINTER(agcom.FLOAT))
        self.__dict__["_SetSilhouetteWidth"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSolidPrimitive, vtable_offset_local+12, agcom.FLOAT)
        self.__dict__["_GetMinimumSilhouetteWidthSupported"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSolidPrimitive, vtable_offset_local+13, POINTER(agcom.FLOAT))
        self.__dict__["_GetMaximumSilhouetteWidthSupported"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSolidPrimitive, vtable_offset_local+14, POINTER(agcom.FLOAT))
        self.__dict__["_GetDisplayOutline"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSolidPrimitive, vtable_offset_local+15, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetDisplayOutline"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSolidPrimitive, vtable_offset_local+16, agcom.VARIANT_BOOL)
        self.__dict__["_GetOutlineColor"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSolidPrimitive, vtable_offset_local+17, POINTER(agcom.OLE_COLOR))
        self.__dict__["_SetOutlineColor"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSolidPrimitive, vtable_offset_local+18, agcom.OLE_COLOR)
        self.__dict__["_GetOutlineTranslucency"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSolidPrimitive, vtable_offset_local+19, POINTER(agcom.FLOAT))
        self.__dict__["_SetOutlineTranslucency"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSolidPrimitive, vtable_offset_local+20, agcom.FLOAT)
        self.__dict__["_GetOutlineWidth"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSolidPrimitive, vtable_offset_local+21, POINTER(agcom.FLOAT))
        self.__dict__["_SetOutlineWidth"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSolidPrimitive, vtable_offset_local+22, agcom.FLOAT)
        self.__dict__["_GetOutlineAppearance"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSolidPrimitive, vtable_offset_local+23, POINTER(agcom.LONG))
        self.__dict__["_SetOutlineAppearance"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSolidPrimitive, vtable_offset_local+24, agcom.LONG)
        self.__dict__["_GetBackLineColor"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSolidPrimitive, vtable_offset_local+25, POINTER(agcom.OLE_COLOR))
        self.__dict__["_SetBackLineColor"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSolidPrimitive, vtable_offset_local+26, agcom.OLE_COLOR)
        self.__dict__["_GetBackLineTranslucency"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSolidPrimitive, vtable_offset_local+27, POINTER(agcom.FLOAT))
        self.__dict__["_SetBackLineTranslucency"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSolidPrimitive, vtable_offset_local+28, agcom.FLOAT)
        self.__dict__["_GetPosition"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSolidPrimitive, vtable_offset_local+29, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetPosition"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSolidPrimitive, vtable_offset_local+30, agcom.SAFEARRAY)
        self.__dict__["_GetRotation"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSolidPrimitive, vtable_offset_local+31, POINTER(agcom.PVOID))
        self.__dict__["_SetRotation"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSolidPrimitive, vtable_offset_local+32, agcom.PVOID)
        self.__dict__["_GetScale"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSolidPrimitive, vtable_offset_local+33, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetScale"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSolidPrimitive, vtable_offset_local+34, agcom.SAFEARRAY)
        self.__dict__["_GetBackLineWidth"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSolidPrimitive, vtable_offset_local+35, POINTER(agcom.FLOAT))
        self.__dict__["_SetBackLineWidth"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSolidPrimitive, vtable_offset_local+36, agcom.FLOAT)
        self.__dict__["_GetSetHint"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSolidPrimitive, vtable_offset_local+37, POINTER(agcom.LONG))
        self.__dict__["_SetWithResult"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSolidPrimitive, vtable_offset_local+38, agcom.PVOID)
        self.__dict__["_Set"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSolidPrimitive, vtable_offset_local+39, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.LONG, agcom.PVOID, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsSolidPrimitive.__dict__ and type(IStkGraphicsSolidPrimitive.__dict__[attrname]) == property:
            return IStkGraphicsSolidPrimitive.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsSolidPrimitive.")
    
    @property
    def AffectedByLighting(self) -> bool:
        """Gets or sets whether the primitive is affected by lighting."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAffectedByLighting"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @AffectedByLighting.setter
    def AffectedByLighting(self, affectedByLighting:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(affectedByLighting) as arg_affectedByLighting:
            agcls.evaluate_hresult(self.__dict__["_SetAffectedByLighting"](arg_affectedByLighting.COM_val))

    @property
    def DisplayFill(self) -> bool:
        """Gets or sets whether the solid's fill is displayed."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDisplayFill"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @DisplayFill.setter
    def DisplayFill(self, displayFill:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(displayFill) as arg_displayFill:
            agcls.evaluate_hresult(self.__dict__["_SetDisplayFill"](arg_displayFill.COM_val))

    @property
    def DisplaySilhouette(self) -> bool:
        """Gets or sets whether the solid's silhouette is displayed."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDisplaySilhouette"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @DisplaySilhouette.setter
    def DisplaySilhouette(self, displaySilhouette:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(displaySilhouette) as arg_displaySilhouette:
            agcls.evaluate_hresult(self.__dict__["_SetDisplaySilhouette"](arg_displaySilhouette.COM_val))

    @property
    def SilhouetteColor(self) -> agcolor.Color:
        """Gets or sets the silhouette's color."""
        with agmarshall.OLE_COLOR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSilhouetteColor"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @SilhouetteColor.setter
    def SilhouetteColor(self, silhouetteColor:agcolor.Color) -> None:
        with agmarshall.OLE_COLOR_arg(silhouetteColor) as arg_silhouetteColor:
            agcls.evaluate_hresult(self.__dict__["_SetSilhouetteColor"](arg_silhouetteColor.COM_val))

    @property
    def SilhouetteTranslucency(self) -> float:
        """Gets or sets the silhouette's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSilhouetteTranslucency"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @SilhouetteTranslucency.setter
    def SilhouetteTranslucency(self, silhouetteTranslucency:float) -> None:
        with agmarshall.FLOAT_arg(silhouetteTranslucency) as arg_silhouetteTranslucency:
            agcls.evaluate_hresult(self.__dict__["_SetSilhouetteTranslucency"](arg_silhouetteTranslucency.COM_val))

    @property
    def SilhouetteWidth(self) -> float:
        """Gets or sets the silhouette' width, in pixels."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSilhouetteWidth"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @SilhouetteWidth.setter
    def SilhouetteWidth(self, silhouetteWidth:float) -> None:
        with agmarshall.FLOAT_arg(silhouetteWidth) as arg_silhouetteWidth:
            agcls.evaluate_hresult(self.__dict__["_SetSilhouetteWidth"](arg_silhouetteWidth.COM_val))

    @property
    def MinimumSilhouetteWidthSupported(self) -> float:
        """Gets the minimum silhouette width, in pixels, supported by the video card."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinimumSilhouetteWidthSupported"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def MaximumSilhouetteWidthSupported(self) -> float:
        """Gets the maximum silhouette width, in pixels, supported by the video card."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaximumSilhouetteWidthSupported"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def DisplayOutline(self) -> bool:
        """Gets or sets whether the solid's outline is displayed."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDisplayOutline"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @DisplayOutline.setter
    def DisplayOutline(self, displayOutline:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(displayOutline) as arg_displayOutline:
            agcls.evaluate_hresult(self.__dict__["_SetDisplayOutline"](arg_displayOutline.COM_val))

    @property
    def OutlineColor(self) -> agcolor.Color:
        """Gets or sets the outline's color."""
        with agmarshall.OLE_COLOR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetOutlineColor"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @OutlineColor.setter
    def OutlineColor(self, outlineColor:agcolor.Color) -> None:
        with agmarshall.OLE_COLOR_arg(outlineColor) as arg_outlineColor:
            agcls.evaluate_hresult(self.__dict__["_SetOutlineColor"](arg_outlineColor.COM_val))

    @property
    def OutlineTranslucency(self) -> float:
        """Gets or sets the outline's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetOutlineTranslucency"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @OutlineTranslucency.setter
    def OutlineTranslucency(self, outlineTranslucency:float) -> None:
        with agmarshall.FLOAT_arg(outlineTranslucency) as arg_outlineTranslucency:
            agcls.evaluate_hresult(self.__dict__["_SetOutlineTranslucency"](arg_outlineTranslucency.COM_val))

    @property
    def OutlineWidth(self) -> float:
        """Gets or sets the outline's width, in pixels."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetOutlineWidth"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @OutlineWidth.setter
    def OutlineWidth(self, outlineWidth:float) -> None:
        with agmarshall.FLOAT_arg(outlineWidth) as arg_outlineWidth:
            agcls.evaluate_hresult(self.__dict__["_SetOutlineWidth"](arg_outlineWidth.COM_val))

    @property
    def OutlineAppearance(self) -> "AgEStkGraphicsOutlineAppearance":
        """Gets or sets the outline's appearance."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsOutlineAppearance) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetOutlineAppearance"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @OutlineAppearance.setter
    def OutlineAppearance(self, outlineAppearance:"AgEStkGraphicsOutlineAppearance") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsOutlineAppearance, outlineAppearance) as arg_outlineAppearance:
            agcls.evaluate_hresult(self.__dict__["_SetOutlineAppearance"](arg_outlineAppearance.COM_val))

    @property
    def BackLineColor(self) -> agcolor.Color:
        """Gets or sets the back line's color."""
        with agmarshall.OLE_COLOR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBackLineColor"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @BackLineColor.setter
    def BackLineColor(self, backLineColor:agcolor.Color) -> None:
        with agmarshall.OLE_COLOR_arg(backLineColor) as arg_backLineColor:
            agcls.evaluate_hresult(self.__dict__["_SetBackLineColor"](arg_backLineColor.COM_val))

    @property
    def BackLineTranslucency(self) -> float:
        """Gets or sets the back line's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBackLineTranslucency"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @BackLineTranslucency.setter
    def BackLineTranslucency(self, backLineTranslucency:float) -> None:
        with agmarshall.FLOAT_arg(backLineTranslucency) as arg_backLineTranslucency:
            agcls.evaluate_hresult(self.__dict__["_SetBackLineTranslucency"](arg_backLineTranslucency.COM_val))

    @property
    def Position(self) -> list:
        """Gets or sets the solid's position. The position is defined in the solid's reference frame. The array contains the components of the position in the order x, y, z."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPosition"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @Position.setter
    def Position(self, position:list) -> None:
        with agmarshall.SAFEARRAY_arg(position) as arg_position:
            agcls.evaluate_hresult(self.__dict__["_SetPosition"](arg_position.COM_val))

    @property
    def Rotation(self) -> "IOrientation":
        """Gets or sets the rotation applied to the solid before rendering."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetRotation"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @Rotation.setter
    def Rotation(self, rotation:"IOrientation") -> None:
        with agmarshall.AgInterface_in_arg(rotation, IOrientation) as arg_rotation:
            agcls.evaluate_hresult(self.__dict__["_SetRotation"](arg_rotation.COM_val))

    @property
    def Scale(self) -> list:
        """Gets or sets a non-uniform scale that is applied to the solid to increase or decrease its rendered size. The array contains the scale for each component of the size in the order x scale, y scale, z scale."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetScale"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @Scale.setter
    def Scale(self, scale:list) -> None:
        with agmarshall.SAFEARRAY_arg(scale) as arg_scale:
            agcls.evaluate_hresult(self.__dict__["_SetScale"](arg_scale.COM_val))

    @property
    def BackLineWidth(self) -> float:
        """Gets or sets the back line's width, in pixels."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBackLineWidth"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @BackLineWidth.setter
    def BackLineWidth(self, backLineWidth:float) -> None:
        with agmarshall.FLOAT_arg(backLineWidth) as arg_backLineWidth:
            agcls.evaluate_hresult(self.__dict__["_SetBackLineWidth"](arg_backLineWidth.COM_val))

    @property
    def SetHint(self) -> "AgEStkGraphicsSetHint":
        """Gets the primitive's set hint. See the Set Hint Performance Overview for selecting an appropriate value to construct the primitive with."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsSetHint) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSetHint"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def SetWithResult(self, solidTriangulatorResult:"IStkGraphicsSolidTriangulatorResult") -> None:
        """Defines the solid using the specified solidTriangulatorResult. The solid is rendered in the primitive's reference frame."""
        with agmarshall.AgInterface_in_arg(solidTriangulatorResult, IStkGraphicsSolidTriangulatorResult) as arg_solidTriangulatorResult:
            agcls.evaluate_hresult(self.__dict__["_SetWithResult"](arg_solidTriangulatorResult.COM_val))

    def Set(self, positions:list, normals:list, indices:list, outlineIndices:list, windingOrder:"AgEStkGraphicsWindingOrder", boundingSphere:"IStkGraphicsBoundingSphere", closed:bool) -> None:
        """Defines the solid using the specified parameters. The solid is rendered in the primitive's reference frame."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(normals) as arg_normals, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices, \
             agmarshall.SAFEARRAY_arg(outlineIndices) as arg_outlineIndices, \
             agmarshall.AgEnum_arg(AgEStkGraphicsWindingOrder, windingOrder) as arg_windingOrder, \
             agmarshall.AgInterface_in_arg(boundingSphere, IStkGraphicsBoundingSphere) as arg_boundingSphere, \
             agmarshall.VARIANT_BOOL_arg(closed) as arg_closed:
            agcls.evaluate_hresult(self.__dict__["_Set"](byref(arg_positions.COM_val), byref(arg_normals.COM_val), byref(arg_indices.COM_val), byref(arg_outlineIndices.COM_val), arg_windingOrder.COM_val, arg_boundingSphere.COM_val, arg_closed.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{10ae68b3-ec89-4ced-9b4c-8aae9123eb24}", IStkGraphicsSolidPrimitive)
agcls.AgTypeNameMap["IStkGraphicsSolidPrimitive"] = IStkGraphicsSolidPrimitive

class IStkGraphicsStereoscopic(object):
    """Gets the stereoscopic options for all Scenes. To use a particular stereoscopic display mode, ensure that your system supports the feature and that it is enabled."""
    _uuid = "{41d0e11b-d00c-4255-b869-2fc8430f994e}"
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetDisplayMode"] = _raise_uninitialized_error
        self.__dict__["_SetDisplayMode"] = _raise_uninitialized_error
        self.__dict__["_GetProjectionMode"] = _raise_uninitialized_error
        self.__dict__["_SetProjectionMode"] = _raise_uninitialized_error
        self.__dict__["_GetProjectionDistance"] = _raise_uninitialized_error
        self.__dict__["_SetProjectionDistance"] = _raise_uninitialized_error
        self.__dict__["_GetEyeSeparationFactor"] = _raise_uninitialized_error
        self.__dict__["_SetEyeSeparationFactor"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsStereoscopic._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsStereoscopic from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsStereoscopic = agcom.GUID(IStkGraphicsStereoscopic._uuid)
        vtable_offset_local = IStkGraphicsStereoscopic._vtable_offset - 1
        self.__dict__["_GetDisplayMode"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsStereoscopic, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetDisplayMode"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsStereoscopic, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetProjectionMode"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsStereoscopic, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetProjectionMode"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsStereoscopic, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_GetProjectionDistance"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsStereoscopic, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetProjectionDistance"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsStereoscopic, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetEyeSeparationFactor"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsStereoscopic, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetEyeSeparationFactor"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsStereoscopic, vtable_offset_local+8, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsStereoscopic.__dict__ and type(IStkGraphicsStereoscopic.__dict__[attrname]) == property:
            return IStkGraphicsStereoscopic.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsStereoscopic.")
    
    @property
    def DisplayMode(self) -> "AgEStkGraphicsStereoscopicDisplayMode":
        """Gets or sets the stereoscopic display mode for all Scenes. To use a particular stereoscopic display mode, ensure that your system supports the feature and that it is enabled."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsStereoscopicDisplayMode) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDisplayMode"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @DisplayMode.setter
    def DisplayMode(self, displayMode:"AgEStkGraphicsStereoscopicDisplayMode") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsStereoscopicDisplayMode, displayMode) as arg_displayMode:
            agcls.evaluate_hresult(self.__dict__["_SetDisplayMode"](arg_displayMode.COM_val))

    @property
    def ProjectionMode(self) -> "AgEStkGraphicsStereoProjectionMode":
        """Gets or sets whether the type of stereo projection that will be used."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsStereoProjectionMode) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetProjectionMode"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @ProjectionMode.setter
    def ProjectionMode(self, projectionMode:"AgEStkGraphicsStereoProjectionMode") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsStereoProjectionMode, projectionMode) as arg_projectionMode:
            agcls.evaluate_hresult(self.__dict__["_SetProjectionMode"](arg_projectionMode.COM_val))

    @property
    def ProjectionDistance(self) -> float:
        """Gets or sets the projection distance. If projection mode is set to eStkGraphicsStereoProjectionAutomatic, the value of this property will be ignored."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetProjectionDistance"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @ProjectionDistance.setter
    def ProjectionDistance(self, projectionDistance:float) -> None:
        with agmarshall.DOUBLE_arg(projectionDistance) as arg_projectionDistance:
            agcls.evaluate_hresult(self.__dict__["_SetProjectionDistance"](arg_projectionDistance.COM_val))

    @property
    def EyeSeparationFactor(self) -> float:
        """Gets or sets the eye separation factor."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetEyeSeparationFactor"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @EyeSeparationFactor.setter
    def EyeSeparationFactor(self, eyeSeparationFactor:float) -> None:
        with agmarshall.DOUBLE_arg(eyeSeparationFactor) as arg_eyeSeparationFactor:
            agcls.evaluate_hresult(self.__dict__["_SetEyeSeparationFactor"](arg_eyeSeparationFactor.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{41d0e11b-d00c-4255-b869-2fc8430f994e}", IStkGraphicsStereoscopic)
agcls.AgTypeNameMap["IStkGraphicsStereoscopic"] = IStkGraphicsStereoscopic

class IStkGraphicsSurfaceMeshPrimitive(object):
    """A triangle mesh primitive for meshes on the surface that need to conform to terrain."""
    _uuid = "{9f13f05b-9c30-4118-8d6b-ab331881aba6}"
    _num_methods = 17
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetTexture"] = _raise_uninitialized_error
        self.__dict__["_SetTexture"] = _raise_uninitialized_error
        self.__dict__["_GetWireframe"] = _raise_uninitialized_error
        self.__dict__["_SetWireframe"] = _raise_uninitialized_error
        self.__dict__["_GetTriangleWindingOrder"] = _raise_uninitialized_error
        self.__dict__["_GetSetHint"] = _raise_uninitialized_error
        self.__dict__["_GetRenderingMethod"] = _raise_uninitialized_error
        self.__dict__["_GetTextureFilter"] = _raise_uninitialized_error
        self.__dict__["_SetTextureFilter"] = _raise_uninitialized_error
        self.__dict__["_GetTextureMatrix"] = _raise_uninitialized_error
        self.__dict__["_SetTextureMatrix"] = _raise_uninitialized_error
        self.__dict__["_GetTransparentTextureBorder"] = _raise_uninitialized_error
        self.__dict__["_SetTransparentTextureBorder"] = _raise_uninitialized_error
        self.__dict__["_Set"] = _raise_uninitialized_error
        self.__dict__["_SetWithoutTexturing"] = _raise_uninitialized_error
        self.__dict__["_Supported"] = _raise_uninitialized_error
        self.__dict__["_SupportedWithDefaultRenderingMethod"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsSurfaceMeshPrimitive._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsSurfaceMeshPrimitive from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsSurfaceMeshPrimitive = agcom.GUID(IStkGraphicsSurfaceMeshPrimitive._uuid)
        vtable_offset_local = IStkGraphicsSurfaceMeshPrimitive._vtable_offset - 1
        self.__dict__["_GetTexture"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSurfaceMeshPrimitive, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_SetTexture"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSurfaceMeshPrimitive, vtable_offset_local+2, agcom.PVOID)
        self.__dict__["_GetWireframe"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSurfaceMeshPrimitive, vtable_offset_local+3, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetWireframe"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSurfaceMeshPrimitive, vtable_offset_local+4, agcom.VARIANT_BOOL)
        self.__dict__["_GetTriangleWindingOrder"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSurfaceMeshPrimitive, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_GetSetHint"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSurfaceMeshPrimitive, vtable_offset_local+6, POINTER(agcom.LONG))
        self.__dict__["_GetRenderingMethod"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSurfaceMeshPrimitive, vtable_offset_local+7, POINTER(agcom.LONG))
        self.__dict__["_GetTextureFilter"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSurfaceMeshPrimitive, vtable_offset_local+8, POINTER(agcom.PVOID))
        self.__dict__["_SetTextureFilter"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSurfaceMeshPrimitive, vtable_offset_local+9, agcom.PVOID)
        self.__dict__["_GetTextureMatrix"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSurfaceMeshPrimitive, vtable_offset_local+10, POINTER(agcom.PVOID))
        self.__dict__["_SetTextureMatrix"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSurfaceMeshPrimitive, vtable_offset_local+11, agcom.PVOID)
        self.__dict__["_GetTransparentTextureBorder"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSurfaceMeshPrimitive, vtable_offset_local+12, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetTransparentTextureBorder"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSurfaceMeshPrimitive, vtable_offset_local+13, agcom.VARIANT_BOOL)
        self.__dict__["_Set"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSurfaceMeshPrimitive, vtable_offset_local+14, agcom.PVOID)
        self.__dict__["_SetWithoutTexturing"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSurfaceMeshPrimitive, vtable_offset_local+15, agcom.PVOID)
        self.__dict__["_Supported"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSurfaceMeshPrimitive, vtable_offset_local+16, agcom.LONG, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SupportedWithDefaultRenderingMethod"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSurfaceMeshPrimitive, vtable_offset_local+17, POINTER(agcom.VARIANT_BOOL))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsSurfaceMeshPrimitive.__dict__ and type(IStkGraphicsSurfaceMeshPrimitive.__dict__[attrname]) == property:
            return IStkGraphicsSurfaceMeshPrimitive.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsSurfaceMeshPrimitive.")
    
    @property
    def Texture(self) -> "IStkGraphicsRendererTexture2D":
        """Gets or sets the texture applied to this primitive when rendering."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTexture"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @Texture.setter
    def Texture(self, texture:"IStkGraphicsRendererTexture2D") -> None:
        with agmarshall.AgInterface_in_arg(texture, IStkGraphicsRendererTexture2D) as arg_texture:
            agcls.evaluate_hresult(self.__dict__["_SetTexture"](arg_texture.COM_val))

    @property
    def Wireframe(self) -> bool:
        """Gets or sets whether the primitive is rendered in wireframe. This is useful for debugging."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetWireframe"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Wireframe.setter
    def Wireframe(self, wireframe:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(wireframe) as arg_wireframe:
            agcls.evaluate_hresult(self.__dict__["_SetWireframe"](arg_wireframe.COM_val))

    @property
    def TriangleWindingOrder(self) -> "AgEStkGraphicsWindingOrder":
        """Gets the orientation of front-facing triangles in the mesh."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsWindingOrder) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTriangleWindingOrder"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def SetHint(self) -> "AgEStkGraphicsSetHint":
        """Gets the primitive's set hint. See the Set Hint Performance Overview for selecting an appropriate value to construct the primitive with."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsSetHint) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSetHint"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def RenderingMethod(self) -> "AgEStkGraphicsSurfaceMeshRenderingMethod":
        """Gets the rendering method used to render the mesh."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsSurfaceMeshRenderingMethod) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetRenderingMethod"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def TextureFilter(self) -> "IStkGraphicsTextureFilter2D":
        """Gets or sets the filter used when a texture is applied to this primitive."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTextureFilter"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @TextureFilter.setter
    def TextureFilter(self, textureFilter:"IStkGraphicsTextureFilter2D") -> None:
        with agmarshall.AgInterface_in_arg(textureFilter, IStkGraphicsTextureFilter2D) as arg_textureFilter:
            agcls.evaluate_hresult(self.__dict__["_SetTextureFilter"](arg_textureFilter.COM_val))

    @property
    def TextureMatrix(self) -> "IStkGraphicsTextureMatrix":
        """Gets or sets the matrix used to transform texture coordinates when a texture is applied to this primitive."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTextureMatrix"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @TextureMatrix.setter
    def TextureMatrix(self, textureMatrix:"IStkGraphicsTextureMatrix") -> None:
        with agmarshall.AgInterface_in_arg(textureMatrix, IStkGraphicsTextureMatrix) as arg_textureMatrix:
            agcls.evaluate_hresult(self.__dict__["_SetTextureMatrix"](arg_textureMatrix.COM_val))

    @property
    def TransparentTextureBorder(self) -> bool:
        """Gets or set the boolean that defines if the color obtained from texture coordinates beyond the texture border should be considered transparent or not. This is typically used in conjunction with the a texture matrix."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTransparentTextureBorder"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @TransparentTextureBorder.setter
    def TransparentTextureBorder(self, transparentTextureBorder:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(transparentTextureBorder) as arg_transparentTextureBorder:
            agcls.evaluate_hresult(self.__dict__["_SetTransparentTextureBorder"](arg_transparentTextureBorder.COM_val))

    def Set(self, surfaceTriangulator:"IStkGraphicsSurfaceTriangulatorResult") -> None:
        """Defines the surface mesh using the specified surfaceTriangulator. The mesh is rendered in the primitive's reference frame."""
        with agmarshall.AgInterface_in_arg(surfaceTriangulator, IStkGraphicsSurfaceTriangulatorResult) as arg_surfaceTriangulator:
            agcls.evaluate_hresult(self.__dict__["_Set"](arg_surfaceTriangulator.COM_val))

    def SetWithoutTexturing(self, surfaceTriangulator:"IStkGraphicsSurfaceTriangulatorResult") -> None:
        """Defines the surface mesh using the specified surfaceTriangulator. The mesh is rendered in the primitive's reference frame."""
        with agmarshall.AgInterface_in_arg(surfaceTriangulator, IStkGraphicsSurfaceTriangulatorResult) as arg_surfaceTriangulator:
            agcls.evaluate_hresult(self.__dict__["_SetWithoutTexturing"](arg_surfaceTriangulator.COM_val))

    def Supported(self, renderingMethod:"AgEStkGraphicsSurfaceMeshRenderingMethod") -> bool:
        """Determines whether or not the video card supports the surface mesh primitive with the given renderingMethod."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsSurfaceMeshRenderingMethod, renderingMethod) as arg_renderingMethod, \
             agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_Supported"](arg_renderingMethod.COM_val, byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def SupportedWithDefaultRenderingMethod(self) -> bool:
        """Determines whether or not the video card supports the surface mesh primitive. This is equivalent to calling Supported with automatic."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_SupportedWithDefaultRenderingMethod"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{9f13f05b-9c30-4118-8d6b-ab331881aba6}", IStkGraphicsSurfaceMeshPrimitive)
agcls.AgTypeNameMap["IStkGraphicsSurfaceMeshPrimitive"] = IStkGraphicsSurfaceMeshPrimitive

class IStkGraphicsTerrainCollection(object):
    """A collection of terrain overlay objects."""
    _uuid = "{6dbd63a6-624b-4318-8fec-daf384f070c4}"
    _num_methods = 20
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        self.__dict__["_GetIsReadOnly"] = _raise_uninitialized_error
        self.__dict__["_Item"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        self.__dict__["_Contains"] = _raise_uninitialized_error
        self.__dict__["_ContainsUriString"] = _raise_uninitialized_error
        self.__dict__["_Remove"] = _raise_uninitialized_error
        self.__dict__["_Clear"] = _raise_uninitialized_error
        self.__dict__["_Add"] = _raise_uninitialized_error
        self.__dict__["_AddAsync"] = _raise_uninitialized_error
        self.__dict__["_IndexOf"] = _raise_uninitialized_error
        self.__dict__["_IndexOfUriString"] = _raise_uninitialized_error
        self.__dict__["_AddUriString"] = _raise_uninitialized_error
        self.__dict__["_AddAsyncUriString"] = _raise_uninitialized_error
        self.__dict__["_Swap"] = _raise_uninitialized_error
        self.__dict__["_SwapByIndex"] = _raise_uninitialized_error
        self.__dict__["_Move"] = _raise_uninitialized_error
        self.__dict__["_MoveByIndex"] = _raise_uninitialized_error
        self.__dict__["_BringToFront"] = _raise_uninitialized_error
        self.__dict__["_SendToBack"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsTerrainCollection._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsTerrainCollection from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsTerrainCollection = agcom.GUID(IStkGraphicsTerrainCollection._uuid)
        vtable_offset_local = IStkGraphicsTerrainCollection._vtable_offset - 1
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTerrainCollection, vtable_offset_local+1, POINTER(agcom.INT))
        self.__dict__["_GetIsReadOnly"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTerrainCollection, vtable_offset_local+2, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_Item"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTerrainCollection, vtable_offset_local+3, agcom.INT, POINTER(agcom.PVOID))
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTerrainCollection, vtable_offset_local+4, POINTER(agcom.PVOID))
        self.__dict__["_Contains"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTerrainCollection, vtable_offset_local+5, agcom.PVOID, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_ContainsUriString"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTerrainCollection, vtable_offset_local+6, agcom.BSTR, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_Remove"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTerrainCollection, vtable_offset_local+7, agcom.PVOID, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_Clear"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTerrainCollection, vtable_offset_local+8, )
        self.__dict__["_Add"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTerrainCollection, vtable_offset_local+9, agcom.PVOID)
        self.__dict__["_AddAsync"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTerrainCollection, vtable_offset_local+10, agcom.PVOID)
        self.__dict__["_IndexOf"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTerrainCollection, vtable_offset_local+11, agcom.PVOID, POINTER(agcom.INT))
        self.__dict__["_IndexOfUriString"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTerrainCollection, vtable_offset_local+12, agcom.BSTR, POINTER(agcom.INT))
        self.__dict__["_AddUriString"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTerrainCollection, vtable_offset_local+13, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_AddAsyncUriString"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTerrainCollection, vtable_offset_local+14, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_Swap"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTerrainCollection, vtable_offset_local+15, agcom.PVOID, agcom.PVOID)
        self.__dict__["_SwapByIndex"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTerrainCollection, vtable_offset_local+16, agcom.INT, agcom.INT)
        self.__dict__["_Move"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTerrainCollection, vtable_offset_local+17, agcom.PVOID, agcom.INT)
        self.__dict__["_MoveByIndex"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTerrainCollection, vtable_offset_local+18, agcom.INT, agcom.INT)
        self.__dict__["_BringToFront"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTerrainCollection, vtable_offset_local+19, agcom.PVOID)
        self.__dict__["_SendToBack"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTerrainCollection, vtable_offset_local+20, agcom.PVOID)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsTerrainCollection.__dict__ and type(IStkGraphicsTerrainCollection.__dict__[attrname]) == property:
            return IStkGraphicsTerrainCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsTerrainCollection.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> "IStkGraphicsTerrainOverlay":
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    def Subscribe(self) -> IStkGraphicsTerrainCollectionEventHandler:
        """Returns an IStkGraphicsTerrainCollectionEventHandler that is subscribed to handle events associated with this instance of IStkGraphicsTerrainCollection."""
        return IStkGraphicsTerrainCollectionEventHandler(self._pUnk)    
    @property
    def Count(self) -> int:
        """Gets the number of terrain overlay objects in the collection."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def IsReadOnly(self) -> bool:
        """Gets whether or not the collection is read only."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetIsReadOnly"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def Item(self, index:int) -> "IStkGraphicsTerrainOverlay":
        """Gets the terrain overlay at the specified index."""
        with agmarshall.INT_arg(index) as arg_index, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Item"](arg_index.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        """Constructs an iterator that can be used to iterate the collection."""
        with agmarshall.IEnumVARIANT_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def Contains(self, terrainOverlay:"IStkGraphicsTerrainOverlay") -> bool:
        """Checks the presence of a terrain overlay in the collection."""
        with agmarshall.AgInterface_in_arg(terrainOverlay, IStkGraphicsTerrainOverlay) as arg_terrainOverlay, \
             agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_Contains"](arg_terrainOverlay.COM_val, byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def ContainsUriString(self, stringUri:str) -> bool:
        """Checks the presence of a terrain overlay with the specified Uri in the collection."""
        with agmarshall.BSTR_arg(stringUri) as arg_stringUri, \
             agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_ContainsUriString"](arg_stringUri.COM_val, byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def Remove(self, terrainOverlay:"IStkGraphicsTerrainOverlay") -> bool:
        """Removes a terrain overlay from the collection."""
        with agmarshall.AgInterface_in_arg(terrainOverlay, IStkGraphicsTerrainOverlay) as arg_terrainOverlay, \
             agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_Remove"](arg_terrainOverlay.COM_val, byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def Clear(self) -> None:
        """Removes all terrain overlay objects from the collection."""
        agcls.evaluate_hresult(self.__dict__["_Clear"]())

    def Add(self, terrainOverlay:"IStkGraphicsTerrainOverlay") -> None:
        """Adds terrainOverlay to the collection."""
        with agmarshall.AgInterface_in_arg(terrainOverlay, IStkGraphicsTerrainOverlay) as arg_terrainOverlay:
            agcls.evaluate_hresult(self.__dict__["_Add"](arg_terrainOverlay.COM_val))

    def AddAsync(self, terrainOverlay:"IStkGraphicsTerrainOverlay") -> None:
        """Adds terrainOverlay to the collection asynchronously."""
        with agmarshall.AgInterface_in_arg(terrainOverlay, IStkGraphicsTerrainOverlay) as arg_terrainOverlay:
            agcls.evaluate_hresult(self.__dict__["_AddAsync"](arg_terrainOverlay.COM_val))

    def IndexOf(self, terrainOverlay:"IStkGraphicsTerrainOverlay") -> int:
        """Gets the index of the specified terrain overlay."""
        with agmarshall.AgInterface_in_arg(terrainOverlay, IStkGraphicsTerrainOverlay) as arg_terrainOverlay, \
             agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_IndexOf"](arg_terrainOverlay.COM_val, byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def IndexOfUriString(self, stringUri:str) -> int:
        """Gets the index of the terrain overlay with the specified Uri."""
        with agmarshall.BSTR_arg(stringUri) as arg_stringUri, \
             agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_IndexOfUriString"](arg_stringUri.COM_val, byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def AddUriString(self, uri:str) -> "IStkGraphicsTerrainOverlay":
        """Creates a terrain overlay from the uri, which represents a uri, and adds it to the collection."""
        with agmarshall.BSTR_arg(uri) as arg_uri, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_AddUriString"](arg_uri.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def AddAsyncUriString(self, uri:str) -> "IStkGraphicsTerrainOverlay":
        """Creates a terrain overlay from the uri, which represents a uri, and adds it to the collection asynchronously."""
        with agmarshall.BSTR_arg(uri) as arg_uri, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_AddAsyncUriString"](arg_uri.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def Swap(self, terrainOverlay1:"IStkGraphicsTerrainOverlay", terrainOverlay2:"IStkGraphicsTerrainOverlay") -> None:
        """Swaps the position of two terrain overlay objects."""
        with agmarshall.AgInterface_in_arg(terrainOverlay1, IStkGraphicsTerrainOverlay) as arg_terrainOverlay1, \
             agmarshall.AgInterface_in_arg(terrainOverlay2, IStkGraphicsTerrainOverlay) as arg_terrainOverlay2:
            agcls.evaluate_hresult(self.__dict__["_Swap"](arg_terrainOverlay1.COM_val, arg_terrainOverlay2.COM_val))

    def SwapByIndex(self, index1:int, index2:int) -> None:
        """Swaps the position of two terrain overlay objects at the specified indices."""
        with agmarshall.INT_arg(index1) as arg_index1, \
             agmarshall.INT_arg(index2) as arg_index2:
            agcls.evaluate_hresult(self.__dict__["_SwapByIndex"](arg_index1.COM_val, arg_index2.COM_val))

    def Move(self, terrainOverlay:"IStkGraphicsTerrainOverlay", newPosition:int) -> None:
        """Moves the terrain overlay to the specified position."""
        with agmarshall.AgInterface_in_arg(terrainOverlay, IStkGraphicsTerrainOverlay) as arg_terrainOverlay, \
             agmarshall.INT_arg(newPosition) as arg_newPosition:
            agcls.evaluate_hresult(self.__dict__["_Move"](arg_terrainOverlay.COM_val, arg_newPosition.COM_val))

    def MoveByIndex(self, index:int, newPosition:int) -> None:
        """Moves the terrain overlay at the specified index to the specified position."""
        with agmarshall.INT_arg(index) as arg_index, \
             agmarshall.INT_arg(newPosition) as arg_newPosition:
            agcls.evaluate_hresult(self.__dict__["_MoveByIndex"](arg_index.COM_val, arg_newPosition.COM_val))

    def BringToFront(self, terrainOverlay:"IStkGraphicsTerrainOverlay") -> None:
        """Brings the terrain overlay to the front of the collection so it is rendered first or on the bottom."""
        with agmarshall.AgInterface_in_arg(terrainOverlay, IStkGraphicsTerrainOverlay) as arg_terrainOverlay:
            agcls.evaluate_hresult(self.__dict__["_BringToFront"](arg_terrainOverlay.COM_val))

    def SendToBack(self, terrainOverlay:"IStkGraphicsTerrainOverlay") -> None:
        """Sends the terrain overlay to the back of the collection so it is rendered last or on the top."""
        with agmarshall.AgInterface_in_arg(terrainOverlay, IStkGraphicsTerrainOverlay) as arg_terrainOverlay:
            agcls.evaluate_hresult(self.__dict__["_SendToBack"](arg_terrainOverlay.COM_val))

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{6dbd63a6-624b-4318-8fec-daf384f070c4}", IStkGraphicsTerrainCollection)
agcls.AgTypeNameMap["IStkGraphicsTerrainCollection"] = IStkGraphicsTerrainCollection

class IStkGraphicsTerrainOverlay(object):
    """A globe overlay which shows terrain."""
    _uuid = "{dfe57e34-7b31-4360-a7a8-8db856882670}"
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAltitudeOffset"] = _raise_uninitialized_error
        self.__dict__["_SetAltitudeOffset"] = _raise_uninitialized_error
        self.__dict__["_GetAltitudeScale"] = _raise_uninitialized_error
        self.__dict__["_SetAltitudeScale"] = _raise_uninitialized_error
        self.__dict__["_GetSupported"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsTerrainOverlay._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsTerrainOverlay from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsTerrainOverlay = agcom.GUID(IStkGraphicsTerrainOverlay._uuid)
        vtable_offset_local = IStkGraphicsTerrainOverlay._vtable_offset - 1
        self.__dict__["_GetAltitudeOffset"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTerrainOverlay, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAltitudeOffset"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTerrainOverlay, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetAltitudeScale"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTerrainOverlay, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAltitudeScale"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTerrainOverlay, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetSupported"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTerrainOverlay, vtable_offset_local+5, POINTER(agcom.VARIANT_BOOL))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsTerrainOverlay.__dict__ and type(IStkGraphicsTerrainOverlay.__dict__[attrname]) == property:
            return IStkGraphicsTerrainOverlay.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsTerrainOverlay.")
    
    @property
    def AltitudeOffset(self) -> float:
        """Gets or sets the value from which to offset the terrain height."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitudeOffset"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @AltitudeOffset.setter
    def AltitudeOffset(self, altitudeOffset:float) -> None:
        with agmarshall.DOUBLE_arg(altitudeOffset) as arg_altitudeOffset:
            agcls.evaluate_hresult(self.__dict__["_SetAltitudeOffset"](arg_altitudeOffset.COM_val))

    @property
    def AltitudeScale(self) -> float:
        """Gets or sets the value from which to scale the terrain height."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitudeScale"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @AltitudeScale.setter
    def AltitudeScale(self, altitudeScale:float) -> None:
        with agmarshall.DOUBLE_arg(altitudeScale) as arg_altitudeScale:
            agcls.evaluate_hresult(self.__dict__["_SetAltitudeScale"](arg_altitudeScale.COM_val))

    @property
    def Supported(self) -> bool:
        """Gets whether the video card supports adding terrain overlay objects. Video cards that support OpenGL 1.2 or higher support terrain overlay objects."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSupported"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{dfe57e34-7b31-4360-a7a8-8db856882670}", IStkGraphicsTerrainOverlay)
agcls.AgTypeNameMap["IStkGraphicsTerrainOverlay"] = IStkGraphicsTerrainOverlay

class IStkGraphicsTextBatchPrimitive(object):
    """ Renders one or more strings in the 3D scene.  For best performance, avoid creating lots of batches with only a few strings each. See the Batching Performance Overview. """
    _uuid = "{037722fb-c0e5-4052-b34d-60aa662b5d2b}"
    _num_methods = 32
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetSetHint"] = _raise_uninitialized_error
        self.__dict__["_GetBoundingSphereScale"] = _raise_uninitialized_error
        self.__dict__["_SetBoundingSphereScale"] = _raise_uninitialized_error
        self.__dict__["_GetFont"] = _raise_uninitialized_error
        self.__dict__["_GetOutlineColor"] = _raise_uninitialized_error
        self.__dict__["_SetOutlineColor"] = _raise_uninitialized_error
        self.__dict__["_GetOutlineTranslucency"] = _raise_uninitialized_error
        self.__dict__["_SetOutlineTranslucency"] = _raise_uninitialized_error
        self.__dict__["_GetAlignToPixel"] = _raise_uninitialized_error
        self.__dict__["_SetAlignToPixel"] = _raise_uninitialized_error
        self.__dict__["_GetDistanceDisplayConditionPerString"] = _raise_uninitialized_error
        self.__dict__["_SetDistanceDisplayConditionPerString"] = _raise_uninitialized_error
        self.__dict__["_GetPerItemPickingEnabled"] = _raise_uninitialized_error
        self.__dict__["_SetPerItemPickingEnabled"] = _raise_uninitialized_error
        self.__dict__["_GetTextureFilter"] = _raise_uninitialized_error
        self.__dict__["_SetTextureFilter"] = _raise_uninitialized_error
        self.__dict__["_Set"] = _raise_uninitialized_error
        self.__dict__["_SetWithOptionalParameters"] = _raise_uninitialized_error
        self.__dict__["_SetWithOptionalParametersAndRenderPass"] = _raise_uninitialized_error
        self.__dict__["_SetCartographic"] = _raise_uninitialized_error
        self.__dict__["_SetCartographicWithOptionalParameters"] = _raise_uninitialized_error
        self.__dict__["_SetCartographicWithOptionalParametersAndRenderPass"] = _raise_uninitialized_error
        self.__dict__["_SetPartial"] = _raise_uninitialized_error
        self.__dict__["_SetPartialWithIndicesOrder"] = _raise_uninitialized_error
        self.__dict__["_SetPartialWithOptionalParameters"] = _raise_uninitialized_error
        self.__dict__["_SetPartialWithOptionalParametersIndicesOrderAndRenderPass"] = _raise_uninitialized_error
        self.__dict__["_SetPartialCartographic"] = _raise_uninitialized_error
        self.__dict__["_SetPartialCartographicWithIndicesOrder"] = _raise_uninitialized_error
        self.__dict__["_SetPartialCartographicWithOptionalParameters"] = _raise_uninitialized_error
        self.__dict__["_SetPartialCartographicWithOptionalParametersIndicesOrderAndRenderPass"] = _raise_uninitialized_error
        self.__dict__["_GetRenderInScreenSpace"] = _raise_uninitialized_error
        self.__dict__["_SetRenderInScreenSpace"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsTextBatchPrimitive._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsTextBatchPrimitive from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsTextBatchPrimitive = agcom.GUID(IStkGraphicsTextBatchPrimitive._uuid)
        vtable_offset_local = IStkGraphicsTextBatchPrimitive._vtable_offset - 1
        self.__dict__["_GetSetHint"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextBatchPrimitive, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_GetBoundingSphereScale"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextBatchPrimitive, vtable_offset_local+2, POINTER(agcom.DOUBLE))
        self.__dict__["_SetBoundingSphereScale"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextBatchPrimitive, vtable_offset_local+3, agcom.DOUBLE)
        self.__dict__["_GetFont"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextBatchPrimitive, vtable_offset_local+4, POINTER(agcom.PVOID))
        self.__dict__["_GetOutlineColor"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextBatchPrimitive, vtable_offset_local+5, POINTER(agcom.OLE_COLOR))
        self.__dict__["_SetOutlineColor"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextBatchPrimitive, vtable_offset_local+6, agcom.OLE_COLOR)
        self.__dict__["_GetOutlineTranslucency"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextBatchPrimitive, vtable_offset_local+7, POINTER(agcom.FLOAT))
        self.__dict__["_SetOutlineTranslucency"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextBatchPrimitive, vtable_offset_local+8, agcom.FLOAT)
        self.__dict__["_GetAlignToPixel"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextBatchPrimitive, vtable_offset_local+9, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetAlignToPixel"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextBatchPrimitive, vtable_offset_local+10, agcom.VARIANT_BOOL)
        self.__dict__["_GetDistanceDisplayConditionPerString"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextBatchPrimitive, vtable_offset_local+11, POINTER(agcom.PVOID))
        self.__dict__["_SetDistanceDisplayConditionPerString"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextBatchPrimitive, vtable_offset_local+12, agcom.PVOID)
        self.__dict__["_GetPerItemPickingEnabled"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextBatchPrimitive, vtable_offset_local+13, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetPerItemPickingEnabled"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextBatchPrimitive, vtable_offset_local+14, agcom.VARIANT_BOOL)
        self.__dict__["_GetTextureFilter"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextBatchPrimitive, vtable_offset_local+15, POINTER(agcom.PVOID))
        self.__dict__["_SetTextureFilter"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextBatchPrimitive, vtable_offset_local+16, agcom.PVOID)
        self.__dict__["_Set"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextBatchPrimitive, vtable_offset_local+17, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetWithOptionalParameters"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextBatchPrimitive, vtable_offset_local+18, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.PVOID)
        self.__dict__["_SetWithOptionalParametersAndRenderPass"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextBatchPrimitive, vtable_offset_local+19, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.PVOID, agcom.LONG)
        self.__dict__["_SetCartographic"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextBatchPrimitive, vtable_offset_local+20, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetCartographicWithOptionalParameters"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextBatchPrimitive, vtable_offset_local+21, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.PVOID)
        self.__dict__["_SetCartographicWithOptionalParametersAndRenderPass"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextBatchPrimitive, vtable_offset_local+22, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.PVOID, agcom.LONG)
        self.__dict__["_SetPartial"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextBatchPrimitive, vtable_offset_local+23, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetPartialWithIndicesOrder"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextBatchPrimitive, vtable_offset_local+24, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.LONG)
        self.__dict__["_SetPartialWithOptionalParameters"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextBatchPrimitive, vtable_offset_local+25, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.PVOID, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetPartialWithOptionalParametersIndicesOrderAndRenderPass"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextBatchPrimitive, vtable_offset_local+26, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.PVOID, POINTER(agcom.SAFEARRAY), agcom.LONG, agcom.LONG)
        self.__dict__["_SetPartialCartographic"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextBatchPrimitive, vtable_offset_local+27, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetPartialCartographicWithIndicesOrder"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextBatchPrimitive, vtable_offset_local+28, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.LONG)
        self.__dict__["_SetPartialCartographicWithOptionalParameters"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextBatchPrimitive, vtable_offset_local+29, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.PVOID, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetPartialCartographicWithOptionalParametersIndicesOrderAndRenderPass"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextBatchPrimitive, vtable_offset_local+30, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.PVOID, POINTER(agcom.SAFEARRAY), agcom.LONG, agcom.LONG)
        self.__dict__["_GetRenderInScreenSpace"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextBatchPrimitive, vtable_offset_local+31, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetRenderInScreenSpace"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextBatchPrimitive, vtable_offset_local+32, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsTextBatchPrimitive.__dict__ and type(IStkGraphicsTextBatchPrimitive.__dict__[attrname]) == property:
            return IStkGraphicsTextBatchPrimitive.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsTextBatchPrimitive.")
    
    @property
    def SetHint(self) -> "AgEStkGraphicsSetHint":
        """Gets the primitive's set hint. See the Set Hint Performance Overview for selecting an appropriate value to construct the primitive with."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsSetHint) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSetHint"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def BoundingSphereScale(self) -> float:
        """Gets or sets the scale applied to the radius of this primitive's bounding sphere."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBoundingSphereScale"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @BoundingSphereScale.setter
    def BoundingSphereScale(self, boundingSphereScale:float) -> None:
        with agmarshall.DOUBLE_arg(boundingSphereScale) as arg_boundingSphereScale:
            agcls.evaluate_hresult(self.__dict__["_SetBoundingSphereScale"](arg_boundingSphereScale.COM_val))

    @property
    def Font(self) -> "IStkGraphicsGraphicsFont":
        """Gets the font used to render the text batch."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetFont"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def OutlineColor(self) -> agcolor.Color:
        """Gets or sets the text's outline color."""
        with agmarshall.OLE_COLOR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetOutlineColor"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @OutlineColor.setter
    def OutlineColor(self, outlineColor:agcolor.Color) -> None:
        with agmarshall.OLE_COLOR_arg(outlineColor) as arg_outlineColor:
            agcls.evaluate_hresult(self.__dict__["_SetOutlineColor"](arg_outlineColor.COM_val))

    @property
    def OutlineTranslucency(self) -> float:
        """Gets or sets the text's outline translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetOutlineTranslucency"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @OutlineTranslucency.setter
    def OutlineTranslucency(self, outlineTranslucency:float) -> None:
        with agmarshall.FLOAT_arg(outlineTranslucency) as arg_outlineTranslucency:
            agcls.evaluate_hresult(self.__dict__["_SetOutlineTranslucency"](arg_outlineTranslucency.COM_val))

    @property
    def AlignToPixel(self) -> bool:
        """Gets or sets whether the screen space position of each string is aligned to a pixel."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAlignToPixel"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @AlignToPixel.setter
    def AlignToPixel(self, alignToPixel:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(alignToPixel) as arg_alignToPixel:
            agcls.evaluate_hresult(self.__dict__["_SetAlignToPixel"](arg_alignToPixel.COM_val))

    @property
    def DistanceDisplayConditionPerString(self) -> "IStkGraphicsDistanceDisplayCondition":
        """Gets or sets a distance display condition that is evaluated per string in the text batch during rendering. This is different than display condition, which is evaluated once for the entire text batch..."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDistanceDisplayConditionPerString"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @DistanceDisplayConditionPerString.setter
    def DistanceDisplayConditionPerString(self, distanceDisplayConditionPerString:"IStkGraphicsDistanceDisplayCondition") -> None:
        with agmarshall.AgInterface_in_arg(distanceDisplayConditionPerString, IStkGraphicsDistanceDisplayCondition) as arg_distanceDisplayConditionPerString:
            agcls.evaluate_hresult(self.__dict__["_SetDistanceDisplayConditionPerString"](arg_distanceDisplayConditionPerString.COM_val))

    @property
    def PerItemPickingEnabled(self) -> bool:
        """Gets or sets whether individual text indices will be included in the pick results returned from the scene's Pick method. Each text index that is picked will be returned as a batch primitive index."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPerItemPickingEnabled"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @PerItemPickingEnabled.setter
    def PerItemPickingEnabled(self, perItemPickingEnabled:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(perItemPickingEnabled) as arg_perItemPickingEnabled:
            agcls.evaluate_hresult(self.__dict__["_SetPerItemPickingEnabled"](arg_perItemPickingEnabled.COM_val))

    @property
    def TextureFilter(self) -> "IStkGraphicsTextureFilter2D":
        """Gets or sets the filter used to filter the texture-based font."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTextureFilter"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @TextureFilter.setter
    def TextureFilter(self, textureFilter:"IStkGraphicsTextureFilter2D") -> None:
        with agmarshall.AgInterface_in_arg(textureFilter, IStkGraphicsTextureFilter2D) as arg_textureFilter:
            agcls.evaluate_hresult(self.__dict__["_SetTextureFilter"](arg_textureFilter.COM_val))

    def Set(self, positions:list, text:list) -> None:
        """Defines the positions and text of strings in a text batch. The strings are rendered in the primitive's reference frame."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(text) as arg_text:
            agcls.evaluate_hresult(self.__dict__["_Set"](byref(arg_positions.COM_val), byref(arg_text.COM_val)))

    def SetWithOptionalParameters(self, positions:list, text:list, optionalParameters:"IStkGraphicsTextBatchPrimitiveOptionalParameters") -> None:
        """Defines the positions, text, and optional parameters of strings in a text batch. The strings are rendered in the primitive's reference frame."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(text) as arg_text, \
             agmarshall.AgInterface_in_arg(optionalParameters, IStkGraphicsTextBatchPrimitiveOptionalParameters) as arg_optionalParameters:
            agcls.evaluate_hresult(self.__dict__["_SetWithOptionalParameters"](byref(arg_positions.COM_val), byref(arg_text.COM_val), arg_optionalParameters.COM_val))

    def SetWithOptionalParametersAndRenderPass(self, positions:list, text:list, optionalParameters:"IStkGraphicsTextBatchPrimitiveOptionalParameters", renderPassHint:"AgEStkGraphicsRenderPassHint") -> None:
        """Defines the positions, text, and optional parameters of strings in a text batch. The strings are rendered in the primitive's reference frame. renderPassHint is provided for efficiency."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(text) as arg_text, \
             agmarshall.AgInterface_in_arg(optionalParameters, IStkGraphicsTextBatchPrimitiveOptionalParameters) as arg_optionalParameters, \
             agmarshall.AgEnum_arg(AgEStkGraphicsRenderPassHint, renderPassHint) as arg_renderPassHint:
            agcls.evaluate_hresult(self.__dict__["_SetWithOptionalParametersAndRenderPass"](byref(arg_positions.COM_val), byref(arg_text.COM_val), arg_optionalParameters.COM_val, arg_renderPassHint.COM_val))

    def SetCartographic(self, centralBody:str, positions:list, text:list) -> None:
        """For convenience. Defines the positions and text of strings in a text batch using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling Set."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(text) as arg_text:
            agcls.evaluate_hresult(self.__dict__["_SetCartographic"](arg_centralBody.COM_val, byref(arg_positions.COM_val), byref(arg_text.COM_val)))

    def SetCartographicWithOptionalParameters(self, centralBody:str, positions:list, text:list, optionalParameters:"IStkGraphicsTextBatchPrimitiveOptionalParameters") -> None:
        """For convenience. Defines the positions, text, and optional parameters of strings in a text batch using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling Set."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(text) as arg_text, \
             agmarshall.AgInterface_in_arg(optionalParameters, IStkGraphicsTextBatchPrimitiveOptionalParameters) as arg_optionalParameters:
            agcls.evaluate_hresult(self.__dict__["_SetCartographicWithOptionalParameters"](arg_centralBody.COM_val, byref(arg_positions.COM_val), byref(arg_text.COM_val), arg_optionalParameters.COM_val))

    def SetCartographicWithOptionalParametersAndRenderPass(self, centralBody:str, positions:list, text:list, optionalParameters:"IStkGraphicsTextBatchPrimitiveOptionalParameters", renderPassHint:"AgEStkGraphicsRenderPassHint") -> None:
        """For convenience. Defines the positions, text, and optional parameters of strings in a text batch using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling Set."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(text) as arg_text, \
             agmarshall.AgInterface_in_arg(optionalParameters, IStkGraphicsTextBatchPrimitiveOptionalParameters) as arg_optionalParameters, \
             agmarshall.AgEnum_arg(AgEStkGraphicsRenderPassHint, renderPassHint) as arg_renderPassHint:
            agcls.evaluate_hresult(self.__dict__["_SetCartographicWithOptionalParametersAndRenderPass"](arg_centralBody.COM_val, byref(arg_positions.COM_val), byref(arg_text.COM_val), arg_optionalParameters.COM_val, arg_renderPassHint.COM_val))

    def SetPartial(self, positions:list, text:list, indices:list) -> None:
        """Updates a subset of positions and/or text in a text batch."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(text) as arg_text, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices:
            agcls.evaluate_hresult(self.__dict__["_SetPartial"](byref(arg_positions.COM_val), byref(arg_text.COM_val), byref(arg_indices.COM_val)))

    def SetPartialWithIndicesOrder(self, positions:list, text:list, indices:list, indicesOrderHint:"AgEStkGraphicsIndicesOrderHint") -> None:
        """Updates a subset of positions and/or text in a text batch."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(text) as arg_text, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices, \
             agmarshall.AgEnum_arg(AgEStkGraphicsIndicesOrderHint, indicesOrderHint) as arg_indicesOrderHint:
            agcls.evaluate_hresult(self.__dict__["_SetPartialWithIndicesOrder"](byref(arg_positions.COM_val), byref(arg_text.COM_val), byref(arg_indices.COM_val), arg_indicesOrderHint.COM_val))

    def SetPartialWithOptionalParameters(self, positions:list, text:list, optionalParameters:"IStkGraphicsTextBatchPrimitiveOptionalParameters", indices:list) -> None:
        """Updates a subset of positions, text, and/or optional per-string parameters in a text batch."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(text) as arg_text, \
             agmarshall.AgInterface_in_arg(optionalParameters, IStkGraphicsTextBatchPrimitiveOptionalParameters) as arg_optionalParameters, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices:
            agcls.evaluate_hresult(self.__dict__["_SetPartialWithOptionalParameters"](byref(arg_positions.COM_val), byref(arg_text.COM_val), arg_optionalParameters.COM_val, byref(arg_indices.COM_val)))

    def SetPartialWithOptionalParametersIndicesOrderAndRenderPass(self, positions:list, text:list, optionalParameters:"IStkGraphicsTextBatchPrimitiveOptionalParameters", indices:list, indicesOrderHint:"AgEStkGraphicsIndicesOrderHint", renderPassHint:"AgEStkGraphicsRenderPassHint") -> None:
        """Updates a subset of positions, text, and/or optional per-string parameters in a text batch."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(text) as arg_text, \
             agmarshall.AgInterface_in_arg(optionalParameters, IStkGraphicsTextBatchPrimitiveOptionalParameters) as arg_optionalParameters, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices, \
             agmarshall.AgEnum_arg(AgEStkGraphicsIndicesOrderHint, indicesOrderHint) as arg_indicesOrderHint, \
             agmarshall.AgEnum_arg(AgEStkGraphicsRenderPassHint, renderPassHint) as arg_renderPassHint:
            agcls.evaluate_hresult(self.__dict__["_SetPartialWithOptionalParametersIndicesOrderAndRenderPass"](byref(arg_positions.COM_val), byref(arg_text.COM_val), arg_optionalParameters.COM_val, byref(arg_indices.COM_val), arg_indicesOrderHint.COM_val, arg_renderPassHint.COM_val))

    def SetPartialCartographic(self, centralBody:str, positions:list, text:list, indices:list) -> None:
        """For convenience. Updates a subset of positions and/or text in a text batch using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling SetPartial."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(text) as arg_text, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices:
            agcls.evaluate_hresult(self.__dict__["_SetPartialCartographic"](arg_centralBody.COM_val, byref(arg_positions.COM_val), byref(arg_text.COM_val), byref(arg_indices.COM_val)))

    def SetPartialCartographicWithIndicesOrder(self, centralBody:str, positions:list, text:list, indices:list, indicesOrderHint:"AgEStkGraphicsIndicesOrderHint") -> None:
        """For convenience. Updates a subset of positions and/or text in a text batch using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling SetPartial."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(text) as arg_text, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices, \
             agmarshall.AgEnum_arg(AgEStkGraphicsIndicesOrderHint, indicesOrderHint) as arg_indicesOrderHint:
            agcls.evaluate_hresult(self.__dict__["_SetPartialCartographicWithIndicesOrder"](arg_centralBody.COM_val, byref(arg_positions.COM_val), byref(arg_text.COM_val), byref(arg_indices.COM_val), arg_indicesOrderHint.COM_val))

    def SetPartialCartographicWithOptionalParameters(self, centralBody:str, positions:list, text:list, optionalParameters:"IStkGraphicsTextBatchPrimitiveOptionalParameters", indices:list) -> None:
        """For convenience. Updates a subset of positions, text, and/or per-string parameters in a text batch using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling SetPartial."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(text) as arg_text, \
             agmarshall.AgInterface_in_arg(optionalParameters, IStkGraphicsTextBatchPrimitiveOptionalParameters) as arg_optionalParameters, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices:
            agcls.evaluate_hresult(self.__dict__["_SetPartialCartographicWithOptionalParameters"](arg_centralBody.COM_val, byref(arg_positions.COM_val), byref(arg_text.COM_val), arg_optionalParameters.COM_val, byref(arg_indices.COM_val)))

    def SetPartialCartographicWithOptionalParametersIndicesOrderAndRenderPass(self, centralBody:str, positions:list, text:list, optionalParameters:"IStkGraphicsTextBatchPrimitiveOptionalParameters", indices:list, indicesOrderHint:"AgEStkGraphicsIndicesOrderHint", renderPassHint:"AgEStkGraphicsRenderPassHint") -> None:
        """For convenience. Updates a subset of positions, text, and/or per-string parameters in a text batch using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling SetPartial."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(text) as arg_text, \
             agmarshall.AgInterface_in_arg(optionalParameters, IStkGraphicsTextBatchPrimitiveOptionalParameters) as arg_optionalParameters, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices, \
             agmarshall.AgEnum_arg(AgEStkGraphicsIndicesOrderHint, indicesOrderHint) as arg_indicesOrderHint, \
             agmarshall.AgEnum_arg(AgEStkGraphicsRenderPassHint, renderPassHint) as arg_renderPassHint:
            agcls.evaluate_hresult(self.__dict__["_SetPartialCartographicWithOptionalParametersIndicesOrderAndRenderPass"](arg_centralBody.COM_val, byref(arg_positions.COM_val), byref(arg_text.COM_val), arg_optionalParameters.COM_val, byref(arg_indices.COM_val), arg_indicesOrderHint.COM_val, arg_renderPassHint.COM_val))

    @property
    def RenderInScreenSpace(self) -> bool:
        """Gets or sets whether the primitive is positioned and rendered in screen space coordinates."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetRenderInScreenSpace"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @RenderInScreenSpace.setter
    def RenderInScreenSpace(self, renderInScreenSpace:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(renderInScreenSpace) as arg_renderInScreenSpace:
            agcls.evaluate_hresult(self.__dict__["_SetRenderInScreenSpace"](arg_renderInScreenSpace.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{037722fb-c0e5-4052-b34d-60aa662b5d2b}", IStkGraphicsTextBatchPrimitive)
agcls.AgTypeNameMap["IStkGraphicsTextBatchPrimitive"] = IStkGraphicsTextBatchPrimitive

class IStkGraphicsTextBatchPrimitiveOptionalParameters(object):
    """Optional per-string and per-batch parameters for text batch primitive..."""
    _uuid = "{e18b012f-840d-4f32-8810-dd253c38ce7f}"
    _num_methods = 14
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetOrigin"] = _raise_uninitialized_error
        self.__dict__["_SetOrigin"] = _raise_uninitialized_error
        self.__dict__["_GetEyeOffset"] = _raise_uninitialized_error
        self.__dict__["_SetEyeOffset"] = _raise_uninitialized_error
        self.__dict__["_GetPixelOffset"] = _raise_uninitialized_error
        self.__dict__["_SetPixelOffset"] = _raise_uninitialized_error
        self.__dict__["_GetMaximumStringLength"] = _raise_uninitialized_error
        self.__dict__["_SetMaximumStringLength"] = _raise_uninitialized_error
        self.__dict__["_SetOrigins"] = _raise_uninitialized_error
        self.__dict__["_SetEyeOffsets"] = _raise_uninitialized_error
        self.__dict__["_SetPixelOffsets"] = _raise_uninitialized_error
        self.__dict__["_SetColors"] = _raise_uninitialized_error
        self.__dict__["_GetScreenSpaceRendering"] = _raise_uninitialized_error
        self.__dict__["_SetScreenSpaceRendering"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsTextBatchPrimitiveOptionalParameters._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsTextBatchPrimitiveOptionalParameters from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsTextBatchPrimitiveOptionalParameters = agcom.GUID(IStkGraphicsTextBatchPrimitiveOptionalParameters._uuid)
        vtable_offset_local = IStkGraphicsTextBatchPrimitiveOptionalParameters._vtable_offset - 1
        self.__dict__["_GetOrigin"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextBatchPrimitiveOptionalParameters, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetOrigin"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextBatchPrimitiveOptionalParameters, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetEyeOffset"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextBatchPrimitiveOptionalParameters, vtable_offset_local+3, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetEyeOffset"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextBatchPrimitiveOptionalParameters, vtable_offset_local+4, agcom.SAFEARRAY)
        self.__dict__["_GetPixelOffset"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextBatchPrimitiveOptionalParameters, vtable_offset_local+5, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetPixelOffset"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextBatchPrimitiveOptionalParameters, vtable_offset_local+6, agcom.SAFEARRAY)
        self.__dict__["_GetMaximumStringLength"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextBatchPrimitiveOptionalParameters, vtable_offset_local+7, POINTER(agcom.INT))
        self.__dict__["_SetMaximumStringLength"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextBatchPrimitiveOptionalParameters, vtable_offset_local+8, agcom.INT)
        self.__dict__["_SetOrigins"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextBatchPrimitiveOptionalParameters, vtable_offset_local+9, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetEyeOffsets"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextBatchPrimitiveOptionalParameters, vtable_offset_local+10, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetPixelOffsets"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextBatchPrimitiveOptionalParameters, vtable_offset_local+11, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetColors"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextBatchPrimitiveOptionalParameters, vtable_offset_local+12, POINTER(agcom.SAFEARRAY))
        self.__dict__["_GetScreenSpaceRendering"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextBatchPrimitiveOptionalParameters, vtable_offset_local+13, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetScreenSpaceRendering"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextBatchPrimitiveOptionalParameters, vtable_offset_local+14, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsTextBatchPrimitiveOptionalParameters.__dict__ and type(IStkGraphicsTextBatchPrimitiveOptionalParameters.__dict__[attrname]) == property:
            return IStkGraphicsTextBatchPrimitiveOptionalParameters.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsTextBatchPrimitiveOptionalParameters.")
    
    @property
    def Origin(self) -> "AgEStkGraphicsOrigin":
        """Gets or sets the per-batch origin, which is applied to each string in the text batch."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsOrigin) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetOrigin"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Origin.setter
    def Origin(self, origin:"AgEStkGraphicsOrigin") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsOrigin, origin) as arg_origin:
            agcls.evaluate_hresult(self.__dict__["_SetOrigin"](arg_origin.COM_val))

    @property
    def EyeOffset(self) -> list:
        """Gets or sets the per-batch eye offset, which is applied to each string in the text batch. The array contains the components of the offset arranged in the order x, y, z."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetEyeOffset"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @EyeOffset.setter
    def EyeOffset(self, eyeOffset:list) -> None:
        with agmarshall.SAFEARRAY_arg(eyeOffset) as arg_eyeOffset:
            agcls.evaluate_hresult(self.__dict__["_SetEyeOffset"](arg_eyeOffset.COM_val))

    @property
    def PixelOffset(self) -> list:
        """Gets or sets the per-batch pixel offset, which is applied to each string in the text batch. The array contains one x pixel offset followed by one y pixel offset."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPixelOffset"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @PixelOffset.setter
    def PixelOffset(self, pixelOffset:list) -> None:
        with agmarshall.SAFEARRAY_arg(pixelOffset) as arg_pixelOffset:
            agcls.evaluate_hresult(self.__dict__["_SetPixelOffset"](arg_pixelOffset.COM_val))

    @property
    def MaximumStringLength(self) -> int:
        """Gets or sets the maximum length of each string in the text batch."""
        with agmarshall.INT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaximumStringLength"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @MaximumStringLength.setter
    def MaximumStringLength(self, maximumStringLength:int) -> None:
        with agmarshall.INT_arg(maximumStringLength) as arg_maximumStringLength:
            agcls.evaluate_hresult(self.__dict__["_SetMaximumStringLength"](arg_maximumStringLength.COM_val))

    def SetOrigins(self, origins:list) -> None:
        """Defines a collection of origins, one for each string in the batch."""
        with agmarshall.SAFEARRAY_arg(origins) as arg_origins:
            agcls.evaluate_hresult(self.__dict__["_SetOrigins"](byref(arg_origins.COM_val)))

    def SetEyeOffsets(self, eyeOffsets:list) -> None:
        """Defines a collection of eye offsets, one for each string in the batch."""
        with agmarshall.SAFEARRAY_arg(eyeOffsets) as arg_eyeOffsets:
            agcls.evaluate_hresult(self.__dict__["_SetEyeOffsets"](byref(arg_eyeOffsets.COM_val)))

    def SetPixelOffsets(self, pixelOffsets:list) -> None:
        """Defines a collection of pixel offsets, one for each string in the batch."""
        with agmarshall.SAFEARRAY_arg(pixelOffsets) as arg_pixelOffsets:
            agcls.evaluate_hresult(self.__dict__["_SetPixelOffsets"](byref(arg_pixelOffsets.COM_val)))

    def SetColors(self, colors:list) -> None:
        """Defines a collection of colors, one for each string in the batch."""
        with agmarshall.SAFEARRAY_arg(colors) as arg_colors:
            agcls.evaluate_hresult(self.__dict__["_SetColors"](byref(arg_colors.COM_val)))

    @property
    def ScreenSpaceRendering(self) -> bool:
        """Gets or sets a flag that informs the CTextBatchPrimitive to use rendering optimized for screen space text."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetScreenSpaceRendering"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @ScreenSpaceRendering.setter
    def ScreenSpaceRendering(self, screenSpaceRendering:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(screenSpaceRendering) as arg_screenSpaceRendering:
            agcls.evaluate_hresult(self.__dict__["_SetScreenSpaceRendering"](arg_screenSpaceRendering.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{e18b012f-840d-4f32-8810-dd253c38ce7f}", IStkGraphicsTextBatchPrimitiveOptionalParameters)
agcls.AgTypeNameMap["IStkGraphicsTextBatchPrimitiveOptionalParameters"] = IStkGraphicsTextBatchPrimitiveOptionalParameters

class IStkGraphicsTextOverlay(object):
    """A rectangular overlay that contains text."""
    _uuid = "{7d847a28-dfe3-4f2c-923b-683f0250c491}"
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetText"] = _raise_uninitialized_error
        self.__dict__["_SetText"] = _raise_uninitialized_error
        self.__dict__["_GetOutlineColor"] = _raise_uninitialized_error
        self.__dict__["_SetOutlineColor"] = _raise_uninitialized_error
        self.__dict__["_GetFont"] = _raise_uninitialized_error
        self.__dict__["_SetFont"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsTextOverlay._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsTextOverlay from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsTextOverlay = agcom.GUID(IStkGraphicsTextOverlay._uuid)
        vtable_offset_local = IStkGraphicsTextOverlay._vtable_offset - 1
        self.__dict__["_GetText"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextOverlay, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetText"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextOverlay, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetOutlineColor"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextOverlay, vtable_offset_local+3, POINTER(agcom.OLE_COLOR))
        self.__dict__["_SetOutlineColor"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextOverlay, vtable_offset_local+4, agcom.OLE_COLOR)
        self.__dict__["_GetFont"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextOverlay, vtable_offset_local+5, POINTER(agcom.PVOID))
        self.__dict__["_SetFont"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextOverlay, vtable_offset_local+6, agcom.PVOID)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsTextOverlay.__dict__ and type(IStkGraphicsTextOverlay.__dict__[attrname]) == property:
            return IStkGraphicsTextOverlay.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsTextOverlay.")
    
    @property
    def Text(self) -> str:
        """Sets the Text to be rendered to an overlay. Newline characters ('\n') will mark the start of the next line in the text."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetText"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Text.setter
    def Text(self, text:str) -> None:
        with agmarshall.BSTR_arg(text) as arg_text:
            agcls.evaluate_hresult(self.__dict__["_SetText"](arg_text.COM_val))

    @property
    def OutlineColor(self) -> agcolor.Color:
        """Gets or sets the text's outline color."""
        with agmarshall.OLE_COLOR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetOutlineColor"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @OutlineColor.setter
    def OutlineColor(self, outlineColor:agcolor.Color) -> None:
        with agmarshall.OLE_COLOR_arg(outlineColor) as arg_outlineColor:
            agcls.evaluate_hresult(self.__dict__["_SetOutlineColor"](arg_outlineColor.COM_val))

    @property
    def Font(self) -> "IStkGraphicsGraphicsFont":
        """Get the graphics font used to style the text."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetFont"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @Font.setter
    def Font(self, font:"IStkGraphicsGraphicsFont") -> None:
        with agmarshall.AgInterface_in_arg(font, IStkGraphicsGraphicsFont) as arg_font:
            agcls.evaluate_hresult(self.__dict__["_SetFont"](arg_font.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{7d847a28-dfe3-4f2c-923b-683f0250c491}", IStkGraphicsTextOverlay)
agcls.AgTypeNameMap["IStkGraphicsTextOverlay"] = IStkGraphicsTextOverlay

class IStkGraphicsTextureMatrix(object):
    """A 4 by 4 matrix applied to a texture coordinate."""
    _uuid = "{0a4c4c8f-0131-466f-99a5-1f41f9db403b}"
    _num_methods = 16
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetM11"] = _raise_uninitialized_error
        self.__dict__["_GetM12"] = _raise_uninitialized_error
        self.__dict__["_GetM13"] = _raise_uninitialized_error
        self.__dict__["_GetM14"] = _raise_uninitialized_error
        self.__dict__["_GetM21"] = _raise_uninitialized_error
        self.__dict__["_GetM22"] = _raise_uninitialized_error
        self.__dict__["_GetM23"] = _raise_uninitialized_error
        self.__dict__["_GetM24"] = _raise_uninitialized_error
        self.__dict__["_GetM31"] = _raise_uninitialized_error
        self.__dict__["_GetM32"] = _raise_uninitialized_error
        self.__dict__["_GetM33"] = _raise_uninitialized_error
        self.__dict__["_GetM34"] = _raise_uninitialized_error
        self.__dict__["_GetM41"] = _raise_uninitialized_error
        self.__dict__["_GetM42"] = _raise_uninitialized_error
        self.__dict__["_GetM43"] = _raise_uninitialized_error
        self.__dict__["_GetM44"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsTextureMatrix._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsTextureMatrix from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsTextureMatrix = agcom.GUID(IStkGraphicsTextureMatrix._uuid)
        vtable_offset_local = IStkGraphicsTextureMatrix._vtable_offset - 1
        self.__dict__["_GetM11"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextureMatrix, vtable_offset_local+1, POINTER(agcom.FLOAT))
        self.__dict__["_GetM12"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextureMatrix, vtable_offset_local+2, POINTER(agcom.FLOAT))
        self.__dict__["_GetM13"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextureMatrix, vtable_offset_local+3, POINTER(agcom.FLOAT))
        self.__dict__["_GetM14"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextureMatrix, vtable_offset_local+4, POINTER(agcom.FLOAT))
        self.__dict__["_GetM21"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextureMatrix, vtable_offset_local+5, POINTER(agcom.FLOAT))
        self.__dict__["_GetM22"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextureMatrix, vtable_offset_local+6, POINTER(agcom.FLOAT))
        self.__dict__["_GetM23"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextureMatrix, vtable_offset_local+7, POINTER(agcom.FLOAT))
        self.__dict__["_GetM24"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextureMatrix, vtable_offset_local+8, POINTER(agcom.FLOAT))
        self.__dict__["_GetM31"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextureMatrix, vtable_offset_local+9, POINTER(agcom.FLOAT))
        self.__dict__["_GetM32"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextureMatrix, vtable_offset_local+10, POINTER(agcom.FLOAT))
        self.__dict__["_GetM33"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextureMatrix, vtable_offset_local+11, POINTER(agcom.FLOAT))
        self.__dict__["_GetM34"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextureMatrix, vtable_offset_local+12, POINTER(agcom.FLOAT))
        self.__dict__["_GetM41"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextureMatrix, vtable_offset_local+13, POINTER(agcom.FLOAT))
        self.__dict__["_GetM42"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextureMatrix, vtable_offset_local+14, POINTER(agcom.FLOAT))
        self.__dict__["_GetM43"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextureMatrix, vtable_offset_local+15, POINTER(agcom.FLOAT))
        self.__dict__["_GetM44"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextureMatrix, vtable_offset_local+16, POINTER(agcom.FLOAT))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsTextureMatrix.__dict__ and type(IStkGraphicsTextureMatrix.__dict__[attrname]) == property:
            return IStkGraphicsTextureMatrix.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsTextureMatrix.")
    
    @property
    def M11(self) -> float:
        """Gets the element in the first row, first column."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetM11"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def M12(self) -> float:
        """Gets the element in the first row, second column."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetM12"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def M13(self) -> float:
        """Gets the element in the first row, third column."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetM13"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def M14(self) -> float:
        """Gets the element in the first row, fourth column."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetM14"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def M21(self) -> float:
        """Gets the element in the second row, first column."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetM21"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def M22(self) -> float:
        """Gets the element in the second row, second column."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetM22"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def M23(self) -> float:
        """Gets the element in the second row, third column."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetM23"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def M24(self) -> float:
        """Gets the element in the second row, fourth column."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetM24"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def M31(self) -> float:
        """Gets the element in the third row, first column."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetM31"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def M32(self) -> float:
        """Gets the element in the third row, second column."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetM32"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def M33(self) -> float:
        """Gets the element in the third row, third column."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetM33"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def M34(self) -> float:
        """Gets the element in the third row, fourth column."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetM34"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def M41(self) -> float:
        """Gets the element in the fourth row, first column."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetM41"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def M42(self) -> float:
        """Gets the element in the fourth row, second column."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetM42"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def M43(self) -> float:
        """Gets the element in the fourth row, third column."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetM43"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def M44(self) -> float:
        """Gets the element in the fourth row, fourth column."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetM44"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{0a4c4c8f-0131-466f-99a5-1f41f9db403b}", IStkGraphicsTextureMatrix)
agcls.AgTypeNameMap["IStkGraphicsTextureMatrix"] = IStkGraphicsTextureMatrix

class IStkGraphicsTextureScreenOverlay(object):
    """A rectangular overlay that can be assigned a texture."""
    _uuid = "{4d09eb77-14cf-40a7-b7bb-130f4ddd60c6}"
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetTexture"] = _raise_uninitialized_error
        self.__dict__["_SetTexture"] = _raise_uninitialized_error
        self.__dict__["_GetTextureFilter"] = _raise_uninitialized_error
        self.__dict__["_SetTextureFilter"] = _raise_uninitialized_error
        self.__dict__["_GetMaintainAspectRatio"] = _raise_uninitialized_error
        self.__dict__["_SetMaintainAspectRatio"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsTextureScreenOverlay._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsTextureScreenOverlay from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsTextureScreenOverlay = agcom.GUID(IStkGraphicsTextureScreenOverlay._uuid)
        vtable_offset_local = IStkGraphicsTextureScreenOverlay._vtable_offset - 1
        self.__dict__["_GetTexture"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextureScreenOverlay, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_SetTexture"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextureScreenOverlay, vtable_offset_local+2, agcom.PVOID)
        self.__dict__["_GetTextureFilter"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextureScreenOverlay, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_SetTextureFilter"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextureScreenOverlay, vtable_offset_local+4, agcom.PVOID)
        self.__dict__["_GetMaintainAspectRatio"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextureScreenOverlay, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetMaintainAspectRatio"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextureScreenOverlay, vtable_offset_local+6, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsTextureScreenOverlay.__dict__ and type(IStkGraphicsTextureScreenOverlay.__dict__[attrname]) == property:
            return IStkGraphicsTextureScreenOverlay.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsTextureScreenOverlay.")
    
    @property
    def Texture(self) -> "IStkGraphicsRendererTexture2D":
        """Gets or sets the texture (image) to be drawn on the overlay. Textures can be obtained from textures."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTexture"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @Texture.setter
    def Texture(self, texture:"IStkGraphicsRendererTexture2D") -> None:
        with agmarshall.AgInterface_in_arg(texture, IStkGraphicsRendererTexture2D) as arg_texture:
            agcls.evaluate_hresult(self.__dict__["_SetTexture"](arg_texture.COM_val))

    @property
    def TextureFilter(self) -> "IStkGraphicsTextureFilter2D":
        """Gets or sets the filter used for the texture associated with this overlay."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTextureFilter"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @TextureFilter.setter
    def TextureFilter(self, textureFilter:"IStkGraphicsTextureFilter2D") -> None:
        with agmarshall.AgInterface_in_arg(textureFilter, IStkGraphicsTextureFilter2D) as arg_textureFilter:
            agcls.evaluate_hresult(self.__dict__["_SetTextureFilter"](arg_textureFilter.COM_val))

    @property
    def MaintainAspectRatio(self) -> "AgEStkGraphicsMaintainAspectRatio":
        """Gets or sets a value indicating whether the aspect ratio of the texture screen overlay is maintained or not."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsMaintainAspectRatio) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaintainAspectRatio"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @MaintainAspectRatio.setter
    def MaintainAspectRatio(self, maintainAspectRatio:"AgEStkGraphicsMaintainAspectRatio") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsMaintainAspectRatio, maintainAspectRatio) as arg_maintainAspectRatio:
            agcls.evaluate_hresult(self.__dict__["_SetMaintainAspectRatio"](arg_maintainAspectRatio.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{4d09eb77-14cf-40a7-b7bb-130f4ddd60c6}", IStkGraphicsTextureScreenOverlay)
agcls.AgTypeNameMap["IStkGraphicsTextureScreenOverlay"] = IStkGraphicsTextureScreenOverlay

class IStkGraphicsTimeIntervalDisplayCondition(object):
    """Defines an inclusive time interval that determines when an object, such as a primitive, is rendered based on the current animation time ."""
    _uuid = "{2f0f3c32-c1d9-42a1-9422-8ecd2b9c1ad0}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetMinimumTime"] = _raise_uninitialized_error
        self.__dict__["_SetMinimumTime"] = _raise_uninitialized_error
        self.__dict__["_GetMaximumTime"] = _raise_uninitialized_error
        self.__dict__["_SetMaximumTime"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsTimeIntervalDisplayCondition._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsTimeIntervalDisplayCondition from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsTimeIntervalDisplayCondition = agcom.GUID(IStkGraphicsTimeIntervalDisplayCondition._uuid)
        vtable_offset_local = IStkGraphicsTimeIntervalDisplayCondition._vtable_offset - 1
        self.__dict__["_GetMinimumTime"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTimeIntervalDisplayCondition, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_SetMinimumTime"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTimeIntervalDisplayCondition, vtable_offset_local+2, agcom.PVOID)
        self.__dict__["_GetMaximumTime"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTimeIntervalDisplayCondition, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_SetMaximumTime"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTimeIntervalDisplayCondition, vtable_offset_local+4, agcom.PVOID)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsTimeIntervalDisplayCondition.__dict__ and type(IStkGraphicsTimeIntervalDisplayCondition.__dict__[attrname]) == property:
            return IStkGraphicsTimeIntervalDisplayCondition.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsTimeIntervalDisplayCondition.")
    
    @property
    def MinimumTime(self) -> "IDate":
        """Gets or sets the minimum time of the inclusive time interval."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinimumTime"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @MinimumTime.setter
    def MinimumTime(self, minimumTime:"IDate") -> None:
        with agmarshall.AgInterface_in_arg(minimumTime, IDate) as arg_minimumTime:
            agcls.evaluate_hresult(self.__dict__["_SetMinimumTime"](arg_minimumTime.COM_val))

    @property
    def MaximumTime(self) -> "IDate":
        """Gets or sets the maximum time of the inclusive time interval."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaximumTime"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @MaximumTime.setter
    def MaximumTime(self, maximumTime:"IDate") -> None:
        with agmarshall.AgInterface_in_arg(maximumTime, IDate) as arg_maximumTime:
            agcls.evaluate_hresult(self.__dict__["_SetMaximumTime"](arg_maximumTime.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{2f0f3c32-c1d9-42a1-9422-8ecd2b9c1ad0}", IStkGraphicsTimeIntervalDisplayCondition)
agcls.AgTypeNameMap["IStkGraphicsTimeIntervalDisplayCondition"] = IStkGraphicsTimeIntervalDisplayCondition

class IStkGraphicsTriangleMeshPrimitive(object):
    """Renders a triangle mesh in the 3D scene. Examples of triangle meshes includes polygons on the globe (e.g. states or countries), terrain and imagery extents, ellipses, and extrusions."""
    _uuid = "{b878e10c-0fc9-446e-88ba-1e1088970150}"
    _num_methods = 22
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetWireframe"] = _raise_uninitialized_error
        self.__dict__["_SetWireframe"] = _raise_uninitialized_error
        self.__dict__["_GetRenderBackThenFrontFaces"] = _raise_uninitialized_error
        self.__dict__["_SetRenderBackThenFrontFaces"] = _raise_uninitialized_error
        self.__dict__["_GetLighting"] = _raise_uninitialized_error
        self.__dict__["_SetLighting"] = _raise_uninitialized_error
        self.__dict__["_GetTriangleWindingOrder"] = _raise_uninitialized_error
        self.__dict__["_SetTriangleWindingOrder"] = _raise_uninitialized_error
        self.__dict__["_GetCullFace"] = _raise_uninitialized_error
        self.__dict__["_SetCullFace"] = _raise_uninitialized_error
        self.__dict__["_GetShadeModel"] = _raise_uninitialized_error
        self.__dict__["_SetShadeModel"] = _raise_uninitialized_error
        self.__dict__["_GetTexture"] = _raise_uninitialized_error
        self.__dict__["_SetTexture"] = _raise_uninitialized_error
        self.__dict__["_GetTextureFilter"] = _raise_uninitialized_error
        self.__dict__["_SetTextureFilter"] = _raise_uninitialized_error
        self.__dict__["_GetSetHint"] = _raise_uninitialized_error
        self.__dict__["_Set"] = _raise_uninitialized_error
        self.__dict__["_SetWithOptionalParameters"] = _raise_uninitialized_error
        self.__dict__["_SetTriangulator"] = _raise_uninitialized_error
        self.__dict__["_GetCentralBodyClipped"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBodyClipped"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsTriangleMeshPrimitive._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsTriangleMeshPrimitive from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsTriangleMeshPrimitive = agcom.GUID(IStkGraphicsTriangleMeshPrimitive._uuid)
        vtable_offset_local = IStkGraphicsTriangleMeshPrimitive._vtable_offset - 1
        self.__dict__["_GetWireframe"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTriangleMeshPrimitive, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetWireframe"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTriangleMeshPrimitive, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetRenderBackThenFrontFaces"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTriangleMeshPrimitive, vtable_offset_local+3, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetRenderBackThenFrontFaces"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTriangleMeshPrimitive, vtable_offset_local+4, agcom.VARIANT_BOOL)
        self.__dict__["_GetLighting"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTriangleMeshPrimitive, vtable_offset_local+5, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetLighting"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTriangleMeshPrimitive, vtable_offset_local+6, agcom.VARIANT_BOOL)
        self.__dict__["_GetTriangleWindingOrder"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTriangleMeshPrimitive, vtable_offset_local+7, POINTER(agcom.LONG))
        self.__dict__["_SetTriangleWindingOrder"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTriangleMeshPrimitive, vtable_offset_local+8, agcom.LONG)
        self.__dict__["_GetCullFace"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTriangleMeshPrimitive, vtable_offset_local+9, POINTER(agcom.LONG))
        self.__dict__["_SetCullFace"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTriangleMeshPrimitive, vtable_offset_local+10, agcom.LONG)
        self.__dict__["_GetShadeModel"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTriangleMeshPrimitive, vtable_offset_local+11, POINTER(agcom.LONG))
        self.__dict__["_SetShadeModel"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTriangleMeshPrimitive, vtable_offset_local+12, agcom.LONG)
        self.__dict__["_GetTexture"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTriangleMeshPrimitive, vtable_offset_local+13, POINTER(agcom.PVOID))
        self.__dict__["_SetTexture"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTriangleMeshPrimitive, vtable_offset_local+14, agcom.PVOID)
        self.__dict__["_GetTextureFilter"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTriangleMeshPrimitive, vtable_offset_local+15, POINTER(agcom.PVOID))
        self.__dict__["_SetTextureFilter"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTriangleMeshPrimitive, vtable_offset_local+16, agcom.PVOID)
        self.__dict__["_GetSetHint"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTriangleMeshPrimitive, vtable_offset_local+17, POINTER(agcom.LONG))
        self.__dict__["_Set"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTriangleMeshPrimitive, vtable_offset_local+18, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetWithOptionalParameters"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTriangleMeshPrimitive, vtable_offset_local+19, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.PVOID)
        self.__dict__["_SetTriangulator"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTriangleMeshPrimitive, vtable_offset_local+20, agcom.PVOID)
        self.__dict__["_GetCentralBodyClipped"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTriangleMeshPrimitive, vtable_offset_local+21, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetCentralBodyClipped"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTriangleMeshPrimitive, vtable_offset_local+22, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsTriangleMeshPrimitive.__dict__ and type(IStkGraphicsTriangleMeshPrimitive.__dict__[attrname]) == property:
            return IStkGraphicsTriangleMeshPrimitive.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsTriangleMeshPrimitive.")
    
    @property
    def Wireframe(self) -> bool:
        """Gets or sets whether the primitive is rendered in wireframe. This is useful for debugging."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetWireframe"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Wireframe.setter
    def Wireframe(self, wireframe:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(wireframe) as arg_wireframe:
            agcls.evaluate_hresult(self.__dict__["_SetWireframe"](arg_wireframe.COM_val))

    @property
    def RenderBackThenFrontFaces(self) -> bool:
        """Gets or sets whether the primitive is rendered in two passes to improve the visual quality for translucent, convex meshes."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetRenderBackThenFrontFaces"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @RenderBackThenFrontFaces.setter
    def RenderBackThenFrontFaces(self, renderBackThenFrontFaces:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(renderBackThenFrontFaces) as arg_renderBackThenFrontFaces:
            agcls.evaluate_hresult(self.__dict__["_SetRenderBackThenFrontFaces"](arg_renderBackThenFrontFaces.COM_val))

    @property
    def Lighting(self) -> bool:
        """Gets or sets whether the primitive is lit."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetLighting"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Lighting.setter
    def Lighting(self, lighting:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(lighting) as arg_lighting:
            agcls.evaluate_hresult(self.__dict__["_SetLighting"](arg_lighting.COM_val))

    @property
    def TriangleWindingOrder(self) -> "AgEStkGraphicsWindingOrder":
        """Gets or sets the orientation of front-facing triangles. This is used in combination with cull face for culling."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsWindingOrder) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTriangleWindingOrder"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @TriangleWindingOrder.setter
    def TriangleWindingOrder(self, triangleWindingOrder:"AgEStkGraphicsWindingOrder") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsWindingOrder, triangleWindingOrder) as arg_triangleWindingOrder:
            agcls.evaluate_hresult(self.__dict__["_SetTriangleWindingOrder"](arg_triangleWindingOrder.COM_val))

    @property
    def CullFace(self) -> "AgEStkGraphicsCullFace":
        """Gets or sets whether front and/or back-facing triangles may be culled. This is used in combination with triangle winding order for culling."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsCullFace) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCullFace"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @CullFace.setter
    def CullFace(self, cullFace:"AgEStkGraphicsCullFace") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsCullFace, cullFace) as arg_cullFace:
            agcls.evaluate_hresult(self.__dict__["_SetCullFace"](arg_cullFace.COM_val))

    @property
    def ShadeModel(self) -> "AgEStkGraphicsRendererShadeModel":
        """Gets or sets the shading model for the mesh."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsRendererShadeModel) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetShadeModel"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @ShadeModel.setter
    def ShadeModel(self, shadeModel:"AgEStkGraphicsRendererShadeModel") -> None:
        with agmarshall.AgEnum_arg(AgEStkGraphicsRendererShadeModel, shadeModel) as arg_shadeModel:
            agcls.evaluate_hresult(self.__dict__["_SetShadeModel"](arg_shadeModel.COM_val))

    @property
    def Texture(self) -> "IStkGraphicsRendererTexture2D":
        """Gets or sets the texture to be drawn on the triangle mesh. Textures can be obtained from textures."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTexture"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @Texture.setter
    def Texture(self, texture:"IStkGraphicsRendererTexture2D") -> None:
        with agmarshall.AgInterface_in_arg(texture, IStkGraphicsRendererTexture2D) as arg_texture:
            agcls.evaluate_hresult(self.__dict__["_SetTexture"](arg_texture.COM_val))

    @property
    def TextureFilter(self) -> "IStkGraphicsTextureFilter2D":
        """Gets or sets the filter used for the texture associated with this triangle mesh."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTextureFilter"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @TextureFilter.setter
    def TextureFilter(self, textureFilter:"IStkGraphicsTextureFilter2D") -> None:
        with agmarshall.AgInterface_in_arg(textureFilter, IStkGraphicsTextureFilter2D) as arg_textureFilter:
            agcls.evaluate_hresult(self.__dict__["_SetTextureFilter"](arg_textureFilter.COM_val))

    @property
    def SetHint(self) -> "AgEStkGraphicsSetHint":
        """Gets the primitive's set hint. See the Set Hint Performance Overview for selecting an appropriate value to construct the primitive with."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsSetHint) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSetHint"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def Set(self, positions:list, normals:list, indices:list) -> None:
        """Defines the triangle mesh using an indexed triangle list specified by positions, normals, and indices. The mesh is rendered in the primitive's reference frame."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(normals) as arg_normals, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices:
            agcls.evaluate_hresult(self.__dict__["_Set"](byref(arg_positions.COM_val), byref(arg_normals.COM_val), byref(arg_indices.COM_val)))

    def SetWithOptionalParameters(self, positions:list, normals:list, indices:list, optionalParameters:"IStkGraphicsTriangleMeshPrimitiveOptionalParameters") -> None:
        """Defines the triangle mesh using an indexed triangle list specified by positions, normals, indices, and optionalParameters. The mesh is rendered in the primitive's reference frame."""
        with agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(normals) as arg_normals, \
             agmarshall.SAFEARRAY_arg(indices) as arg_indices, \
             agmarshall.AgInterface_in_arg(optionalParameters, IStkGraphicsTriangleMeshPrimitiveOptionalParameters) as arg_optionalParameters:
            agcls.evaluate_hresult(self.__dict__["_SetWithOptionalParameters"](byref(arg_positions.COM_val), byref(arg_normals.COM_val), byref(arg_indices.COM_val), arg_optionalParameters.COM_val))

    def SetTriangulator(self, triangulator:"IStkGraphicsTriangulatorResult") -> None:
        """Defines the triangle mesh using the specified triangulator. The mesh is rendered in the primitive's reference frame."""
        with agmarshall.AgInterface_in_arg(triangulator, IStkGraphicsTriangulatorResult) as arg_triangulator:
            agcls.evaluate_hresult(self.__dict__["_SetTriangulator"](arg_triangulator.COM_val))

    @property
    def CentralBodyClipped(self) -> bool:
        """Gets or sets whether individual points will be clipped by the central body."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyClipped"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @CentralBodyClipped.setter
    def CentralBodyClipped(self, centralBodyClipped:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(centralBodyClipped) as arg_centralBodyClipped:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBodyClipped"](arg_centralBodyClipped.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{b878e10c-0fc9-446e-88ba-1e1088970150}", IStkGraphicsTriangleMeshPrimitive)
agcls.AgTypeNameMap["IStkGraphicsTriangleMeshPrimitive"] = IStkGraphicsTriangleMeshPrimitive

class IStkGraphicsTriangleMeshPrimitiveOptionalParameters(object):
    """Optional parameters for triangle mesh primitive..."""
    _uuid = "{881b260c-4a26-4fb7-9fec-779b3c540a94}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_SetTextureCoordinates"] = _raise_uninitialized_error
        self.__dict__["_SetPerVertexColors"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsTriangleMeshPrimitiveOptionalParameters._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsTriangleMeshPrimitiveOptionalParameters from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsTriangleMeshPrimitiveOptionalParameters = agcom.GUID(IStkGraphicsTriangleMeshPrimitiveOptionalParameters._uuid)
        vtable_offset_local = IStkGraphicsTriangleMeshPrimitiveOptionalParameters._vtable_offset - 1
        self.__dict__["_SetTextureCoordinates"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTriangleMeshPrimitiveOptionalParameters, vtable_offset_local+1, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetPerVertexColors"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTriangleMeshPrimitiveOptionalParameters, vtable_offset_local+2, POINTER(agcom.SAFEARRAY))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsTriangleMeshPrimitiveOptionalParameters.__dict__ and type(IStkGraphicsTriangleMeshPrimitiveOptionalParameters.__dict__[attrname]) == property:
            return IStkGraphicsTriangleMeshPrimitiveOptionalParameters.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsTriangleMeshPrimitiveOptionalParameters.")
    
    def SetTextureCoordinates(self, textureCoordinates:list) -> None:
        """Defines a collection of texture coordinates."""
        with agmarshall.SAFEARRAY_arg(textureCoordinates) as arg_textureCoordinates:
            agcls.evaluate_hresult(self.__dict__["_SetTextureCoordinates"](byref(arg_textureCoordinates.COM_val)))

    def SetPerVertexColors(self, colors:list) -> None:
        """Defines a collection of colors."""
        with agmarshall.SAFEARRAY_arg(colors) as arg_colors:
            agcls.evaluate_hresult(self.__dict__["_SetPerVertexColors"](byref(arg_colors.COM_val)))


agcls.AgClassCatalog.add_catalog_entry("{881b260c-4a26-4fb7-9fec-779b3c540a94}", IStkGraphicsTriangleMeshPrimitiveOptionalParameters)
agcls.AgTypeNameMap["IStkGraphicsTriangleMeshPrimitiveOptionalParameters"] = IStkGraphicsTriangleMeshPrimitiveOptionalParameters

class IStkGraphicsVectorPrimitive(object):
    """Renders a vector in the 3D scene. A vector is defined by a source (given by an ISystem) and a direction (given by an IVector or IPoint). Length is auto-calculated or can be set separately."""
    _uuid = "{8244e37a-140a-40a8-9554-37dc0be9bd1b}"
    _num_methods = 28
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetLighting"] = _raise_uninitialized_error
        self.__dict__["_SetLighting"] = _raise_uninitialized_error
        self.__dict__["_GetLabel"] = _raise_uninitialized_error
        self.__dict__["_SetLabel"] = _raise_uninitialized_error
        self.__dict__["_GetDisplayLabel"] = _raise_uninitialized_error
        self.__dict__["_SetDisplayLabel"] = _raise_uninitialized_error
        self.__dict__["_GetDisplayMagnitude"] = _raise_uninitialized_error
        self.__dict__["_SetDisplayMagnitude"] = _raise_uninitialized_error
        self.__dict__["_GetDisplayRADec"] = _raise_uninitialized_error
        self.__dict__["_SetDisplayRADec"] = _raise_uninitialized_error
        self.__dict__["_GetDisplayTrace"] = _raise_uninitialized_error
        self.__dict__["_SetDisplayTrace"] = _raise_uninitialized_error
        self.__dict__["_GetDisplaySweep"] = _raise_uninitialized_error
        self.__dict__["_SetDisplaySweep"] = _raise_uninitialized_error
        self.__dict__["_GetDisplayLines"] = _raise_uninitialized_error
        self.__dict__["_SetDisplayLines"] = _raise_uninitialized_error
        self.__dict__["_GetPersistenceWidth"] = _raise_uninitialized_error
        self.__dict__["_SetPersistenceWidth"] = _raise_uninitialized_error
        self.__dict__["_GetFadePersistence"] = _raise_uninitialized_error
        self.__dict__["_SetFadePersistence"] = _raise_uninitialized_error
        self.__dict__["_GetPersistenceDuration"] = _raise_uninitialized_error
        self.__dict__["_SetPersistenceDuration"] = _raise_uninitialized_error
        self.__dict__["_GetLength"] = _raise_uninitialized_error
        self.__dict__["_SetLength"] = _raise_uninitialized_error
        self.__dict__["_GetWidth"] = _raise_uninitialized_error
        self.__dict__["_SetWidth"] = _raise_uninitialized_error
        self.__dict__["_GetTrueScale"] = _raise_uninitialized_error
        self.__dict__["_SetTrueScale"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsVectorPrimitive._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsVectorPrimitive from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsVectorPrimitive = agcom.GUID(IStkGraphicsVectorPrimitive._uuid)
        vtable_offset_local = IStkGraphicsVectorPrimitive._vtable_offset - 1
        self.__dict__["_GetLighting"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVectorPrimitive, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetLighting"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVectorPrimitive, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetLabel"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVectorPrimitive, vtable_offset_local+3, POINTER(agcom.BSTR))
        self.__dict__["_SetLabel"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVectorPrimitive, vtable_offset_local+4, agcom.BSTR)
        self.__dict__["_GetDisplayLabel"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVectorPrimitive, vtable_offset_local+5, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetDisplayLabel"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVectorPrimitive, vtable_offset_local+6, agcom.VARIANT_BOOL)
        self.__dict__["_GetDisplayMagnitude"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVectorPrimitive, vtable_offset_local+7, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetDisplayMagnitude"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVectorPrimitive, vtable_offset_local+8, agcom.VARIANT_BOOL)
        self.__dict__["_GetDisplayRADec"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVectorPrimitive, vtable_offset_local+9, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetDisplayRADec"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVectorPrimitive, vtable_offset_local+10, agcom.VARIANT_BOOL)
        self.__dict__["_GetDisplayTrace"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVectorPrimitive, vtable_offset_local+11, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetDisplayTrace"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVectorPrimitive, vtable_offset_local+12, agcom.VARIANT_BOOL)
        self.__dict__["_GetDisplaySweep"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVectorPrimitive, vtable_offset_local+13, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetDisplaySweep"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVectorPrimitive, vtable_offset_local+14, agcom.VARIANT_BOOL)
        self.__dict__["_GetDisplayLines"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVectorPrimitive, vtable_offset_local+15, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetDisplayLines"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVectorPrimitive, vtable_offset_local+16, agcom.VARIANT_BOOL)
        self.__dict__["_GetPersistenceWidth"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVectorPrimitive, vtable_offset_local+17, POINTER(agcom.DOUBLE))
        self.__dict__["_SetPersistenceWidth"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVectorPrimitive, vtable_offset_local+18, agcom.DOUBLE)
        self.__dict__["_GetFadePersistence"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVectorPrimitive, vtable_offset_local+19, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetFadePersistence"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVectorPrimitive, vtable_offset_local+20, agcom.VARIANT_BOOL)
        self.__dict__["_GetPersistenceDuration"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVectorPrimitive, vtable_offset_local+21, POINTER(agcom.DOUBLE))
        self.__dict__["_SetPersistenceDuration"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVectorPrimitive, vtable_offset_local+22, agcom.DOUBLE)
        self.__dict__["_GetLength"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVectorPrimitive, vtable_offset_local+23, POINTER(agcom.DOUBLE))
        self.__dict__["_SetLength"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVectorPrimitive, vtable_offset_local+24, agcom.DOUBLE)
        self.__dict__["_GetWidth"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVectorPrimitive, vtable_offset_local+25, POINTER(agcom.DOUBLE))
        self.__dict__["_SetWidth"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVectorPrimitive, vtable_offset_local+26, agcom.DOUBLE)
        self.__dict__["_GetTrueScale"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVectorPrimitive, vtable_offset_local+27, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetTrueScale"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVectorPrimitive, vtable_offset_local+28, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsVectorPrimitive.__dict__ and type(IStkGraphicsVectorPrimitive.__dict__[attrname]) == property:
            return IStkGraphicsVectorPrimitive.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsVectorPrimitive.")
    
    @property
    def Lighting(self) -> bool:
        """Gets or Sets whether the primitive is lit."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetLighting"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Lighting.setter
    def Lighting(self, lighting:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(lighting) as arg_lighting:
            agcls.evaluate_hresult(self.__dict__["_SetLighting"](arg_lighting.COM_val))

    @property
    def Label(self) -> str:
        """Gets or Sets the a user-defined label."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetLabel"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Label.setter
    def Label(self, label:str) -> None:
        with agmarshall.BSTR_arg(label) as arg_label:
            agcls.evaluate_hresult(self.__dict__["_SetLabel"](arg_label.COM_val))

    @property
    def DisplayLabel(self) -> bool:
        """Gets or Sets whether the vector's label is displayed."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDisplayLabel"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @DisplayLabel.setter
    def DisplayLabel(self, displayLabel:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(displayLabel) as arg_displayLabel:
            agcls.evaluate_hresult(self.__dict__["_SetDisplayLabel"](arg_displayLabel.COM_val))

    @property
    def DisplayMagnitude(self) -> bool:
        """Gets or Sets whether the vector's magnitude is displayed. Formatter controls unit conversions."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDisplayMagnitude"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @DisplayMagnitude.setter
    def DisplayMagnitude(self, displayMagnitude:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(displayMagnitude) as arg_displayMagnitude:
            agcls.evaluate_hresult(self.__dict__["_SetDisplayMagnitude"](arg_displayMagnitude.COM_val))

    @property
    def DisplayRADec(self) -> bool:
        """Gets or Sets whether the vector's RA-Dec is displayed. Formatter controls unit conversions."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDisplayRADec"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @DisplayRADec.setter
    def DisplayRADec(self, displayRADec:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(displayRADec) as arg_displayRADec:
            agcls.evaluate_hresult(self.__dict__["_SetDisplayRADec"](arg_displayRADec.COM_val))

    @property
    def DisplayTrace(self) -> bool:
        """Gets or Sets whether the persistence trace (points) is displayed."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDisplayTrace"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @DisplayTrace.setter
    def DisplayTrace(self, displayTrace:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(displayTrace) as arg_displayTrace:
            agcls.evaluate_hresult(self.__dict__["_SetDisplayTrace"](arg_displayTrace.COM_val))

    @property
    def DisplaySweep(self) -> bool:
        """Gets or Sets whether the persistence sweep (triangles) is displayed."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDisplaySweep"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @DisplaySweep.setter
    def DisplaySweep(self, displaySweep:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(displaySweep) as arg_displaySweep:
            agcls.evaluate_hresult(self.__dict__["_SetDisplaySweep"](arg_displaySweep.COM_val))

    @property
    def DisplayLines(self) -> bool:
        """Gets or Sets whether persistence lines are displayed."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDisplayLines"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @DisplayLines.setter
    def DisplayLines(self, displayLines:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(displayLines) as arg_displayLines:
            agcls.evaluate_hresult(self.__dict__["_SetDisplayLines"](arg_displayLines.COM_val))

    @property
    def PersistenceWidth(self) -> float:
        """Gets or Sets persistence point/line width."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPersistenceWidth"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @PersistenceWidth.setter
    def PersistenceWidth(self, persistenceWidth:float) -> None:
        with agmarshall.DOUBLE_arg(persistenceWidth) as arg_persistenceWidth:
            agcls.evaluate_hresult(self.__dict__["_SetPersistenceWidth"](arg_persistenceWidth.COM_val))

    @property
    def FadePersistence(self) -> bool:
        """Gets or Sets whether the persistence path should fade over time."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetFadePersistence"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @FadePersistence.setter
    def FadePersistence(self, fadePersistence:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(fadePersistence) as arg_fadePersistence:
            agcls.evaluate_hresult(self.__dict__["_SetFadePersistence"](arg_fadePersistence.COM_val))

    @property
    def PersistenceDuration(self) -> float:
        """Gets or Sets the maximum duration of the persistence path."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPersistenceDuration"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @PersistenceDuration.setter
    def PersistenceDuration(self, persistenceDuration:float) -> None:
        with agmarshall.DOUBLE_arg(persistenceDuration) as arg_persistenceDuration:
            agcls.evaluate_hresult(self.__dict__["_SetPersistenceDuration"](arg_persistenceDuration.COM_val))

    @property
    def Length(self) -> float:
        """Gets or Sets the vector's source-to-arrow-tip length."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetLength"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Length.setter
    def Length(self, length:float) -> None:
        with agmarshall.DOUBLE_arg(length) as arg_length:
            agcls.evaluate_hresult(self.__dict__["_SetLength"](arg_length.COM_val))

    @property
    def Width(self) -> float:
        """Gets or Sets the vector's width in pixels. As the camera distances changes from this primitive, the geometry will autoscale to maintain this thickness."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetWidth"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Width.setter
    def Width(self, width:float) -> None:
        with agmarshall.DOUBLE_arg(width) as arg_width:
            agcls.evaluate_hresult(self.__dict__["_SetWidth"](arg_width.COM_val))

    @property
    def TrueScale(self) -> bool:
        """Gets or Sets whether vector's 'true scale' length (based on how the primitive was created) should be used."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTrueScale"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @TrueScale.setter
    def TrueScale(self, trueScale:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(trueScale) as arg_trueScale:
            agcls.evaluate_hresult(self.__dict__["_SetTrueScale"](arg_trueScale.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{8244e37a-140a-40a8-9554-37dc0be9bd1b}", IStkGraphicsVectorPrimitive)
agcls.AgTypeNameMap["IStkGraphicsVectorPrimitive"] = IStkGraphicsVectorPrimitive

class IStkGraphicsBoxTriangulatorInitializer(object):
    """Triangulates a box. It is recommended to visualize the box using a solid primitive. Although, if only the fill is desired for visualization, a triangle mesh primitive with render back then front faces set to true can be used..."""
    _uuid = "{3d49da39-dbe0-4ef9-b589-bc0cf5e78085}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Compute"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsBoxTriangulatorInitializer._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsBoxTriangulatorInitializer from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsBoxTriangulatorInitializer = agcom.GUID(IStkGraphicsBoxTriangulatorInitializer._uuid)
        vtable_offset_local = IStkGraphicsBoxTriangulatorInitializer._vtable_offset - 1
        self.__dict__["_Compute"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsBoxTriangulatorInitializer, vtable_offset_local+1, POINTER(agcom.SAFEARRAY), POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsBoxTriangulatorInitializer.__dict__ and type(IStkGraphicsBoxTriangulatorInitializer.__dict__[attrname]) == property:
            return IStkGraphicsBoxTriangulatorInitializer.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsBoxTriangulatorInitializer.")
    
    def Compute(self, size:list) -> "IStkGraphicsSolidTriangulatorResult":
        """Computes the triangulation for a box of the specified size, centered at the origin."""
        with agmarshall.SAFEARRAY_arg(size) as arg_size, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Compute"](byref(arg_size.COM_val), byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{3d49da39-dbe0-4ef9-b589-bc0cf5e78085}", IStkGraphicsBoxTriangulatorInitializer)
agcls.AgTypeNameMap["IStkGraphicsBoxTriangulatorInitializer"] = IStkGraphicsBoxTriangulatorInitializer

class IStkGraphicsCylinderTriangulatorInitializer(object):
    """Triangulates a cylinder. It is recommended to visualize the cylinder using a solid primitive. Although, if only the fill is desired for visualization, a triangle mesh primitive with render back then front faces set to true can be used..."""
    _uuid = "{ee39d933-ce2c-4087-8c8a-f38ebe83842f}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_CreateSimple"] = _raise_uninitialized_error
        self.__dict__["_Compute"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsCylinderTriangulatorInitializer._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsCylinderTriangulatorInitializer from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsCylinderTriangulatorInitializer = agcom.GUID(IStkGraphicsCylinderTriangulatorInitializer._uuid)
        vtable_offset_local = IStkGraphicsCylinderTriangulatorInitializer._vtable_offset - 1
        self.__dict__["_CreateSimple"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCylinderTriangulatorInitializer, vtable_offset_local+1, agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID))
        self.__dict__["_Compute"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCylinderTriangulatorInitializer, vtable_offset_local+2, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, agcom.INT, agcom.LONG, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsCylinderTriangulatorInitializer.__dict__ and type(IStkGraphicsCylinderTriangulatorInitializer.__dict__[attrname]) == property:
            return IStkGraphicsCylinderTriangulatorInitializer.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsCylinderTriangulatorInitializer.")
    
    def CreateSimple(self, length:float, radius:float) -> "IStkGraphicsSolidTriangulatorResult":
        """Computes the triangulation for a cylinder centered at the origin."""
        with agmarshall.DOUBLE_arg(length) as arg_length, \
             agmarshall.DOUBLE_arg(radius) as arg_radius, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_CreateSimple"](arg_length.COM_val, arg_radius.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def Compute(self, length:float, bottomRadius:float, topRadius:float, slices:int, cylinderFill:"AgEStkGraphicsCylinderFill") -> "IStkGraphicsSolidTriangulatorResult":
        """Computes the triangulation for a cylinder centered at the origin."""
        with agmarshall.DOUBLE_arg(length) as arg_length, \
             agmarshall.DOUBLE_arg(bottomRadius) as arg_bottomRadius, \
             agmarshall.DOUBLE_arg(topRadius) as arg_topRadius, \
             agmarshall.INT_arg(slices) as arg_slices, \
             agmarshall.AgEnum_arg(AgEStkGraphicsCylinderFill, cylinderFill) as arg_cylinderFill, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Compute"](arg_length.COM_val, arg_bottomRadius.COM_val, arg_topRadius.COM_val, arg_slices.COM_val, arg_cylinderFill.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{ee39d933-ce2c-4087-8c8a-f38ebe83842f}", IStkGraphicsCylinderTriangulatorInitializer)
agcls.AgTypeNameMap["IStkGraphicsCylinderTriangulatorInitializer"] = IStkGraphicsCylinderTriangulatorInitializer

class IStkGraphicsEllipsoidTriangulatorInitializer(object):
    """Triangulates an ellipsoid. It is recommended to visualize the ellipsoid using a solid primitive. Although, if only the fill is desired for visualization, a triangle mesh primitive with render back then front faces set to true can be used..."""
    _uuid = "{8c50173b-e1e0-4321-aeac-5c75e4ef323f}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_ComputeSimple"] = _raise_uninitialized_error
        self.__dict__["_Compute"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsEllipsoidTriangulatorInitializer._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsEllipsoidTriangulatorInitializer from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsEllipsoidTriangulatorInitializer = agcom.GUID(IStkGraphicsEllipsoidTriangulatorInitializer._uuid)
        vtable_offset_local = IStkGraphicsEllipsoidTriangulatorInitializer._vtable_offset - 1
        self.__dict__["_ComputeSimple"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsEllipsoidTriangulatorInitializer, vtable_offset_local+1, POINTER(agcom.SAFEARRAY), POINTER(agcom.PVOID))
        self.__dict__["_Compute"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsEllipsoidTriangulatorInitializer, vtable_offset_local+2, POINTER(agcom.SAFEARRAY), agcom.INT, agcom.INT, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsEllipsoidTriangulatorInitializer.__dict__ and type(IStkGraphicsEllipsoidTriangulatorInitializer.__dict__[attrname]) == property:
            return IStkGraphicsEllipsoidTriangulatorInitializer.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsEllipsoidTriangulatorInitializer.")
    
    def ComputeSimple(self, radii:list) -> "IStkGraphicsSolidTriangulatorResult":
        """Computes the triangulation for an ellipsoid with the specified radii, centered at the origin, using 32 slices and 16 stacks."""
        with agmarshall.SAFEARRAY_arg(radii) as arg_radii, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_ComputeSimple"](byref(arg_radii.COM_val), byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def Compute(self, radii:list, slices:int, stacks:int) -> "IStkGraphicsSolidTriangulatorResult":
        """Computes the triangulation for an ellipsoid with the specified radii, centered at the origin."""
        with agmarshall.SAFEARRAY_arg(radii) as arg_radii, \
             agmarshall.INT_arg(slices) as arg_slices, \
             agmarshall.INT_arg(stacks) as arg_stacks, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Compute"](byref(arg_radii.COM_val), arg_slices.COM_val, arg_stacks.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{8c50173b-e1e0-4321-aeac-5c75e4ef323f}", IStkGraphicsEllipsoidTriangulatorInitializer)
agcls.AgTypeNameMap["IStkGraphicsEllipsoidTriangulatorInitializer"] = IStkGraphicsEllipsoidTriangulatorInitializer

class IStkGraphicsExtrudedPolylineTriangulatorInitializer(object):
    """Triangulates a polyline into an extrusion with bottom and top boundaries."""
    _uuid = "{b6b79988-0b1f-4b6e-8970-ff86b6d94b36}"
    _num_methods = 12
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Compute"] = _raise_uninitialized_error
        self.__dict__["_ComputeWithWindingOrder"] = _raise_uninitialized_error
        self.__dict__["_ComputeCartographic"] = _raise_uninitialized_error
        self.__dict__["_ComputeCartographicWithWindingOrder"] = _raise_uninitialized_error
        self.__dict__["_ComputeWithAltitudes"] = _raise_uninitialized_error
        self.__dict__["_ComputeWithAltitudesAndWindingOrder"] = _raise_uninitialized_error
        self.__dict__["_ComputeCartographicWithAltitudes"] = _raise_uninitialized_error
        self.__dict__["_ComputeCartographicWithAltitudesAndWindingOrder"] = _raise_uninitialized_error
        self.__dict__["_ComputeSingleConstantAltitude"] = _raise_uninitialized_error
        self.__dict__["_ComputeSingleConstantAltitudeWithWindingOrder"] = _raise_uninitialized_error
        self.__dict__["_ComputeSingleConstantAltitudeCartographic"] = _raise_uninitialized_error
        self.__dict__["_ComputeSingleConstantAltitudeCartographicWithWindingOrder"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsExtrudedPolylineTriangulatorInitializer._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsExtrudedPolylineTriangulatorInitializer from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsExtrudedPolylineTriangulatorInitializer = agcom.GUID(IStkGraphicsExtrudedPolylineTriangulatorInitializer._uuid)
        vtable_offset_local = IStkGraphicsExtrudedPolylineTriangulatorInitializer._vtable_offset - 1
        self.__dict__["_Compute"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsExtrudedPolylineTriangulatorInitializer, vtable_offset_local+1, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), POINTER(agcom.PVOID))
        self.__dict__["_ComputeWithWindingOrder"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsExtrudedPolylineTriangulatorInitializer, vtable_offset_local+2, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_ComputeCartographic"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsExtrudedPolylineTriangulatorInitializer, vtable_offset_local+3, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), POINTER(agcom.PVOID))
        self.__dict__["_ComputeCartographicWithWindingOrder"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsExtrudedPolylineTriangulatorInitializer, vtable_offset_local+4, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_ComputeWithAltitudes"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsExtrudedPolylineTriangulatorInitializer, vtable_offset_local+5, agcom.BSTR, POINTER(agcom.SAFEARRAY), agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID))
        self.__dict__["_ComputeWithAltitudesAndWindingOrder"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsExtrudedPolylineTriangulatorInitializer, vtable_offset_local+6, agcom.BSTR, POINTER(agcom.SAFEARRAY), agcom.DOUBLE, agcom.DOUBLE, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_ComputeCartographicWithAltitudes"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsExtrudedPolylineTriangulatorInitializer, vtable_offset_local+7, agcom.BSTR, POINTER(agcom.SAFEARRAY), agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID))
        self.__dict__["_ComputeCartographicWithAltitudesAndWindingOrder"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsExtrudedPolylineTriangulatorInitializer, vtable_offset_local+8, agcom.BSTR, POINTER(agcom.SAFEARRAY), agcom.DOUBLE, agcom.DOUBLE, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_ComputeSingleConstantAltitude"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsExtrudedPolylineTriangulatorInitializer, vtable_offset_local+9, agcom.BSTR, POINTER(agcom.SAFEARRAY), agcom.DOUBLE, POINTER(agcom.PVOID))
        self.__dict__["_ComputeSingleConstantAltitudeWithWindingOrder"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsExtrudedPolylineTriangulatorInitializer, vtable_offset_local+10, agcom.BSTR, POINTER(agcom.SAFEARRAY), agcom.DOUBLE, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_ComputeSingleConstantAltitudeCartographic"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsExtrudedPolylineTriangulatorInitializer, vtable_offset_local+11, agcom.BSTR, POINTER(agcom.SAFEARRAY), agcom.DOUBLE, POINTER(agcom.PVOID))
        self.__dict__["_ComputeSingleConstantAltitudeCartographicWithWindingOrder"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsExtrudedPolylineTriangulatorInitializer, vtable_offset_local+12, agcom.BSTR, POINTER(agcom.SAFEARRAY), agcom.DOUBLE, agcom.LONG, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsExtrudedPolylineTriangulatorInitializer.__dict__ and type(IStkGraphicsExtrudedPolylineTriangulatorInitializer.__dict__[attrname]) == property:
            return IStkGraphicsExtrudedPolylineTriangulatorInitializer.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsExtrudedPolylineTriangulatorInitializer.")
    
    def Compute(self, centralBody:str, bottomPositions:list, topPositions:list) -> "IStkGraphicsExtrudedPolylineTriangulatorResult":
        """Computes an extrusion between bottomPositions and topPositions on the specified centralBody. This is equivalent to calling Compute with a positionsWindingOrder of compute."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(bottomPositions) as arg_bottomPositions, \
             agmarshall.SAFEARRAY_arg(topPositions) as arg_topPositions, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Compute"](arg_centralBody.COM_val, byref(arg_bottomPositions.COM_val), byref(arg_topPositions.COM_val), byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def ComputeWithWindingOrder(self, centralBody:str, bottomPositions:list, topPositions:list, positionsWindingOrder:"AgEStkGraphicsWindingOrder") -> "IStkGraphicsExtrudedPolylineTriangulatorResult":
        """Computes an extrusion between bottomPositions and topPositions on the specified centralBody."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(bottomPositions) as arg_bottomPositions, \
             agmarshall.SAFEARRAY_arg(topPositions) as arg_topPositions, \
             agmarshall.AgEnum_arg(AgEStkGraphicsWindingOrder, positionsWindingOrder) as arg_positionsWindingOrder, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_ComputeWithWindingOrder"](arg_centralBody.COM_val, byref(arg_bottomPositions.COM_val), byref(arg_topPositions.COM_val), arg_positionsWindingOrder.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def ComputeCartographic(self, centralBody:str, bottomPositions:list, topPositions:list) -> "IStkGraphicsExtrudedPolylineTriangulatorResult":
        """For convenience. Computes an extrusion between bottomPositions and topPositions on the specified centralBody using cartographic positions. This is equivalent to converting each position in bottomPositions and topPositions to cartesian and calling Compute"""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(bottomPositions) as arg_bottomPositions, \
             agmarshall.SAFEARRAY_arg(topPositions) as arg_topPositions, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_ComputeCartographic"](arg_centralBody.COM_val, byref(arg_bottomPositions.COM_val), byref(arg_topPositions.COM_val), byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def ComputeCartographicWithWindingOrder(self, centralBody:str, bottomPositions:list, topPositions:list, positionsWindingOrder:"AgEStkGraphicsWindingOrder") -> "IStkGraphicsExtrudedPolylineTriangulatorResult":
        """For convenience. Computes an extrusion between bottomPositions and topPositions on the specified centralBody using cartographic positions. This is equivalent to converting each position in bottomPositions and topPositions to cartesian and calling Compute"""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(bottomPositions) as arg_bottomPositions, \
             agmarshall.SAFEARRAY_arg(topPositions) as arg_topPositions, \
             agmarshall.AgEnum_arg(AgEStkGraphicsWindingOrder, positionsWindingOrder) as arg_positionsWindingOrder, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_ComputeCartographicWithWindingOrder"](arg_centralBody.COM_val, byref(arg_bottomPositions.COM_val), byref(arg_topPositions.COM_val), arg_positionsWindingOrder.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def ComputeWithAltitudes(self, centralBody:str, positions:list, bottomAltitude:float, topAltitude:float) -> "IStkGraphicsExtrudedPolylineTriangulatorResult":
        """Computes an extrusion of positions on the specified centralBody with a constant bottomAltitude and topAltitude. This is equivalent to calling Compute with a positionsWindingOrder of compute."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.DOUBLE_arg(bottomAltitude) as arg_bottomAltitude, \
             agmarshall.DOUBLE_arg(topAltitude) as arg_topAltitude, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_ComputeWithAltitudes"](arg_centralBody.COM_val, byref(arg_positions.COM_val), arg_bottomAltitude.COM_val, arg_topAltitude.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def ComputeWithAltitudesAndWindingOrder(self, centralBody:str, positions:list, bottomAltitude:float, topAltitude:float, positionsWindingOrder:"AgEStkGraphicsWindingOrder") -> "IStkGraphicsExtrudedPolylineTriangulatorResult":
        """Computes an extrusion of positions on the specified centralBody with a constant bottomAltitude and topAltitude."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.DOUBLE_arg(bottomAltitude) as arg_bottomAltitude, \
             agmarshall.DOUBLE_arg(topAltitude) as arg_topAltitude, \
             agmarshall.AgEnum_arg(AgEStkGraphicsWindingOrder, positionsWindingOrder) as arg_positionsWindingOrder, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_ComputeWithAltitudesAndWindingOrder"](arg_centralBody.COM_val, byref(arg_positions.COM_val), arg_bottomAltitude.COM_val, arg_topAltitude.COM_val, arg_positionsWindingOrder.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def ComputeCartographicWithAltitudes(self, centralBody:str, positions:list, bottomAltitude:float, topAltitude:float) -> "IStkGraphicsExtrudedPolylineTriangulatorResult":
        """For convenience. Computes an extrusion of positions on the specified centralBody with a constant bottomAltitude and topAltitude using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling Compute"""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.DOUBLE_arg(bottomAltitude) as arg_bottomAltitude, \
             agmarshall.DOUBLE_arg(topAltitude) as arg_topAltitude, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_ComputeCartographicWithAltitudes"](arg_centralBody.COM_val, byref(arg_positions.COM_val), arg_bottomAltitude.COM_val, arg_topAltitude.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def ComputeCartographicWithAltitudesAndWindingOrder(self, centralBody:str, positions:list, bottomAltitude:float, topAltitude:float, positionsWindingOrder:"AgEStkGraphicsWindingOrder") -> "IStkGraphicsExtrudedPolylineTriangulatorResult":
        """For convenience. Computes an extrusion of positions on the specified centralBody with a constant bottomAltitude and topAltitude using cartographic positions. This is equivalent to converting each position in positions to cartesian and calling Compute"""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.DOUBLE_arg(bottomAltitude) as arg_bottomAltitude, \
             agmarshall.DOUBLE_arg(topAltitude) as arg_topAltitude, \
             agmarshall.AgEnum_arg(AgEStkGraphicsWindingOrder, positionsWindingOrder) as arg_positionsWindingOrder, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_ComputeCartographicWithAltitudesAndWindingOrder"](arg_centralBody.COM_val, byref(arg_positions.COM_val), arg_bottomAltitude.COM_val, arg_topAltitude.COM_val, arg_positionsWindingOrder.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def ComputeSingleConstantAltitude(self, centralBody:str, positions:list, altitude:float) -> "IStkGraphicsExtrudedPolylineTriangulatorResult":
        """Computes an extrusion of positions on the specified centralBody. One side of the extrusion has a constant altitude and the other has the original altitudes from positions..."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.DOUBLE_arg(altitude) as arg_altitude, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_ComputeSingleConstantAltitude"](arg_centralBody.COM_val, byref(arg_positions.COM_val), arg_altitude.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def ComputeSingleConstantAltitudeWithWindingOrder(self, centralBody:str, positions:list, altitude:float, positionsWindingOrder:"AgEStkGraphicsWindingOrder") -> "IStkGraphicsExtrudedPolylineTriangulatorResult":
        """Computes an extrusion of positions on the specified centralBody. One side of the extrusion has a constant altitude and the other has the original altitudes from positions."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.DOUBLE_arg(altitude) as arg_altitude, \
             agmarshall.AgEnum_arg(AgEStkGraphicsWindingOrder, positionsWindingOrder) as arg_positionsWindingOrder, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_ComputeSingleConstantAltitudeWithWindingOrder"](arg_centralBody.COM_val, byref(arg_positions.COM_val), arg_altitude.COM_val, arg_positionsWindingOrder.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def ComputeSingleConstantAltitudeCartographic(self, centralBody:str, positions:list, altitude:float) -> "IStkGraphicsExtrudedPolylineTriangulatorResult":
        """For convenience. Computes an extrusion of positions on the specified centralBody using cartographic positions. One side of the extrusion has a constant altitude and the other has the original altitudes from positions..."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.DOUBLE_arg(altitude) as arg_altitude, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_ComputeSingleConstantAltitudeCartographic"](arg_centralBody.COM_val, byref(arg_positions.COM_val), arg_altitude.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def ComputeSingleConstantAltitudeCartographicWithWindingOrder(self, centralBody:str, positions:list, altitude:float, positionsWindingOrder:"AgEStkGraphicsWindingOrder") -> "IStkGraphicsExtrudedPolylineTriangulatorResult":
        """For convenience. Computes an extrusion of positions on the specified centralBody using cartographic positions. One side of the extrusion has a constant altitude and the other has the original altitudes from positions..."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.DOUBLE_arg(altitude) as arg_altitude, \
             agmarshall.AgEnum_arg(AgEStkGraphicsWindingOrder, positionsWindingOrder) as arg_positionsWindingOrder, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_ComputeSingleConstantAltitudeCartographicWithWindingOrder"](arg_centralBody.COM_val, byref(arg_positions.COM_val), arg_altitude.COM_val, arg_positionsWindingOrder.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{b6b79988-0b1f-4b6e-8970-ff86b6d94b36}", IStkGraphicsExtrudedPolylineTriangulatorInitializer)
agcls.AgTypeNameMap["IStkGraphicsExtrudedPolylineTriangulatorInitializer"] = IStkGraphicsExtrudedPolylineTriangulatorInitializer

class IStkGraphicsSurfaceExtentTriangulatorInitializer(object):
    """Triangulates an extent on a central body into a triangle mesh and a surrounding boundary. The mesh is commonly visualized with the triangle mesh primitive or surface mesh primitive. The boundary is commonly visualized with the polyline primitive."""
    _uuid = "{74b85e21-b114-46b6-820d-2be8adc7ea7a}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_ComputeSimple"] = _raise_uninitialized_error
        self.__dict__["_Compute"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsSurfaceExtentTriangulatorInitializer._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsSurfaceExtentTriangulatorInitializer from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsSurfaceExtentTriangulatorInitializer = agcom.GUID(IStkGraphicsSurfaceExtentTriangulatorInitializer._uuid)
        vtable_offset_local = IStkGraphicsSurfaceExtentTriangulatorInitializer._vtable_offset - 1
        self.__dict__["_ComputeSimple"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSurfaceExtentTriangulatorInitializer, vtable_offset_local+1, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.PVOID))
        self.__dict__["_Compute"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSurfaceExtentTriangulatorInitializer, vtable_offset_local+2, agcom.BSTR, POINTER(agcom.SAFEARRAY), agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsSurfaceExtentTriangulatorInitializer.__dict__ and type(IStkGraphicsSurfaceExtentTriangulatorInitializer.__dict__[attrname]) == property:
            return IStkGraphicsSurfaceExtentTriangulatorInitializer.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsSurfaceExtentTriangulatorInitializer.")
    
    def ComputeSimple(self, centralBody:str, extent:list) -> "IStkGraphicsSurfaceTriangulatorResult":
        """Computes a triangulation on the specified centralBody for the specified extent. This is equivalent to calling Compute with an altitude of 0 and a granularity of 1 degree."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(extent) as arg_extent, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_ComputeSimple"](arg_centralBody.COM_val, byref(arg_extent.COM_val), byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def Compute(self, centralBody:str, extent:list, altitude:float, granularity:float) -> "IStkGraphicsSurfaceTriangulatorResult":
        """Computes a triangulation on the specified centralBody for the specified extent."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(extent) as arg_extent, \
             agmarshall.DOUBLE_arg(altitude) as arg_altitude, \
             agmarshall.DOUBLE_arg(granularity) as arg_granularity, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Compute"](arg_centralBody.COM_val, byref(arg_extent.COM_val), arg_altitude.COM_val, arg_granularity.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{74b85e21-b114-46b6-820d-2be8adc7ea7a}", IStkGraphicsSurfaceExtentTriangulatorInitializer)
agcls.AgTypeNameMap["IStkGraphicsSurfaceExtentTriangulatorInitializer"] = IStkGraphicsSurfaceExtentTriangulatorInitializer

class IStkGraphicsSurfacePolygonTriangulatorInitializer(object):
    """Triangulates a polygon, with an optional hole, on a central body, into a triangle mesh and a surrounding boundary. The mesh is commonly visualized with the triangle mesh primitive or surface mesh primitive..."""
    _uuid = "{52654c8a-3c27-415f-b346-c0e433241b49}"
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Compute"] = _raise_uninitialized_error
        self.__dict__["_ComputeCartographic"] = _raise_uninitialized_error
        self.__dict__["_ComputeWithHole"] = _raise_uninitialized_error
        self.__dict__["_ComputeWithHoleAltitudeAndGranularity"] = _raise_uninitialized_error
        self.__dict__["_ComputeWithAltitudeAndGranularity"] = _raise_uninitialized_error
        self.__dict__["_ComputeCartographicWithAltitudeAndGranularity"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsSurfacePolygonTriangulatorInitializer._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsSurfacePolygonTriangulatorInitializer from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsSurfacePolygonTriangulatorInitializer = agcom.GUID(IStkGraphicsSurfacePolygonTriangulatorInitializer._uuid)
        vtable_offset_local = IStkGraphicsSurfacePolygonTriangulatorInitializer._vtable_offset - 1
        self.__dict__["_Compute"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSurfacePolygonTriangulatorInitializer, vtable_offset_local+1, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.PVOID))
        self.__dict__["_ComputeCartographic"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSurfacePolygonTriangulatorInitializer, vtable_offset_local+2, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.PVOID))
        self.__dict__["_ComputeWithHole"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSurfacePolygonTriangulatorInitializer, vtable_offset_local+3, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), POINTER(agcom.PVOID))
        self.__dict__["_ComputeWithHoleAltitudeAndGranularity"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSurfacePolygonTriangulatorInitializer, vtable_offset_local+4, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID))
        self.__dict__["_ComputeWithAltitudeAndGranularity"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSurfacePolygonTriangulatorInitializer, vtable_offset_local+5, agcom.BSTR, POINTER(agcom.SAFEARRAY), agcom.DOUBLE, agcom.DOUBLE, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_ComputeCartographicWithAltitudeAndGranularity"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSurfacePolygonTriangulatorInitializer, vtable_offset_local+6, agcom.BSTR, POINTER(agcom.SAFEARRAY), agcom.DOUBLE, agcom.DOUBLE, agcom.LONG, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsSurfacePolygonTriangulatorInitializer.__dict__ and type(IStkGraphicsSurfacePolygonTriangulatorInitializer.__dict__[attrname]) == property:
            return IStkGraphicsSurfacePolygonTriangulatorInitializer.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsSurfacePolygonTriangulatorInitializer.")
    
    def Compute(self, centralBody:str, positions:list) -> "IStkGraphicsSurfaceTriangulatorResult":
        """Computes the triangulation on the specified centralBody for a polygon whose boundary is defined by the specified positions. This is equivalent to calling Compute with an altitude of 0, a granularity of 1 degree, and a positionsWindingOrder of compute."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Compute"](arg_centralBody.COM_val, byref(arg_positions.COM_val), byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def ComputeCartographic(self, centralBody:str, positions:list) -> "IStkGraphicsSurfaceTriangulatorResult":
        """For convenience. Computes the triangulation on the specified centralBody for a polygon whose boundary is defined by the specified cartographic positions. This is equivalent to converting each position in positions to cartesian and calling Compute"""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_ComputeCartographic"](arg_centralBody.COM_val, byref(arg_positions.COM_val), byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def ComputeWithHole(self, centralBody:str, positions:list, holePositions:list) -> "IStkGraphicsSurfaceTriangulatorResult":
        """Computes the triangulation on the specified centralBody for a polygon whose boundary is defined by the specified positions with a hole specified by holePositions. This is equivalent to calling Compute with an altitude of 0 and a granularity of 1 degree."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(holePositions) as arg_holePositions, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_ComputeWithHole"](arg_centralBody.COM_val, byref(arg_positions.COM_val), byref(arg_holePositions.COM_val), byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def ComputeWithHoleAltitudeAndGranularity(self, centralBody:str, positions:list, holePositions:list, altitude:float, granularity:float) -> "IStkGraphicsSurfaceTriangulatorResult":
        """Computes the triangulation on the specified centralBody for a polygon whose boundary is defined by the specified positions with a hole specified by holePositions."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.SAFEARRAY_arg(holePositions) as arg_holePositions, \
             agmarshall.DOUBLE_arg(altitude) as arg_altitude, \
             agmarshall.DOUBLE_arg(granularity) as arg_granularity, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_ComputeWithHoleAltitudeAndGranularity"](arg_centralBody.COM_val, byref(arg_positions.COM_val), byref(arg_holePositions.COM_val), arg_altitude.COM_val, arg_granularity.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def ComputeWithAltitudeAndGranularity(self, centralBody:str, positions:list, altitude:float, granularity:float, positionsWindingOrder:"AgEStkGraphicsWindingOrder") -> "IStkGraphicsSurfaceTriangulatorResult":
        """Computes the triangulation on the specified centralBody for a polygon whose boundary is defined by the specified positions."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.DOUBLE_arg(altitude) as arg_altitude, \
             agmarshall.DOUBLE_arg(granularity) as arg_granularity, \
             agmarshall.AgEnum_arg(AgEStkGraphicsWindingOrder, positionsWindingOrder) as arg_positionsWindingOrder, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_ComputeWithAltitudeAndGranularity"](arg_centralBody.COM_val, byref(arg_positions.COM_val), arg_altitude.COM_val, arg_granularity.COM_val, arg_positionsWindingOrder.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def ComputeCartographicWithAltitudeAndGranularity(self, centralBody:str, positions:list, altitude:float, granularity:float, positionsWindingOrder:"AgEStkGraphicsWindingOrder") -> "IStkGraphicsSurfaceTriangulatorResult":
        """For convenience. Computes the triangulation on the specified centralBody for a polygon whose boundary is defined by the specified cartographic positions. This is equivalent to converting each position in positions to cartesian and calling Compute"""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(positions) as arg_positions, \
             agmarshall.DOUBLE_arg(altitude) as arg_altitude, \
             agmarshall.DOUBLE_arg(granularity) as arg_granularity, \
             agmarshall.AgEnum_arg(AgEStkGraphicsWindingOrder, positionsWindingOrder) as arg_positionsWindingOrder, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_ComputeCartographicWithAltitudeAndGranularity"](arg_centralBody.COM_val, byref(arg_positions.COM_val), arg_altitude.COM_val, arg_granularity.COM_val, arg_positionsWindingOrder.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{52654c8a-3c27-415f-b346-c0e433241b49}", IStkGraphicsSurfacePolygonTriangulatorInitializer)
agcls.AgTypeNameMap["IStkGraphicsSurfacePolygonTriangulatorInitializer"] = IStkGraphicsSurfacePolygonTriangulatorInitializer

class IStkGraphicsSurfaceShapesInitializer(object):
    """Computes boundary positions for shapes on the surface such as circles, ellipses, and sectors."""
    _uuid = "{8b711790-8bc2-4e20-8795-89a4863a0566}"
    _num_methods = 12
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_ComputeCircleWithGranularity"] = _raise_uninitialized_error
        self.__dict__["_ComputeCircle"] = _raise_uninitialized_error
        self.__dict__["_ComputeCircleCartographicWithGranularity"] = _raise_uninitialized_error
        self.__dict__["_ComputeCircleCartographic"] = _raise_uninitialized_error
        self.__dict__["_ComputeEllipseWithGranularity"] = _raise_uninitialized_error
        self.__dict__["_ComputeEllipse"] = _raise_uninitialized_error
        self.__dict__["_ComputeEllipseCartographicWithGranularity"] = _raise_uninitialized_error
        self.__dict__["_ComputeEllipseCartographic"] = _raise_uninitialized_error
        self.__dict__["_ComputeSectorWithGranularity"] = _raise_uninitialized_error
        self.__dict__["_ComputeSector"] = _raise_uninitialized_error
        self.__dict__["_ComputeSectorCartographicWithGranularity"] = _raise_uninitialized_error
        self.__dict__["_ComputeSectorCartographic"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsSurfaceShapesInitializer._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsSurfaceShapesInitializer from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsSurfaceShapesInitializer = agcom.GUID(IStkGraphicsSurfaceShapesInitializer._uuid)
        vtable_offset_local = IStkGraphicsSurfaceShapesInitializer._vtable_offset - 1
        self.__dict__["_ComputeCircleWithGranularity"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSurfaceShapesInitializer, vtable_offset_local+1, agcom.BSTR, POINTER(agcom.SAFEARRAY), agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID))
        self.__dict__["_ComputeCircle"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSurfaceShapesInitializer, vtable_offset_local+2, agcom.BSTR, POINTER(agcom.SAFEARRAY), agcom.DOUBLE, POINTER(agcom.PVOID))
        self.__dict__["_ComputeCircleCartographicWithGranularity"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSurfaceShapesInitializer, vtable_offset_local+3, agcom.BSTR, POINTER(agcom.SAFEARRAY), agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID))
        self.__dict__["_ComputeCircleCartographic"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSurfaceShapesInitializer, vtable_offset_local+4, agcom.BSTR, POINTER(agcom.SAFEARRAY), agcom.DOUBLE, POINTER(agcom.PVOID))
        self.__dict__["_ComputeEllipseWithGranularity"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSurfaceShapesInitializer, vtable_offset_local+5, agcom.BSTR, POINTER(agcom.SAFEARRAY), agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID))
        self.__dict__["_ComputeEllipse"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSurfaceShapesInitializer, vtable_offset_local+6, agcom.BSTR, POINTER(agcom.SAFEARRAY), agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID))
        self.__dict__["_ComputeEllipseCartographicWithGranularity"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSurfaceShapesInitializer, vtable_offset_local+7, agcom.BSTR, POINTER(agcom.SAFEARRAY), agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID))
        self.__dict__["_ComputeEllipseCartographic"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSurfaceShapesInitializer, vtable_offset_local+8, agcom.BSTR, POINTER(agcom.SAFEARRAY), agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID))
        self.__dict__["_ComputeSectorWithGranularity"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSurfaceShapesInitializer, vtable_offset_local+9, agcom.BSTR, POINTER(agcom.SAFEARRAY), agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID))
        self.__dict__["_ComputeSector"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSurfaceShapesInitializer, vtable_offset_local+10, agcom.BSTR, POINTER(agcom.SAFEARRAY), agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID))
        self.__dict__["_ComputeSectorCartographicWithGranularity"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSurfaceShapesInitializer, vtable_offset_local+11, agcom.BSTR, POINTER(agcom.SAFEARRAY), agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID))
        self.__dict__["_ComputeSectorCartographic"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSurfaceShapesInitializer, vtable_offset_local+12, agcom.BSTR, POINTER(agcom.SAFEARRAY), agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsSurfaceShapesInitializer.__dict__ and type(IStkGraphicsSurfaceShapesInitializer.__dict__[attrname]) == property:
            return IStkGraphicsSurfaceShapesInitializer.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsSurfaceShapesInitializer.")
    
    def ComputeCircleWithGranularity(self, centralBody:str, center:list, radius:float, granularity:float) -> "IStkGraphicsSurfaceShapesResult":
        """Computes boundary positions for a circle on the specified centralBody with the specified center, radius and granularity."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(center) as arg_center, \
             agmarshall.DOUBLE_arg(radius) as arg_radius, \
             agmarshall.DOUBLE_arg(granularity) as arg_granularity, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_ComputeCircleWithGranularity"](arg_centralBody.COM_val, byref(arg_center.COM_val), arg_radius.COM_val, arg_granularity.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def ComputeCircle(self, centralBody:str, center:list, radius:float) -> "IStkGraphicsSurfaceShapesResult":
        """Computes boundary positions for a circle on the specified centralBody with the specified center and radius. This is equivalent to calling ComputeCircle with a granularity of 1 degree."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(center) as arg_center, \
             agmarshall.DOUBLE_arg(radius) as arg_radius, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_ComputeCircle"](arg_centralBody.COM_val, byref(arg_center.COM_val), arg_radius.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def ComputeCircleCartographicWithGranularity(self, centralBody:str, center:list, radius:float, granularity:float) -> "IStkGraphicsSurfaceShapesResult":
        """For convenience. Computes boundary positions for a circle on the specified centralBody using a cartographic center. This is equivalent to converting center to cartesian and calling ComputeCircle"""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(center) as arg_center, \
             agmarshall.DOUBLE_arg(radius) as arg_radius, \
             agmarshall.DOUBLE_arg(granularity) as arg_granularity, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_ComputeCircleCartographicWithGranularity"](arg_centralBody.COM_val, byref(arg_center.COM_val), arg_radius.COM_val, arg_granularity.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def ComputeCircleCartographic(self, centralBody:str, center:list, radius:float) -> "IStkGraphicsSurfaceShapesResult":
        """For convenience. Computes boundary positions for a circle on the specified centralBody using a cartographic center. This is equivalent to converting center to cartesian and calling ComputeCircle"""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(center) as arg_center, \
             agmarshall.DOUBLE_arg(radius) as arg_radius, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_ComputeCircleCartographic"](arg_centralBody.COM_val, byref(arg_center.COM_val), arg_radius.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def ComputeEllipseWithGranularity(self, centralBody:str, center:list, majorAxisRadius:float, minorAxisRadius:float, bearing:float, granularity:float) -> "IStkGraphicsSurfaceShapesResult":
        """Computes boundary positions for an ellipse on the specified centralBody."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(center) as arg_center, \
             agmarshall.DOUBLE_arg(majorAxisRadius) as arg_majorAxisRadius, \
             agmarshall.DOUBLE_arg(minorAxisRadius) as arg_minorAxisRadius, \
             agmarshall.DOUBLE_arg(bearing) as arg_bearing, \
             agmarshall.DOUBLE_arg(granularity) as arg_granularity, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_ComputeEllipseWithGranularity"](arg_centralBody.COM_val, byref(arg_center.COM_val), arg_majorAxisRadius.COM_val, arg_minorAxisRadius.COM_val, arg_bearing.COM_val, arg_granularity.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def ComputeEllipse(self, centralBody:str, center:list, majorAxisRadius:float, minorAxisRadius:float, bearing:float) -> "IStkGraphicsSurfaceShapesResult":
        """Computes boundary positions for an ellipse on the specified centralBody This is equivalent to calling ComputeEllipse with a granularity of 1 degree."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(center) as arg_center, \
             agmarshall.DOUBLE_arg(majorAxisRadius) as arg_majorAxisRadius, \
             agmarshall.DOUBLE_arg(minorAxisRadius) as arg_minorAxisRadius, \
             agmarshall.DOUBLE_arg(bearing) as arg_bearing, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_ComputeEllipse"](arg_centralBody.COM_val, byref(arg_center.COM_val), arg_majorAxisRadius.COM_val, arg_minorAxisRadius.COM_val, arg_bearing.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def ComputeEllipseCartographicWithGranularity(self, centralBody:str, center:list, majorAxisRadius:float, minorAxisRadius:float, bearing:float, granularity:float) -> "IStkGraphicsSurfaceShapesResult":
        """For convenience. Computes boundary positions for an ellipse on the specified centralBody using a cartographic center. This is equivalent to converting center to cartesian and calling ComputeEllipse"""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(center) as arg_center, \
             agmarshall.DOUBLE_arg(majorAxisRadius) as arg_majorAxisRadius, \
             agmarshall.DOUBLE_arg(minorAxisRadius) as arg_minorAxisRadius, \
             agmarshall.DOUBLE_arg(bearing) as arg_bearing, \
             agmarshall.DOUBLE_arg(granularity) as arg_granularity, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_ComputeEllipseCartographicWithGranularity"](arg_centralBody.COM_val, byref(arg_center.COM_val), arg_majorAxisRadius.COM_val, arg_minorAxisRadius.COM_val, arg_bearing.COM_val, arg_granularity.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def ComputeEllipseCartographic(self, centralBody:str, center:list, majorAxisRadius:float, minorAxisRadius:float, bearing:float) -> "IStkGraphicsSurfaceShapesResult":
        """For convenience. Computes boundary positions for an ellipse on the specified centralBody using a cartographic center. This is equivalent to converting center to cartesian and calling ComputeEllipse"""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(center) as arg_center, \
             agmarshall.DOUBLE_arg(majorAxisRadius) as arg_majorAxisRadius, \
             agmarshall.DOUBLE_arg(minorAxisRadius) as arg_minorAxisRadius, \
             agmarshall.DOUBLE_arg(bearing) as arg_bearing, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_ComputeEllipseCartographic"](arg_centralBody.COM_val, byref(arg_center.COM_val), arg_majorAxisRadius.COM_val, arg_minorAxisRadius.COM_val, arg_bearing.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def ComputeSectorWithGranularity(self, centralBody:str, center:list, innerRadius:float, outerRadius:float, startBearing:float, endBearing:float, granularity:float) -> "IStkGraphicsSurfaceShapesResult":
        """Computes boundary positions for a sector on the specified centralBody."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(center) as arg_center, \
             agmarshall.DOUBLE_arg(innerRadius) as arg_innerRadius, \
             agmarshall.DOUBLE_arg(outerRadius) as arg_outerRadius, \
             agmarshall.DOUBLE_arg(startBearing) as arg_startBearing, \
             agmarshall.DOUBLE_arg(endBearing) as arg_endBearing, \
             agmarshall.DOUBLE_arg(granularity) as arg_granularity, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_ComputeSectorWithGranularity"](arg_centralBody.COM_val, byref(arg_center.COM_val), arg_innerRadius.COM_val, arg_outerRadius.COM_val, arg_startBearing.COM_val, arg_endBearing.COM_val, arg_granularity.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def ComputeSector(self, centralBody:str, center:list, innerRadius:float, outerRadius:float, startBearing:float, endBearing:float) -> "IStkGraphicsSurfaceShapesResult":
        """Computes boundary positions for a sector on the specified centralBody This is equivalent to calling ComputeSector with a granularity of 1 degree."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(center) as arg_center, \
             agmarshall.DOUBLE_arg(innerRadius) as arg_innerRadius, \
             agmarshall.DOUBLE_arg(outerRadius) as arg_outerRadius, \
             agmarshall.DOUBLE_arg(startBearing) as arg_startBearing, \
             agmarshall.DOUBLE_arg(endBearing) as arg_endBearing, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_ComputeSector"](arg_centralBody.COM_val, byref(arg_center.COM_val), arg_innerRadius.COM_val, arg_outerRadius.COM_val, arg_startBearing.COM_val, arg_endBearing.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def ComputeSectorCartographicWithGranularity(self, centralBody:str, center:list, innerRadius:float, outerRadius:float, startBearing:float, endBearing:float, granularity:float) -> "IStkGraphicsSurfaceShapesResult":
        """For convenience. Computes boundary positions for a sector on the specified centralBody using a cartographic center. This is equivalent to converting center to cartesian and calling ComputeSector"""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(center) as arg_center, \
             agmarshall.DOUBLE_arg(innerRadius) as arg_innerRadius, \
             agmarshall.DOUBLE_arg(outerRadius) as arg_outerRadius, \
             agmarshall.DOUBLE_arg(startBearing) as arg_startBearing, \
             agmarshall.DOUBLE_arg(endBearing) as arg_endBearing, \
             agmarshall.DOUBLE_arg(granularity) as arg_granularity, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_ComputeSectorCartographicWithGranularity"](arg_centralBody.COM_val, byref(arg_center.COM_val), arg_innerRadius.COM_val, arg_outerRadius.COM_val, arg_startBearing.COM_val, arg_endBearing.COM_val, arg_granularity.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def ComputeSectorCartographic(self, centralBody:str, center:list, innerRadius:float, outerRadius:float, startBearing:float, endBearing:float) -> "IStkGraphicsSurfaceShapesResult":
        """For convenience. Computes boundary positions for a sector on the specified centralBody using a cartographic center. This is equivalent to converting center to cartesian and calling ComputeSector"""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.SAFEARRAY_arg(center) as arg_center, \
             agmarshall.DOUBLE_arg(innerRadius) as arg_innerRadius, \
             agmarshall.DOUBLE_arg(outerRadius) as arg_outerRadius, \
             agmarshall.DOUBLE_arg(startBearing) as arg_startBearing, \
             agmarshall.DOUBLE_arg(endBearing) as arg_endBearing, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_ComputeSectorCartographic"](arg_centralBody.COM_val, byref(arg_center.COM_val), arg_innerRadius.COM_val, arg_outerRadius.COM_val, arg_startBearing.COM_val, arg_endBearing.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{8b711790-8bc2-4e20-8795-89a4863a0566}", IStkGraphicsSurfaceShapesInitializer)
agcls.AgTypeNameMap["IStkGraphicsSurfaceShapesInitializer"] = IStkGraphicsSurfaceShapesInitializer

class IStkGraphicsAGICustomTerrainOverlayFactory(object):
    """A terrain overlay for handling AGI Cesium Terrain."""
    _uuid = "{1af28259-1c26-45f4-8156-079012d5bce3}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_InitializeWithString"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsAGICustomTerrainOverlayFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsAGICustomTerrainOverlayFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsAGICustomTerrainOverlayFactory = agcom.GUID(IStkGraphicsAGICustomTerrainOverlayFactory._uuid)
        vtable_offset_local = IStkGraphicsAGICustomTerrainOverlayFactory._vtable_offset - 1
        self.__dict__["_InitializeWithString"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsAGICustomTerrainOverlayFactory, vtable_offset_local+1, agcom.BSTR, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsAGICustomTerrainOverlayFactory.__dict__ and type(IStkGraphicsAGICustomTerrainOverlayFactory.__dict__[attrname]) == property:
            return IStkGraphicsAGICustomTerrainOverlayFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsAGICustomTerrainOverlayFactory.")
    
    def InitializeWithString(self, uri:str) -> "IStkGraphicsAGICustomTerrainOverlay":
        """Initializes an agi custom terrain overlay with the provided values."""
        with agmarshall.BSTR_arg(uri) as arg_uri, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithString"](arg_uri.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{1af28259-1c26-45f4-8156-079012d5bce3}", IStkGraphicsAGICustomTerrainOverlayFactory)
agcls.AgTypeNameMap["IStkGraphicsAGICustomTerrainOverlayFactory"] = IStkGraphicsAGICustomTerrainOverlayFactory

class IStkGraphicsAGIProcessedImageGlobeOverlayFactory(object):
    """A globe image overlay for handling AGI Processed Image (PDTTX) files."""
    _uuid = "{0d8e18a4-cda4-4b24-9ab0-2f25c83eb32e}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_InitializeWithString"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsAGIProcessedImageGlobeOverlayFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsAGIProcessedImageGlobeOverlayFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsAGIProcessedImageGlobeOverlayFactory = agcom.GUID(IStkGraphicsAGIProcessedImageGlobeOverlayFactory._uuid)
        vtable_offset_local = IStkGraphicsAGIProcessedImageGlobeOverlayFactory._vtable_offset - 1
        self.__dict__["_InitializeWithString"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsAGIProcessedImageGlobeOverlayFactory, vtable_offset_local+1, agcom.BSTR, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsAGIProcessedImageGlobeOverlayFactory.__dict__ and type(IStkGraphicsAGIProcessedImageGlobeOverlayFactory.__dict__[attrname]) == property:
            return IStkGraphicsAGIProcessedImageGlobeOverlayFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsAGIProcessedImageGlobeOverlayFactory.")
    
    def InitializeWithString(self, uri:str) -> "IStkGraphicsAGIProcessedImageGlobeOverlay":
        """Initializes an agi processed image globe overlay with the provided values."""
        with agmarshall.BSTR_arg(uri) as arg_uri, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithString"](arg_uri.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{0d8e18a4-cda4-4b24-9ab0-2f25c83eb32e}", IStkGraphicsAGIProcessedImageGlobeOverlayFactory)
agcls.AgTypeNameMap["IStkGraphicsAGIProcessedImageGlobeOverlayFactory"] = IStkGraphicsAGIProcessedImageGlobeOverlayFactory

class IStkGraphicsAGIProcessedTerrainOverlayFactory(object):
    """A terrain overlay for handling AGI Processed Terrain (PDTT) files."""
    _uuid = "{dfeee7d8-cd40-43a5-b168-843f26b027ea}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_InitializeWithString"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsAGIProcessedTerrainOverlayFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsAGIProcessedTerrainOverlayFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsAGIProcessedTerrainOverlayFactory = agcom.GUID(IStkGraphicsAGIProcessedTerrainOverlayFactory._uuid)
        vtable_offset_local = IStkGraphicsAGIProcessedTerrainOverlayFactory._vtable_offset - 1
        self.__dict__["_InitializeWithString"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsAGIProcessedTerrainOverlayFactory, vtable_offset_local+1, agcom.BSTR, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsAGIProcessedTerrainOverlayFactory.__dict__ and type(IStkGraphicsAGIProcessedTerrainOverlayFactory.__dict__[attrname]) == property:
            return IStkGraphicsAGIProcessedTerrainOverlayFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsAGIProcessedTerrainOverlayFactory.")
    
    def InitializeWithString(self, uri:str) -> "IStkGraphicsAGIProcessedTerrainOverlay":
        """Initializes an agi processed terrain overlay with the provided values."""
        with agmarshall.BSTR_arg(uri) as arg_uri, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithString"](arg_uri.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{dfeee7d8-cd40-43a5-b168-843f26b027ea}", IStkGraphicsAGIProcessedTerrainOverlayFactory)
agcls.AgTypeNameMap["IStkGraphicsAGIProcessedTerrainOverlayFactory"] = IStkGraphicsAGIProcessedTerrainOverlayFactory

class IStkGraphicsAGIRoamImageGlobeOverlayFactory(object):
    """A globe image overlay for handling ROAM (TXM/TXB) files."""
    _uuid = "{709d626f-1b45-448d-ad5c-1ff3cb17410e}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_InitializeWithString"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsAGIRoamImageGlobeOverlayFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsAGIRoamImageGlobeOverlayFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsAGIRoamImageGlobeOverlayFactory = agcom.GUID(IStkGraphicsAGIRoamImageGlobeOverlayFactory._uuid)
        vtable_offset_local = IStkGraphicsAGIRoamImageGlobeOverlayFactory._vtable_offset - 1
        self.__dict__["_InitializeWithString"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsAGIRoamImageGlobeOverlayFactory, vtable_offset_local+1, agcom.BSTR, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsAGIRoamImageGlobeOverlayFactory.__dict__ and type(IStkGraphicsAGIRoamImageGlobeOverlayFactory.__dict__[attrname]) == property:
            return IStkGraphicsAGIRoamImageGlobeOverlayFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsAGIRoamImageGlobeOverlayFactory.")
    
    def InitializeWithString(self, uri:str) -> "IStkGraphicsAGIRoamImageGlobeOverlay":
        """Initializes an agi roam image globe overlay with the provided values."""
        with agmarshall.BSTR_arg(uri) as arg_uri, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithString"](arg_uri.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{709d626f-1b45-448d-ad5c-1ff3cb17410e}", IStkGraphicsAGIRoamImageGlobeOverlayFactory)
agcls.AgTypeNameMap["IStkGraphicsAGIRoamImageGlobeOverlayFactory"] = IStkGraphicsAGIRoamImageGlobeOverlayFactory

class IStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory(object):
    """The Activator class provides methods to load COM plugins that implement custom image globe overlays. For more information about custom image globe overlays, see the STK Programming Interface."""
    _uuid = "{c80d1ae6-db35-4f55-a9a4-131260022535}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory = agcom.GUID(IStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory._uuid)
        vtable_offset_local = IStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory.__dict__ and type(IStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory.__dict__[attrname]) == property:
            return IStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory.")
    
    def Initialize(self) -> "IStkGraphicsCustomImageGlobeOverlayPluginActivator":
        """Initializes a new instance of the Activator type."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{c80d1ae6-db35-4f55-a9a4-131260022535}", IStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory)
agcls.AgTypeNameMap["IStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory"] = IStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory

class IStkGraphicsGeospatialImageGlobeOverlayFactory(object):
    """A globe image overlay for handling <a href='http://www.jpeg.org/jpeg2000/'>JPEG 2000</a> (.jp2), ECW (.ecw), ECWP, and MrSid (.sid) image formats in the WGS84 geographic projection."""
    _uuid = "{77060b41-7b24-4118-ab48-22efb3007c76}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_InitializeWithString"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsGeospatialImageGlobeOverlayFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsGeospatialImageGlobeOverlayFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsGeospatialImageGlobeOverlayFactory = agcom.GUID(IStkGraphicsGeospatialImageGlobeOverlayFactory._uuid)
        vtable_offset_local = IStkGraphicsGeospatialImageGlobeOverlayFactory._vtable_offset - 1
        self.__dict__["_InitializeWithString"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsGeospatialImageGlobeOverlayFactory, vtable_offset_local+1, agcom.BSTR, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsGeospatialImageGlobeOverlayFactory.__dict__ and type(IStkGraphicsGeospatialImageGlobeOverlayFactory.__dict__[attrname]) == property:
            return IStkGraphicsGeospatialImageGlobeOverlayFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsGeospatialImageGlobeOverlayFactory.")
    
    def InitializeWithString(self, uri:str) -> "IStkGraphicsGeospatialImageGlobeOverlay":
        """Initializes a geospatial image globe overlay with the provided values."""
        with agmarshall.BSTR_arg(uri) as arg_uri, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithString"](arg_uri.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{77060b41-7b24-4118-ab48-22efb3007c76}", IStkGraphicsGeospatialImageGlobeOverlayFactory)
agcls.AgTypeNameMap["IStkGraphicsGeospatialImageGlobeOverlayFactory"] = IStkGraphicsGeospatialImageGlobeOverlayFactory

class IStkGraphicsProjectedRasterOverlayFactory(object):
    """A globe image overlay which projects a raster onto the terrain or surface of the central body. You can also enable projection onto models by setting projected raster model projection to true for a Scene..."""
    _uuid = "{616abf78-55f7-41a7-a6b7-2da4ae822856}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_GetSupported"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsProjectedRasterOverlayFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsProjectedRasterOverlayFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsProjectedRasterOverlayFactory = agcom.GUID(IStkGraphicsProjectedRasterOverlayFactory._uuid)
        vtable_offset_local = IStkGraphicsProjectedRasterOverlayFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsProjectedRasterOverlayFactory, vtable_offset_local+1, agcom.PVOID, agcom.PVOID, POINTER(agcom.PVOID))
        self.__dict__["_GetSupported"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsProjectedRasterOverlayFactory, vtable_offset_local+2, POINTER(agcom.VARIANT_BOOL))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsProjectedRasterOverlayFactory.__dict__ and type(IStkGraphicsProjectedRasterOverlayFactory.__dict__[attrname]) == property:
            return IStkGraphicsProjectedRasterOverlayFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsProjectedRasterOverlayFactory.")
    
    def Initialize(self, raster:"IStkGraphicsRaster", projection:"IStkGraphicsProjection") -> "IStkGraphicsProjectedRasterOverlay":
        """Initializes a new instance."""
        with agmarshall.AgInterface_in_arg(raster, IStkGraphicsRaster) as arg_raster, \
             agmarshall.AgInterface_in_arg(projection, IStkGraphicsProjection) as arg_projection, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](arg_raster.COM_val, arg_projection.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Supported(self) -> bool:
        """Gets whether or not the video card supports the projected raster overlay."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSupported"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{616abf78-55f7-41a7-a6b7-2da4ae822856}", IStkGraphicsProjectedRasterOverlayFactory)
agcls.AgTypeNameMap["IStkGraphicsProjectedRasterOverlayFactory"] = IStkGraphicsProjectedRasterOverlayFactory

class IStkGraphicsProjectionFactory(object):
    """A projection represents a simplified camera with a position, orientation, and field of view horizontal and field of view vertical..."""
    _uuid = "{db047d3d-5afd-4b64-b396-034fd95ec57a}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithData"] = _raise_uninitialized_error
        self.__dict__["_InitializeFromProjection"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsProjectionFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsProjectionFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsProjectionFactory = agcom.GUID(IStkGraphicsProjectionFactory._uuid)
        vtable_offset_local = IStkGraphicsProjectionFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsProjectionFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithData"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsProjectionFactory, vtable_offset_local+2, POINTER(agcom.SAFEARRAY), agcom.PVOID, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID))
        self.__dict__["_InitializeFromProjection"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsProjectionFactory, vtable_offset_local+3, agcom.PVOID, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsProjectionFactory.__dict__ and type(IStkGraphicsProjectionFactory.__dict__[attrname]) == property:
            return IStkGraphicsProjectionFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsProjectionFactory.")
    
    def Initialize(self) -> "IStkGraphicsProjection":
        """Initializes a new instance."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithData(self, position:list, orientation:"IOrientation", fieldOfViewHorizontal:float, fieldOfViewVertical:float, nearPlane:float, farPlane:float) -> "IStkGraphicsProjection":
        """Initializes a new instance."""
        with agmarshall.SAFEARRAY_arg(position) as arg_position, \
             agmarshall.AgInterface_in_arg(orientation, IOrientation) as arg_orientation, \
             agmarshall.DOUBLE_arg(fieldOfViewHorizontal) as arg_fieldOfViewHorizontal, \
             agmarshall.DOUBLE_arg(fieldOfViewVertical) as arg_fieldOfViewVertical, \
             agmarshall.DOUBLE_arg(nearPlane) as arg_nearPlane, \
             agmarshall.DOUBLE_arg(farPlane) as arg_farPlane, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithData"](byref(arg_position.COM_val), arg_orientation.COM_val, arg_fieldOfViewHorizontal.COM_val, arg_fieldOfViewVertical.COM_val, arg_nearPlane.COM_val, arg_farPlane.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeFromProjection(self, projection:"IStkGraphicsProjection") -> "IStkGraphicsProjection":
        """Initializes a new instance from another projection."""
        with agmarshall.AgInterface_in_arg(projection, IStkGraphicsProjection) as arg_projection, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeFromProjection"](arg_projection.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{db047d3d-5afd-4b64-b396-034fd95ec57a}", IStkGraphicsProjectionFactory)
agcls.AgTypeNameMap["IStkGraphicsProjectionFactory"] = IStkGraphicsProjectionFactory

class IStkGraphicsAltitudeDisplayConditionFactory(object):
    """Defines an inclusive altitude interval that determines when an object is rendered based on the camera's altitude relative to a central body."""
    _uuid = "{ee1efbf0-ddbf-41ff-9257-ff73e164d27a}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithAltitudes"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithCentralBodyAndAltitudes"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsAltitudeDisplayConditionFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsAltitudeDisplayConditionFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsAltitudeDisplayConditionFactory = agcom.GUID(IStkGraphicsAltitudeDisplayConditionFactory._uuid)
        vtable_offset_local = IStkGraphicsAltitudeDisplayConditionFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsAltitudeDisplayConditionFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithAltitudes"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsAltitudeDisplayConditionFactory, vtable_offset_local+2, agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithCentralBodyAndAltitudes"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsAltitudeDisplayConditionFactory, vtable_offset_local+3, agcom.BSTR, agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsAltitudeDisplayConditionFactory.__dict__ and type(IStkGraphicsAltitudeDisplayConditionFactory.__dict__[attrname]) == property:
            return IStkGraphicsAltitudeDisplayConditionFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsAltitudeDisplayConditionFactory.")
    
    def Initialize(self) -> "IStkGraphicsAltitudeDisplayCondition":
        """Initializes a default altitude display condition. With this constructor, an object is always rendered regardless of the camera's altitude."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithAltitudes(self, minimumAltitude:float, maximumAltitude:float) -> "IStkGraphicsAltitudeDisplayCondition":
        """Initializes an altitude display condition with the inclusive altitude interval [minimumAltitude, maximumAltitude]..."""
        with agmarshall.DOUBLE_arg(minimumAltitude) as arg_minimumAltitude, \
             agmarshall.DOUBLE_arg(maximumAltitude) as arg_maximumAltitude, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithAltitudes"](arg_minimumAltitude.COM_val, arg_maximumAltitude.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithCentralBodyAndAltitudes(self, centralBody:str, minimumAltitude:float, maximumAltitude:float) -> "IStkGraphicsAltitudeDisplayCondition":
        """Initializes an altitude display condition with the inclusive altitude interval [minimumAltitude, maximumAltitude]..."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.DOUBLE_arg(minimumAltitude) as arg_minimumAltitude, \
             agmarshall.DOUBLE_arg(maximumAltitude) as arg_maximumAltitude, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithCentralBodyAndAltitudes"](arg_centralBody.COM_val, arg_minimumAltitude.COM_val, arg_maximumAltitude.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{ee1efbf0-ddbf-41ff-9257-ff73e164d27a}", IStkGraphicsAltitudeDisplayConditionFactory)
agcls.AgTypeNameMap["IStkGraphicsAltitudeDisplayConditionFactory"] = IStkGraphicsAltitudeDisplayConditionFactory

class IStkGraphicsAxesPrimitiveFactory(object):
    """Renders an axes in the 3D scene."""
    _uuid = "{ff0a767c-8a84-47f9-a108-32cc0bff8366}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_InitializeWithDirection"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsAxesPrimitiveFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsAxesPrimitiveFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsAxesPrimitiveFactory = agcom.GUID(IStkGraphicsAxesPrimitiveFactory._uuid)
        vtable_offset_local = IStkGraphicsAxesPrimitiveFactory._vtable_offset - 1
        self.__dict__["_InitializeWithDirection"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsAxesPrimitiveFactory, vtable_offset_local+1, agcom.PVOID, agcom.PVOID, agcom.PVOID, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsAxesPrimitiveFactory.__dict__ and type(IStkGraphicsAxesPrimitiveFactory.__dict__[attrname]) == property:
            return IStkGraphicsAxesPrimitiveFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsAxesPrimitiveFactory.")
    
    def InitializeWithDirection(self, sys:"ICrdnSystem", axes:"ICrdnAxes", font:"IStkGraphicsGraphicsFont") -> "IStkGraphicsAxesPrimitive":
        """Initializes an axes primitive with the specified ISystem sys as its source."""
        with agmarshall.AgInterface_in_arg(sys, ICrdnSystem) as arg_sys, \
             agmarshall.AgInterface_in_arg(axes, ICrdnAxes) as arg_axes, \
             agmarshall.AgInterface_in_arg(font, IStkGraphicsGraphicsFont) as arg_font, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithDirection"](arg_sys.COM_val, arg_axes.COM_val, arg_font.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{ff0a767c-8a84-47f9-a108-32cc0bff8366}", IStkGraphicsAxesPrimitiveFactory)
agcls.AgTypeNameMap["IStkGraphicsAxesPrimitiveFactory"] = IStkGraphicsAxesPrimitiveFactory

class IStkGraphicsCompositeDisplayConditionFactory(object):
    """A composite of display conditions combined using a binary logic operation. For example, several time interval display condition objects can be added to a composite..."""
    _uuid = "{a2ca541e-a860-4e47-b0e9-f0e973733e67}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsCompositeDisplayConditionFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsCompositeDisplayConditionFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsCompositeDisplayConditionFactory = agcom.GUID(IStkGraphicsCompositeDisplayConditionFactory._uuid)
        vtable_offset_local = IStkGraphicsCompositeDisplayConditionFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCompositeDisplayConditionFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsCompositeDisplayConditionFactory.__dict__ and type(IStkGraphicsCompositeDisplayConditionFactory.__dict__[attrname]) == property:
            return IStkGraphicsCompositeDisplayConditionFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsCompositeDisplayConditionFactory.")
    
    def Initialize(self) -> "IStkGraphicsCompositeDisplayCondition":
        """Initializes an empty composite display condition."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{a2ca541e-a860-4e47-b0e9-f0e973733e67}", IStkGraphicsCompositeDisplayConditionFactory)
agcls.AgTypeNameMap["IStkGraphicsCompositeDisplayConditionFactory"] = IStkGraphicsCompositeDisplayConditionFactory

class IStkGraphicsCompositePrimitiveFactory(object):
    """ A primitive that is composed of multiple other primitives. Since composites can contain other composites, they are commonly used to build hierarchies of primitives to efficiently evaluate display conditions..."""
    _uuid = "{6828c6a1-7018-4b65-90af-8bb36f478a6d}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsCompositePrimitiveFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsCompositePrimitiveFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsCompositePrimitiveFactory = agcom.GUID(IStkGraphicsCompositePrimitiveFactory._uuid)
        vtable_offset_local = IStkGraphicsCompositePrimitiveFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsCompositePrimitiveFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsCompositePrimitiveFactory.__dict__ and type(IStkGraphicsCompositePrimitiveFactory.__dict__[attrname]) == property:
            return IStkGraphicsCompositePrimitiveFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsCompositePrimitiveFactory.")
    
    def Initialize(self) -> "IStkGraphicsCompositePrimitive":
        """Initializes a default composite primitive."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{6828c6a1-7018-4b65-90af-8bb36f478a6d}", IStkGraphicsCompositePrimitiveFactory)
agcls.AgTypeNameMap["IStkGraphicsCompositePrimitiveFactory"] = IStkGraphicsCompositePrimitiveFactory

class IStkGraphicsConstantDisplayConditionFactory(object):
    """A display condition that evaluates to a user-defined value. This is commonly used to hide primitives by assigning to a primitive a display condition that always returns false."""
    _uuid = "{4c5226f9-a98e-4af0-a9a4-1e5926908d4c}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeDisplay"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsConstantDisplayConditionFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsConstantDisplayConditionFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsConstantDisplayConditionFactory = agcom.GUID(IStkGraphicsConstantDisplayConditionFactory._uuid)
        vtable_offset_local = IStkGraphicsConstantDisplayConditionFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsConstantDisplayConditionFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeDisplay"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsConstantDisplayConditionFactory, vtable_offset_local+2, agcom.VARIANT_BOOL, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsConstantDisplayConditionFactory.__dict__ and type(IStkGraphicsConstantDisplayConditionFactory.__dict__[attrname]) == property:
            return IStkGraphicsConstantDisplayConditionFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsConstantDisplayConditionFactory.")
    
    def Initialize(self) -> "IStkGraphicsConstantDisplayCondition":
        """Initializes a default constant display condition. display is set to false so when this display condition is assigned to an object, such as a primitive, the object is not rendered."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeDisplay(self, display:bool) -> "IStkGraphicsConstantDisplayCondition":
        """Initializes a constant display condition with the value the display condition evaluates to."""
        with agmarshall.VARIANT_BOOL_arg(display) as arg_display, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeDisplay"](arg_display.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{4c5226f9-a98e-4af0-a9a4-1e5926908d4c}", IStkGraphicsConstantDisplayConditionFactory)
agcls.AgTypeNameMap["IStkGraphicsConstantDisplayConditionFactory"] = IStkGraphicsConstantDisplayConditionFactory

class IStkGraphicsDistanceDisplayConditionFactory(object):
    """Defines an inclusive distance interval that determines when an object, such as a primitive, is rendered based on the distance from the camera to the object."""
    _uuid = "{d7dda546-31d2-4bbd-a44d-b9dc413a2412}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithDistances"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsDistanceDisplayConditionFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsDistanceDisplayConditionFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsDistanceDisplayConditionFactory = agcom.GUID(IStkGraphicsDistanceDisplayConditionFactory._uuid)
        vtable_offset_local = IStkGraphicsDistanceDisplayConditionFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsDistanceDisplayConditionFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithDistances"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsDistanceDisplayConditionFactory, vtable_offset_local+2, agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsDistanceDisplayConditionFactory.__dict__ and type(IStkGraphicsDistanceDisplayConditionFactory.__dict__[attrname]) == property:
            return IStkGraphicsDistanceDisplayConditionFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsDistanceDisplayConditionFactory.")
    
    def Initialize(self) -> "IStkGraphicsDistanceDisplayCondition":
        """Initializes a default distance display condition. minimum distance is set to 0 and maximum distance is set to Double.MaxValue. With this interval, an object is always rendered regardless of its distance to the camera."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithDistances(self, minimumDistance:float, maximumDistance:float) -> "IStkGraphicsDistanceDisplayCondition":
        """Initializes a distance display condition with the inclusive distance interval [minimumDistance, maximumDistance]..."""
        with agmarshall.DOUBLE_arg(minimumDistance) as arg_minimumDistance, \
             agmarshall.DOUBLE_arg(maximumDistance) as arg_maximumDistance, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithDistances"](arg_minimumDistance.COM_val, arg_maximumDistance.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{d7dda546-31d2-4bbd-a44d-b9dc413a2412}", IStkGraphicsDistanceDisplayConditionFactory)
agcls.AgTypeNameMap["IStkGraphicsDistanceDisplayConditionFactory"] = IStkGraphicsDistanceDisplayConditionFactory

class IStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory(object):
    """Defines an inclusive distance interval that determines when an object, such as a primitive, is rendered based on the distance from the camera to the globe overlay..."""
    _uuid = "{05bc2dbc-8533-467a-85d2-720c583f1c7e}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithDistances"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory = agcom.GUID(IStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory._uuid)
        vtable_offset_local = IStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithDistances"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory, vtable_offset_local+2, agcom.PVOID, agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory.__dict__ and type(IStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory.__dict__[attrname]) == property:
            return IStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory.")
    
    def Initialize(self) -> "IStkGraphicsDistanceToGlobeOverlayDisplayCondition":
        """Initializes a default distance to globe overlay display condition. With this constructor, an object is always rendered regardless of the camera's distance to the globe overlay."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithDistances(self, globeOverlay:"IStkGraphicsGlobeOverlay", minimumDistance:float, maximumDistance:float) -> "IStkGraphicsDistanceToGlobeOverlayDisplayCondition":
        """Initializes a distance display condition with the globe overlay and the inclusive distance interval [minimumDistance, maximumDistance]..."""
        with agmarshall.AgInterface_in_arg(globeOverlay, IStkGraphicsGlobeOverlay) as arg_globeOverlay, \
             agmarshall.DOUBLE_arg(minimumDistance) as arg_minimumDistance, \
             agmarshall.DOUBLE_arg(maximumDistance) as arg_maximumDistance, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithDistances"](arg_globeOverlay.COM_val, arg_minimumDistance.COM_val, arg_maximumDistance.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{05bc2dbc-8533-467a-85d2-720c583f1c7e}", IStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory)
agcls.AgTypeNameMap["IStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory"] = IStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory

class IStkGraphicsDistanceToPositionDisplayConditionFactory(object):
    """Defines an inclusive distance interval that determines when an object, such as a primitive, is rendered based on the distance from the camera to a position defined in the given reference frame."""
    _uuid = "{913dd9f7-a91b-4346-b233-180126a8d1bd}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithDistances"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithReferenceFrameAndDistances"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsDistanceToPositionDisplayConditionFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsDistanceToPositionDisplayConditionFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsDistanceToPositionDisplayConditionFactory = agcom.GUID(IStkGraphicsDistanceToPositionDisplayConditionFactory._uuid)
        vtable_offset_local = IStkGraphicsDistanceToPositionDisplayConditionFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsDistanceToPositionDisplayConditionFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithDistances"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsDistanceToPositionDisplayConditionFactory, vtable_offset_local+2, POINTER(agcom.SAFEARRAY), agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithReferenceFrameAndDistances"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsDistanceToPositionDisplayConditionFactory, vtable_offset_local+3, agcom.PVOID, POINTER(agcom.SAFEARRAY), agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsDistanceToPositionDisplayConditionFactory.__dict__ and type(IStkGraphicsDistanceToPositionDisplayConditionFactory.__dict__[attrname]) == property:
            return IStkGraphicsDistanceToPositionDisplayConditionFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsDistanceToPositionDisplayConditionFactory.")
    
    def Initialize(self) -> "IStkGraphicsDistanceToPositionDisplayCondition":
        """Initializes a default distance to position display condition. With this constructor, an object is always rendered regardless of the camera's distance to the position."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithDistances(self, position:list, minimumDistance:float, maximumDistance:float) -> "IStkGraphicsDistanceToPositionDisplayCondition":
        """Initializes a distance display condition with the inclusive distance interval [minimumDistance, maximumDistance]..."""
        with agmarshall.SAFEARRAY_arg(position) as arg_position, \
             agmarshall.DOUBLE_arg(minimumDistance) as arg_minimumDistance, \
             agmarshall.DOUBLE_arg(maximumDistance) as arg_maximumDistance, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithDistances"](byref(arg_position.COM_val), arg_minimumDistance.COM_val, arg_maximumDistance.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithReferenceFrameAndDistances(self, referenceFrame:"ICrdnSystem", position:list, minimumDistance:float, maximumDistance:float) -> "IStkGraphicsDistanceToPositionDisplayCondition":
        """Initializes a distance display condition with the inclusive distance interval [minimumDistance, maximumDistance]..."""
        with agmarshall.AgInterface_in_arg(referenceFrame, ICrdnSystem) as arg_referenceFrame, \
             agmarshall.SAFEARRAY_arg(position) as arg_position, \
             agmarshall.DOUBLE_arg(minimumDistance) as arg_minimumDistance, \
             agmarshall.DOUBLE_arg(maximumDistance) as arg_maximumDistance, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithReferenceFrameAndDistances"](arg_referenceFrame.COM_val, byref(arg_position.COM_val), arg_minimumDistance.COM_val, arg_maximumDistance.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{913dd9f7-a91b-4346-b233-180126a8d1bd}", IStkGraphicsDistanceToPositionDisplayConditionFactory)
agcls.AgTypeNameMap["IStkGraphicsDistanceToPositionDisplayConditionFactory"] = IStkGraphicsDistanceToPositionDisplayConditionFactory

class IStkGraphicsDistanceToPrimitiveDisplayConditionFactory(object):
    """Defines an inclusive distance interval that determines when an object, such as a screen overlay, is rendered based on the distance from the camera to the primitive..."""
    _uuid = "{f103b596-f16c-4ad6-8242-bef8ecb83383}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithDistances"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsDistanceToPrimitiveDisplayConditionFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsDistanceToPrimitiveDisplayConditionFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsDistanceToPrimitiveDisplayConditionFactory = agcom.GUID(IStkGraphicsDistanceToPrimitiveDisplayConditionFactory._uuid)
        vtable_offset_local = IStkGraphicsDistanceToPrimitiveDisplayConditionFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsDistanceToPrimitiveDisplayConditionFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithDistances"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsDistanceToPrimitiveDisplayConditionFactory, vtable_offset_local+2, agcom.PVOID, agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsDistanceToPrimitiveDisplayConditionFactory.__dict__ and type(IStkGraphicsDistanceToPrimitiveDisplayConditionFactory.__dict__[attrname]) == property:
            return IStkGraphicsDistanceToPrimitiveDisplayConditionFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsDistanceToPrimitiveDisplayConditionFactory.")
    
    def Initialize(self) -> "IStkGraphicsDistanceToPrimitiveDisplayCondition":
        """Initializes a default distance to primitive display condition. With this constructor, an object is always rendered regardless of the camera's distance to the primitive."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithDistances(self, primitive:"IStkGraphicsPrimitive", minimumDistance:float, maximumDistance:float) -> "IStkGraphicsDistanceToPrimitiveDisplayCondition":
        """Initializes a distance to primitive display condition with the inclusive distance interval [minimumDistance, maximumDistance]..."""
        with agmarshall.AgInterface_in_arg(primitive, IStkGraphicsPrimitive) as arg_primitive, \
             agmarshall.DOUBLE_arg(minimumDistance) as arg_minimumDistance, \
             agmarshall.DOUBLE_arg(maximumDistance) as arg_maximumDistance, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithDistances"](arg_primitive.COM_val, arg_minimumDistance.COM_val, arg_maximumDistance.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{f103b596-f16c-4ad6-8242-bef8ecb83383}", IStkGraphicsDistanceToPrimitiveDisplayConditionFactory)
agcls.AgTypeNameMap["IStkGraphicsDistanceToPrimitiveDisplayConditionFactory"] = IStkGraphicsDistanceToPrimitiveDisplayConditionFactory

class IStkGraphicsDurationPathPrimitiveUpdatePolicyFactory(object):
    """path primitive update policy that removes points from remove location after a given duration."""
    _uuid = "{4ea0bb3e-5620-4a74-b721-6b0000eafdc2}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithParameters"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsDurationPathPrimitiveUpdatePolicyFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsDurationPathPrimitiveUpdatePolicyFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsDurationPathPrimitiveUpdatePolicyFactory = agcom.GUID(IStkGraphicsDurationPathPrimitiveUpdatePolicyFactory._uuid)
        vtable_offset_local = IStkGraphicsDurationPathPrimitiveUpdatePolicyFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsDurationPathPrimitiveUpdatePolicyFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithParameters"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsDurationPathPrimitiveUpdatePolicyFactory, vtable_offset_local+2, agcom.DOUBLE, agcom.LONG, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsDurationPathPrimitiveUpdatePolicyFactory.__dict__ and type(IStkGraphicsDurationPathPrimitiveUpdatePolicyFactory.__dict__[attrname]) == property:
            return IStkGraphicsDurationPathPrimitiveUpdatePolicyFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsDurationPathPrimitiveUpdatePolicyFactory.")
    
    def Initialize(self) -> "IStkGraphicsDurationPathPrimitiveUpdatePolicy":
        """Constructs a default update policy. This is equivalent to constructing a policy with duration set to 0 and a remove location of Front."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithParameters(self, duration:float, removeLocation:"AgEStkGraphicsPathPrimitiveRemoveLocation") -> "IStkGraphicsDurationPathPrimitiveUpdatePolicy":
        """Initializes a policy with the specified duration and removeLocation."""
        with agmarshall.DOUBLE_arg(duration) as arg_duration, \
             agmarshall.AgEnum_arg(AgEStkGraphicsPathPrimitiveRemoveLocation, removeLocation) as arg_removeLocation, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithParameters"](arg_duration.COM_val, arg_removeLocation.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{4ea0bb3e-5620-4a74-b721-6b0000eafdc2}", IStkGraphicsDurationPathPrimitiveUpdatePolicyFactory)
agcls.AgTypeNameMap["IStkGraphicsDurationPathPrimitiveUpdatePolicyFactory"] = IStkGraphicsDurationPathPrimitiveUpdatePolicyFactory

class IStkGraphicsGlobeImageOverlayInitializer(object):
    """A globe overlay that shows an image."""
    _uuid = "{cf06dc51-75ad-45a2-a1ff-9e3b550be24f}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetMoreThanOneImageGlobeOverlaySupported"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsGlobeImageOverlayInitializer._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsGlobeImageOverlayInitializer from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsGlobeImageOverlayInitializer = agcom.GUID(IStkGraphicsGlobeImageOverlayInitializer._uuid)
        vtable_offset_local = IStkGraphicsGlobeImageOverlayInitializer._vtable_offset - 1
        self.__dict__["_GetMoreThanOneImageGlobeOverlaySupported"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsGlobeImageOverlayInitializer, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsGlobeImageOverlayInitializer.__dict__ and type(IStkGraphicsGlobeImageOverlayInitializer.__dict__[attrname]) == property:
            return IStkGraphicsGlobeImageOverlayInitializer.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsGlobeImageOverlayInitializer.")
    
    @property
    def MoreThanOneImageGlobeOverlaySupported(self) -> bool:
        """Gets whether or not the video card allows for more than one image globe overlay globe image overlay to be added."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMoreThanOneImageGlobeOverlaySupported"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{cf06dc51-75ad-45a2-a1ff-9e3b550be24f}", IStkGraphicsGlobeImageOverlayInitializer)
agcls.AgTypeNameMap["IStkGraphicsGlobeImageOverlayInitializer"] = IStkGraphicsGlobeImageOverlayInitializer

class IStkGraphicsGraphicsFontFactory(object):
    """A font that is suitable for use with the text batch primitive. For best performance, avoid creating duplicate font objects. Instead assign the same font object to several text batch primitives."""
    _uuid = "{1a87aeee-c00b-462b-bf99-90cb94ae1eb7}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_InitializeWithNameSizeFontStyleOutline"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithNameSize"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsGraphicsFontFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsGraphicsFontFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsGraphicsFontFactory = agcom.GUID(IStkGraphicsGraphicsFontFactory._uuid)
        vtable_offset_local = IStkGraphicsGraphicsFontFactory._vtable_offset - 1
        self.__dict__["_InitializeWithNameSizeFontStyleOutline"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsGraphicsFontFactory, vtable_offset_local+1, agcom.BSTR, agcom.INT, agcom.LONG, agcom.VARIANT_BOOL, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithNameSize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsGraphicsFontFactory, vtable_offset_local+2, agcom.BSTR, agcom.INT, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsGraphicsFontFactory.__dict__ and type(IStkGraphicsGraphicsFontFactory.__dict__[attrname]) == property:
            return IStkGraphicsGraphicsFontFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsGraphicsFontFactory.")
    
    def InitializeWithNameSizeFontStyleOutline(self, name:str, size:int, fontStyle:"AgEStkGraphicsFontStyle", outline:bool) -> "IStkGraphicsGraphicsFont":
        """Initializes a graphics font with the given arguments."""
        with agmarshall.BSTR_arg(name) as arg_name, \
             agmarshall.INT_arg(size) as arg_size, \
             agmarshall.AgEnum_arg(AgEStkGraphicsFontStyle, fontStyle) as arg_fontStyle, \
             agmarshall.VARIANT_BOOL_arg(outline) as arg_outline, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithNameSizeFontStyleOutline"](arg_name.COM_val, arg_size.COM_val, arg_fontStyle.COM_val, arg_outline.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithNameSize(self, name:str, size:int) -> "IStkGraphicsGraphicsFont":
        """Initializes a graphics font with the typeface name and size."""
        with agmarshall.BSTR_arg(name) as arg_name, \
             agmarshall.INT_arg(size) as arg_size, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithNameSize"](arg_name.COM_val, arg_size.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{1a87aeee-c00b-462b-bf99-90cb94ae1eb7}", IStkGraphicsGraphicsFontFactory)
agcls.AgTypeNameMap["IStkGraphicsGraphicsFontFactory"] = IStkGraphicsGraphicsFontFactory

class IStkGraphicsGreatArcInterpolatorFactory(object):
    """The great arc interpolator computes interpolated positions along a great arc. A great arc is the shortest path between two positions on an ellipsoid."""
    _uuid = "{35afb348-117f-4db0-87ec-643b4b0364dd}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithCentralBody"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithCentralBodyAndGranularity"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsGreatArcInterpolatorFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsGreatArcInterpolatorFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsGreatArcInterpolatorFactory = agcom.GUID(IStkGraphicsGreatArcInterpolatorFactory._uuid)
        vtable_offset_local = IStkGraphicsGreatArcInterpolatorFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsGreatArcInterpolatorFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithCentralBody"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsGreatArcInterpolatorFactory, vtable_offset_local+2, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithCentralBodyAndGranularity"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsGreatArcInterpolatorFactory, vtable_offset_local+3, agcom.BSTR, agcom.DOUBLE, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsGreatArcInterpolatorFactory.__dict__ and type(IStkGraphicsGreatArcInterpolatorFactory.__dict__[attrname]) == property:
            return IStkGraphicsGreatArcInterpolatorFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsGreatArcInterpolatorFactory.")
    
    def Initialize(self) -> "IStkGraphicsGreatArcInterpolator":
        """Initializes a default great arc interpolator. This is equivalent to constructing a great arc interpolator with a central body equal to an instance of earth central body and a granularity of 1 degree."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithCentralBody(self, centralBody:str) -> "IStkGraphicsGreatArcInterpolator":
        """Initializes a great arc interpolator with the specified centralBody and a granularity of 1 degree."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithCentralBody"](arg_centralBody.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithCentralBodyAndGranularity(self, centralBody:str, granularity:float) -> "IStkGraphicsGreatArcInterpolator":
        """Initializes a great arc interpolator with the specified centralBody and granularity."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.DOUBLE_arg(granularity) as arg_granularity, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithCentralBodyAndGranularity"](arg_centralBody.COM_val, arg_granularity.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{35afb348-117f-4db0-87ec-643b4b0364dd}", IStkGraphicsGreatArcInterpolatorFactory)
agcls.AgTypeNameMap["IStkGraphicsGreatArcInterpolatorFactory"] = IStkGraphicsGreatArcInterpolatorFactory

class IStkGraphicsAlphaFromLuminanceFilterFactory(object):
    """Adds an alpha band to the source raster derived from the luminance of the raster's color bands."""
    _uuid = "{2317f609-231f-4266-b38c-f4fa812a0306}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsAlphaFromLuminanceFilterFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsAlphaFromLuminanceFilterFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsAlphaFromLuminanceFilterFactory = agcom.GUID(IStkGraphicsAlphaFromLuminanceFilterFactory._uuid)
        vtable_offset_local = IStkGraphicsAlphaFromLuminanceFilterFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsAlphaFromLuminanceFilterFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsAlphaFromLuminanceFilterFactory.__dict__ and type(IStkGraphicsAlphaFromLuminanceFilterFactory.__dict__[attrname]) == property:
            return IStkGraphicsAlphaFromLuminanceFilterFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsAlphaFromLuminanceFilterFactory.")
    
    def Initialize(self) -> "IStkGraphicsAlphaFromLuminanceFilter":
        """Initializes a new instance."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{2317f609-231f-4266-b38c-f4fa812a0306}", IStkGraphicsAlphaFromLuminanceFilterFactory)
agcls.AgTypeNameMap["IStkGraphicsAlphaFromLuminanceFilterFactory"] = IStkGraphicsAlphaFromLuminanceFilterFactory

class IStkGraphicsAlphaFromPixelFilterFactory(object):
    """Adds an alpha band to the source raster based on the value of its first pixel. All pixels in the source raster that are the same color as the first pixel will be made transparent."""
    _uuid = "{f9802000-aea6-453d-b797-d68fae4a491b}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsAlphaFromPixelFilterFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsAlphaFromPixelFilterFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsAlphaFromPixelFilterFactory = agcom.GUID(IStkGraphicsAlphaFromPixelFilterFactory._uuid)
        vtable_offset_local = IStkGraphicsAlphaFromPixelFilterFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsAlphaFromPixelFilterFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsAlphaFromPixelFilterFactory.__dict__ and type(IStkGraphicsAlphaFromPixelFilterFactory.__dict__[attrname]) == property:
            return IStkGraphicsAlphaFromPixelFilterFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsAlphaFromPixelFilterFactory.")
    
    def Initialize(self) -> "IStkGraphicsAlphaFromPixelFilter":
        """Initializes a new instance."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{f9802000-aea6-453d-b797-d68fae4a491b}", IStkGraphicsAlphaFromPixelFilterFactory)
agcls.AgTypeNameMap["IStkGraphicsAlphaFromPixelFilterFactory"] = IStkGraphicsAlphaFromPixelFilterFactory

class IStkGraphicsAlphaFromRasterFilterFactory(object):
    """Adds an alpha band to the source raster derived from the color bands or alpha of another raster. This filter can be used to apply an alpha mask to the source raster."""
    _uuid = "{f7139fc1-f8f8-4bd2-a33f-9e06fdb4f63c}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithRaster"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsAlphaFromRasterFilterFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsAlphaFromRasterFilterFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsAlphaFromRasterFilterFactory = agcom.GUID(IStkGraphicsAlphaFromRasterFilterFactory._uuid)
        vtable_offset_local = IStkGraphicsAlphaFromRasterFilterFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsAlphaFromRasterFilterFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithRaster"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsAlphaFromRasterFilterFactory, vtable_offset_local+2, agcom.PVOID, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsAlphaFromRasterFilterFactory.__dict__ and type(IStkGraphicsAlphaFromRasterFilterFactory.__dict__[attrname]) == property:
            return IStkGraphicsAlphaFromRasterFilterFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsAlphaFromRasterFilterFactory.")
    
    def Initialize(self) -> "IStkGraphicsAlphaFromRasterFilter":
        """Initializes a new instance."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithRaster(self, raster:"IStkGraphicsRaster") -> "IStkGraphicsAlphaFromRasterFilter":
        """Initializes a new instance with the raster that the source raster will use to derive an alpha band."""
        with agmarshall.AgInterface_in_arg(raster, IStkGraphicsRaster) as arg_raster, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithRaster"](arg_raster.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{f7139fc1-f8f8-4bd2-a33f-9e06fdb4f63c}", IStkGraphicsAlphaFromRasterFilterFactory)
agcls.AgTypeNameMap["IStkGraphicsAlphaFromRasterFilterFactory"] = IStkGraphicsAlphaFromRasterFilterFactory

class IStkGraphicsBandExtractFilterFactory(object):
    """Extracts a band or set of bands from the source raster. The extract format property specifies the bands and the order of the bands that will be extracted."""
    _uuid = "{76a65e3a-1868-4312-8a66-8e16a525effd}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithBand"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithFormat"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsBandExtractFilterFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsBandExtractFilterFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsBandExtractFilterFactory = agcom.GUID(IStkGraphicsBandExtractFilterFactory._uuid)
        vtable_offset_local = IStkGraphicsBandExtractFilterFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsBandExtractFilterFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithBand"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsBandExtractFilterFactory, vtable_offset_local+2, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithFormat"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsBandExtractFilterFactory, vtable_offset_local+3, agcom.LONG, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsBandExtractFilterFactory.__dict__ and type(IStkGraphicsBandExtractFilterFactory.__dict__[attrname]) == property:
            return IStkGraphicsBandExtractFilterFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsBandExtractFilterFactory.")
    
    def Initialize(self) -> "IStkGraphicsBandExtractFilter":
        """Initializes a new instance."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithBand(self, rasterBand:"AgEStkGraphicsRasterBand") -> "IStkGraphicsBandExtractFilter":
        """Initializes a new instance with the raster band to be extracted from the source raster."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsRasterBand, rasterBand) as arg_rasterBand, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithBand"](arg_rasterBand.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithFormat(self, rasterFormat:"AgEStkGraphicsRasterFormat") -> "IStkGraphicsBandExtractFilter":
        """Initializes a new instance with the raster format containing the bands to be extracted from the source raster."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsRasterFormat, rasterFormat) as arg_rasterFormat, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithFormat"](arg_rasterFormat.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{76a65e3a-1868-4312-8a66-8e16a525effd}", IStkGraphicsBandExtractFilterFactory)
agcls.AgTypeNameMap["IStkGraphicsBandExtractFilterFactory"] = IStkGraphicsBandExtractFilterFactory

class IStkGraphicsBandOrderFilterFactory(object):
    """Reorders or swizzles the bands of the source raster to match the band order of the raster format specified by the band order property. When maintain raster format is true, the source raster's format is maintained after swizzling."""
    _uuid = "{1bfcf1dd-1ada-47b7-829b-ea60fc04b61d}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithOrder"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithOrderAndBool"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsBandOrderFilterFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsBandOrderFilterFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsBandOrderFilterFactory = agcom.GUID(IStkGraphicsBandOrderFilterFactory._uuid)
        vtable_offset_local = IStkGraphicsBandOrderFilterFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsBandOrderFilterFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithOrder"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsBandOrderFilterFactory, vtable_offset_local+2, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithOrderAndBool"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsBandOrderFilterFactory, vtable_offset_local+3, agcom.LONG, agcom.VARIANT_BOOL, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsBandOrderFilterFactory.__dict__ and type(IStkGraphicsBandOrderFilterFactory.__dict__[attrname]) == property:
            return IStkGraphicsBandOrderFilterFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsBandOrderFilterFactory.")
    
    def Initialize(self) -> "IStkGraphicsBandOrderFilter":
        """Initializes a new instance."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithOrder(self, bandOrder:"AgEStkGraphicsRasterFormat") -> "IStkGraphicsBandOrderFilter":
        """Initializes a new instance with a raster format indicating the desired order of the bands in the source raster."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsRasterFormat, bandOrder) as arg_bandOrder, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithOrder"](arg_bandOrder.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithOrderAndBool(self, bandOrder:"AgEStkGraphicsRasterFormat", maintainImageFormat:bool) -> "IStkGraphicsBandOrderFilter":
        """Initializes a new instance with a raster format indicating the desired order of the bands in the source raster, and whether to maintain the source raster's format after swizzling."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsRasterFormat, bandOrder) as arg_bandOrder, \
             agmarshall.VARIANT_BOOL_arg(maintainImageFormat) as arg_maintainImageFormat, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithOrderAndBool"](arg_bandOrder.COM_val, arg_maintainImageFormat.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{1bfcf1dd-1ada-47b7-829b-ea60fc04b61d}", IStkGraphicsBandOrderFilterFactory)
agcls.AgTypeNameMap["IStkGraphicsBandOrderFilterFactory"] = IStkGraphicsBandOrderFilterFactory

class IStkGraphicsBlurFilterFactory(object):
    """Applies a convolution filter to blur or smooth the source raster. Can be used to reduce noise in the raster."""
    _uuid = "{99188b11-f0f6-4452-b2e9-c53472860aa1}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithMethod"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsBlurFilterFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsBlurFilterFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsBlurFilterFactory = agcom.GUID(IStkGraphicsBlurFilterFactory._uuid)
        vtable_offset_local = IStkGraphicsBlurFilterFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsBlurFilterFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithMethod"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsBlurFilterFactory, vtable_offset_local+2, agcom.LONG, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsBlurFilterFactory.__dict__ and type(IStkGraphicsBlurFilterFactory.__dict__[attrname]) == property:
            return IStkGraphicsBlurFilterFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsBlurFilterFactory.")
    
    def Initialize(self) -> "IStkGraphicsBlurFilter":
        """Initializes a new instance."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithMethod(self, method:"AgEStkGraphicsBlurMethod") -> "IStkGraphicsBlurFilter":
        """Initialize a new instance with the specified blur method."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsBlurMethod, method) as arg_method, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithMethod"](arg_method.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{99188b11-f0f6-4452-b2e9-c53472860aa1}", IStkGraphicsBlurFilterFactory)
agcls.AgTypeNameMap["IStkGraphicsBlurFilterFactory"] = IStkGraphicsBlurFilterFactory

class IStkGraphicsBrightnessFilterFactory(object):
    """Adjusts the brightness of the source raster's color bands. The adjustment to brightness is a value between -1 and 1, corresponding to least bright to most bright."""
    _uuid = "{85e2696a-638c-4151-8ba4-e1fdef462598}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithAdjustment"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsBrightnessFilterFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsBrightnessFilterFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsBrightnessFilterFactory = agcom.GUID(IStkGraphicsBrightnessFilterFactory._uuid)
        vtable_offset_local = IStkGraphicsBrightnessFilterFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsBrightnessFilterFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithAdjustment"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsBrightnessFilterFactory, vtable_offset_local+2, agcom.DOUBLE, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsBrightnessFilterFactory.__dict__ and type(IStkGraphicsBrightnessFilterFactory.__dict__[attrname]) == property:
            return IStkGraphicsBrightnessFilterFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsBrightnessFilterFactory.")
    
    def Initialize(self) -> "IStkGraphicsBrightnessFilter":
        """Initializes a new instance."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithAdjustment(self, adjustment:float) -> "IStkGraphicsBrightnessFilter":
        """Initializes a new instance with the adjustment to brightness."""
        with agmarshall.DOUBLE_arg(adjustment) as arg_adjustment, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithAdjustment"](arg_adjustment.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{85e2696a-638c-4151-8ba4-e1fdef462598}", IStkGraphicsBrightnessFilterFactory)
agcls.AgTypeNameMap["IStkGraphicsBrightnessFilterFactory"] = IStkGraphicsBrightnessFilterFactory

class IStkGraphicsColorToLuminanceFilterFactory(object):
    """Extracts a luminance band derived from the color bands of the source raster."""
    _uuid = "{361263b5-d7ef-468a-9804-c1c9342ffeb8}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsColorToLuminanceFilterFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsColorToLuminanceFilterFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsColorToLuminanceFilterFactory = agcom.GUID(IStkGraphicsColorToLuminanceFilterFactory._uuid)
        vtable_offset_local = IStkGraphicsColorToLuminanceFilterFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsColorToLuminanceFilterFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsColorToLuminanceFilterFactory.__dict__ and type(IStkGraphicsColorToLuminanceFilterFactory.__dict__[attrname]) == property:
            return IStkGraphicsColorToLuminanceFilterFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsColorToLuminanceFilterFactory.")
    
    def Initialize(self) -> "IStkGraphicsColorToLuminanceFilter":
        """Initializes a new instance."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{361263b5-d7ef-468a-9804-c1c9342ffeb8}", IStkGraphicsColorToLuminanceFilterFactory)
agcls.AgTypeNameMap["IStkGraphicsColorToLuminanceFilterFactory"] = IStkGraphicsColorToLuminanceFilterFactory

class IStkGraphicsContrastFilterFactory(object):
    """Adjusts the contrast of the source raster. The adjustment to contrast is a value between -1 and 1, corresponding to least contrast to most contrast."""
    _uuid = "{d78a7285-c3ff-47b5-b5af-ea67faffae92}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithAdjustment"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsContrastFilterFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsContrastFilterFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsContrastFilterFactory = agcom.GUID(IStkGraphicsContrastFilterFactory._uuid)
        vtable_offset_local = IStkGraphicsContrastFilterFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsContrastFilterFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithAdjustment"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsContrastFilterFactory, vtable_offset_local+2, agcom.DOUBLE, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsContrastFilterFactory.__dict__ and type(IStkGraphicsContrastFilterFactory.__dict__[attrname]) == property:
            return IStkGraphicsContrastFilterFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsContrastFilterFactory.")
    
    def Initialize(self) -> "IStkGraphicsContrastFilter":
        """Initializes a new instance."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithAdjustment(self, adjustment:float) -> "IStkGraphicsContrastFilter":
        """Initializes a new instance with the adjustment to contrast."""
        with agmarshall.DOUBLE_arg(adjustment) as arg_adjustment, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithAdjustment"](arg_adjustment.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{d78a7285-c3ff-47b5-b5af-ea67faffae92}", IStkGraphicsContrastFilterFactory)
agcls.AgTypeNameMap["IStkGraphicsContrastFilterFactory"] = IStkGraphicsContrastFilterFactory

class IStkGraphicsConvolutionFilterFactory(object):
    """Applies convolution to the source raster. Convolution is the modification of a pixel's value based on the values of its surrounding pixels. The kernel is the numerical matrix that is applied to each pixel in this process..."""
    _uuid = "{f262f8e7-74a5-440e-9754-d3c8a4196abf}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithKernel"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithKernelAndDivisor"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithKernelDivisorAndOffset"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsConvolutionFilterFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsConvolutionFilterFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsConvolutionFilterFactory = agcom.GUID(IStkGraphicsConvolutionFilterFactory._uuid)
        vtable_offset_local = IStkGraphicsConvolutionFilterFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsConvolutionFilterFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithKernel"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsConvolutionFilterFactory, vtable_offset_local+2, POINTER(agcom.SAFEARRAY), POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithKernelAndDivisor"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsConvolutionFilterFactory, vtable_offset_local+3, POINTER(agcom.SAFEARRAY), agcom.DOUBLE, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithKernelDivisorAndOffset"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsConvolutionFilterFactory, vtable_offset_local+4, POINTER(agcom.SAFEARRAY), agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsConvolutionFilterFactory.__dict__ and type(IStkGraphicsConvolutionFilterFactory.__dict__[attrname]) == property:
            return IStkGraphicsConvolutionFilterFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsConvolutionFilterFactory.")
    
    def Initialize(self) -> "IStkGraphicsConvolutionFilter":
        """Initializes a new instance."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithKernel(self, kernel:list) -> "IStkGraphicsConvolutionFilter":
        """Initializes a new instance with the specified kernel."""
        with agmarshall.SAFEARRAY_arg(kernel) as arg_kernel, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithKernel"](byref(arg_kernel.COM_val), byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithKernelAndDivisor(self, kernel:list, divisor:float) -> "IStkGraphicsConvolutionFilter":
        """Initializes a new instance with the specified kernel and divisor."""
        with agmarshall.SAFEARRAY_arg(kernel) as arg_kernel, \
             agmarshall.DOUBLE_arg(divisor) as arg_divisor, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithKernelAndDivisor"](byref(arg_kernel.COM_val), arg_divisor.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithKernelDivisorAndOffset(self, kernel:list, divisor:float, offset:float) -> "IStkGraphicsConvolutionFilter":
        """Initializes a new instance with the specified kernel, divisor, and offset."""
        with agmarshall.SAFEARRAY_arg(kernel) as arg_kernel, \
             agmarshall.DOUBLE_arg(divisor) as arg_divisor, \
             agmarshall.DOUBLE_arg(offset) as arg_offset, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithKernelDivisorAndOffset"](byref(arg_kernel.COM_val), arg_divisor.COM_val, arg_offset.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{f262f8e7-74a5-440e-9754-d3c8a4196abf}", IStkGraphicsConvolutionFilterFactory)
agcls.AgTypeNameMap["IStkGraphicsConvolutionFilterFactory"] = IStkGraphicsConvolutionFilterFactory

class IStkGraphicsEdgeDetectFilterFactory(object):
    """Applies a convolution filter to detect edges in the source raster."""
    _uuid = "{d471ae80-2bf6-40d7-9c5b-48c08d0e3819}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithMethod"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsEdgeDetectFilterFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsEdgeDetectFilterFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsEdgeDetectFilterFactory = agcom.GUID(IStkGraphicsEdgeDetectFilterFactory._uuid)
        vtable_offset_local = IStkGraphicsEdgeDetectFilterFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsEdgeDetectFilterFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithMethod"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsEdgeDetectFilterFactory, vtable_offset_local+2, agcom.LONG, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsEdgeDetectFilterFactory.__dict__ and type(IStkGraphicsEdgeDetectFilterFactory.__dict__[attrname]) == property:
            return IStkGraphicsEdgeDetectFilterFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsEdgeDetectFilterFactory.")
    
    def Initialize(self) -> "IStkGraphicsEdgeDetectFilter":
        """Initializes a new instance."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithMethod(self, method:"AgEStkGraphicsEdgeDetectMethod") -> "IStkGraphicsEdgeDetectFilter":
        """Initializes a new instance with the specified edge detect method."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsEdgeDetectMethod, method) as arg_method, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithMethod"](arg_method.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{d471ae80-2bf6-40d7-9c5b-48c08d0e3819}", IStkGraphicsEdgeDetectFilterFactory)
agcls.AgTypeNameMap["IStkGraphicsEdgeDetectFilterFactory"] = IStkGraphicsEdgeDetectFilterFactory

class IStkGraphicsFilteringRasterStreamFactory(object):
    """A class decorator for applying a raster filter to each update of a raster stream. Can be used to apply filters to videos and other raster streams as they are updated."""
    _uuid = "{3c0a84bb-9330-422b-808e-6f9cf0aa3055}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsFilteringRasterStreamFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsFilteringRasterStreamFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsFilteringRasterStreamFactory = agcom.GUID(IStkGraphicsFilteringRasterStreamFactory._uuid)
        vtable_offset_local = IStkGraphicsFilteringRasterStreamFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFilteringRasterStreamFactory, vtable_offset_local+1, agcom.PVOID, agcom.PVOID, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsFilteringRasterStreamFactory.__dict__ and type(IStkGraphicsFilteringRasterStreamFactory.__dict__[attrname]) == property:
            return IStkGraphicsFilteringRasterStreamFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsFilteringRasterStreamFactory.")
    
    def Initialize(self, rasterStream:"IStkGraphicsRasterStream", filter:"IStkGraphicsRasterFilter") -> "IStkGraphicsFilteringRasterStream":
        """Initializes a new instance with a raster stream and the raster filter that will be applied to each update of that stream."""
        with agmarshall.AgInterface_in_arg(rasterStream, IStkGraphicsRasterStream) as arg_rasterStream, \
             agmarshall.AgInterface_in_arg(filter, IStkGraphicsRasterFilter) as arg_filter, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](arg_rasterStream.COM_val, arg_filter.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{3c0a84bb-9330-422b-808e-6f9cf0aa3055}", IStkGraphicsFilteringRasterStreamFactory)
agcls.AgTypeNameMap["IStkGraphicsFilteringRasterStreamFactory"] = IStkGraphicsFilteringRasterStreamFactory

class IStkGraphicsFlipFilterFactory(object):
    """Flips the source raster along the given flip axis."""
    _uuid = "{0f7bc6a1-42ac-41f0-8f42-d915fba6b859}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithFlipAxis"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsFlipFilterFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsFlipFilterFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsFlipFilterFactory = agcom.GUID(IStkGraphicsFlipFilterFactory._uuid)
        vtable_offset_local = IStkGraphicsFlipFilterFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFlipFilterFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithFlipAxis"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsFlipFilterFactory, vtable_offset_local+2, agcom.LONG, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsFlipFilterFactory.__dict__ and type(IStkGraphicsFlipFilterFactory.__dict__[attrname]) == property:
            return IStkGraphicsFlipFilterFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsFlipFilterFactory.")
    
    def Initialize(self) -> "IStkGraphicsFlipFilter":
        """Initializes a new instance."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithFlipAxis(self, flipAxis:"AgEStkGraphicsFlipAxis") -> "IStkGraphicsFlipFilter":
        """Initializes a new instance with the specified flip axis."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsFlipAxis, flipAxis) as arg_flipAxis, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithFlipAxis"](arg_flipAxis.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{0f7bc6a1-42ac-41f0-8f42-d915fba6b859}", IStkGraphicsFlipFilterFactory)
agcls.AgTypeNameMap["IStkGraphicsFlipFilterFactory"] = IStkGraphicsFlipFilterFactory

class IStkGraphicsGammaCorrectionFilterFactory(object):
    """Applies gamma correction to the source raster. The gamma is a value between .2 and 5. The default gamma value is 2.2."""
    _uuid = "{4e0be3d1-f9ca-47b6-bc7b-31fd98c824a6}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithGamma"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsGammaCorrectionFilterFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsGammaCorrectionFilterFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsGammaCorrectionFilterFactory = agcom.GUID(IStkGraphicsGammaCorrectionFilterFactory._uuid)
        vtable_offset_local = IStkGraphicsGammaCorrectionFilterFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsGammaCorrectionFilterFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithGamma"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsGammaCorrectionFilterFactory, vtable_offset_local+2, agcom.DOUBLE, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsGammaCorrectionFilterFactory.__dict__ and type(IStkGraphicsGammaCorrectionFilterFactory.__dict__[attrname]) == property:
            return IStkGraphicsGammaCorrectionFilterFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsGammaCorrectionFilterFactory.")
    
    def Initialize(self) -> "IStkGraphicsGammaCorrectionFilter":
        """Initializes a new instance."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithGamma(self, gamma:float) -> "IStkGraphicsGammaCorrectionFilter":
        """Initializes a new instance with the specified gamma."""
        with agmarshall.DOUBLE_arg(gamma) as arg_gamma, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithGamma"](arg_gamma.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{4e0be3d1-f9ca-47b6-bc7b-31fd98c824a6}", IStkGraphicsGammaCorrectionFilterFactory)
agcls.AgTypeNameMap["IStkGraphicsGammaCorrectionFilterFactory"] = IStkGraphicsGammaCorrectionFilterFactory

class IStkGraphicsGaussianBlurFilterFactory(object):
    """Applies a convolution filter to blur the source raster using the Gaussian function."""
    _uuid = "{c4f3b576-0d25-4b06-9a79-773821d5c97b}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsGaussianBlurFilterFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsGaussianBlurFilterFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsGaussianBlurFilterFactory = agcom.GUID(IStkGraphicsGaussianBlurFilterFactory._uuid)
        vtable_offset_local = IStkGraphicsGaussianBlurFilterFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsGaussianBlurFilterFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsGaussianBlurFilterFactory.__dict__ and type(IStkGraphicsGaussianBlurFilterFactory.__dict__[attrname]) == property:
            return IStkGraphicsGaussianBlurFilterFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsGaussianBlurFilterFactory.")
    
    def Initialize(self) -> "IStkGraphicsGaussianBlurFilter":
        """Initializes a new instance."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{c4f3b576-0d25-4b06-9a79-773821d5c97b}", IStkGraphicsGaussianBlurFilterFactory)
agcls.AgTypeNameMap["IStkGraphicsGaussianBlurFilterFactory"] = IStkGraphicsGaussianBlurFilterFactory

class IStkGraphicsGradientDetectFilterFactory(object):
    """Applies a convolution filter to detect gradients in the source raster."""
    _uuid = "{ab421e7c-80f3-4503-a29c-5becb2178d44}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithMethod"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsGradientDetectFilterFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsGradientDetectFilterFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsGradientDetectFilterFactory = agcom.GUID(IStkGraphicsGradientDetectFilterFactory._uuid)
        vtable_offset_local = IStkGraphicsGradientDetectFilterFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsGradientDetectFilterFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithMethod"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsGradientDetectFilterFactory, vtable_offset_local+2, agcom.LONG, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsGradientDetectFilterFactory.__dict__ and type(IStkGraphicsGradientDetectFilterFactory.__dict__[attrname]) == property:
            return IStkGraphicsGradientDetectFilterFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsGradientDetectFilterFactory.")
    
    def Initialize(self) -> "IStkGraphicsGradientDetectFilter":
        """Initializes a new instance."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithMethod(self, method:"AgEStkGraphicsGradientDetectMethod") -> "IStkGraphicsGradientDetectFilter":
        """Initializes a new instance with specified gradient detect method."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsGradientDetectMethod, method) as arg_method, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithMethod"](arg_method.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{ab421e7c-80f3-4503-a29c-5becb2178d44}", IStkGraphicsGradientDetectFilterFactory)
agcls.AgTypeNameMap["IStkGraphicsGradientDetectFilterFactory"] = IStkGraphicsGradientDetectFilterFactory

class IStkGraphicsJpeg2000WriterInitializer(object):
    """Converts an image, such as a BMP, to a GeoJP2 file that can be used as an image globe overlay."""
    _uuid = "{e2227905-c4e6-46ab-a89f-6d53e201e1a3}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_WriteString"] = _raise_uninitialized_error
        self.__dict__["_WriteExtentString"] = _raise_uninitialized_error
        self.__dict__["_WriteExtentAndSubExtentString"] = _raise_uninitialized_error
        self.__dict__["_WriteExtentAndSubExtentTransparentColorString"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsJpeg2000WriterInitializer._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsJpeg2000WriterInitializer from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsJpeg2000WriterInitializer = agcom.GUID(IStkGraphicsJpeg2000WriterInitializer._uuid)
        vtable_offset_local = IStkGraphicsJpeg2000WriterInitializer._vtable_offset - 1
        self.__dict__["_WriteString"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsJpeg2000WriterInitializer, vtable_offset_local+1, agcom.BSTR, agcom.LONG, agcom.INT, agcom.BSTR, agcom.VARIANT_BOOL)
        self.__dict__["_WriteExtentString"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsJpeg2000WriterInitializer, vtable_offset_local+2, agcom.BSTR, POINTER(agcom.SAFEARRAY), agcom.LONG, agcom.INT, agcom.BSTR, agcom.VARIANT_BOOL)
        self.__dict__["_WriteExtentAndSubExtentString"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsJpeg2000WriterInitializer, vtable_offset_local+3, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.LONG, agcom.INT, agcom.BSTR, agcom.VARIANT_BOOL)
        self.__dict__["_WriteExtentAndSubExtentTransparentColorString"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsJpeg2000WriterInitializer, vtable_offset_local+4, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), agcom.LONG, agcom.INT, agcom.BSTR, agcom.VARIANT_BOOL, agcom.OLE_COLOR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsJpeg2000WriterInitializer.__dict__ and type(IStkGraphicsJpeg2000WriterInitializer.__dict__[attrname]) == property:
            return IStkGraphicsJpeg2000WriterInitializer.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsJpeg2000WriterInitializer.")
    
    def WriteString(self, imageUri:str, compressionProfile:"AgEStkGraphicsJpeg2000CompressionProfile", compressionRate:int, jpeg2000Uri:str, overwriteExistingFile:bool) -> None:
        """Converts an image, such as a BMP, to a GeoJP2 file that can be used as an image globe overlay. The extent of the image must be in the image, as in a GeoTIFF."""
        with agmarshall.BSTR_arg(imageUri) as arg_imageUri, \
             agmarshall.AgEnum_arg(AgEStkGraphicsJpeg2000CompressionProfile, compressionProfile) as arg_compressionProfile, \
             agmarshall.INT_arg(compressionRate) as arg_compressionRate, \
             agmarshall.BSTR_arg(jpeg2000Uri) as arg_jpeg2000Uri, \
             agmarshall.VARIANT_BOOL_arg(overwriteExistingFile) as arg_overwriteExistingFile:
            agcls.evaluate_hresult(self.__dict__["_WriteString"](arg_imageUri.COM_val, arg_compressionProfile.COM_val, arg_compressionRate.COM_val, arg_jpeg2000Uri.COM_val, arg_overwriteExistingFile.COM_val))

    def WriteExtentString(self, imageUri:str, extent:list, compressionProfile:"AgEStkGraphicsJpeg2000CompressionProfile", compressionRate:int, jpeg2000Uri:str, overwriteExistingFile:bool) -> None:
        """Converts an image, such as a BMP, to a GeoJP2 file that can be used as an image globe overlay. The extent of the image can be defined as an input parameter if necessary."""
        with agmarshall.BSTR_arg(imageUri) as arg_imageUri, \
             agmarshall.SAFEARRAY_arg(extent) as arg_extent, \
             agmarshall.AgEnum_arg(AgEStkGraphicsJpeg2000CompressionProfile, compressionProfile) as arg_compressionProfile, \
             agmarshall.INT_arg(compressionRate) as arg_compressionRate, \
             agmarshall.BSTR_arg(jpeg2000Uri) as arg_jpeg2000Uri, \
             agmarshall.VARIANT_BOOL_arg(overwriteExistingFile) as arg_overwriteExistingFile:
            agcls.evaluate_hresult(self.__dict__["_WriteExtentString"](arg_imageUri.COM_val, byref(arg_extent.COM_val), arg_compressionProfile.COM_val, arg_compressionRate.COM_val, arg_jpeg2000Uri.COM_val, arg_overwriteExistingFile.COM_val))

    def WriteExtentAndSubExtentString(self, imageUri:str, extent:list, subExtent:list, compressionProfile:"AgEStkGraphicsJpeg2000CompressionProfile", compressionRate:int, jpeg2000Uri:str, overwriteExistingFile:bool) -> None:
        """Converts an image, such as a BMP, to a GeoJP2 file that can be used as an image globe overlay. The extent of the image can be defined as an input parameter if necessary."""
        with agmarshall.BSTR_arg(imageUri) as arg_imageUri, \
             agmarshall.SAFEARRAY_arg(extent) as arg_extent, \
             agmarshall.SAFEARRAY_arg(subExtent) as arg_subExtent, \
             agmarshall.AgEnum_arg(AgEStkGraphicsJpeg2000CompressionProfile, compressionProfile) as arg_compressionProfile, \
             agmarshall.INT_arg(compressionRate) as arg_compressionRate, \
             agmarshall.BSTR_arg(jpeg2000Uri) as arg_jpeg2000Uri, \
             agmarshall.VARIANT_BOOL_arg(overwriteExistingFile) as arg_overwriteExistingFile:
            agcls.evaluate_hresult(self.__dict__["_WriteExtentAndSubExtentString"](arg_imageUri.COM_val, byref(arg_extent.COM_val), byref(arg_subExtent.COM_val), arg_compressionProfile.COM_val, arg_compressionRate.COM_val, arg_jpeg2000Uri.COM_val, arg_overwriteExistingFile.COM_val))

    def WriteExtentAndSubExtentTransparentColorString(self, imageUri:str, extent:list, subExtent:list, compressionProfile:"AgEStkGraphicsJpeg2000CompressionProfile", compressionRate:int, jpeg2000Uri:str, overwriteExistingFile:bool, transparentColor:agcolor.Color) -> None:
        """Converts an image, such as a BMP, to a GeoJP2 file that can be used as an image globe overlay. The extent of the image can be defined as an input parameter if necessary."""
        with agmarshall.BSTR_arg(imageUri) as arg_imageUri, \
             agmarshall.SAFEARRAY_arg(extent) as arg_extent, \
             agmarshall.SAFEARRAY_arg(subExtent) as arg_subExtent, \
             agmarshall.AgEnum_arg(AgEStkGraphicsJpeg2000CompressionProfile, compressionProfile) as arg_compressionProfile, \
             agmarshall.INT_arg(compressionRate) as arg_compressionRate, \
             agmarshall.BSTR_arg(jpeg2000Uri) as arg_jpeg2000Uri, \
             agmarshall.VARIANT_BOOL_arg(overwriteExistingFile) as arg_overwriteExistingFile, \
             agmarshall.OLE_COLOR_arg(transparentColor) as arg_transparentColor:
            agcls.evaluate_hresult(self.__dict__["_WriteExtentAndSubExtentTransparentColorString"](arg_imageUri.COM_val, byref(arg_extent.COM_val), byref(arg_subExtent.COM_val), arg_compressionProfile.COM_val, arg_compressionRate.COM_val, arg_jpeg2000Uri.COM_val, arg_overwriteExistingFile.COM_val, arg_transparentColor.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{e2227905-c4e6-46ab-a89f-6d53e201e1a3}", IStkGraphicsJpeg2000WriterInitializer)
agcls.AgTypeNameMap["IStkGraphicsJpeg2000WriterInitializer"] = IStkGraphicsJpeg2000WriterInitializer

class IStkGraphicsLevelsFilterFactory(object):
    """Adjusts the band levels of the source raster linearly."""
    _uuid = "{30236afe-b593-4e6c-9e61-099216f14db1}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsLevelsFilterFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsLevelsFilterFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsLevelsFilterFactory = agcom.GUID(IStkGraphicsLevelsFilterFactory._uuid)
        vtable_offset_local = IStkGraphicsLevelsFilterFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsLevelsFilterFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsLevelsFilterFactory.__dict__ and type(IStkGraphicsLevelsFilterFactory.__dict__[attrname]) == property:
            return IStkGraphicsLevelsFilterFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsLevelsFilterFactory.")
    
    def Initialize(self) -> "IStkGraphicsLevelsFilter":
        """Initializes a new instance."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{30236afe-b593-4e6c-9e61-099216f14db1}", IStkGraphicsLevelsFilterFactory)
agcls.AgTypeNameMap["IStkGraphicsLevelsFilterFactory"] = IStkGraphicsLevelsFilterFactory

class IStkGraphicsProjectionRasterStreamPluginActivatorFactory(object):
    """The Activator class provides methods to load COM plugins that implement projection and raster streaming. For more information about the projection and raster plugins, see the STK Programming Interface."""
    _uuid = "{d7df6203-7dc8-4f07-8211-78e6d3c268a1}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsProjectionRasterStreamPluginActivatorFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsProjectionRasterStreamPluginActivatorFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsProjectionRasterStreamPluginActivatorFactory = agcom.GUID(IStkGraphicsProjectionRasterStreamPluginActivatorFactory._uuid)
        vtable_offset_local = IStkGraphicsProjectionRasterStreamPluginActivatorFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsProjectionRasterStreamPluginActivatorFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsProjectionRasterStreamPluginActivatorFactory.__dict__ and type(IStkGraphicsProjectionRasterStreamPluginActivatorFactory.__dict__[attrname]) == property:
            return IStkGraphicsProjectionRasterStreamPluginActivatorFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsProjectionRasterStreamPluginActivatorFactory.")
    
    def Initialize(self) -> "IStkGraphicsProjectionRasterStreamPluginActivator":
        """Initializes a new instance of the Activator type."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{d7df6203-7dc8-4f07-8211-78e6d3c268a1}", IStkGraphicsProjectionRasterStreamPluginActivatorFactory)
agcls.AgTypeNameMap["IStkGraphicsProjectionRasterStreamPluginActivatorFactory"] = IStkGraphicsProjectionRasterStreamPluginActivatorFactory

class IStkGraphicsRasterFactory(object):
    """A raster dataset. A raster consists of one or more bands, or sets of values, which are most commonly associated with colors when the raster represents an image..."""
    _uuid = "{b4777c93-7685-452a-87df-8fd8bfd10e6f}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_InitializeWithStringUri"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithStringUriXYWidthAndHeight"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithRaster"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsRasterFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsRasterFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsRasterFactory = agcom.GUID(IStkGraphicsRasterFactory._uuid)
        vtable_offset_local = IStkGraphicsRasterFactory._vtable_offset - 1
        self.__dict__["_InitializeWithStringUri"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsRasterFactory, vtable_offset_local+1, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithStringUriXYWidthAndHeight"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsRasterFactory, vtable_offset_local+2, agcom.BSTR, agcom.INT, agcom.INT, agcom.INT, agcom.INT, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithRaster"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsRasterFactory, vtable_offset_local+3, agcom.PVOID, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsRasterFactory.__dict__ and type(IStkGraphicsRasterFactory.__dict__[attrname]) == property:
            return IStkGraphicsRasterFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsRasterFactory.")
    
    def InitializeWithStringUri(self, uri:str) -> "IStkGraphicsRaster":
        """Initializes a raster from a Uri, which can be a file, HTTP, HTTPS, or FTP source. See raster for a list of supported formats."""
        with agmarshall.BSTR_arg(uri) as arg_uri, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithStringUri"](arg_uri.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithStringUriXYWidthAndHeight(self, uri:str, x:int, y:int, width:int, height:int) -> "IStkGraphicsRaster":
        """Initializes a raster from a Uri. Only the specified subsection of the raster is read. See raster for a list of supported formats."""
        with agmarshall.BSTR_arg(uri) as arg_uri, \
             agmarshall.INT_arg(x) as arg_x, \
             agmarshall.INT_arg(y) as arg_y, \
             agmarshall.INT_arg(width) as arg_width, \
             agmarshall.INT_arg(height) as arg_height, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithStringUriXYWidthAndHeight"](arg_uri.COM_val, arg_x.COM_val, arg_y.COM_val, arg_width.COM_val, arg_height.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithRaster(self, raster:"IStkGraphicsRaster") -> "IStkGraphicsRaster":
        """Initializes a raster from another raster."""
        with agmarshall.AgInterface_in_arg(raster, IStkGraphicsRaster) as arg_raster, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithRaster"](arg_raster.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{b4777c93-7685-452a-87df-8fd8bfd10e6f}", IStkGraphicsRasterFactory)
agcls.AgTypeNameMap["IStkGraphicsRasterFactory"] = IStkGraphicsRasterFactory

class IStkGraphicsRasterAttributesFactory(object):
    """The attributes describing a raster dataset. raster attributes define the memory layout of a raster, and includes properties defining the order of each raster band that the raster contains, as specified by the raster format..."""
    _uuid = "{5e2aeff9-22ff-4a0f-984d-dc0d92d738c9}"
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_InitializeWithFormat"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithFormatAndType"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithFormatTypeAndOrientation"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithFormatTypeOrientationAndAlignment"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithFormatTypeOrientationAlignmentAndRatio"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithRaster"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsRasterAttributesFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsRasterAttributesFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsRasterAttributesFactory = agcom.GUID(IStkGraphicsRasterAttributesFactory._uuid)
        vtable_offset_local = IStkGraphicsRasterAttributesFactory._vtable_offset - 1
        self.__dict__["_InitializeWithFormat"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsRasterAttributesFactory, vtable_offset_local+1, agcom.INT, agcom.INT, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithFormatAndType"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsRasterAttributesFactory, vtable_offset_local+2, agcom.INT, agcom.INT, agcom.LONG, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithFormatTypeAndOrientation"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsRasterAttributesFactory, vtable_offset_local+3, agcom.INT, agcom.INT, agcom.LONG, agcom.LONG, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithFormatTypeOrientationAndAlignment"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsRasterAttributesFactory, vtable_offset_local+4, agcom.INT, agcom.INT, agcom.LONG, agcom.LONG, agcom.LONG, agcom.INT, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithFormatTypeOrientationAlignmentAndRatio"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsRasterAttributesFactory, vtable_offset_local+5, agcom.INT, agcom.INT, agcom.LONG, agcom.LONG, agcom.LONG, agcom.INT, agcom.DOUBLE, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithRaster"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsRasterAttributesFactory, vtable_offset_local+6, agcom.PVOID, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsRasterAttributesFactory.__dict__ and type(IStkGraphicsRasterAttributesFactory.__dict__[attrname]) == property:
            return IStkGraphicsRasterAttributesFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsRasterAttributesFactory.")
    
    def InitializeWithFormat(self, width:int, height:int, rasterFormat:"AgEStkGraphicsRasterFormat") -> "IStkGraphicsRasterAttributes":
        """Initializes a new instance with the width and height of the raster in pixels, and the given raster format."""
        with agmarshall.INT_arg(width) as arg_width, \
             agmarshall.INT_arg(height) as arg_height, \
             agmarshall.AgEnum_arg(AgEStkGraphicsRasterFormat, rasterFormat) as arg_rasterFormat, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithFormat"](arg_width.COM_val, arg_height.COM_val, arg_rasterFormat.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithFormatAndType(self, width:int, height:int, rasterFormat:"AgEStkGraphicsRasterFormat", rasterType:"AgEStkGraphicsRasterType") -> "IStkGraphicsRasterAttributes":
        """Initializes a new instance with the width and height of the raster in pixels, and the given raster format and raster type."""
        with agmarshall.INT_arg(width) as arg_width, \
             agmarshall.INT_arg(height) as arg_height, \
             agmarshall.AgEnum_arg(AgEStkGraphicsRasterFormat, rasterFormat) as arg_rasterFormat, \
             agmarshall.AgEnum_arg(AgEStkGraphicsRasterType, rasterType) as arg_rasterType, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithFormatAndType"](arg_width.COM_val, arg_height.COM_val, arg_rasterFormat.COM_val, arg_rasterType.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithFormatTypeAndOrientation(self, width:int, height:int, rasterFormat:"AgEStkGraphicsRasterFormat", rasterType:"AgEStkGraphicsRasterType", rasterOrientation:"AgEStkGraphicsRasterOrientation") -> "IStkGraphicsRasterAttributes":
        """Initializes a new instance with the width and height of the raster in pixels, and the given raster format, raster type, and raster orientation."""
        with agmarshall.INT_arg(width) as arg_width, \
             agmarshall.INT_arg(height) as arg_height, \
             agmarshall.AgEnum_arg(AgEStkGraphicsRasterFormat, rasterFormat) as arg_rasterFormat, \
             agmarshall.AgEnum_arg(AgEStkGraphicsRasterType, rasterType) as arg_rasterType, \
             agmarshall.AgEnum_arg(AgEStkGraphicsRasterOrientation, rasterOrientation) as arg_rasterOrientation, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithFormatTypeAndOrientation"](arg_width.COM_val, arg_height.COM_val, arg_rasterFormat.COM_val, arg_rasterType.COM_val, arg_rasterOrientation.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithFormatTypeOrientationAndAlignment(self, width:int, height:int, rasterFormat:"AgEStkGraphicsRasterFormat", rasterType:"AgEStkGraphicsRasterType", rasterOrientation:"AgEStkGraphicsRasterOrientation", rowAlignment:int) -> "IStkGraphicsRasterAttributes":
        """Initializes a new instance with the width and height of the raster in pixels, and the given raster format, raster type, raster orientation, and row alignment."""
        with agmarshall.INT_arg(width) as arg_width, \
             agmarshall.INT_arg(height) as arg_height, \
             agmarshall.AgEnum_arg(AgEStkGraphicsRasterFormat, rasterFormat) as arg_rasterFormat, \
             agmarshall.AgEnum_arg(AgEStkGraphicsRasterType, rasterType) as arg_rasterType, \
             agmarshall.AgEnum_arg(AgEStkGraphicsRasterOrientation, rasterOrientation) as arg_rasterOrientation, \
             agmarshall.INT_arg(rowAlignment) as arg_rowAlignment, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithFormatTypeOrientationAndAlignment"](arg_width.COM_val, arg_height.COM_val, arg_rasterFormat.COM_val, arg_rasterType.COM_val, arg_rasterOrientation.COM_val, arg_rowAlignment.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithFormatTypeOrientationAlignmentAndRatio(self, width:int, height:int, rasterFormat:"AgEStkGraphicsRasterFormat", rasterType:"AgEStkGraphicsRasterType", rasterOrientation:"AgEStkGraphicsRasterOrientation", rowAlignment:int, pixelAspectRatio:float) -> "IStkGraphicsRasterAttributes":
        """Initializes a new instance with the width and height of the raster in pixels, and the given raster format, raster type, raster orientation, row alignment, and pixel aspect ratio."""
        with agmarshall.INT_arg(width) as arg_width, \
             agmarshall.INT_arg(height) as arg_height, \
             agmarshall.AgEnum_arg(AgEStkGraphicsRasterFormat, rasterFormat) as arg_rasterFormat, \
             agmarshall.AgEnum_arg(AgEStkGraphicsRasterType, rasterType) as arg_rasterType, \
             agmarshall.AgEnum_arg(AgEStkGraphicsRasterOrientation, rasterOrientation) as arg_rasterOrientation, \
             agmarshall.INT_arg(rowAlignment) as arg_rowAlignment, \
             agmarshall.DOUBLE_arg(pixelAspectRatio) as arg_pixelAspectRatio, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithFormatTypeOrientationAlignmentAndRatio"](arg_width.COM_val, arg_height.COM_val, arg_rasterFormat.COM_val, arg_rasterType.COM_val, arg_rasterOrientation.COM_val, arg_rowAlignment.COM_val, arg_pixelAspectRatio.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithRaster(self, raster:"IStkGraphicsRaster") -> "IStkGraphicsRasterAttributes":
        """Initializes a new instance with the attributes of the specified raster"""
        with agmarshall.AgInterface_in_arg(raster, IStkGraphicsRaster) as arg_raster, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithRaster"](arg_raster.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{5e2aeff9-22ff-4a0f-984d-dc0d92d738c9}", IStkGraphicsRasterAttributesFactory)
agcls.AgTypeNameMap["IStkGraphicsRasterAttributesFactory"] = IStkGraphicsRasterAttributesFactory

class IStkGraphicsRotateFilterFactory(object):
    """Rotates the source raster clockwise by the specified angle."""
    _uuid = "{413b5f7f-9fa5-48ba-bb49-d57948acc6ed}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithAngle"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsRotateFilterFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsRotateFilterFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsRotateFilterFactory = agcom.GUID(IStkGraphicsRotateFilterFactory._uuid)
        vtable_offset_local = IStkGraphicsRotateFilterFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsRotateFilterFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithAngle"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsRotateFilterFactory, vtable_offset_local+2, agcom.DOUBLE, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsRotateFilterFactory.__dict__ and type(IStkGraphicsRotateFilterFactory.__dict__[attrname]) == property:
            return IStkGraphicsRotateFilterFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsRotateFilterFactory.")
    
    def Initialize(self) -> "IStkGraphicsRotateFilter":
        """Initializes a new instance."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithAngle(self, rotateAngle:float) -> "IStkGraphicsRotateFilter":
        """Initializes a new instance with a counterclockwise rotation angle."""
        with agmarshall.DOUBLE_arg(rotateAngle) as arg_rotateAngle, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithAngle"](arg_rotateAngle.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{413b5f7f-9fa5-48ba-bb49-d57948acc6ed}", IStkGraphicsRotateFilterFactory)
agcls.AgTypeNameMap["IStkGraphicsRotateFilterFactory"] = IStkGraphicsRotateFilterFactory

class IStkGraphicsSequenceFilterFactory(object):
    """Applies a sequence of filters to the source raster in the order in which they were added. When continue on failure is set to true, subsequent filters will still be applied to the source raster even if one or more filters in the sequence cannot be applied."""
    _uuid = "{b3f075e4-7de5-4d8c-adbe-89862537e530}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsSequenceFilterFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsSequenceFilterFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsSequenceFilterFactory = agcom.GUID(IStkGraphicsSequenceFilterFactory._uuid)
        vtable_offset_local = IStkGraphicsSequenceFilterFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSequenceFilterFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsSequenceFilterFactory.__dict__ and type(IStkGraphicsSequenceFilterFactory.__dict__[attrname]) == property:
            return IStkGraphicsSequenceFilterFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsSequenceFilterFactory.")
    
    def Initialize(self) -> "IStkGraphicsSequenceFilter":
        """Initializes a new instance."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{b3f075e4-7de5-4d8c-adbe-89862537e530}", IStkGraphicsSequenceFilterFactory)
agcls.AgTypeNameMap["IStkGraphicsSequenceFilterFactory"] = IStkGraphicsSequenceFilterFactory

class IStkGraphicsSharpenFilterFactory(object):
    """Applies a convolution filter to increase the sharpness of the source raster."""
    _uuid = "{953f907c-8223-40fa-9827-cb08278d5af4}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithMethod"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsSharpenFilterFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsSharpenFilterFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsSharpenFilterFactory = agcom.GUID(IStkGraphicsSharpenFilterFactory._uuid)
        vtable_offset_local = IStkGraphicsSharpenFilterFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSharpenFilterFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithMethod"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSharpenFilterFactory, vtable_offset_local+2, agcom.LONG, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsSharpenFilterFactory.__dict__ and type(IStkGraphicsSharpenFilterFactory.__dict__[attrname]) == property:
            return IStkGraphicsSharpenFilterFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsSharpenFilterFactory.")
    
    def Initialize(self) -> "IStkGraphicsSharpenFilter":
        """Initialize a new instance."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithMethod(self, method:"AgEStkGraphicsSharpenMethod") -> "IStkGraphicsSharpenFilter":
        """Initialize a new instance with the specified sharpen method."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsSharpenMethod, method) as arg_method, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithMethod"](arg_method.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{953f907c-8223-40fa-9827-cb08278d5af4}", IStkGraphicsSharpenFilterFactory)
agcls.AgTypeNameMap["IStkGraphicsSharpenFilterFactory"] = IStkGraphicsSharpenFilterFactory

class IStkGraphicsVideoStreamFactory(object):
    """A raster stream that streams from a video. The video can be read from a file, or streamed from an HTTP, RTP, UDP, or TCP source. See the Video Streams Overview for a list of supported video formats and Uri usage."""
    _uuid = "{fbde7847-ccff-4c4e-83cf-5f7b05468709}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_InitializeWithStringUri"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithStringUriAndAudio"] = _raise_uninitialized_error
        self.__dict__["_InitializeAudioVideoWithStringUri"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsVideoStreamFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsVideoStreamFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsVideoStreamFactory = agcom.GUID(IStkGraphicsVideoStreamFactory._uuid)
        vtable_offset_local = IStkGraphicsVideoStreamFactory._vtable_offset - 1
        self.__dict__["_InitializeWithStringUri"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVideoStreamFactory, vtable_offset_local+1, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithStringUriAndAudio"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVideoStreamFactory, vtable_offset_local+2, agcom.BSTR, agcom.VARIANT_BOOL, POINTER(agcom.PVOID))
        self.__dict__["_InitializeAudioVideoWithStringUri"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVideoStreamFactory, vtable_offset_local+3, agcom.BSTR, agcom.BSTR, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsVideoStreamFactory.__dict__ and type(IStkGraphicsVideoStreamFactory.__dict__[attrname]) == property:
            return IStkGraphicsVideoStreamFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsVideoStreamFactory.")
    
    def InitializeWithStringUri(self, uri:str) -> "IStkGraphicsVideoStream":
        """Initializes the video stream from a Uri, which can be a file, HTTP, RTP, UDP, or TCP source. See the Video Streams Overview for a list of supported video formats and Uri usage."""
        with agmarshall.BSTR_arg(uri) as arg_uri, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithStringUri"](arg_uri.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithStringUriAndAudio(self, uri:str, loadAudio:bool) -> "IStkGraphicsVideoStream":
        """Initializes the video stream from a Uri, which can be a file, HTTP, RTP, UDP, or TCP source. See the Video Streams Overview for a list of supported video formats and Uri usage."""
        with agmarshall.BSTR_arg(uri) as arg_uri, \
             agmarshall.VARIANT_BOOL_arg(loadAudio) as arg_loadAudio, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithStringUriAndAudio"](arg_uri.COM_val, arg_loadAudio.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeAudioVideoWithStringUri(self, uri:str, audioUri:str) -> "IStkGraphicsVideoStream":
        """Initializes the video stream from a Uri, which can be a file, HTTP, RTP, UDP, or TCP source. See the Video Streams Overview for a list of supported video formats and Uri usage."""
        with agmarshall.BSTR_arg(uri) as arg_uri, \
             agmarshall.BSTR_arg(audioUri) as arg_audioUri, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeAudioVideoWithStringUri"](arg_uri.COM_val, arg_audioUri.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{fbde7847-ccff-4c4e-83cf-5f7b05468709}", IStkGraphicsVideoStreamFactory)
agcls.AgTypeNameMap["IStkGraphicsVideoStreamFactory"] = IStkGraphicsVideoStreamFactory

class IStkGraphicsMarkerBatchPrimitiveFactory(object):
    """ Renders one or more markers in the 3D scene. Markers are 2D images that always face the viewer which can be sized in pixels or meters. Markers are also referred to as sprites or billboards..."""
    _uuid = "{02a33d9e-cfb3-41c8-be66-e452ae1b7ac3}"
    _num_methods = 7
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithSetHint"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithSizeSource"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithSizeSourceAndSortOrder"] = _raise_uninitialized_error
        self.__dict__["_InitializeSizeSourceSortOrderAndSetHint"] = _raise_uninitialized_error
        self.__dict__["_InitializeSizeSourceSortOrderSetHintAndRenderingMethod"] = _raise_uninitialized_error
        self.__dict__["_Supported"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsMarkerBatchPrimitiveFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsMarkerBatchPrimitiveFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsMarkerBatchPrimitiveFactory = agcom.GUID(IStkGraphicsMarkerBatchPrimitiveFactory._uuid)
        vtable_offset_local = IStkGraphicsMarkerBatchPrimitiveFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitiveFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithSetHint"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitiveFactory, vtable_offset_local+2, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithSizeSource"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitiveFactory, vtable_offset_local+3, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithSizeSourceAndSortOrder"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitiveFactory, vtable_offset_local+4, agcom.LONG, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_InitializeSizeSourceSortOrderAndSetHint"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitiveFactory, vtable_offset_local+5, agcom.LONG, agcom.LONG, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_InitializeSizeSourceSortOrderSetHintAndRenderingMethod"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitiveFactory, vtable_offset_local+6, agcom.LONG, agcom.LONG, agcom.LONG, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_Supported"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitiveFactory, vtable_offset_local+7, agcom.LONG, POINTER(agcom.VARIANT_BOOL))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsMarkerBatchPrimitiveFactory.__dict__ and type(IStkGraphicsMarkerBatchPrimitiveFactory.__dict__[attrname]) == property:
            return IStkGraphicsMarkerBatchPrimitiveFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsMarkerBatchPrimitiveFactory.")
    
    def Initialize(self) -> "IStkGraphicsMarkerBatchPrimitive":
        """Initializes a default marker batch primitive..."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithSetHint(self, setHint:"AgEStkGraphicsSetHint") -> "IStkGraphicsMarkerBatchPrimitive":
        """Initializes a marker batch primitive with the specified setHint..."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsSetHint, setHint) as arg_setHint, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithSetHint"](arg_setHint.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithSizeSource(self, sizeSource:"AgEStkGraphicsMarkerBatchSizeSource") -> "IStkGraphicsMarkerBatchPrimitive":
        """Initializes a marker batch primitive with the specified sizeSource..."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsMarkerBatchSizeSource, sizeSource) as arg_sizeSource, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithSizeSource"](arg_sizeSource.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithSizeSourceAndSortOrder(self, sizeSource:"AgEStkGraphicsMarkerBatchSizeSource", sortOrder:"AgEStkGraphicsMarkerBatchSortOrder") -> "IStkGraphicsMarkerBatchPrimitive":
        """Initializes a marker batch primitive with the specified sizeSource and sortOrder..."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsMarkerBatchSizeSource, sizeSource) as arg_sizeSource, \
             agmarshall.AgEnum_arg(AgEStkGraphicsMarkerBatchSortOrder, sortOrder) as arg_sortOrder, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithSizeSourceAndSortOrder"](arg_sizeSource.COM_val, arg_sortOrder.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeSizeSourceSortOrderAndSetHint(self, sizeSource:"AgEStkGraphicsMarkerBatchSizeSource", sortOrder:"AgEStkGraphicsMarkerBatchSortOrder", setHint:"AgEStkGraphicsSetHint") -> "IStkGraphicsMarkerBatchPrimitive":
        """Initializes a marker batch primitive with the specified sizeSource, sortOrder, and setHint. This is equivalent to constructing a marker batch with the specified arguments and a marker batch rendering method of Automatic."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsMarkerBatchSizeSource, sizeSource) as arg_sizeSource, \
             agmarshall.AgEnum_arg(AgEStkGraphicsMarkerBatchSortOrder, sortOrder) as arg_sortOrder, \
             agmarshall.AgEnum_arg(AgEStkGraphicsSetHint, setHint) as arg_setHint, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeSizeSourceSortOrderAndSetHint"](arg_sizeSource.COM_val, arg_sortOrder.COM_val, arg_setHint.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeSizeSourceSortOrderSetHintAndRenderingMethod(self, sizeSource:"AgEStkGraphicsMarkerBatchSizeSource", sortOrder:"AgEStkGraphicsMarkerBatchSortOrder", setHint:"AgEStkGraphicsSetHint", renderingMethod:"AgEStkGraphicsMarkerBatchRenderingMethod") -> "IStkGraphicsMarkerBatchPrimitive":
        """Initializes a marker batch primitive with the specified arguments."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsMarkerBatchSizeSource, sizeSource) as arg_sizeSource, \
             agmarshall.AgEnum_arg(AgEStkGraphicsMarkerBatchSortOrder, sortOrder) as arg_sortOrder, \
             agmarshall.AgEnum_arg(AgEStkGraphicsSetHint, setHint) as arg_setHint, \
             agmarshall.AgEnum_arg(AgEStkGraphicsMarkerBatchRenderingMethod, renderingMethod) as arg_renderingMethod, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeSizeSourceSortOrderSetHintAndRenderingMethod"](arg_sizeSource.COM_val, arg_sortOrder.COM_val, arg_setHint.COM_val, arg_renderingMethod.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def Supported(self, renderingMethod:"AgEStkGraphicsMarkerBatchRenderingMethod") -> bool:
        """Determines whether or not the video card supports the marker batch primitive with the given renderingMethod."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsMarkerBatchRenderingMethod, renderingMethod) as arg_renderingMethod, \
             agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_Supported"](arg_renderingMethod.COM_val, byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{02a33d9e-cfb3-41c8-be66-e452ae1b7ac3}", IStkGraphicsMarkerBatchPrimitiveFactory)
agcls.AgTypeNameMap["IStkGraphicsMarkerBatchPrimitiveFactory"] = IStkGraphicsMarkerBatchPrimitiveFactory

class IStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory(object):
    """Optional per-marker parameters for marker batch primitive that overrides the marker batch's per-batch parameters..."""
    _uuid = "{9b29c9ab-8fd6-4f2b-8183-b504e319617e}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory = agcom.GUID(IStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory._uuid)
        vtable_offset_local = IStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory.__dict__ and type(IStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory.__dict__[attrname]) == property:
            return IStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory.")
    
    def Initialize(self) -> "IStkGraphicsMarkerBatchPrimitiveOptionalParameters":
        """Initializes default marker batch primitive optional parameters. All per-marker parameters are initially empty."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{9b29c9ab-8fd6-4f2b-8183-b504e319617e}", IStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory)
agcls.AgTypeNameMap["IStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory"] = IStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory

class IStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory(object):
    """path primitive update policy that removes points from remove location when the number of points in the path exceeds maximum count."""
    _uuid = "{046383cc-b5b9-4ff5-b662-701e694170ba}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithParameters"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory = agcom.GUID(IStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory._uuid)
        vtable_offset_local = IStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithParameters"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory, vtable_offset_local+2, agcom.INT, agcom.LONG, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory.__dict__ and type(IStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory.__dict__[attrname]) == property:
            return IStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory.")
    
    def Initialize(self) -> "IStkGraphicsMaximumCountPathPrimitiveUpdatePolicy":
        """Constructs a default update policy. This is equivalent to constructing a policy with maximum count set to 0 and a remove location of Front."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithParameters(self, maximumCount:int, removeLocation:"AgEStkGraphicsPathPrimitiveRemoveLocation") -> "IStkGraphicsMaximumCountPathPrimitiveUpdatePolicy":
        """Initializes a policy with the specified maximumCount and removeLocation."""
        with agmarshall.INT_arg(maximumCount) as arg_maximumCount, \
             agmarshall.AgEnum_arg(AgEStkGraphicsPathPrimitiveRemoveLocation, removeLocation) as arg_removeLocation, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithParameters"](arg_maximumCount.COM_val, arg_removeLocation.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{046383cc-b5b9-4ff5-b662-701e694170ba}", IStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory)
agcls.AgTypeNameMap["IStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory"] = IStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory

class IStkGraphicsModelPrimitiveFactory(object):
    """The model primitive loads and renders <a href='http://www.collada.org/'>COLLADA</a> (DAE) and AGI <a href='https://support.agi.com/3d-models'>MDL</a> (MDL) models."""
    _uuid = "{93ea79ef-8da7-4992-b8fa-81d372d4258a}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithStringUri"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithStringUriAndUpAxis"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsModelPrimitiveFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsModelPrimitiveFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsModelPrimitiveFactory = agcom.GUID(IStkGraphicsModelPrimitiveFactory._uuid)
        vtable_offset_local = IStkGraphicsModelPrimitiveFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsModelPrimitiveFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithStringUri"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsModelPrimitiveFactory, vtable_offset_local+2, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithStringUriAndUpAxis"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsModelPrimitiveFactory, vtable_offset_local+3, agcom.BSTR, agcom.LONG, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsModelPrimitiveFactory.__dict__ and type(IStkGraphicsModelPrimitiveFactory.__dict__[attrname]) == property:
            return IStkGraphicsModelPrimitiveFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsModelPrimitiveFactory.")
    
    def Initialize(self) -> "IStkGraphicsModelPrimitive":
        """Initializes a default model primitive."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithStringUri(self, uri:str) -> "IStkGraphicsModelPrimitive":
        """For convenience. Initializes a model primitive with the specified file path."""
        with agmarshall.BSTR_arg(uri) as arg_uri, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithStringUri"](arg_uri.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithStringUriAndUpAxis(self, uri:str, upAxis:"AgEStkGraphicsModelUpAxis") -> "IStkGraphicsModelPrimitive":
        """For convenience. Initializes a model primitive with the specified file path and up axis."""
        with agmarshall.BSTR_arg(uri) as arg_uri, \
             agmarshall.AgEnum_arg(AgEStkGraphicsModelUpAxis, upAxis) as arg_upAxis, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithStringUriAndUpAxis"](arg_uri.COM_val, arg_upAxis.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{93ea79ef-8da7-4992-b8fa-81d372d4258a}", IStkGraphicsModelPrimitiveFactory)
agcls.AgTypeNameMap["IStkGraphicsModelPrimitiveFactory"] = IStkGraphicsModelPrimitiveFactory

class IStkGraphicsPathPrimitiveFactory(object):
    """Renders a line to the 3D scene. Similar to the polyline primitive; however, the PathPrimitive was designed for the efficient addition/removal of points to/from the front or back of the line."""
    _uuid = "{2b9b98c4-17d2-4b72-a6cf-c9bc87eb11e8}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithCapacity"] = _raise_uninitialized_error
        self.__dict__["_GetMinimumWidthSupported"] = _raise_uninitialized_error
        self.__dict__["_GetMaximumWidthSupported"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsPathPrimitiveFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsPathPrimitiveFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsPathPrimitiveFactory = agcom.GUID(IStkGraphicsPathPrimitiveFactory._uuid)
        vtable_offset_local = IStkGraphicsPathPrimitiveFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPathPrimitiveFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithCapacity"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPathPrimitiveFactory, vtable_offset_local+2, agcom.INT, POINTER(agcom.PVOID))
        self.__dict__["_GetMinimumWidthSupported"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPathPrimitiveFactory, vtable_offset_local+3, POINTER(agcom.FLOAT))
        self.__dict__["_GetMaximumWidthSupported"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPathPrimitiveFactory, vtable_offset_local+4, POINTER(agcom.FLOAT))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsPathPrimitiveFactory.__dict__ and type(IStkGraphicsPathPrimitiveFactory.__dict__[attrname]) == property:
            return IStkGraphicsPathPrimitiveFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsPathPrimitiveFactory.")
    
    def Initialize(self) -> "IStkGraphicsPathPrimitive":
        """Initializes a default path primitive. This is equivalent to constructing a path primitive with an initial capacity of 16."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithCapacity(self, capacity:int) -> "IStkGraphicsPathPrimitive":
        """Initializes a path primitive with the specified capacity."""
        with agmarshall.INT_arg(capacity) as arg_capacity, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithCapacity"](arg_capacity.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def MinimumWidthSupported(self) -> float:
        """Gets the minimum width, in pixels, supported by the video card."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinimumWidthSupported"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def MaximumWidthSupported(self) -> float:
        """Gets the maximum width, in pixels, supported by the video card."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaximumWidthSupported"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{2b9b98c4-17d2-4b72-a6cf-c9bc87eb11e8}", IStkGraphicsPathPrimitiveFactory)
agcls.AgTypeNameMap["IStkGraphicsPathPrimitiveFactory"] = IStkGraphicsPathPrimitiveFactory

class IStkGraphicsPixelSizeDisplayConditionFactory(object):
    """Defines an inclusive interval, in pixels, that determines when an object, such as a primitive, is rendered based on the number of pixels the object's bounding sphere (or in the case of screen overlays, bounding rectangle) covers on the screen..."""
    _uuid = "{2c7bb493-89f9-40f9-b562-feed771d08b7}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithPixelSizes"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsPixelSizeDisplayConditionFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsPixelSizeDisplayConditionFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsPixelSizeDisplayConditionFactory = agcom.GUID(IStkGraphicsPixelSizeDisplayConditionFactory._uuid)
        vtable_offset_local = IStkGraphicsPixelSizeDisplayConditionFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPixelSizeDisplayConditionFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithPixelSizes"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPixelSizeDisplayConditionFactory, vtable_offset_local+2, agcom.INT, agcom.INT, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsPixelSizeDisplayConditionFactory.__dict__ and type(IStkGraphicsPixelSizeDisplayConditionFactory.__dict__[attrname]) == property:
            return IStkGraphicsPixelSizeDisplayConditionFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsPixelSizeDisplayConditionFactory.")
    
    def Initialize(self) -> "IStkGraphicsPixelSizeDisplayCondition":
        """Initializes a default pixel size display condition. minimum pixel size is set to 0 and maximum pixel size is set to Int32.MaxValue. With this interval, an object is always rendered regardless of how many pixels its bounding sphere or rectangle covers."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithPixelSizes(self, minimumPixelSize:int, maximumPixelSize:int) -> "IStkGraphicsPixelSizeDisplayCondition":
        """Initializes a pixel size display condition with the inclusive interval [minimumPixelSize, maximumPixelSize]..."""
        with agmarshall.INT_arg(minimumPixelSize) as arg_minimumPixelSize, \
             agmarshall.INT_arg(maximumPixelSize) as arg_maximumPixelSize, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithPixelSizes"](arg_minimumPixelSize.COM_val, arg_maximumPixelSize.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{2c7bb493-89f9-40f9-b562-feed771d08b7}", IStkGraphicsPixelSizeDisplayConditionFactory)
agcls.AgTypeNameMap["IStkGraphicsPixelSizeDisplayConditionFactory"] = IStkGraphicsPixelSizeDisplayConditionFactory

class IStkGraphicsPointBatchPrimitiveFactory(object):
    """ Renders one or more points in the 3D scene. Each point in the batch has a unique position and an optional color. All points in the batch share the same pixel size. For best performance, avoid creating lots of batches with only a few points each..."""
    _uuid = "{5dd03481-3541-486c-973f-f079eb35973c}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithSetHint"] = _raise_uninitialized_error
        self.__dict__["_GetMinimumPixelSizeSupported"] = _raise_uninitialized_error
        self.__dict__["_GetMaximumPixelSizeSupported"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsPointBatchPrimitiveFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsPointBatchPrimitiveFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsPointBatchPrimitiveFactory = agcom.GUID(IStkGraphicsPointBatchPrimitiveFactory._uuid)
        vtable_offset_local = IStkGraphicsPointBatchPrimitiveFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPointBatchPrimitiveFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithSetHint"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPointBatchPrimitiveFactory, vtable_offset_local+2, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_GetMinimumPixelSizeSupported"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPointBatchPrimitiveFactory, vtable_offset_local+3, POINTER(agcom.FLOAT))
        self.__dict__["_GetMaximumPixelSizeSupported"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPointBatchPrimitiveFactory, vtable_offset_local+4, POINTER(agcom.FLOAT))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsPointBatchPrimitiveFactory.__dict__ and type(IStkGraphicsPointBatchPrimitiveFactory.__dict__[attrname]) == property:
            return IStkGraphicsPointBatchPrimitiveFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsPointBatchPrimitiveFactory.")
    
    def Initialize(self) -> "IStkGraphicsPointBatchPrimitive":
        """Initializes a default point batch primitive. This is equivalent to constructing a point batch with a set hint of Frequent."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithSetHint(self, setHint:"AgEStkGraphicsSetHint") -> "IStkGraphicsPointBatchPrimitive":
        """Initializes a new instance of a point batch primitive with the specified set hint."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsSetHint, setHint) as arg_setHint, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithSetHint"](arg_setHint.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def MinimumPixelSizeSupported(self) -> float:
        """Gets the minimum pixel size supported by the video card."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinimumPixelSizeSupported"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def MaximumPixelSizeSupported(self) -> float:
        """Gets the maximum pixel size supported by the video card."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaximumPixelSizeSupported"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{5dd03481-3541-486c-973f-f079eb35973c}", IStkGraphicsPointBatchPrimitiveFactory)
agcls.AgTypeNameMap["IStkGraphicsPointBatchPrimitiveFactory"] = IStkGraphicsPointBatchPrimitiveFactory

class IStkGraphicsPointBatchPrimitiveOptionalParametersFactory(object):
    """Optional per-point parameters for point batch primitive that overrides the point batch primitive's global parameters..."""
    _uuid = "{b108564a-969c-43cb-97ce-e96dc0c7001c}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsPointBatchPrimitiveOptionalParametersFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsPointBatchPrimitiveOptionalParametersFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsPointBatchPrimitiveOptionalParametersFactory = agcom.GUID(IStkGraphicsPointBatchPrimitiveOptionalParametersFactory._uuid)
        vtable_offset_local = IStkGraphicsPointBatchPrimitiveOptionalParametersFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPointBatchPrimitiveOptionalParametersFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsPointBatchPrimitiveOptionalParametersFactory.__dict__ and type(IStkGraphicsPointBatchPrimitiveOptionalParametersFactory.__dict__[attrname]) == property:
            return IStkGraphicsPointBatchPrimitiveOptionalParametersFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsPointBatchPrimitiveOptionalParametersFactory.")
    
    def Initialize(self) -> "IStkGraphicsPointBatchPrimitiveOptionalParameters":
        """Initializes a default point batch primitive optional parameters object."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{b108564a-969c-43cb-97ce-e96dc0c7001c}", IStkGraphicsPointBatchPrimitiveOptionalParametersFactory)
agcls.AgTypeNameMap["IStkGraphicsPointBatchPrimitiveOptionalParametersFactory"] = IStkGraphicsPointBatchPrimitiveOptionalParametersFactory

class IStkGraphicsPolylinePrimitiveFactory(object):
    """Renders a polyline in the 3D scene. Each line segment may have a different color. A polyline can be constructed with a position interpolator to render great arcs or rhumb lines."""
    _uuid = "{16a27023-42d5-4994-9ace-165e027e72d8}"
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithInterpolatorAndSetHint"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithTypeAndHint"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithInterpolator"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithHint"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithType"] = _raise_uninitialized_error
        self.__dict__["_GetMinimumWidthSupported"] = _raise_uninitialized_error
        self.__dict__["_GetMaximumWidthSupported"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsPolylinePrimitiveFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsPolylinePrimitiveFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsPolylinePrimitiveFactory = agcom.GUID(IStkGraphicsPolylinePrimitiveFactory._uuid)
        vtable_offset_local = IStkGraphicsPolylinePrimitiveFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPolylinePrimitiveFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithInterpolatorAndSetHint"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPolylinePrimitiveFactory, vtable_offset_local+2, agcom.PVOID, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithTypeAndHint"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPolylinePrimitiveFactory, vtable_offset_local+3, agcom.LONG, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithInterpolator"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPolylinePrimitiveFactory, vtable_offset_local+4, agcom.PVOID, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithHint"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPolylinePrimitiveFactory, vtable_offset_local+5, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithType"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPolylinePrimitiveFactory, vtable_offset_local+6, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_GetMinimumWidthSupported"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPolylinePrimitiveFactory, vtable_offset_local+7, POINTER(agcom.FLOAT))
        self.__dict__["_GetMaximumWidthSupported"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPolylinePrimitiveFactory, vtable_offset_local+8, POINTER(agcom.FLOAT))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsPolylinePrimitiveFactory.__dict__ and type(IStkGraphicsPolylinePrimitiveFactory.__dict__[attrname]) == property:
            return IStkGraphicsPolylinePrimitiveFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsPolylinePrimitiveFactory.")
    
    def Initialize(self) -> "IStkGraphicsPolylinePrimitive":
        """Initializes a default polyline primitive. This is equivalent to constructing a polyline with a set hint of Frequent and a polyline type of LineStrip."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithInterpolatorAndSetHint(self, interpolator:"IStkGraphicsPositionInterpolator", setHint:"AgEStkGraphicsSetHint") -> "IStkGraphicsPolylinePrimitive":
        """Initializes a polyline primitive with the specified interpolator and setHint."""
        with agmarshall.AgInterface_in_arg(interpolator, IStkGraphicsPositionInterpolator) as arg_interpolator, \
             agmarshall.AgEnum_arg(AgEStkGraphicsSetHint, setHint) as arg_setHint, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithInterpolatorAndSetHint"](arg_interpolator.COM_val, arg_setHint.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithTypeAndHint(self, polylineType:"AgEStkGraphicsPolylineType", setHint:"AgEStkGraphicsSetHint") -> "IStkGraphicsPolylinePrimitive":
        """Initializes a new instance of a polyline primitive with the specified polylineType and setHint."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsPolylineType, polylineType) as arg_polylineType, \
             agmarshall.AgEnum_arg(AgEStkGraphicsSetHint, setHint) as arg_setHint, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithTypeAndHint"](arg_polylineType.COM_val, arg_setHint.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithInterpolator(self, interpolator:"IStkGraphicsPositionInterpolator") -> "IStkGraphicsPolylinePrimitive":
        """Initializes a polyline primitive with the specified interpolator. This is equivalent to constructing a polyline with the specified interpolator and a set hint of Frequent."""
        with agmarshall.AgInterface_in_arg(interpolator, IStkGraphicsPositionInterpolator) as arg_interpolator, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithInterpolator"](arg_interpolator.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithHint(self, setHint:"AgEStkGraphicsSetHint") -> "IStkGraphicsPolylinePrimitive":
        """Initializes a new instance of a polyline primitive with the specified set hint. This is equivalent to constructing a polyline with a polyline type of LineStrip and the specified set hint."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsSetHint, setHint) as arg_setHint, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithHint"](arg_setHint.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithType(self, polylineType:"AgEStkGraphicsPolylineType") -> "IStkGraphicsPolylinePrimitive":
        """Initializes a polyline primitive with the specified polylineType. This is equivalent to constructing a polyline with the specified polylineType and a set hint of Frequent."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsPolylineType, polylineType) as arg_polylineType, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithType"](arg_polylineType.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def MinimumWidthSupported(self) -> float:
        """Gets the minimum width, in pixels, supported by the video card."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinimumWidthSupported"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def MaximumWidthSupported(self) -> float:
        """Gets the maximum width, in pixels, supported by the video card."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaximumWidthSupported"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{16a27023-42d5-4994-9ace-165e027e72d8}", IStkGraphicsPolylinePrimitiveFactory)
agcls.AgTypeNameMap["IStkGraphicsPolylinePrimitiveFactory"] = IStkGraphicsPolylinePrimitiveFactory

class IStkGraphicsPolylinePrimitiveOptionalParametersFactory(object):
    """Optional per-point or per-segment parameters for polyline primitive that overrides the polyline primitive's global parameters..."""
    _uuid = "{7f416edb-d9ac-41bd-8216-893ca9ccc16b}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsPolylinePrimitiveOptionalParametersFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsPolylinePrimitiveOptionalParametersFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsPolylinePrimitiveOptionalParametersFactory = agcom.GUID(IStkGraphicsPolylinePrimitiveOptionalParametersFactory._uuid)
        vtable_offset_local = IStkGraphicsPolylinePrimitiveOptionalParametersFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsPolylinePrimitiveOptionalParametersFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsPolylinePrimitiveOptionalParametersFactory.__dict__ and type(IStkGraphicsPolylinePrimitiveOptionalParametersFactory.__dict__[attrname]) == property:
            return IStkGraphicsPolylinePrimitiveOptionalParametersFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsPolylinePrimitiveOptionalParametersFactory.")
    
    def Initialize(self) -> "IStkGraphicsPolylinePrimitiveOptionalParameters":
        """Initializes default polyline primitive optional parameters. All per-segment parameters are initially empty."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{7f416edb-d9ac-41bd-8216-893ca9ccc16b}", IStkGraphicsPolylinePrimitiveOptionalParametersFactory)
agcls.AgTypeNameMap["IStkGraphicsPolylinePrimitiveOptionalParametersFactory"] = IStkGraphicsPolylinePrimitiveOptionalParametersFactory

class IStkGraphicsRasterImageGlobeOverlayFactory(object):
    """A globe image overlay for handling rasters."""
    _uuid = "{00a01c47-a9d0-4020-a469-fd874b219713}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_InitializeWithString"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithColor"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithRaster"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsRasterImageGlobeOverlayFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsRasterImageGlobeOverlayFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsRasterImageGlobeOverlayFactory = agcom.GUID(IStkGraphicsRasterImageGlobeOverlayFactory._uuid)
        vtable_offset_local = IStkGraphicsRasterImageGlobeOverlayFactory._vtable_offset - 1
        self.__dict__["_InitializeWithString"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsRasterImageGlobeOverlayFactory, vtable_offset_local+1, agcom.BSTR, POINTER(agcom.SAFEARRAY), POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithColor"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsRasterImageGlobeOverlayFactory, vtable_offset_local+2, agcom.OLE_COLOR, POINTER(agcom.SAFEARRAY), POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithRaster"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsRasterImageGlobeOverlayFactory, vtable_offset_local+3, agcom.PVOID, POINTER(agcom.SAFEARRAY), POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsRasterImageGlobeOverlayFactory.__dict__ and type(IStkGraphicsRasterImageGlobeOverlayFactory.__dict__[attrname]) == property:
            return IStkGraphicsRasterImageGlobeOverlayFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsRasterImageGlobeOverlayFactory.")
    
    def InitializeWithString(self, uri:str, extent:list) -> "IStkGraphicsRasterImageGlobeOverlay":
        """Initializes a raster image globe overlay with the provided values."""
        with agmarshall.BSTR_arg(uri) as arg_uri, \
             agmarshall.SAFEARRAY_arg(extent) as arg_extent, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithString"](arg_uri.COM_val, byref(arg_extent.COM_val), byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithColor(self, color:agcolor.Color, extent:list) -> "IStkGraphicsRasterImageGlobeOverlay":
        """Initializes a raster image globe overlay with the provided values."""
        with agmarshall.OLE_COLOR_arg(color) as arg_color, \
             agmarshall.SAFEARRAY_arg(extent) as arg_extent, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithColor"](arg_color.COM_val, byref(arg_extent.COM_val), byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithRaster(self, raster:"IStkGraphicsRaster", extent:list) -> "IStkGraphicsRasterImageGlobeOverlay":
        """Initializes a raster image globe overlay with the provided values."""
        with agmarshall.AgInterface_in_arg(raster, IStkGraphicsRaster) as arg_raster, \
             agmarshall.SAFEARRAY_arg(extent) as arg_extent, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithRaster"](arg_raster.COM_val, byref(arg_extent.COM_val), byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{00a01c47-a9d0-4020-a469-fd874b219713}", IStkGraphicsRasterImageGlobeOverlayFactory)
agcls.AgTypeNameMap["IStkGraphicsRasterImageGlobeOverlayFactory"] = IStkGraphicsRasterImageGlobeOverlayFactory

class IStkGraphicsRhumbLineInterpolatorFactory(object):
    """The rhumb line interpolator computes interpolated positions along a rhumb line. Rhumb lines are lines of constant bearing. They appear as straight lines on a Mercator 2D map projection and are well suited to navigation."""
    _uuid = "{1cf08578-668b-431a-9df2-8bb329e3fdf5}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithCentralBody"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithCentralBodyAndGranularity"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsRhumbLineInterpolatorFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsRhumbLineInterpolatorFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsRhumbLineInterpolatorFactory = agcom.GUID(IStkGraphicsRhumbLineInterpolatorFactory._uuid)
        vtable_offset_local = IStkGraphicsRhumbLineInterpolatorFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsRhumbLineInterpolatorFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithCentralBody"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsRhumbLineInterpolatorFactory, vtable_offset_local+2, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithCentralBodyAndGranularity"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsRhumbLineInterpolatorFactory, vtable_offset_local+3, agcom.BSTR, agcom.DOUBLE, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsRhumbLineInterpolatorFactory.__dict__ and type(IStkGraphicsRhumbLineInterpolatorFactory.__dict__[attrname]) == property:
            return IStkGraphicsRhumbLineInterpolatorFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsRhumbLineInterpolatorFactory.")
    
    def Initialize(self) -> "IStkGraphicsRhumbLineInterpolator":
        """Initializes a default rhumb line interpolator. This is equivalent to constructing a rhumb line interpolator with a central body equal to an instance of earth central body and a granularity of 1 degree."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithCentralBody(self, centralBody:str) -> "IStkGraphicsRhumbLineInterpolator":
        """Initializes a rhumb line interpolator with the specified centralBody and a granularity of 1 degree."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithCentralBody"](arg_centralBody.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithCentralBodyAndGranularity(self, centralBody:str, granularity:float) -> "IStkGraphicsRhumbLineInterpolator":
        """Initializes a rhumb line interpolator with the specified centralBody and granularity."""
        with agmarshall.BSTR_arg(centralBody) as arg_centralBody, \
             agmarshall.DOUBLE_arg(granularity) as arg_granularity, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithCentralBodyAndGranularity"](arg_centralBody.COM_val, arg_granularity.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{1cf08578-668b-431a-9df2-8bb329e3fdf5}", IStkGraphicsRhumbLineInterpolatorFactory)
agcls.AgTypeNameMap["IStkGraphicsRhumbLineInterpolatorFactory"] = IStkGraphicsRhumbLineInterpolatorFactory

class IStkGraphicsSceneDisplayConditionFactory(object):
    """A display condition used to control what scene or scenes an object, such as a primitive, is rendered in. This is used to show an object in some scenes and hide it in others."""
    _uuid = "{930929f7-1d93-4575-a18f-b376e9a16cf7}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsSceneDisplayConditionFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsSceneDisplayConditionFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsSceneDisplayConditionFactory = agcom.GUID(IStkGraphicsSceneDisplayConditionFactory._uuid)
        vtable_offset_local = IStkGraphicsSceneDisplayConditionFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSceneDisplayConditionFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsSceneDisplayConditionFactory.__dict__ and type(IStkGraphicsSceneDisplayConditionFactory.__dict__[attrname]) == property:
            return IStkGraphicsSceneDisplayConditionFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsSceneDisplayConditionFactory.")
    
    def Initialize(self) -> "IStkGraphicsSceneDisplayCondition":
        """Initializes a default scene display condition. When this display condition is assigned to an object, such as a primitive, the object can be restricted to only render in certain scenes. Call set display in scene or display only in scene to limit the scenes."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{930929f7-1d93-4575-a18f-b376e9a16cf7}", IStkGraphicsSceneDisplayConditionFactory)
agcls.AgTypeNameMap["IStkGraphicsSceneDisplayConditionFactory"] = IStkGraphicsSceneDisplayConditionFactory

class IStkGraphicsSceneManagerInitializer(object):
    """The static scene manager class provides global properties and functionality that apply to all scenes and thus affect the rendering of every globe control..."""
    _uuid = "{dd3adf22-21f0-4220-8f3f-bda974157d48}"
    _num_methods = 7
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetPrimitives"] = _raise_uninitialized_error
        self.__dict__["_GetScreenOverlays"] = _raise_uninitialized_error
        self.__dict__["_GetTextures"] = _raise_uninitialized_error
        self.__dict__["_GetGlobeOverlaySettings"] = _raise_uninitialized_error
        self.__dict__["_GetScenes"] = _raise_uninitialized_error
        self.__dict__["_Render"] = _raise_uninitialized_error
        self.__dict__["_GetFrameRate"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsSceneManagerInitializer._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsSceneManagerInitializer from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsSceneManagerInitializer = agcom.GUID(IStkGraphicsSceneManagerInitializer._uuid)
        vtable_offset_local = IStkGraphicsSceneManagerInitializer._vtable_offset - 1
        self.__dict__["_GetPrimitives"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSceneManagerInitializer, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetScreenOverlays"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSceneManagerInitializer, vtable_offset_local+2, POINTER(agcom.PVOID))
        self.__dict__["_GetTextures"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSceneManagerInitializer, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_GetGlobeOverlaySettings"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSceneManagerInitializer, vtable_offset_local+4, POINTER(agcom.PVOID))
        self.__dict__["_GetScenes"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSceneManagerInitializer, vtable_offset_local+5, POINTER(agcom.PVOID))
        self.__dict__["_Render"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSceneManagerInitializer, vtable_offset_local+6, )
        self.__dict__["_GetFrameRate"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSceneManagerInitializer, vtable_offset_local+7, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsSceneManagerInitializer.__dict__ and type(IStkGraphicsSceneManagerInitializer.__dict__[attrname]) == property:
            return IStkGraphicsSceneManagerInitializer.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsSceneManagerInitializer.")
    
    @property
    def Primitives(self) -> "IStkGraphicsPrimitiveManager":
        """Gets the primitive manager, which is used to add primitives to your scenes."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPrimitives"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def ScreenOverlays(self) -> "IStkGraphicsScreenOverlayManager":
        """Gets the screen overlay manager, which is used to add screen overlays to your scenes."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetScreenOverlays"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Textures(self) -> "IStkGraphicsTexture2DFactory":
        """Gets the texture 2d factory, which can be used to create textures from various sources."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTextures"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def GlobeOverlaySettings(self) -> "IStkGraphicsGlobeOverlaySettings":
        """Gets the globe overlay settings, which are used to set global settings for all globe overlays."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetGlobeOverlaySettings"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Scenes(self) -> "IStkGraphicsSceneCollection":
        """Gets a read-only collection of scenes that are associated with the scene manager."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetScenes"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def Render(self) -> None:
        """Renders all scenes within an application. To render a specific scene, use the Render method."""
        agcls.evaluate_hresult(self.__dict__["_Render"]())

    @property
    def FrameRate(self) -> "IStkGraphicsFrameRate":
        """Gets the frame rate class, which can be used to keep track of how fast scenes are being <see ref='Render'>rendered</see>."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetFrameRate"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{dd3adf22-21f0-4220-8f3f-bda974157d48}", IStkGraphicsSceneManagerInitializer)
agcls.AgTypeNameMap["IStkGraphicsSceneManagerInitializer"] = IStkGraphicsSceneManagerInitializer

class IStkGraphicsScreenOverlayFactory(object):
    """A visible element drawn in screen space. Overlays are useful for floating logos, heads up displays, and integrating user interfaces into the 3D window."""
    _uuid = "{45754d2a-e83f-4c32-9792-c90d9620a83a}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithPosAndSize"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsScreenOverlayFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsScreenOverlayFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsScreenOverlayFactory = agcom.GUID(IStkGraphicsScreenOverlayFactory._uuid)
        vtable_offset_local = IStkGraphicsScreenOverlayFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsScreenOverlayFactory, vtable_offset_local+1, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithPosAndSize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsScreenOverlayFactory, vtable_offset_local+2, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsScreenOverlayFactory.__dict__ and type(IStkGraphicsScreenOverlayFactory.__dict__[attrname]) == property:
            return IStkGraphicsScreenOverlayFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsScreenOverlayFactory.")
    
    def Initialize(self, xPixels:float, yPixels:float, widthPixels:float, heightPixels:float) -> "IStkGraphicsScreenOverlay":
        """Initializes the overlay with the specified x position, y position, width, and height, all specified in pixels."""
        with agmarshall.DOUBLE_arg(xPixels) as arg_xPixels, \
             agmarshall.DOUBLE_arg(yPixels) as arg_yPixels, \
             agmarshall.DOUBLE_arg(widthPixels) as arg_widthPixels, \
             agmarshall.DOUBLE_arg(heightPixels) as arg_heightPixels, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](arg_xPixels.COM_val, arg_yPixels.COM_val, arg_widthPixels.COM_val, arg_heightPixels.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithPosAndSize(self, position:list, size:list) -> "IStkGraphicsScreenOverlay":
        """Initializes the overlay with the specified position and size."""
        with agmarshall.SAFEARRAY_arg(position) as arg_position, \
             agmarshall.SAFEARRAY_arg(size) as arg_size, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithPosAndSize"](byref(arg_position.COM_val), byref(arg_size.COM_val), byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{45754d2a-e83f-4c32-9792-c90d9620a83a}", IStkGraphicsScreenOverlayFactory)
agcls.AgTypeNameMap["IStkGraphicsScreenOverlayFactory"] = IStkGraphicsScreenOverlayFactory

class IStkGraphicsSolidPrimitiveFactory(object):
    """Renders filled solid objects and their outlines. Example solids include boxes and ellipsoids. Various effects are supported, such as displaying the solid's silhouette, and hiding the outline of the backside of the solid..."""
    _uuid = "{b76858bc-4b6c-41c0-928a-2ae8fe8d6e03}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithHint"] = _raise_uninitialized_error
        self.__dict__["_GetMinimumSilhouetteWidthSupported"] = _raise_uninitialized_error
        self.__dict__["_GetMaximumSilhouetteWidthSupported"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsSolidPrimitiveFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsSolidPrimitiveFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsSolidPrimitiveFactory = agcom.GUID(IStkGraphicsSolidPrimitiveFactory._uuid)
        vtable_offset_local = IStkGraphicsSolidPrimitiveFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSolidPrimitiveFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithHint"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSolidPrimitiveFactory, vtable_offset_local+2, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_GetMinimumSilhouetteWidthSupported"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSolidPrimitiveFactory, vtable_offset_local+3, POINTER(agcom.FLOAT))
        self.__dict__["_GetMaximumSilhouetteWidthSupported"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSolidPrimitiveFactory, vtable_offset_local+4, POINTER(agcom.FLOAT))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsSolidPrimitiveFactory.__dict__ and type(IStkGraphicsSolidPrimitiveFactory.__dict__[attrname]) == property:
            return IStkGraphicsSolidPrimitiveFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsSolidPrimitiveFactory.")
    
    def Initialize(self) -> "IStkGraphicsSolidPrimitive":
        """Initializes a default solid primitive. This is equivalent to constructing a solid primitive with a set hint of Frequent."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithHint(self, setHint:"AgEStkGraphicsSetHint") -> "IStkGraphicsSolidPrimitive":
        """Initializes a solid primitive with the specified setHint."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsSetHint, setHint) as arg_setHint, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithHint"](arg_setHint.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def MinimumSilhouetteWidthSupported(self) -> float:
        """Gets the minimum silhouette width, in pixels, supported by the video card."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinimumSilhouetteWidthSupported"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def MaximumSilhouetteWidthSupported(self) -> float:
        """Gets the maximum silhouette width, in pixels, supported by the video card."""
        with agmarshall.FLOAT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaximumSilhouetteWidthSupported"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{b76858bc-4b6c-41c0-928a-2ae8fe8d6e03}", IStkGraphicsSolidPrimitiveFactory)
agcls.AgTypeNameMap["IStkGraphicsSolidPrimitiveFactory"] = IStkGraphicsSolidPrimitiveFactory

class IStkGraphicsSurfaceMeshPrimitiveFactory(object):
    """A triangle mesh primitive for meshes on the surface that need to conform to terrain."""
    _uuid = "{08c3d10b-0cf0-41e9-93d0-e73b9d25e329}"
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithSetHint"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithSetHintAndRenderingMethod"] = _raise_uninitialized_error
        self.__dict__["_Supported"] = _raise_uninitialized_error
        self.__dict__["_SupportedWithDefaultRenderingMethod"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsSurfaceMeshPrimitiveFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsSurfaceMeshPrimitiveFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsSurfaceMeshPrimitiveFactory = agcom.GUID(IStkGraphicsSurfaceMeshPrimitiveFactory._uuid)
        vtable_offset_local = IStkGraphicsSurfaceMeshPrimitiveFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSurfaceMeshPrimitiveFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithSetHint"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSurfaceMeshPrimitiveFactory, vtable_offset_local+2, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithSetHintAndRenderingMethod"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSurfaceMeshPrimitiveFactory, vtable_offset_local+3, agcom.LONG, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_Supported"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSurfaceMeshPrimitiveFactory, vtable_offset_local+4, agcom.LONG, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SupportedWithDefaultRenderingMethod"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsSurfaceMeshPrimitiveFactory, vtable_offset_local+5, POINTER(agcom.VARIANT_BOOL))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsSurfaceMeshPrimitiveFactory.__dict__ and type(IStkGraphicsSurfaceMeshPrimitiveFactory.__dict__[attrname]) == property:
            return IStkGraphicsSurfaceMeshPrimitiveFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsSurfaceMeshPrimitiveFactory.")
    
    def Initialize(self) -> "IStkGraphicsSurfaceMeshPrimitive":
        """Initializes a default surface mesh primitive. This is equivalent to constructing a surface mesh with a set hint of Frequent and a surface mesh rendering method of Automatic."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithSetHint(self, setHint:"AgEStkGraphicsSetHint") -> "IStkGraphicsSurfaceMeshPrimitive":
        """Initializes a surface mesh primitive with the specified setHint. This is equivalent to constructing a surface mesh with the specified setHint and a surface mesh rendering method of Automatic."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsSetHint, setHint) as arg_setHint, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithSetHint"](arg_setHint.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithSetHintAndRenderingMethod(self, setHint:"AgEStkGraphicsSetHint", renderingMethod:"AgEStkGraphicsSurfaceMeshRenderingMethod") -> "IStkGraphicsSurfaceMeshPrimitive":
        """Initializes a surface mesh primitive with the specified setHint and renderingMethod."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsSetHint, setHint) as arg_setHint, \
             agmarshall.AgEnum_arg(AgEStkGraphicsSurfaceMeshRenderingMethod, renderingMethod) as arg_renderingMethod, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithSetHintAndRenderingMethod"](arg_setHint.COM_val, arg_renderingMethod.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def Supported(self, renderingMethod:"AgEStkGraphicsSurfaceMeshRenderingMethod") -> bool:
        """Determines whether or not the video card supports the surface mesh primitive with the given renderingMethod."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsSurfaceMeshRenderingMethod, renderingMethod) as arg_renderingMethod, \
             agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_Supported"](arg_renderingMethod.COM_val, byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def SupportedWithDefaultRenderingMethod(self) -> bool:
        """Determines whether or not the video card supports the surface mesh primitive. This is equivalent to calling Supported with automatic."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_SupportedWithDefaultRenderingMethod"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{08c3d10b-0cf0-41e9-93d0-e73b9d25e329}", IStkGraphicsSurfaceMeshPrimitiveFactory)
agcls.AgTypeNameMap["IStkGraphicsSurfaceMeshPrimitiveFactory"] = IStkGraphicsSurfaceMeshPrimitiveFactory

class IStkGraphicsTerrainOverlayInitializer(object):
    """A globe overlay which shows terrain."""
    _uuid = "{74c0acde-8d75-49df-87c1-2c39e3240283}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetSupported"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsTerrainOverlayInitializer._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsTerrainOverlayInitializer from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsTerrainOverlayInitializer = agcom.GUID(IStkGraphicsTerrainOverlayInitializer._uuid)
        vtable_offset_local = IStkGraphicsTerrainOverlayInitializer._vtable_offset - 1
        self.__dict__["_GetSupported"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTerrainOverlayInitializer, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsTerrainOverlayInitializer.__dict__ and type(IStkGraphicsTerrainOverlayInitializer.__dict__[attrname]) == property:
            return IStkGraphicsTerrainOverlayInitializer.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsTerrainOverlayInitializer.")
    
    @property
    def Supported(self) -> bool:
        """Gets whether the video card supports adding terrain overlay objects. Video cards that support OpenGL 1.2 or higher support terrain overlay objects."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSupported"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{74c0acde-8d75-49df-87c1-2c39e3240283}", IStkGraphicsTerrainOverlayInitializer)
agcls.AgTypeNameMap["IStkGraphicsTerrainOverlayInitializer"] = IStkGraphicsTerrainOverlayInitializer

class IStkGraphicsTextBatchPrimitiveFactory(object):
    """ Renders one or more strings in the 3D scene.  For best performance, avoid creating lots of batches with only a few strings each. See the Batching Performance Overview. """
    _uuid = "{dfcc32bb-e95a-46c5-a1e4-ed3acf184d3a}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_InitializeWithGraphicsFont"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithGraphicsFontAndSetHint"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithGraphicsFontAndSetHint2d"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsTextBatchPrimitiveFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsTextBatchPrimitiveFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsTextBatchPrimitiveFactory = agcom.GUID(IStkGraphicsTextBatchPrimitiveFactory._uuid)
        vtable_offset_local = IStkGraphicsTextBatchPrimitiveFactory._vtable_offset - 1
        self.__dict__["_InitializeWithGraphicsFont"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextBatchPrimitiveFactory, vtable_offset_local+1, agcom.PVOID, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithGraphicsFontAndSetHint"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextBatchPrimitiveFactory, vtable_offset_local+2, agcom.PVOID, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithGraphicsFontAndSetHint2d"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextBatchPrimitiveFactory, vtable_offset_local+3, agcom.PVOID, agcom.LONG, agcom.VARIANT_BOOL, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsTextBatchPrimitiveFactory.__dict__ and type(IStkGraphicsTextBatchPrimitiveFactory.__dict__[attrname]) == property:
            return IStkGraphicsTextBatchPrimitiveFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsTextBatchPrimitiveFactory.")
    
    def InitializeWithGraphicsFont(self, font:"IStkGraphicsGraphicsFont") -> "IStkGraphicsTextBatchPrimitive":
        """Initializes a marker batch primitive with the specified font. This is equivalent to constructing a text batch with the specified font and a set hint of Frequent."""
        with agmarshall.AgInterface_in_arg(font, IStkGraphicsGraphicsFont) as arg_font, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithGraphicsFont"](arg_font.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithGraphicsFontAndSetHint(self, font:"IStkGraphicsGraphicsFont", setHint:"AgEStkGraphicsSetHint") -> "IStkGraphicsTextBatchPrimitive":
        """Initializes a marker batch primitive with the specified font and setHint."""
        with agmarshall.AgInterface_in_arg(font, IStkGraphicsGraphicsFont) as arg_font, \
             agmarshall.AgEnum_arg(AgEStkGraphicsSetHint, setHint) as arg_setHint, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithGraphicsFontAndSetHint"](arg_font.COM_val, arg_setHint.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithGraphicsFontAndSetHint2d(self, font:"IStkGraphicsGraphicsFont", setHint:"AgEStkGraphicsSetHint", renderInScreenSpace:bool) -> "IStkGraphicsTextBatchPrimitive":
        """Initializes a text batch primitive with the specified font and setHint, optimized for 2d screen space rendering."""
        with agmarshall.AgInterface_in_arg(font, IStkGraphicsGraphicsFont) as arg_font, \
             agmarshall.AgEnum_arg(AgEStkGraphicsSetHint, setHint) as arg_setHint, \
             agmarshall.VARIANT_BOOL_arg(renderInScreenSpace) as arg_renderInScreenSpace, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithGraphicsFontAndSetHint2d"](arg_font.COM_val, arg_setHint.COM_val, arg_renderInScreenSpace.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{dfcc32bb-e95a-46c5-a1e4-ed3acf184d3a}", IStkGraphicsTextBatchPrimitiveFactory)
agcls.AgTypeNameMap["IStkGraphicsTextBatchPrimitiveFactory"] = IStkGraphicsTextBatchPrimitiveFactory

class IStkGraphicsTextBatchPrimitiveOptionalParametersFactory(object):
    """Optional per-string and per-batch parameters for text batch primitive..."""
    _uuid = "{03511893-3980-4c0e-9b99-7f86398acadf}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsTextBatchPrimitiveOptionalParametersFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsTextBatchPrimitiveOptionalParametersFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsTextBatchPrimitiveOptionalParametersFactory = agcom.GUID(IStkGraphicsTextBatchPrimitiveOptionalParametersFactory._uuid)
        vtable_offset_local = IStkGraphicsTextBatchPrimitiveOptionalParametersFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextBatchPrimitiveOptionalParametersFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsTextBatchPrimitiveOptionalParametersFactory.__dict__ and type(IStkGraphicsTextBatchPrimitiveOptionalParametersFactory.__dict__[attrname]) == property:
            return IStkGraphicsTextBatchPrimitiveOptionalParametersFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsTextBatchPrimitiveOptionalParametersFactory.")
    
    def Initialize(self) -> "IStkGraphicsTextBatchPrimitiveOptionalParameters":
        """Initializes default text batch primitive optional parameters."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{03511893-3980-4c0e-9b99-7f86398acadf}", IStkGraphicsTextBatchPrimitiveOptionalParametersFactory)
agcls.AgTypeNameMap["IStkGraphicsTextBatchPrimitiveOptionalParametersFactory"] = IStkGraphicsTextBatchPrimitiveOptionalParametersFactory

class IStkGraphicsTextOverlayFactory(object):
    """A rectangular overlay that contains text."""
    _uuid = "{183a48a5-a123-493a-9e6e-688775a7ca79}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithXYWidthHeight"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithPositionSize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithWidthHeightUnits"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsTextOverlayFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsTextOverlayFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsTextOverlayFactory = agcom.GUID(IStkGraphicsTextOverlayFactory._uuid)
        vtable_offset_local = IStkGraphicsTextOverlayFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextOverlayFactory, vtable_offset_local+1, agcom.PVOID, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithXYWidthHeight"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextOverlayFactory, vtable_offset_local+2, agcom.PVOID, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithPositionSize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextOverlayFactory, vtable_offset_local+3, agcom.PVOID, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithWidthHeightUnits"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextOverlayFactory, vtable_offset_local+4, agcom.PVOID, agcom.DOUBLE, agcom.LONG, agcom.DOUBLE, agcom.LONG, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsTextOverlayFactory.__dict__ and type(IStkGraphicsTextOverlayFactory.__dict__[attrname]) == property:
            return IStkGraphicsTextOverlayFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsTextOverlayFactory.")
    
    def Initialize(self, font:"IStkGraphicsGraphicsFont") -> "IStkGraphicsTextOverlay":
        """Initializes the overlay with a position of (0, 0), a width of 100 pixels, and a height of 50 pixels. <param name='font'>The graphics font that defines how text is drawn.</param>"""
        with agmarshall.AgInterface_in_arg(font, IStkGraphicsGraphicsFont) as arg_font, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](arg_font.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithXYWidthHeight(self, font:"IStkGraphicsGraphicsFont", xPixels:float, yPixels:float, widthPixels:float, heightPixels:float) -> "IStkGraphicsTextOverlay":
        """Initializes the overlay with the specified x position, y position, width, and height, all specified in pixels."""
        with agmarshall.AgInterface_in_arg(font, IStkGraphicsGraphicsFont) as arg_font, \
             agmarshall.DOUBLE_arg(xPixels) as arg_xPixels, \
             agmarshall.DOUBLE_arg(yPixels) as arg_yPixels, \
             agmarshall.DOUBLE_arg(widthPixels) as arg_widthPixels, \
             agmarshall.DOUBLE_arg(heightPixels) as arg_heightPixels, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithXYWidthHeight"](arg_font.COM_val, arg_xPixels.COM_val, arg_yPixels.COM_val, arg_widthPixels.COM_val, arg_heightPixels.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithPositionSize(self, font:"IStkGraphicsGraphicsFont", position:list, size:list) -> "IStkGraphicsTextOverlay":
        """Initializes the overlay with the specified position and size."""
        with agmarshall.AgInterface_in_arg(font, IStkGraphicsGraphicsFont) as arg_font, \
             agmarshall.SAFEARRAY_arg(position) as arg_position, \
             agmarshall.SAFEARRAY_arg(size) as arg_size, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithPositionSize"](arg_font.COM_val, byref(arg_position.COM_val), byref(arg_size.COM_val), byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithWidthHeightUnits(self, font:"IStkGraphicsGraphicsFont", width:float, widthUnit:"AgEStkGraphicsScreenOverlayUnit", height:float, heightUnit:"AgEStkGraphicsScreenOverlayUnit") -> "IStkGraphicsTextOverlay":
        """Initializes the overlay with the specified position and size."""
        with agmarshall.AgInterface_in_arg(font, IStkGraphicsGraphicsFont) as arg_font, \
             agmarshall.DOUBLE_arg(width) as arg_width, \
             agmarshall.AgEnum_arg(AgEStkGraphicsScreenOverlayUnit, widthUnit) as arg_widthUnit, \
             agmarshall.DOUBLE_arg(height) as arg_height, \
             agmarshall.AgEnum_arg(AgEStkGraphicsScreenOverlayUnit, heightUnit) as arg_heightUnit, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithWidthHeightUnits"](arg_font.COM_val, arg_width.COM_val, arg_widthUnit.COM_val, arg_height.COM_val, arg_heightUnit.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{183a48a5-a123-493a-9e6e-688775a7ca79}", IStkGraphicsTextOverlayFactory)
agcls.AgTypeNameMap["IStkGraphicsTextOverlayFactory"] = IStkGraphicsTextOverlayFactory

class IStkGraphicsTextureMatrixFactory(object):
    """A 4 by 4 matrix applied to a texture coordinate."""
    _uuid = "{d4fcc6c9-d53a-4988-a09e-3edc080936d4}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeByValues"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithAffineTransform"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithRectangles"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsTextureMatrixFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsTextureMatrixFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsTextureMatrixFactory = agcom.GUID(IStkGraphicsTextureMatrixFactory._uuid)
        vtable_offset_local = IStkGraphicsTextureMatrixFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextureMatrixFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeByValues"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextureMatrixFactory, vtable_offset_local+2, agcom.FLOAT, agcom.FLOAT, agcom.FLOAT, agcom.FLOAT, agcom.FLOAT, agcom.FLOAT, agcom.FLOAT, agcom.FLOAT, agcom.FLOAT, agcom.FLOAT, agcom.FLOAT, agcom.FLOAT, agcom.FLOAT, agcom.FLOAT, agcom.FLOAT, agcom.FLOAT, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithAffineTransform"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextureMatrixFactory, vtable_offset_local+3, POINTER(agcom.SAFEARRAY), POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithRectangles"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextureMatrixFactory, vtable_offset_local+4, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsTextureMatrixFactory.__dict__ and type(IStkGraphicsTextureMatrixFactory.__dict__[attrname]) == property:
            return IStkGraphicsTextureMatrixFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsTextureMatrixFactory.")
    
    def Initialize(self) -> "IStkGraphicsTextureMatrix":
        """Initializes a texture matrix to the identity matrix."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeByValues(self, m11:float, m12:float, m13:float, m14:float, m21:float, m22:float, m23:float, m24:float, m31:float, m32:float, m33:float, m34:float, m41:float, m42:float, m43:float, m44:float) -> "IStkGraphicsTextureMatrix":
        """Initializes a texture matrix. The subscripts define [row][column]."""
        with agmarshall.FLOAT_arg(m11) as arg_m11, \
             agmarshall.FLOAT_arg(m12) as arg_m12, \
             agmarshall.FLOAT_arg(m13) as arg_m13, \
             agmarshall.FLOAT_arg(m14) as arg_m14, \
             agmarshall.FLOAT_arg(m21) as arg_m21, \
             agmarshall.FLOAT_arg(m22) as arg_m22, \
             agmarshall.FLOAT_arg(m23) as arg_m23, \
             agmarshall.FLOAT_arg(m24) as arg_m24, \
             agmarshall.FLOAT_arg(m31) as arg_m31, \
             agmarshall.FLOAT_arg(m32) as arg_m32, \
             agmarshall.FLOAT_arg(m33) as arg_m33, \
             agmarshall.FLOAT_arg(m34) as arg_m34, \
             agmarshall.FLOAT_arg(m41) as arg_m41, \
             agmarshall.FLOAT_arg(m42) as arg_m42, \
             agmarshall.FLOAT_arg(m43) as arg_m43, \
             agmarshall.FLOAT_arg(m44) as arg_m44, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeByValues"](arg_m11.COM_val, arg_m12.COM_val, arg_m13.COM_val, arg_m14.COM_val, arg_m21.COM_val, arg_m22.COM_val, arg_m23.COM_val, arg_m24.COM_val, arg_m31.COM_val, arg_m32.COM_val, arg_m33.COM_val, arg_m34.COM_val, arg_m41.COM_val, arg_m42.COM_val, arg_m43.COM_val, arg_m44.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithAffineTransform(self, matrix:list) -> "IStkGraphicsTextureMatrix":
        """Initializes a texture matrix from a matrix. The upper left 2x2 matrix defines rotation and scaling. The top two elements of the last column define translation."""
        with agmarshall.SAFEARRAY_arg(matrix) as arg_matrix, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithAffineTransform"](byref(arg_matrix.COM_val), byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithRectangles(self, corner0:list, corner1:list, corner2:list, corner3:list) -> "IStkGraphicsTextureMatrix":
        """Initializes a texture matrix from texture corner points. Normally, a texture is mapped such that the lower left corner is texture coordinate (0, 0), the lower right is (1, 0), the upper right is (1, 1), and the upper left is (0, 1)..."""
        with agmarshall.SAFEARRAY_arg(corner0) as arg_corner0, \
             agmarshall.SAFEARRAY_arg(corner1) as arg_corner1, \
             agmarshall.SAFEARRAY_arg(corner2) as arg_corner2, \
             agmarshall.SAFEARRAY_arg(corner3) as arg_corner3, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithRectangles"](byref(arg_corner0.COM_val), byref(arg_corner1.COM_val), byref(arg_corner2.COM_val), byref(arg_corner3.COM_val), byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{d4fcc6c9-d53a-4988-a09e-3edc080936d4}", IStkGraphicsTextureMatrixFactory)
agcls.AgTypeNameMap["IStkGraphicsTextureMatrixFactory"] = IStkGraphicsTextureMatrixFactory

class IStkGraphicsTextureScreenOverlayFactory(object):
    """A rectangular overlay that can be assigned a texture."""
    _uuid = "{d68b862b-50c5-4803-9a98-d404c0aa967a}"
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithXYWidthHeight"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithPositionSize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithXYTexture"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithPositionTexture"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsTextureScreenOverlayFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsTextureScreenOverlayFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsTextureScreenOverlayFactory = agcom.GUID(IStkGraphicsTextureScreenOverlayFactory._uuid)
        vtable_offset_local = IStkGraphicsTextureScreenOverlayFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextureScreenOverlayFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithXYWidthHeight"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextureScreenOverlayFactory, vtable_offset_local+2, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithPositionSize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextureScreenOverlayFactory, vtable_offset_local+3, POINTER(agcom.SAFEARRAY), POINTER(agcom.SAFEARRAY), POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithXYTexture"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextureScreenOverlayFactory, vtable_offset_local+4, agcom.DOUBLE, agcom.DOUBLE, agcom.PVOID, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithPositionTexture"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTextureScreenOverlayFactory, vtable_offset_local+5, POINTER(agcom.SAFEARRAY), agcom.PVOID, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsTextureScreenOverlayFactory.__dict__ and type(IStkGraphicsTextureScreenOverlayFactory.__dict__[attrname]) == property:
            return IStkGraphicsTextureScreenOverlayFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsTextureScreenOverlayFactory.")
    
    def Initialize(self) -> "IStkGraphicsTextureScreenOverlay":
        """Initializes the overlay with a position of (0, 0), a width of 100 pixels, and a height of 50 pixels."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithXYWidthHeight(self, xPixels:float, yPixels:float, widthPixels:float, heightPixels:float) -> "IStkGraphicsTextureScreenOverlay":
        """Initializes the overlay with the specified x position, y position, width, and height, all specified in pixels."""
        with agmarshall.DOUBLE_arg(xPixels) as arg_xPixels, \
             agmarshall.DOUBLE_arg(yPixels) as arg_yPixels, \
             agmarshall.DOUBLE_arg(widthPixels) as arg_widthPixels, \
             agmarshall.DOUBLE_arg(heightPixels) as arg_heightPixels, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithXYWidthHeight"](arg_xPixels.COM_val, arg_yPixels.COM_val, arg_widthPixels.COM_val, arg_heightPixels.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithPositionSize(self, position:list, size:list) -> "IStkGraphicsTextureScreenOverlay":
        """Initializes the overlay with the specified position and size."""
        with agmarshall.SAFEARRAY_arg(position) as arg_position, \
             agmarshall.SAFEARRAY_arg(size) as arg_size, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithPositionSize"](byref(arg_position.COM_val), byref(arg_size.COM_val), byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithXYTexture(self, xPixels:float, yPixels:float, texture:"IStkGraphicsRendererTexture2D") -> "IStkGraphicsTextureScreenOverlay":
        """Initializes the overlay with a specified background texture. The size of the overlay will be the same as the size of the texture."""
        with agmarshall.DOUBLE_arg(xPixels) as arg_xPixels, \
             agmarshall.DOUBLE_arg(yPixels) as arg_yPixels, \
             agmarshall.AgInterface_in_arg(texture, IStkGraphicsRendererTexture2D) as arg_texture, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithXYTexture"](arg_xPixels.COM_val, arg_yPixels.COM_val, arg_texture.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithPositionTexture(self, position:list, texture:"IStkGraphicsRendererTexture2D") -> "IStkGraphicsTextureScreenOverlay":
        """Initializes the overlay with a specified background texture. The size of the overlay will be the same as the size of the texture."""
        with agmarshall.SAFEARRAY_arg(position) as arg_position, \
             agmarshall.AgInterface_in_arg(texture, IStkGraphicsRendererTexture2D) as arg_texture, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithPositionTexture"](byref(arg_position.COM_val), arg_texture.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{d68b862b-50c5-4803-9a98-d404c0aa967a}", IStkGraphicsTextureScreenOverlayFactory)
agcls.AgTypeNameMap["IStkGraphicsTextureScreenOverlayFactory"] = IStkGraphicsTextureScreenOverlayFactory

class IStkGraphicsTimeIntervalDisplayConditionFactory(object):
    """Defines an inclusive time interval that determines when an object, such as a primitive, is rendered based on the current animation time ."""
    _uuid = "{99ca1422-3ae0-4620-9046-d0bc4ca2bee5}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithTimes"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithTimeInterval"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsTimeIntervalDisplayConditionFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsTimeIntervalDisplayConditionFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsTimeIntervalDisplayConditionFactory = agcom.GUID(IStkGraphicsTimeIntervalDisplayConditionFactory._uuid)
        vtable_offset_local = IStkGraphicsTimeIntervalDisplayConditionFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTimeIntervalDisplayConditionFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithTimes"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTimeIntervalDisplayConditionFactory, vtable_offset_local+2, agcom.PVOID, agcom.PVOID, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithTimeInterval"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTimeIntervalDisplayConditionFactory, vtable_offset_local+3, POINTER(agcom.SAFEARRAY), POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsTimeIntervalDisplayConditionFactory.__dict__ and type(IStkGraphicsTimeIntervalDisplayConditionFactory.__dict__[attrname]) == property:
            return IStkGraphicsTimeIntervalDisplayConditionFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsTimeIntervalDisplayConditionFactory.")
    
    def Initialize(self) -> "IStkGraphicsTimeIntervalDisplayCondition":
        """Initializes a default time display condition. minimum time is set to JulianDate.MinValue and maximum time is set to JulianDate.MaxValue. With this interval, an object is always rendered regardless of the current animation time."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithTimes(self, minimumTime:"IDate", maximumTime:"IDate") -> "IStkGraphicsTimeIntervalDisplayCondition":
        """Initializes a time display condition with the inclusive time interval [minimumTime, maximumTime]..."""
        with agmarshall.AgInterface_in_arg(minimumTime, IDate) as arg_minimumTime, \
             agmarshall.AgInterface_in_arg(maximumTime, IDate) as arg_maximumTime, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithTimes"](arg_minimumTime.COM_val, arg_maximumTime.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithTimeInterval(self, timeInterval:list) -> "IStkGraphicsTimeIntervalDisplayCondition":
        """Initializes a time display condition with a time interval."""
        with agmarshall.SAFEARRAY_arg(timeInterval) as arg_timeInterval, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithTimeInterval"](byref(arg_timeInterval.COM_val), byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{99ca1422-3ae0-4620-9046-d0bc4ca2bee5}", IStkGraphicsTimeIntervalDisplayConditionFactory)
agcls.AgTypeNameMap["IStkGraphicsTimeIntervalDisplayConditionFactory"] = IStkGraphicsTimeIntervalDisplayConditionFactory

class IStkGraphicsTriangleMeshPrimitiveFactory(object):
    """Renders a triangle mesh in the 3D scene. Examples of triangle meshes includes polygons on the globe (e.g. states or countries), terrain and imagery extents, ellipses, and extrusions."""
    _uuid = "{efd9ac8c-e2f0-4a06-9e92-15ebe59d5c38}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        self.__dict__["_InitializeWithSetHint"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsTriangleMeshPrimitiveFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsTriangleMeshPrimitiveFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsTriangleMeshPrimitiveFactory = agcom.GUID(IStkGraphicsTriangleMeshPrimitiveFactory._uuid)
        vtable_offset_local = IStkGraphicsTriangleMeshPrimitiveFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTriangleMeshPrimitiveFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_InitializeWithSetHint"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTriangleMeshPrimitiveFactory, vtable_offset_local+2, agcom.LONG, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsTriangleMeshPrimitiveFactory.__dict__ and type(IStkGraphicsTriangleMeshPrimitiveFactory.__dict__[attrname]) == property:
            return IStkGraphicsTriangleMeshPrimitiveFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsTriangleMeshPrimitiveFactory.")
    
    def Initialize(self) -> "IStkGraphicsTriangleMeshPrimitive":
        """Initializes a default triangle mesh primitive. This is equivalent to constructing a triangle mesh with a set hint of Frequent."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InitializeWithSetHint(self, setHint:"AgEStkGraphicsSetHint") -> "IStkGraphicsTriangleMeshPrimitive":
        """Initializes a triangle mesh primitive with the specified setHint ."""
        with agmarshall.AgEnum_arg(AgEStkGraphicsSetHint, setHint) as arg_setHint, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithSetHint"](arg_setHint.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{efd9ac8c-e2f0-4a06-9e92-15ebe59d5c38}", IStkGraphicsTriangleMeshPrimitiveFactory)
agcls.AgTypeNameMap["IStkGraphicsTriangleMeshPrimitiveFactory"] = IStkGraphicsTriangleMeshPrimitiveFactory

class IStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory(object):
    """Optional parameters for triangle mesh primitive..."""
    _uuid = "{dab0d95c-d51e-4152-9f63-01441ca43ad9}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Initialize"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory = agcom.GUID(IStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory._uuid)
        vtable_offset_local = IStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory._vtable_offset - 1
        self.__dict__["_Initialize"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory, vtable_offset_local+1, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory.__dict__ and type(IStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory.__dict__[attrname]) == property:
            return IStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory.")
    
    def Initialize(self) -> "IStkGraphicsTriangleMeshPrimitiveOptionalParameters":
        """Initializes default triangle mesh primitive optional parameters."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Initialize"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{dab0d95c-d51e-4152-9f63-01441ca43ad9}", IStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory)
agcls.AgTypeNameMap["IStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory"] = IStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory

class IStkGraphicsVectorPrimitiveFactory(object):
    """Renders a vector in the 3D scene. A vector is defined by a source (given by an ISystem) and a direction (given by an IVector or IPoint). Length is auto-calculated or can be set separately."""
    _uuid = "{a7013a6a-64ea-43b6-807f-4f789df05438}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_InitializeWithDirection"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStkGraphicsVectorPrimitiveFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStkGraphicsVectorPrimitiveFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStkGraphicsVectorPrimitiveFactory = agcom.GUID(IStkGraphicsVectorPrimitiveFactory._uuid)
        vtable_offset_local = IStkGraphicsVectorPrimitiveFactory._vtable_offset - 1
        self.__dict__["_InitializeWithDirection"] = IAGFUNCTYPE(pUnk, IID_IStkGraphicsVectorPrimitiveFactory, vtable_offset_local+1, agcom.PVOID, agcom.PVOID, agcom.PVOID, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStkGraphicsVectorPrimitiveFactory.__dict__ and type(IStkGraphicsVectorPrimitiveFactory.__dict__[attrname]) == property:
            return IStkGraphicsVectorPrimitiveFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStkGraphicsVectorPrimitiveFactory.")
    
    def InitializeWithDirection(self, sys:"ICrdnSystem", dir:"ICrdnVector", font:"IStkGraphicsGraphicsFont") -> "IStkGraphicsVectorPrimitive":
        """Initializes a vector primitive with the specified ISystem sys as its source and pointing in direction dir."""
        with agmarshall.AgInterface_in_arg(sys, ICrdnSystem) as arg_sys, \
             agmarshall.AgInterface_in_arg(dir, ICrdnVector) as arg_dir, \
             agmarshall.AgInterface_in_arg(font, IStkGraphicsGraphicsFont) as arg_font, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InitializeWithDirection"](arg_sys.COM_val, arg_dir.COM_val, arg_font.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{a7013a6a-64ea-43b6-807f-4f789df05438}", IStkGraphicsVectorPrimitiveFactory)
agcls.AgTypeNameMap["IStkGraphicsVectorPrimitiveFactory"] = IStkGraphicsVectorPrimitiveFactory



class StkGraphicsPathPoint(IStkGraphicsPathPoint):
    """Represents a path point used in conjunction with the Path Primitive."""
    def __init__(self, sourceObject=None):
        IStkGraphicsPathPoint.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsPathPoint._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsPathPoint._get_property(self, attrname) is not None: found_prop = IStkGraphicsPathPoint._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsPathPoint.")
        
agcls.AgClassCatalog.add_catalog_entry("{4C86EAB3-9C30-4D1B-9391-A27010590176}", StkGraphicsPathPoint)


class StkGraphicsPathPointFactory(IStkGraphicsPathPointFactory):
    """Factory creates path points."""
    def __init__(self, sourceObject=None):
        IStkGraphicsPathPointFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsPathPointFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsPathPointFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsPathPointFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsPathPointFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{997C56C5-C114-4C2E-A25A-4D4860FA913F}", StkGraphicsPathPointFactory)


class StkGraphicsBoundingSphere(IStkGraphicsBoundingSphere):
    """A sphere that encapsulates an object."""
    def __init__(self, sourceObject=None):
        IStkGraphicsBoundingSphere.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsBoundingSphere._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsBoundingSphere._get_property(self, attrname) is not None: found_prop = IStkGraphicsBoundingSphere._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsBoundingSphere.")
        
agcls.AgClassCatalog.add_catalog_entry("{40BA7967-5508-4D2C-9048-76EA16351F61}", StkGraphicsBoundingSphere)


class StkGraphicsBoundingSphereFactory(IStkGraphicsBoundingSphereFactory):
    """Creates bounding spheres."""
    def __init__(self, sourceObject=None):
        IStkGraphicsBoundingSphereFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsBoundingSphereFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsBoundingSphereFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsBoundingSphereFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsBoundingSphereFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{4CAEE1FD-33BB-4928-8363-39237A62C150}", StkGraphicsBoundingSphereFactory)


class StkGraphicsTextureFilter2D(IStkGraphicsTextureFilter2D):
    """A texture filter."""
    def __init__(self, sourceObject=None):
        IStkGraphicsTextureFilter2D.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsTextureFilter2D._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsTextureFilter2D._get_property(self, attrname) is not None: found_prop = IStkGraphicsTextureFilter2D._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsTextureFilter2D.")
        
agcls.AgClassCatalog.add_catalog_entry("{DAE13DA7-D678-4F1F-9F87-F584DF78B8FE}", StkGraphicsTextureFilter2D)


class StkGraphicsTextureFilter2DFactory(IStkGraphicsTextureFilter2DFactory):
    """Create texture filters."""
    def __init__(self, sourceObject=None):
        IStkGraphicsTextureFilter2DFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsTextureFilter2DFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsTextureFilter2DFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsTextureFilter2DFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsTextureFilter2DFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{C17EDE04-6594-4662-975E-795B7623414B}", StkGraphicsTextureFilter2DFactory)


class StkGraphicsRendererTexture2D(IStkGraphicsRendererTexture2D):
    """A 2D Texture. A texture represents an image that is ready for use by objects such as primitives and overlays. Textures typically reside in video memory."""
    def __init__(self, sourceObject=None):
        IStkGraphicsRendererTexture2D.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsRendererTexture2D._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsRendererTexture2D._get_property(self, attrname) is not None: found_prop = IStkGraphicsRendererTexture2D._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsRendererTexture2D.")
        
agcls.AgClassCatalog.add_catalog_entry("{295B9996-B4D8-4AAD-B612-CB0348444732}", StkGraphicsRendererTexture2D)


class StkGraphicsRendererTextureTemplate2D(IStkGraphicsRendererTextureTemplate2D):
    """Template object containing attributes required to create a 2D texture."""
    def __init__(self, sourceObject=None):
        IStkGraphicsRendererTextureTemplate2D.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsRendererTextureTemplate2D._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsRendererTextureTemplate2D._get_property(self, attrname) is not None: found_prop = IStkGraphicsRendererTextureTemplate2D._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsRendererTextureTemplate2D.")
        
agcls.AgClassCatalog.add_catalog_entry("{0192E348-0FD1-440D-881D-EF3B882D7190}", StkGraphicsRendererTextureTemplate2D)


class StkGraphicsPathPointCollection(IStkGraphicsPathPointCollection):
    """A collection of path points."""
    def __init__(self, sourceObject=None):
        IStkGraphicsPathPointCollection.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsPathPointCollection._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsPathPointCollection._get_property(self, attrname) is not None: found_prop = IStkGraphicsPathPointCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsPathPointCollection.")
        
agcls.AgClassCatalog.add_catalog_entry("{B1EBC1AA-0D8C-417B-BD4B-3A1489C8D39E}", StkGraphicsPathPointCollection)


class StkGraphicsObjectCollection(IStkGraphicsObjectCollection):
    """A collection of objects."""
    def __init__(self, sourceObject=None):
        IStkGraphicsObjectCollection.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsObjectCollection._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsObjectCollection._get_property(self, attrname) is not None: found_prop = IStkGraphicsObjectCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsObjectCollection.")
        
agcls.AgClassCatalog.add_catalog_entry("{EEFF034B-5D72-4EF4-A76D-A25AEBD04B1E}", StkGraphicsObjectCollection)


class StkGraphicsSceneCollection(IStkGraphicsSceneCollection):
    """A collection of scenes."""
    def __init__(self, sourceObject=None):
        IStkGraphicsSceneCollection.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsSceneCollection._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsSceneCollection._get_property(self, attrname) is not None: found_prop = IStkGraphicsSceneCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsSceneCollection.")
        
agcls.AgClassCatalog.add_catalog_entry("{1F9129CC-D135-4993-8E14-0AA4B8402AC8}", StkGraphicsSceneCollection)


class StkGraphicsScreenOverlayPickResultCollection(IStkGraphicsScreenOverlayPickResultCollection):
    """A collection of pick results."""
    def __init__(self, sourceObject=None):
        IStkGraphicsScreenOverlayPickResultCollection.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsScreenOverlayPickResultCollection._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsScreenOverlayPickResultCollection._get_property(self, attrname) is not None: found_prop = IStkGraphicsScreenOverlayPickResultCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsScreenOverlayPickResultCollection.")
        
agcls.AgClassCatalog.add_catalog_entry("{566B0B55-437E-40E9-BB0C-1119BC58C3A4}", StkGraphicsScreenOverlayPickResultCollection)


class StkGraphicsGlobeImageOverlayAddCompleteEventArgs(IStkGraphicsGlobeImageOverlayAddCompleteEventArgs):
    """The event is raised when the globe image overlay is displayed for the first time after being added using AddAsync."""
    def __init__(self, sourceObject=None):
        IStkGraphicsGlobeImageOverlayAddCompleteEventArgs.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsGlobeImageOverlayAddCompleteEventArgs._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsGlobeImageOverlayAddCompleteEventArgs._get_property(self, attrname) is not None: found_prop = IStkGraphicsGlobeImageOverlayAddCompleteEventArgs._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsGlobeImageOverlayAddCompleteEventArgs.")
        
agcls.AgClassCatalog.add_catalog_entry("{817BEFE9-18ED-489B-952E-8088AF90331D}", StkGraphicsGlobeImageOverlayAddCompleteEventArgs)


class StkGraphicsTerrainOverlayAddCompleteEventArgs(IStkGraphicsTerrainOverlayAddCompleteEventArgs):
    """The event is raised when the terrain overlay is displayed for the first time after having been added using AddAsync."""
    def __init__(self, sourceObject=None):
        IStkGraphicsTerrainOverlayAddCompleteEventArgs.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsTerrainOverlayAddCompleteEventArgs._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsTerrainOverlayAddCompleteEventArgs._get_property(self, attrname) is not None: found_prop = IStkGraphicsTerrainOverlayAddCompleteEventArgs._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsTerrainOverlayAddCompleteEventArgs.")
        
agcls.AgClassCatalog.add_catalog_entry("{589B5FC6-D8FE-4387-8E3E-188F6C6704C8}", StkGraphicsTerrainOverlayAddCompleteEventArgs)


class StkGraphicsPickResultCollection(IStkGraphicsPickResultCollection):
    """A collection of picked objects."""
    def __init__(self, sourceObject=None):
        IStkGraphicsPickResultCollection.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsPickResultCollection._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsPickResultCollection._get_property(self, attrname) is not None: found_prop = IStkGraphicsPickResultCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsPickResultCollection.")
        
agcls.AgClassCatalog.add_catalog_entry("{E6DDBF58-AB3C-4F46-AA2F-4D9A2E0884F8}", StkGraphicsPickResultCollection)


class StkGraphicsRenderingEventArgs(IStkGraphicsRenderingEventArgs):
    """The event is raised when the scene is rendered."""
    def __init__(self, sourceObject=None):
        IStkGraphicsRenderingEventArgs.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsRenderingEventArgs._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsRenderingEventArgs._get_property(self, attrname) is not None: found_prop = IStkGraphicsRenderingEventArgs._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsRenderingEventArgs.")
        
agcls.AgClassCatalog.add_catalog_entry("{46B2FD61-672F-4AD5-8588-F635D1EFB00C}", StkGraphicsRenderingEventArgs)


class StkGraphicsBatchPrimitiveIndex(IStkGraphicsBatchPrimitiveIndex):
    """Represents an individual item index that is associated with a batch primitive. Provides the Index of the individual item and the Primitive that contains that index..."""
    def __init__(self, sourceObject=None):
        IStkGraphicsBatchPrimitiveIndex.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsBatchPrimitiveIndex._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsBatchPrimitiveIndex._get_property(self, attrname) is not None: found_prop = IStkGraphicsBatchPrimitiveIndex._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsBatchPrimitiveIndex.")
        
agcls.AgClassCatalog.add_catalog_entry("{1AC81969-B283-482A-89A3-AE66819F864E}", StkGraphicsBatchPrimitiveIndex)


class StkGraphicsKmlDocumentCollection(IStkGraphicsKmlDocumentCollection):
    """A collection of KML documents."""
    def __init__(self, sourceObject=None):
        IStkGraphicsKmlDocumentCollection.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsKmlDocumentCollection._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsKmlDocumentCollection._get_property(self, attrname) is not None: found_prop = IStkGraphicsKmlDocumentCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsKmlDocumentCollection.")
        
agcls.AgClassCatalog.add_catalog_entry("{2FB2F974-55DD-4862-B78F-8D9AA8B9167C}", StkGraphicsKmlDocumentCollection)


class StkGraphicsKmlFeatureCollection(IStkGraphicsKmlFeatureCollection):
    """A collection of KML features."""
    def __init__(self, sourceObject=None):
        IStkGraphicsKmlFeatureCollection.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsKmlFeatureCollection._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsKmlFeatureCollection._get_property(self, attrname) is not None: found_prop = IStkGraphicsKmlFeatureCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsKmlFeatureCollection.")
        
agcls.AgClassCatalog.add_catalog_entry("{11C36E9E-AB1B-4F7A-B5CD-75B5E1F9DCA7}", StkGraphicsKmlFeatureCollection)


class StkGraphicsKmlDocumentLoadedEventArgs(IStkGraphicsKmlDocumentLoadedEventArgs):
    """The event is raised when a KML document has been loaded."""
    def __init__(self, sourceObject=None):
        IStkGraphicsKmlDocumentLoadedEventArgs.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsKmlDocumentLoadedEventArgs._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsKmlDocumentLoadedEventArgs._get_property(self, attrname) is not None: found_prop = IStkGraphicsKmlDocumentLoadedEventArgs._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsKmlDocumentLoadedEventArgs.")
        
agcls.AgClassCatalog.add_catalog_entry("{77E26868-F894-4E5D-AE27-3D259B9763E3}", StkGraphicsKmlDocumentLoadedEventArgs)


class StkGraphicsFactoryAndInitializers(IStkGraphicsFactoryAndInitializers):
    """Methods and properties are used to initialize new primitives, display conditions, screen overlays, textures and many other types; compute and retrieve triangulator results and access global properties (what's known as static properties, static methods a..."""
    def __init__(self, sourceObject=None):
        IStkGraphicsFactoryAndInitializers.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsFactoryAndInitializers._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsFactoryAndInitializers._get_property(self, attrname) is not None: found_prop = IStkGraphicsFactoryAndInitializers._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsFactoryAndInitializers.")
        
agcls.AgClassCatalog.add_catalog_entry("{06756FC9-1EF3-45CD-8A1F-CE6652BEA6C1}", StkGraphicsFactoryAndInitializers)


class StkGraphicsExtrudedPolylineTriangulatorResult(IStkGraphicsExtrudedPolylineTriangulatorResult, IStkGraphicsTriangulatorResult):
    """The result from extruded polyline triangulation: a triangle mesh defined using an indexed triangle list with top and bottom boundary positions. The mesh is commonly visualized with the triangle mesh primitive or surface mesh primitive..."""
    def __init__(self, sourceObject=None):
        IStkGraphicsExtrudedPolylineTriangulatorResult.__init__(self, sourceObject)
        IStkGraphicsTriangulatorResult.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsExtrudedPolylineTriangulatorResult._private_init(self, pUnk)
        IStkGraphicsTriangulatorResult._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsExtrudedPolylineTriangulatorResult._get_property(self, attrname) is not None: found_prop = IStkGraphicsExtrudedPolylineTriangulatorResult._get_property(self, attrname)
        if IStkGraphicsTriangulatorResult._get_property(self, attrname) is not None: found_prop = IStkGraphicsTriangulatorResult._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsExtrudedPolylineTriangulatorResult.")
        
agcls.AgClassCatalog.add_catalog_entry("{BD7096DB-7447-43A4-B1D7-7E831565C909}", StkGraphicsExtrudedPolylineTriangulatorResult)


class StkGraphicsSolidTriangulatorResult(IStkGraphicsSolidTriangulatorResult, IStkGraphicsTriangulatorResult):
    """The result from a triangulation of a solid: a triangle mesh defined using an indexed triangle list and positions outlining the solid. It is recommended to visualize the solid using a solid primitive..."""
    def __init__(self, sourceObject=None):
        IStkGraphicsSolidTriangulatorResult.__init__(self, sourceObject)
        IStkGraphicsTriangulatorResult.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsSolidTriangulatorResult._private_init(self, pUnk)
        IStkGraphicsTriangulatorResult._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsSolidTriangulatorResult._get_property(self, attrname) is not None: found_prop = IStkGraphicsSolidTriangulatorResult._get_property(self, attrname)
        if IStkGraphicsTriangulatorResult._get_property(self, attrname) is not None: found_prop = IStkGraphicsTriangulatorResult._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsSolidTriangulatorResult.")
        
agcls.AgClassCatalog.add_catalog_entry("{D97A5AF7-129F-4972-9DFB-B894D917B328}", StkGraphicsSolidTriangulatorResult)


class StkGraphicsSurfaceShapesResult(IStkGraphicsSurfaceShapesResult):
    """Represents the boundary positions of a shape on the surface computed from by a surface shapes method."""
    def __init__(self, sourceObject=None):
        IStkGraphicsSurfaceShapesResult.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsSurfaceShapesResult._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsSurfaceShapesResult._get_property(self, attrname) is not None: found_prop = IStkGraphicsSurfaceShapesResult._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsSurfaceShapesResult.")
        
agcls.AgClassCatalog.add_catalog_entry("{627EC36E-26FE-4D33-81B1-3A4CE5955DED}", StkGraphicsSurfaceShapesResult)


class StkGraphicsSurfaceTriangulatorResult(IStkGraphicsSurfaceTriangulatorResult, IStkGraphicsTriangulatorResult):
    """The result from a triangulation on the surface of a central body: a triangle mesh defined using an indexed triangle list and boundary positions surrounding the mesh..."""
    def __init__(self, sourceObject=None):
        IStkGraphicsSurfaceTriangulatorResult.__init__(self, sourceObject)
        IStkGraphicsTriangulatorResult.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsSurfaceTriangulatorResult._private_init(self, pUnk)
        IStkGraphicsTriangulatorResult._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsSurfaceTriangulatorResult._get_property(self, attrname) is not None: found_prop = IStkGraphicsSurfaceTriangulatorResult._get_property(self, attrname)
        if IStkGraphicsTriangulatorResult._get_property(self, attrname) is not None: found_prop = IStkGraphicsTriangulatorResult._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsSurfaceTriangulatorResult.")
        
agcls.AgClassCatalog.add_catalog_entry("{484F03DF-F617-49CC-A3AD-6AB09C86C400}", StkGraphicsSurfaceTriangulatorResult)


class StkGraphicsTriangulatorResult(IStkGraphicsTriangulatorResult):
    """The result from triangulation: a triangle mesh defined using an indexed triangle list. This is commonly visualized with the triangle mesh primitive or surface mesh primitive."""
    def __init__(self, sourceObject=None):
        IStkGraphicsTriangulatorResult.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsTriangulatorResult._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsTriangulatorResult._get_property(self, attrname) is not None: found_prop = IStkGraphicsTriangulatorResult._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsTriangulatorResult.")
        
agcls.AgClassCatalog.add_catalog_entry("{1981E859-F957-4752-9B11-76A77512222B}", StkGraphicsTriangulatorResult)


class StkGraphicsAGICustomTerrainOverlay(IStkGraphicsAGICustomTerrainOverlay, IStkGraphicsTerrainOverlay, IStkGraphicsGlobeOverlay):
    """A terrain overlay for handling AGI Cesium Terrain."""
    def __init__(self, sourceObject=None):
        IStkGraphicsAGICustomTerrainOverlay.__init__(self, sourceObject)
        IStkGraphicsTerrainOverlay.__init__(self, sourceObject)
        IStkGraphicsGlobeOverlay.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsAGICustomTerrainOverlay._private_init(self, pUnk)
        IStkGraphicsTerrainOverlay._private_init(self, pUnk)
        IStkGraphicsGlobeOverlay._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsAGICustomTerrainOverlay._get_property(self, attrname) is not None: found_prop = IStkGraphicsAGICustomTerrainOverlay._get_property(self, attrname)
        if IStkGraphicsTerrainOverlay._get_property(self, attrname) is not None: found_prop = IStkGraphicsTerrainOverlay._get_property(self, attrname)
        if IStkGraphicsGlobeOverlay._get_property(self, attrname) is not None: found_prop = IStkGraphicsGlobeOverlay._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsAGICustomTerrainOverlay.")
        
agcls.AgClassCatalog.add_catalog_entry("{474FD730-8942-48A2-B5C1-F84E6E5B112E}", StkGraphicsAGICustomTerrainOverlay)


class StkGraphicsAGIProcessedImageGlobeOverlay(IStkGraphicsAGIProcessedImageGlobeOverlay, IStkGraphicsGlobeImageOverlay, IStkGraphicsGlobeOverlay):
    """A globe image overlay for handling AGI Processed Image (PDTTX) files."""
    def __init__(self, sourceObject=None):
        IStkGraphicsAGIProcessedImageGlobeOverlay.__init__(self, sourceObject)
        IStkGraphicsGlobeImageOverlay.__init__(self, sourceObject)
        IStkGraphicsGlobeOverlay.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsAGIProcessedImageGlobeOverlay._private_init(self, pUnk)
        IStkGraphicsGlobeImageOverlay._private_init(self, pUnk)
        IStkGraphicsGlobeOverlay._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsAGIProcessedImageGlobeOverlay._get_property(self, attrname) is not None: found_prop = IStkGraphicsAGIProcessedImageGlobeOverlay._get_property(self, attrname)
        if IStkGraphicsGlobeImageOverlay._get_property(self, attrname) is not None: found_prop = IStkGraphicsGlobeImageOverlay._get_property(self, attrname)
        if IStkGraphicsGlobeOverlay._get_property(self, attrname) is not None: found_prop = IStkGraphicsGlobeOverlay._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsAGIProcessedImageGlobeOverlay.")
        
agcls.AgClassCatalog.add_catalog_entry("{26895086-F748-4134-8B1E-E51EF358363D}", StkGraphicsAGIProcessedImageGlobeOverlay)


class StkGraphicsAGIProcessedTerrainOverlay(IStkGraphicsAGIProcessedTerrainOverlay, IStkGraphicsTerrainOverlay, IStkGraphicsGlobeOverlay):
    """A terrain overlay for handling AGI Processed Terrain (PDTT) files."""
    def __init__(self, sourceObject=None):
        IStkGraphicsAGIProcessedTerrainOverlay.__init__(self, sourceObject)
        IStkGraphicsTerrainOverlay.__init__(self, sourceObject)
        IStkGraphicsGlobeOverlay.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsAGIProcessedTerrainOverlay._private_init(self, pUnk)
        IStkGraphicsTerrainOverlay._private_init(self, pUnk)
        IStkGraphicsGlobeOverlay._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsAGIProcessedTerrainOverlay._get_property(self, attrname) is not None: found_prop = IStkGraphicsAGIProcessedTerrainOverlay._get_property(self, attrname)
        if IStkGraphicsTerrainOverlay._get_property(self, attrname) is not None: found_prop = IStkGraphicsTerrainOverlay._get_property(self, attrname)
        if IStkGraphicsGlobeOverlay._get_property(self, attrname) is not None: found_prop = IStkGraphicsGlobeOverlay._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsAGIProcessedTerrainOverlay.")
        
agcls.AgClassCatalog.add_catalog_entry("{8B835120-12BD-4D18-AD78-2C507068F582}", StkGraphicsAGIProcessedTerrainOverlay)


class StkGraphicsAGIRoamImageGlobeOverlay(IStkGraphicsAGIRoamImageGlobeOverlay, IStkGraphicsGlobeImageOverlay, IStkGraphicsGlobeOverlay):
    """A globe image overlay for handling ROAM (TXM/TXB) files."""
    def __init__(self, sourceObject=None):
        IStkGraphicsAGIRoamImageGlobeOverlay.__init__(self, sourceObject)
        IStkGraphicsGlobeImageOverlay.__init__(self, sourceObject)
        IStkGraphicsGlobeOverlay.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsAGIRoamImageGlobeOverlay._private_init(self, pUnk)
        IStkGraphicsGlobeImageOverlay._private_init(self, pUnk)
        IStkGraphicsGlobeOverlay._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsAGIRoamImageGlobeOverlay._get_property(self, attrname) is not None: found_prop = IStkGraphicsAGIRoamImageGlobeOverlay._get_property(self, attrname)
        if IStkGraphicsGlobeImageOverlay._get_property(self, attrname) is not None: found_prop = IStkGraphicsGlobeImageOverlay._get_property(self, attrname)
        if IStkGraphicsGlobeOverlay._get_property(self, attrname) is not None: found_prop = IStkGraphicsGlobeOverlay._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsAGIRoamImageGlobeOverlay.")
        
agcls.AgClassCatalog.add_catalog_entry("{278C21A7-3D85-48C1-B934-BE89B25019CE}", StkGraphicsAGIRoamImageGlobeOverlay)


class StkGraphicsCameraSnapshot(IStkGraphicsCameraSnapshot):
    """Takes snapshots of the 3D window."""
    def __init__(self, sourceObject=None):
        IStkGraphicsCameraSnapshot.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsCameraSnapshot._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsCameraSnapshot._get_property(self, attrname) is not None: found_prop = IStkGraphicsCameraSnapshot._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsCameraSnapshot.")
        
agcls.AgClassCatalog.add_catalog_entry("{27A8C9DC-6AF7-436A-80B0-7B426D85EAB1}", StkGraphicsCameraSnapshot)


class StkGraphicsCameraVideoRecording(IStkGraphicsCameraVideoRecording):
    """Records the 3D window to either a movie file or to consecutively ordered image files each time the scene is rendered."""
    def __init__(self, sourceObject=None):
        IStkGraphicsCameraVideoRecording.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsCameraVideoRecording._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsCameraVideoRecording._get_property(self, attrname) is not None: found_prop = IStkGraphicsCameraVideoRecording._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsCameraVideoRecording.")
        
agcls.AgClassCatalog.add_catalog_entry("{BBACA9D4-20A3-44B1-BF0F-174652805D72}", StkGraphicsCameraVideoRecording)


class StkGraphicsCentralBodyGraphicsIndexer(IStkGraphicsCentralBodyGraphicsIndexer):
    """An indexer into the central body graphics for a particular central body, which provides graphical properties such as showing or hiding the central body in the scene, and working with terrain and imagery for the specified central body."""
    def __init__(self, sourceObject=None):
        IStkGraphicsCentralBodyGraphicsIndexer.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsCentralBodyGraphicsIndexer._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsCentralBodyGraphicsIndexer._get_property(self, attrname) is not None: found_prop = IStkGraphicsCentralBodyGraphicsIndexer._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsCentralBodyGraphicsIndexer.")
        
agcls.AgClassCatalog.add_catalog_entry("{55BA55ED-B236-40BB-9F77-F7C32F3679FD}", StkGraphicsCentralBodyGraphicsIndexer)


class StkGraphicsCustomImageGlobeOverlay(IStkGraphicsCustomImageGlobeOverlay, IStkGraphicsGlobeImageOverlay, IStkGraphicsGlobeOverlay):
    """A globe image overlay that allows for a user defined image to be specified."""
    def __init__(self, sourceObject=None):
        IStkGraphicsCustomImageGlobeOverlay.__init__(self, sourceObject)
        IStkGraphicsGlobeImageOverlay.__init__(self, sourceObject)
        IStkGraphicsGlobeOverlay.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsCustomImageGlobeOverlay._private_init(self, pUnk)
        IStkGraphicsGlobeImageOverlay._private_init(self, pUnk)
        IStkGraphicsGlobeOverlay._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsCustomImageGlobeOverlay._get_property(self, attrname) is not None: found_prop = IStkGraphicsCustomImageGlobeOverlay._get_property(self, attrname)
        if IStkGraphicsGlobeImageOverlay._get_property(self, attrname) is not None: found_prop = IStkGraphicsGlobeImageOverlay._get_property(self, attrname)
        if IStkGraphicsGlobeOverlay._get_property(self, attrname) is not None: found_prop = IStkGraphicsGlobeOverlay._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsCustomImageGlobeOverlay.")
        
agcls.AgClassCatalog.add_catalog_entry("{FAFB3856-9989-4712-8355-8047D169B49F}", StkGraphicsCustomImageGlobeOverlay)


class StkGraphicsCustomImageGlobeOverlayPluginActivator(IStkGraphicsCustomImageGlobeOverlayPluginActivator):
    """The Activator class provides methods to load COM plugins that implement custom image globe overlays. For more information about custom image globe overlays, see the STK Programming Interface."""
    def __init__(self, sourceObject=None):
        IStkGraphicsCustomImageGlobeOverlayPluginActivator.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsCustomImageGlobeOverlayPluginActivator._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsCustomImageGlobeOverlayPluginActivator._get_property(self, attrname) is not None: found_prop = IStkGraphicsCustomImageGlobeOverlayPluginActivator._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsCustomImageGlobeOverlayPluginActivator.")
        
agcls.AgClassCatalog.add_catalog_entry("{06EE5B12-485C-4AFE-8D16-B1516F3D6BFE}", StkGraphicsCustomImageGlobeOverlayPluginActivator)


class StkGraphicsCustomImageGlobeOverlayPluginProxy(IStkGraphicsCustomImageGlobeOverlayPluginProxy):
    """A proxy class provides access to a custom image globe overlay implemented by a plugin. Proxies are instantiated using custom image globe overlay plugin activator."""
    def __init__(self, sourceObject=None):
        IStkGraphicsCustomImageGlobeOverlayPluginProxy.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsCustomImageGlobeOverlayPluginProxy._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsCustomImageGlobeOverlayPluginProxy._get_property(self, attrname) is not None: found_prop = IStkGraphicsCustomImageGlobeOverlayPluginProxy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsCustomImageGlobeOverlayPluginProxy.")
        
agcls.AgClassCatalog.add_catalog_entry("{1A2C5F92-FEFD-4961-B840-D940D30D3637}", StkGraphicsCustomImageGlobeOverlayPluginProxy)


class StkGraphicsGeospatialImageGlobeOverlay(IStkGraphicsGeospatialImageGlobeOverlay, IStkGraphicsGlobeImageOverlay, IStkGraphicsGlobeOverlay):
    """A globe image overlay for handling <a href='http://www.jpeg.org/jpeg2000/'>JPEG 2000</a> (.jp2), ECW (.ecw), ECWP, and MrSid (.sid) image formats in the WGS84 geographic projection."""
    def __init__(self, sourceObject=None):
        IStkGraphicsGeospatialImageGlobeOverlay.__init__(self, sourceObject)
        IStkGraphicsGlobeImageOverlay.__init__(self, sourceObject)
        IStkGraphicsGlobeOverlay.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsGeospatialImageGlobeOverlay._private_init(self, pUnk)
        IStkGraphicsGlobeImageOverlay._private_init(self, pUnk)
        IStkGraphicsGlobeOverlay._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsGeospatialImageGlobeOverlay._get_property(self, attrname) is not None: found_prop = IStkGraphicsGeospatialImageGlobeOverlay._get_property(self, attrname)
        if IStkGraphicsGlobeImageOverlay._get_property(self, attrname) is not None: found_prop = IStkGraphicsGlobeImageOverlay._get_property(self, attrname)
        if IStkGraphicsGlobeOverlay._get_property(self, attrname) is not None: found_prop = IStkGraphicsGlobeOverlay._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsGeospatialImageGlobeOverlay.")
        
agcls.AgClassCatalog.add_catalog_entry("{B2C72817-48CC-498A-BAF5-71CBDEEE4BD2}", StkGraphicsGeospatialImageGlobeOverlay)


class StkGraphicsGlobeOverlay(IStkGraphicsGlobeOverlay):
    """The base class of all terrain overlay and globe image overlay objects."""
    def __init__(self, sourceObject=None):
        IStkGraphicsGlobeOverlay.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsGlobeOverlay._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsGlobeOverlay._get_property(self, attrname) is not None: found_prop = IStkGraphicsGlobeOverlay._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsGlobeOverlay.")
        
agcls.AgClassCatalog.add_catalog_entry("{4D2E94A8-DE1F-4382-AF9D-5664313F3E49}", StkGraphicsGlobeOverlay)


class StkGraphicsGlobeOverlaySettings(IStkGraphicsGlobeOverlaySettings):
    """Settings used by globe overlay objects. These setting affect all scenes."""
    def __init__(self, sourceObject=None):
        IStkGraphicsGlobeOverlaySettings.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsGlobeOverlaySettings._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsGlobeOverlaySettings._get_property(self, attrname) is not None: found_prop = IStkGraphicsGlobeOverlaySettings._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsGlobeOverlaySettings.")
        
agcls.AgClassCatalog.add_catalog_entry("{0F326F62-7A92-46B9-8CD4-F73A14B32A42}", StkGraphicsGlobeOverlaySettings)


class StkGraphicsLighting(IStkGraphicsLighting):
    """Lighting in the 3D scene."""
    def __init__(self, sourceObject=None):
        IStkGraphicsLighting.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsLighting._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsLighting._get_property(self, attrname) is not None: found_prop = IStkGraphicsLighting._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsLighting.")
        
agcls.AgClassCatalog.add_catalog_entry("{29C20830-2D8B-4E6B-854A-FDE514F4396A}", StkGraphicsLighting)


class StkGraphicsPathPrimitiveUpdatePolicy(IStkGraphicsPathPrimitiveUpdatePolicy):
    """A class that encapsulates the update logic for a path primitive. Derived classes must implement the Update method."""
    def __init__(self, sourceObject=None):
        IStkGraphicsPathPrimitiveUpdatePolicy.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsPathPrimitiveUpdatePolicy._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsPathPrimitiveUpdatePolicy._get_property(self, attrname) is not None: found_prop = IStkGraphicsPathPrimitiveUpdatePolicy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsPathPrimitiveUpdatePolicy.")
        
agcls.AgClassCatalog.add_catalog_entry("{E1D3DA5F-ABD5-4C2D-891B-AB5A0FCE78A6}", StkGraphicsPathPrimitiveUpdatePolicy)


class StkGraphicsProjectedRasterOverlay(IStkGraphicsProjectedRasterOverlay, IStkGraphicsGlobeImageOverlay, IStkGraphicsGlobeOverlay):
    """A globe image overlay which projects a raster onto the terrain or surface of the central body. You can also enable projection onto models by setting projected raster model projection to true for a Scene..."""
    def __init__(self, sourceObject=None):
        IStkGraphicsProjectedRasterOverlay.__init__(self, sourceObject)
        IStkGraphicsGlobeImageOverlay.__init__(self, sourceObject)
        IStkGraphicsGlobeOverlay.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsProjectedRasterOverlay._private_init(self, pUnk)
        IStkGraphicsGlobeImageOverlay._private_init(self, pUnk)
        IStkGraphicsGlobeOverlay._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsProjectedRasterOverlay._get_property(self, attrname) is not None: found_prop = IStkGraphicsProjectedRasterOverlay._get_property(self, attrname)
        if IStkGraphicsGlobeImageOverlay._get_property(self, attrname) is not None: found_prop = IStkGraphicsGlobeImageOverlay._get_property(self, attrname)
        if IStkGraphicsGlobeOverlay._get_property(self, attrname) is not None: found_prop = IStkGraphicsGlobeOverlay._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsProjectedRasterOverlay.")
        
agcls.AgClassCatalog.add_catalog_entry("{ED508BB0-4EF1-412D-BEC2-46CF8F9BC5E2}", StkGraphicsProjectedRasterOverlay)


class StkGraphicsProjection(IStkGraphicsProjection):
    """A projection represents a simplified camera with a position, orientation, and field of view horizontal and field of view vertical..."""
    def __init__(self, sourceObject=None):
        IStkGraphicsProjection.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsProjection._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsProjection._get_property(self, attrname) is not None: found_prop = IStkGraphicsProjection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsProjection.")
        
agcls.AgClassCatalog.add_catalog_entry("{3C06C59D-E24C-4145-9634-15ABB16CF69F}", StkGraphicsProjection)


class StkGraphicsProjectionStream(IStkGraphicsProjectionStream, IStkGraphicsProjection):
    """A projection that is updated dynamically at the specified update delta. The class can be used to stream projection data to projection clients, like projected raster overlay..."""
    def __init__(self, sourceObject=None):
        IStkGraphicsProjectionStream.__init__(self, sourceObject)
        IStkGraphicsProjection.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsProjectionStream._private_init(self, pUnk)
        IStkGraphicsProjection._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsProjectionStream._get_property(self, attrname) is not None: found_prop = IStkGraphicsProjectionStream._get_property(self, attrname)
        if IStkGraphicsProjection._get_property(self, attrname) is not None: found_prop = IStkGraphicsProjection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsProjectionStream.")
        
agcls.AgClassCatalog.add_catalog_entry("{02371735-0B2F-48AA-A51E-53DAEC21903D}", StkGraphicsProjectionStream)


class StkGraphicsSceneGlobeOverlaySettings(IStkGraphicsSceneGlobeOverlaySettings):
    """Settings used by globe overlay objects. These settings only affect the scene."""
    def __init__(self, sourceObject=None):
        IStkGraphicsSceneGlobeOverlaySettings.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsSceneGlobeOverlaySettings._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsSceneGlobeOverlaySettings._get_property(self, attrname) is not None: found_prop = IStkGraphicsSceneGlobeOverlaySettings._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsSceneGlobeOverlaySettings.")
        
agcls.AgClassCatalog.add_catalog_entry("{AA19929F-DE78-4CDB-90C5-12D89532D4C4}", StkGraphicsSceneGlobeOverlaySettings)


class StkGraphicsScreenOverlayCollectionBase(IStkGraphicsScreenOverlayCollectionBase):
    """The common base class for collections of overlays held by screen overlay and by screen overlay manager."""
    def __init__(self, sourceObject=None):
        IStkGraphicsScreenOverlayCollectionBase.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsScreenOverlayCollectionBase._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsScreenOverlayCollectionBase._get_property(self, attrname) is not None: found_prop = IStkGraphicsScreenOverlayCollectionBase._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsScreenOverlayCollectionBase.")
        
agcls.AgClassCatalog.add_catalog_entry("{B1764146-8986-45CB-A5B9-426988A9F289}", StkGraphicsScreenOverlayCollectionBase)


class StkGraphicsTexture2DFactory(IStkGraphicsTexture2DFactory):
    """A factory for creating texture 2d objects from various sources."""
    def __init__(self, sourceObject=None):
        IStkGraphicsTexture2DFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsTexture2DFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsTexture2DFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsTexture2DFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsTexture2DFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{1BA44C8C-0CFB-4A7C-B687-788BD4D49AB2}", StkGraphicsTexture2DFactory)


class StkGraphicsVisualEffects(IStkGraphicsVisualEffects):
    """Controls various post processing effects that can be applied to the scene."""
    def __init__(self, sourceObject=None):
        IStkGraphicsVisualEffects.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsVisualEffects._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsVisualEffects._get_property(self, attrname) is not None: found_prop = IStkGraphicsVisualEffects._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsVisualEffects.")
        
agcls.AgClassCatalog.add_catalog_entry("{901f26d9-644b-4513-a3e9-d4d1f4c3df48}", StkGraphicsVisualEffects)


class StkGraphicsAltitudeDisplayCondition(IStkGraphicsAltitudeDisplayCondition, IStkGraphicsDisplayCondition):
    """Defines an inclusive altitude interval that determines when an object is rendered based on the camera's altitude relative to a central body."""
    def __init__(self, sourceObject=None):
        IStkGraphicsAltitudeDisplayCondition.__init__(self, sourceObject)
        IStkGraphicsDisplayCondition.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsAltitudeDisplayCondition._private_init(self, pUnk)
        IStkGraphicsDisplayCondition._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsAltitudeDisplayCondition._get_property(self, attrname) is not None: found_prop = IStkGraphicsAltitudeDisplayCondition._get_property(self, attrname)
        if IStkGraphicsDisplayCondition._get_property(self, attrname) is not None: found_prop = IStkGraphicsDisplayCondition._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsAltitudeDisplayCondition.")
        
agcls.AgClassCatalog.add_catalog_entry("{E5AFCA9A-2850-44C4-BE11-930BB559872B}", StkGraphicsAltitudeDisplayCondition)


class StkGraphicsAxesPrimitive(IStkGraphicsAxesPrimitive, IStkGraphicsPrimitive):
    """Renders an axes in the 3D scene."""
    def __init__(self, sourceObject=None):
        IStkGraphicsAxesPrimitive.__init__(self, sourceObject)
        IStkGraphicsPrimitive.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsAxesPrimitive._private_init(self, pUnk)
        IStkGraphicsPrimitive._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsAxesPrimitive._get_property(self, attrname) is not None: found_prop = IStkGraphicsAxesPrimitive._get_property(self, attrname)
        if IStkGraphicsPrimitive._get_property(self, attrname) is not None: found_prop = IStkGraphicsPrimitive._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsAxesPrimitive.")
        
agcls.AgClassCatalog.add_catalog_entry("{AE8A4146-1A03-4D94-95E4-4D1C67D5501F}", StkGraphicsAxesPrimitive)


class StkGraphicsCamera(IStkGraphicsCamera):
    """Implemented by the scene camera. Contains operations to manipulate the camera position, view direction and orientation in the scene."""
    def __init__(self, sourceObject=None):
        IStkGraphicsCamera.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsCamera._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsCamera._get_property(self, attrname) is not None: found_prop = IStkGraphicsCamera._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsCamera.")
        
agcls.AgClassCatalog.add_catalog_entry("{B11DEE46-76FD-46E6-9476-AEA896C1E2AF}", StkGraphicsCamera)


class StkGraphicsCentralBodyGraphics(IStkGraphicsCentralBodyGraphics):
    """The graphical properties associated with a particular central body. Changing the central body graphics will affect how the associated central body is rendered in a scene. For instance, to show or hide the central body, use the show property..."""
    def __init__(self, sourceObject=None):
        IStkGraphicsCentralBodyGraphics.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsCentralBodyGraphics._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsCentralBodyGraphics._get_property(self, attrname) is not None: found_prop = IStkGraphicsCentralBodyGraphics._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsCentralBodyGraphics.")
        
agcls.AgClassCatalog.add_catalog_entry("{47858749-2CF1-48AF-ADCA-426C6E87B7EB}", StkGraphicsCentralBodyGraphics)


class StkGraphicsClouds(IStkGraphicsClouds):
    """Load, show and hide clouds in the scene."""
    def __init__(self, sourceObject=None):
        IStkGraphicsClouds.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsClouds._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsClouds._get_property(self, attrname) is not None: found_prop = IStkGraphicsClouds._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsClouds.")
        
agcls.AgClassCatalog.add_catalog_entry("{a98d31c3-daf0-40dd-ba64-0ceb18f0e522}", StkGraphicsClouds)


class StkGraphicsCompositeDisplayCondition(IStkGraphicsCompositeDisplayCondition, IStkGraphicsDisplayCondition):
    """A composite of display conditions combined using a binary logic operation. For example, several time interval display condition objects can be added to a composite..."""
    def __init__(self, sourceObject=None):
        IStkGraphicsCompositeDisplayCondition.__init__(self, sourceObject)
        IStkGraphicsDisplayCondition.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsCompositeDisplayCondition._private_init(self, pUnk)
        IStkGraphicsDisplayCondition._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsCompositeDisplayCondition._get_property(self, attrname) is not None: found_prop = IStkGraphicsCompositeDisplayCondition._get_property(self, attrname)
        if IStkGraphicsDisplayCondition._get_property(self, attrname) is not None: found_prop = IStkGraphicsDisplayCondition._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsCompositeDisplayCondition.")
        
agcls.AgClassCatalog.add_catalog_entry("{B59D2316-7712-462C-BB2F-3C882D18388E}", StkGraphicsCompositeDisplayCondition)


class StkGraphicsCompositePrimitive(IStkGraphicsCompositePrimitive, IStkGraphicsPrimitive):
    """ A primitive that is composed of multiple other primitives. Since composites can contain other composites, they are commonly used to build hierarchies of primitives to efficiently evaluate display conditions..."""
    def __init__(self, sourceObject=None):
        IStkGraphicsCompositePrimitive.__init__(self, sourceObject)
        IStkGraphicsPrimitive.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsCompositePrimitive._private_init(self, pUnk)
        IStkGraphicsPrimitive._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsCompositePrimitive._get_property(self, attrname) is not None: found_prop = IStkGraphicsCompositePrimitive._get_property(self, attrname)
        if IStkGraphicsPrimitive._get_property(self, attrname) is not None: found_prop = IStkGraphicsPrimitive._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsCompositePrimitive.")
        
agcls.AgClassCatalog.add_catalog_entry("{8F6F69B8-80C9-40F2-BC5B-BCEE656C8917}", StkGraphicsCompositePrimitive)


class StkGraphicsConstantDisplayCondition(IStkGraphicsConstantDisplayCondition, IStkGraphicsDisplayCondition):
    """A display condition that evaluates to a user-defined value. This is commonly used to hide primitives by assigning to a primitive a display condition that always returns false."""
    def __init__(self, sourceObject=None):
        IStkGraphicsConstantDisplayCondition.__init__(self, sourceObject)
        IStkGraphicsDisplayCondition.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsConstantDisplayCondition._private_init(self, pUnk)
        IStkGraphicsDisplayCondition._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsConstantDisplayCondition._get_property(self, attrname) is not None: found_prop = IStkGraphicsConstantDisplayCondition._get_property(self, attrname)
        if IStkGraphicsDisplayCondition._get_property(self, attrname) is not None: found_prop = IStkGraphicsDisplayCondition._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsConstantDisplayCondition.")
        
agcls.AgClassCatalog.add_catalog_entry("{C21814A8-7591-412D-9390-A6CE73468CA3}", StkGraphicsConstantDisplayCondition)


class StkGraphicsDisplayCondition(IStkGraphicsDisplayCondition):
    """When assigned to objects, such as primitives or globe overlays, display conditions are evaluated to determine if the object should be rendered."""
    def __init__(self, sourceObject=None):
        IStkGraphicsDisplayCondition.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsDisplayCondition._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsDisplayCondition._get_property(self, attrname) is not None: found_prop = IStkGraphicsDisplayCondition._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsDisplayCondition.")
        
agcls.AgClassCatalog.add_catalog_entry("{CEC5D5EB-5AF8-4CCD-BD3D-EFF95DC04F26}", StkGraphicsDisplayCondition)


class StkGraphicsDistanceDisplayCondition(IStkGraphicsDistanceDisplayCondition, IStkGraphicsDisplayCondition):
    """Defines an inclusive distance interval that determines when an object, such as a primitive, is rendered based on the distance from the camera to the object."""
    def __init__(self, sourceObject=None):
        IStkGraphicsDistanceDisplayCondition.__init__(self, sourceObject)
        IStkGraphicsDisplayCondition.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsDistanceDisplayCondition._private_init(self, pUnk)
        IStkGraphicsDisplayCondition._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsDistanceDisplayCondition._get_property(self, attrname) is not None: found_prop = IStkGraphicsDistanceDisplayCondition._get_property(self, attrname)
        if IStkGraphicsDisplayCondition._get_property(self, attrname) is not None: found_prop = IStkGraphicsDisplayCondition._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsDistanceDisplayCondition.")
        
agcls.AgClassCatalog.add_catalog_entry("{0B5589C8-51E7-4191-BD54-8326BFF56CE2}", StkGraphicsDistanceDisplayCondition)


class StkGraphicsDistanceToGlobeOverlayDisplayCondition(IStkGraphicsDistanceToGlobeOverlayDisplayCondition, IStkGraphicsDisplayCondition):
    """Defines an inclusive distance interval that determines when an object, such as a primitive, is rendered based on the distance from the camera to the globe overlay..."""
    def __init__(self, sourceObject=None):
        IStkGraphicsDistanceToGlobeOverlayDisplayCondition.__init__(self, sourceObject)
        IStkGraphicsDisplayCondition.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsDistanceToGlobeOverlayDisplayCondition._private_init(self, pUnk)
        IStkGraphicsDisplayCondition._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsDistanceToGlobeOverlayDisplayCondition._get_property(self, attrname) is not None: found_prop = IStkGraphicsDistanceToGlobeOverlayDisplayCondition._get_property(self, attrname)
        if IStkGraphicsDisplayCondition._get_property(self, attrname) is not None: found_prop = IStkGraphicsDisplayCondition._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsDistanceToGlobeOverlayDisplayCondition.")
        
agcls.AgClassCatalog.add_catalog_entry("{E9C27719-711F-4E36-9FF9-DEF15D35581E}", StkGraphicsDistanceToGlobeOverlayDisplayCondition)


class StkGraphicsDistanceToPositionDisplayCondition(IStkGraphicsDistanceToPositionDisplayCondition, IStkGraphicsDisplayCondition):
    """Defines an inclusive distance interval that determines when an object, such as a primitive, is rendered based on the distance from the camera to a position defined in the given reference frame."""
    def __init__(self, sourceObject=None):
        IStkGraphicsDistanceToPositionDisplayCondition.__init__(self, sourceObject)
        IStkGraphicsDisplayCondition.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsDistanceToPositionDisplayCondition._private_init(self, pUnk)
        IStkGraphicsDisplayCondition._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsDistanceToPositionDisplayCondition._get_property(self, attrname) is not None: found_prop = IStkGraphicsDistanceToPositionDisplayCondition._get_property(self, attrname)
        if IStkGraphicsDisplayCondition._get_property(self, attrname) is not None: found_prop = IStkGraphicsDisplayCondition._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsDistanceToPositionDisplayCondition.")
        
agcls.AgClassCatalog.add_catalog_entry("{ACD2A88B-E930-4994-AA0A-D37AEDB51182}", StkGraphicsDistanceToPositionDisplayCondition)


class StkGraphicsDistanceToPrimitiveDisplayCondition(IStkGraphicsDistanceToPrimitiveDisplayCondition, IStkGraphicsDisplayCondition):
    """Defines an inclusive distance interval that determines when an object, such as a screen overlay, is rendered based on the distance from the camera to the primitive..."""
    def __init__(self, sourceObject=None):
        IStkGraphicsDistanceToPrimitiveDisplayCondition.__init__(self, sourceObject)
        IStkGraphicsDisplayCondition.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsDistanceToPrimitiveDisplayCondition._private_init(self, pUnk)
        IStkGraphicsDisplayCondition._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsDistanceToPrimitiveDisplayCondition._get_property(self, attrname) is not None: found_prop = IStkGraphicsDistanceToPrimitiveDisplayCondition._get_property(self, attrname)
        if IStkGraphicsDisplayCondition._get_property(self, attrname) is not None: found_prop = IStkGraphicsDisplayCondition._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsDistanceToPrimitiveDisplayCondition.")
        
agcls.AgClassCatalog.add_catalog_entry("{90A5B7AD-6FE1-4387-96B1-66A17A54FDA2}", StkGraphicsDistanceToPrimitiveDisplayCondition)


class StkGraphicsDurationPathPrimitiveUpdatePolicy(IStkGraphicsDurationPathPrimitiveUpdatePolicy, IStkGraphicsPathPrimitiveUpdatePolicy):
    """path primitive update policy that removes points from remove location after a given duration."""
    def __init__(self, sourceObject=None):
        IStkGraphicsDurationPathPrimitiveUpdatePolicy.__init__(self, sourceObject)
        IStkGraphicsPathPrimitiveUpdatePolicy.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsDurationPathPrimitiveUpdatePolicy._private_init(self, pUnk)
        IStkGraphicsPathPrimitiveUpdatePolicy._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsDurationPathPrimitiveUpdatePolicy._get_property(self, attrname) is not None: found_prop = IStkGraphicsDurationPathPrimitiveUpdatePolicy._get_property(self, attrname)
        if IStkGraphicsPathPrimitiveUpdatePolicy._get_property(self, attrname) is not None: found_prop = IStkGraphicsPathPrimitiveUpdatePolicy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsDurationPathPrimitiveUpdatePolicy.")
        
agcls.AgClassCatalog.add_catalog_entry("{8628CCF8-7803-4528-B013-66116C059454}", StkGraphicsDurationPathPrimitiveUpdatePolicy)


class StkGraphicsFrameRate(IStkGraphicsFrameRate):
    """Keeps track of how many times the scenes are rendered per second."""
    def __init__(self, sourceObject=None):
        IStkGraphicsFrameRate.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsFrameRate._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsFrameRate._get_property(self, attrname) is not None: found_prop = IStkGraphicsFrameRate._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsFrameRate.")
        
agcls.AgClassCatalog.add_catalog_entry("{EB82B58B-6E32-4E91-92A8-E8008A5C4B77}", StkGraphicsFrameRate)


class StkGraphicsGlobeImageOverlay(IStkGraphicsGlobeImageOverlay, IStkGraphicsGlobeOverlay):
    """A globe overlay that shows an image."""
    def __init__(self, sourceObject=None):
        IStkGraphicsGlobeImageOverlay.__init__(self, sourceObject)
        IStkGraphicsGlobeOverlay.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsGlobeImageOverlay._private_init(self, pUnk)
        IStkGraphicsGlobeOverlay._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsGlobeImageOverlay._get_property(self, attrname) is not None: found_prop = IStkGraphicsGlobeImageOverlay._get_property(self, attrname)
        if IStkGraphicsGlobeOverlay._get_property(self, attrname) is not None: found_prop = IStkGraphicsGlobeOverlay._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsGlobeImageOverlay.")
        
agcls.AgClassCatalog.add_catalog_entry("{5316E632-3018-4625-866F-E56F29FFBC05}", StkGraphicsGlobeImageOverlay)


class StkGraphicsGraphicsFont(IStkGraphicsGraphicsFont):
    """A font that is suitable for use with the text batch primitive. For best performance, avoid creating duplicate font objects. Instead assign the same font object to several text batch primitives."""
    def __init__(self, sourceObject=None):
        IStkGraphicsGraphicsFont.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsGraphicsFont._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsGraphicsFont._get_property(self, attrname) is not None: found_prop = IStkGraphicsGraphicsFont._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsGraphicsFont.")
        
agcls.AgClassCatalog.add_catalog_entry("{C48AD7DF-40C9-4A57-86CD-E7B0E4BFCF52}", StkGraphicsGraphicsFont)


class StkGraphicsGreatArcInterpolator(IStkGraphicsGreatArcInterpolator, IStkGraphicsPositionInterpolator):
    """The great arc interpolator computes interpolated positions along a great arc. A great arc is the shortest path between two positions on an ellipsoid."""
    def __init__(self, sourceObject=None):
        IStkGraphicsGreatArcInterpolator.__init__(self, sourceObject)
        IStkGraphicsPositionInterpolator.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsGreatArcInterpolator._private_init(self, pUnk)
        IStkGraphicsPositionInterpolator._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsGreatArcInterpolator._get_property(self, attrname) is not None: found_prop = IStkGraphicsGreatArcInterpolator._get_property(self, attrname)
        if IStkGraphicsPositionInterpolator._get_property(self, attrname) is not None: found_prop = IStkGraphicsPositionInterpolator._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsGreatArcInterpolator.")
        
agcls.AgClassCatalog.add_catalog_entry("{A91AC76D-7326-4103-996E-DE20EB349A61}", StkGraphicsGreatArcInterpolator)


class StkGraphicsImageCollection(IStkGraphicsImageCollection):
    """A collection of globe image overlay objects."""
    def __init__(self, sourceObject=None):
        IStkGraphicsImageCollection.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsImageCollection._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsImageCollection._get_property(self, attrname) is not None: found_prop = IStkGraphicsImageCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsImageCollection.")
        
agcls.AgClassCatalog.add_catalog_entry("{26812ED6-0AB2-4554-A01F-A1E52687763D}", StkGraphicsImageCollection)


class StkGraphicsAlphaFromLuminanceFilter(IStkGraphicsAlphaFromLuminanceFilter, IStkGraphicsRasterFilter):
    """Adds an alpha band to the source raster derived from the luminance of the raster's color bands."""
    def __init__(self, sourceObject=None):
        IStkGraphicsAlphaFromLuminanceFilter.__init__(self, sourceObject)
        IStkGraphicsRasterFilter.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsAlphaFromLuminanceFilter._private_init(self, pUnk)
        IStkGraphicsRasterFilter._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsAlphaFromLuminanceFilter._get_property(self, attrname) is not None: found_prop = IStkGraphicsAlphaFromLuminanceFilter._get_property(self, attrname)
        if IStkGraphicsRasterFilter._get_property(self, attrname) is not None: found_prop = IStkGraphicsRasterFilter._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsAlphaFromLuminanceFilter.")
        
agcls.AgClassCatalog.add_catalog_entry("{7D660FC7-F1D2-4189-A5C7-B2BFD97E1B4E}", StkGraphicsAlphaFromLuminanceFilter)


class StkGraphicsAlphaFromPixelFilter(IStkGraphicsAlphaFromPixelFilter, IStkGraphicsRasterFilter):
    """Adds an alpha band to the source raster based on the value of its first pixel. All pixels in the source raster that are the same color as the first pixel will be made transparent."""
    def __init__(self, sourceObject=None):
        IStkGraphicsAlphaFromPixelFilter.__init__(self, sourceObject)
        IStkGraphicsRasterFilter.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsAlphaFromPixelFilter._private_init(self, pUnk)
        IStkGraphicsRasterFilter._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsAlphaFromPixelFilter._get_property(self, attrname) is not None: found_prop = IStkGraphicsAlphaFromPixelFilter._get_property(self, attrname)
        if IStkGraphicsRasterFilter._get_property(self, attrname) is not None: found_prop = IStkGraphicsRasterFilter._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsAlphaFromPixelFilter.")
        
agcls.AgClassCatalog.add_catalog_entry("{B2D2B3A3-9FA8-4B58-9CA5-89705663DEDB}", StkGraphicsAlphaFromPixelFilter)


class StkGraphicsAlphaFromRasterFilter(IStkGraphicsAlphaFromRasterFilter, IStkGraphicsRasterFilter):
    """Adds an alpha band to the source raster derived from the color bands or alpha of another raster. This filter can be used to apply an alpha mask to the source raster."""
    def __init__(self, sourceObject=None):
        IStkGraphicsAlphaFromRasterFilter.__init__(self, sourceObject)
        IStkGraphicsRasterFilter.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsAlphaFromRasterFilter._private_init(self, pUnk)
        IStkGraphicsRasterFilter._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsAlphaFromRasterFilter._get_property(self, attrname) is not None: found_prop = IStkGraphicsAlphaFromRasterFilter._get_property(self, attrname)
        if IStkGraphicsRasterFilter._get_property(self, attrname) is not None: found_prop = IStkGraphicsRasterFilter._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsAlphaFromRasterFilter.")
        
agcls.AgClassCatalog.add_catalog_entry("{5E83A2AD-0A40-4CFC-823A-311AC8B034B3}", StkGraphicsAlphaFromRasterFilter)


class StkGraphicsBandExtractFilter(IStkGraphicsBandExtractFilter, IStkGraphicsRasterFilter):
    """Extracts a band or set of bands from the source raster. The extract format property specifies the bands and the order of the bands that will be extracted."""
    def __init__(self, sourceObject=None):
        IStkGraphicsBandExtractFilter.__init__(self, sourceObject)
        IStkGraphicsRasterFilter.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsBandExtractFilter._private_init(self, pUnk)
        IStkGraphicsRasterFilter._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsBandExtractFilter._get_property(self, attrname) is not None: found_prop = IStkGraphicsBandExtractFilter._get_property(self, attrname)
        if IStkGraphicsRasterFilter._get_property(self, attrname) is not None: found_prop = IStkGraphicsRasterFilter._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsBandExtractFilter.")
        
agcls.AgClassCatalog.add_catalog_entry("{DC9176BE-3DBD-40D1-A0BC-CEDE39C747E2}", StkGraphicsBandExtractFilter)


class StkGraphicsBandOrderFilter(IStkGraphicsBandOrderFilter, IStkGraphicsRasterFilter):
    """Reorders or swizzles the bands of the source raster to match the band order of the raster format specified by the band order property. When maintain raster format is true, the source raster's format is maintained after swizzling."""
    def __init__(self, sourceObject=None):
        IStkGraphicsBandOrderFilter.__init__(self, sourceObject)
        IStkGraphicsRasterFilter.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsBandOrderFilter._private_init(self, pUnk)
        IStkGraphicsRasterFilter._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsBandOrderFilter._get_property(self, attrname) is not None: found_prop = IStkGraphicsBandOrderFilter._get_property(self, attrname)
        if IStkGraphicsRasterFilter._get_property(self, attrname) is not None: found_prop = IStkGraphicsRasterFilter._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsBandOrderFilter.")
        
agcls.AgClassCatalog.add_catalog_entry("{91749CD4-8503-4C71-AD42-DB5AAF1BC240}", StkGraphicsBandOrderFilter)


class StkGraphicsBlurFilter(IStkGraphicsBlurFilter, IStkGraphicsConvolutionFilter, IStkGraphicsRasterFilter):
    """Applies a convolution filter to blur or smooth the source raster. Can be used to reduce noise in the raster."""
    def __init__(self, sourceObject=None):
        IStkGraphicsBlurFilter.__init__(self, sourceObject)
        IStkGraphicsConvolutionFilter.__init__(self, sourceObject)
        IStkGraphicsRasterFilter.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsBlurFilter._private_init(self, pUnk)
        IStkGraphicsConvolutionFilter._private_init(self, pUnk)
        IStkGraphicsRasterFilter._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsBlurFilter._get_property(self, attrname) is not None: found_prop = IStkGraphicsBlurFilter._get_property(self, attrname)
        if IStkGraphicsConvolutionFilter._get_property(self, attrname) is not None: found_prop = IStkGraphicsConvolutionFilter._get_property(self, attrname)
        if IStkGraphicsRasterFilter._get_property(self, attrname) is not None: found_prop = IStkGraphicsRasterFilter._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsBlurFilter.")
        
agcls.AgClassCatalog.add_catalog_entry("{A3E1128F-DE2D-4A57-AC68-C7C938480BF2}", StkGraphicsBlurFilter)


class StkGraphicsBrightnessFilter(IStkGraphicsBrightnessFilter, IStkGraphicsRasterFilter):
    """Adjusts the brightness of the source raster's color bands. The adjustment to brightness is a value between -1 and 1, corresponding to least bright to most bright."""
    def __init__(self, sourceObject=None):
        IStkGraphicsBrightnessFilter.__init__(self, sourceObject)
        IStkGraphicsRasterFilter.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsBrightnessFilter._private_init(self, pUnk)
        IStkGraphicsRasterFilter._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsBrightnessFilter._get_property(self, attrname) is not None: found_prop = IStkGraphicsBrightnessFilter._get_property(self, attrname)
        if IStkGraphicsRasterFilter._get_property(self, attrname) is not None: found_prop = IStkGraphicsRasterFilter._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsBrightnessFilter.")
        
agcls.AgClassCatalog.add_catalog_entry("{E6FF496E-64E8-41CA-BED7-8FEBDDB6B9C9}", StkGraphicsBrightnessFilter)


class StkGraphicsColorToLuminanceFilter(IStkGraphicsColorToLuminanceFilter, IStkGraphicsRasterFilter):
    """Extracts a luminance band derived from the color bands of the source raster."""
    def __init__(self, sourceObject=None):
        IStkGraphicsColorToLuminanceFilter.__init__(self, sourceObject)
        IStkGraphicsRasterFilter.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsColorToLuminanceFilter._private_init(self, pUnk)
        IStkGraphicsRasterFilter._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsColorToLuminanceFilter._get_property(self, attrname) is not None: found_prop = IStkGraphicsColorToLuminanceFilter._get_property(self, attrname)
        if IStkGraphicsRasterFilter._get_property(self, attrname) is not None: found_prop = IStkGraphicsRasterFilter._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsColorToLuminanceFilter.")
        
agcls.AgClassCatalog.add_catalog_entry("{BE472786-A17B-490A-8DE7-4831AC3FEEDE}", StkGraphicsColorToLuminanceFilter)


class StkGraphicsContrastFilter(IStkGraphicsContrastFilter, IStkGraphicsRasterFilter):
    """Adjusts the contrast of the source raster. The adjustment to contrast is a value between -1 and 1, corresponding to least contrast to most contrast."""
    def __init__(self, sourceObject=None):
        IStkGraphicsContrastFilter.__init__(self, sourceObject)
        IStkGraphicsRasterFilter.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsContrastFilter._private_init(self, pUnk)
        IStkGraphicsRasterFilter._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsContrastFilter._get_property(self, attrname) is not None: found_prop = IStkGraphicsContrastFilter._get_property(self, attrname)
        if IStkGraphicsRasterFilter._get_property(self, attrname) is not None: found_prop = IStkGraphicsRasterFilter._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsContrastFilter.")
        
agcls.AgClassCatalog.add_catalog_entry("{20FA2A78-30D4-4DDE-84D7-EBF001730166}", StkGraphicsContrastFilter)


class StkGraphicsConvolutionFilter(IStkGraphicsConvolutionFilter, IStkGraphicsRasterFilter):
    """Applies convolution to the source raster. Convolution is the modification of a pixel's value based on the values of its surrounding pixels. The kernel is the numerical matrix that is applied to each pixel in this process..."""
    def __init__(self, sourceObject=None):
        IStkGraphicsConvolutionFilter.__init__(self, sourceObject)
        IStkGraphicsRasterFilter.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsConvolutionFilter._private_init(self, pUnk)
        IStkGraphicsRasterFilter._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsConvolutionFilter._get_property(self, attrname) is not None: found_prop = IStkGraphicsConvolutionFilter._get_property(self, attrname)
        if IStkGraphicsRasterFilter._get_property(self, attrname) is not None: found_prop = IStkGraphicsRasterFilter._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsConvolutionFilter.")
        
agcls.AgClassCatalog.add_catalog_entry("{113D939E-C5B0-49BD-A38B-53DD961CAC5B}", StkGraphicsConvolutionFilter)


class StkGraphicsEdgeDetectFilter(IStkGraphicsEdgeDetectFilter, IStkGraphicsConvolutionFilter, IStkGraphicsRasterFilter):
    """Applies a convolution filter to detect edges in the source raster."""
    def __init__(self, sourceObject=None):
        IStkGraphicsEdgeDetectFilter.__init__(self, sourceObject)
        IStkGraphicsConvolutionFilter.__init__(self, sourceObject)
        IStkGraphicsRasterFilter.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsEdgeDetectFilter._private_init(self, pUnk)
        IStkGraphicsConvolutionFilter._private_init(self, pUnk)
        IStkGraphicsRasterFilter._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsEdgeDetectFilter._get_property(self, attrname) is not None: found_prop = IStkGraphicsEdgeDetectFilter._get_property(self, attrname)
        if IStkGraphicsConvolutionFilter._get_property(self, attrname) is not None: found_prop = IStkGraphicsConvolutionFilter._get_property(self, attrname)
        if IStkGraphicsRasterFilter._get_property(self, attrname) is not None: found_prop = IStkGraphicsRasterFilter._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsEdgeDetectFilter.")
        
agcls.AgClassCatalog.add_catalog_entry("{04E73117-38A1-4EE3-854D-253934DE9B54}", StkGraphicsEdgeDetectFilter)


class StkGraphicsFilteringRasterStream(IStkGraphicsFilteringRasterStream, IStkGraphicsRasterStream, IStkGraphicsRaster):
    """A class decorator for applying a raster filter to each update of a raster stream. Can be used to apply filters to videos and other raster streams as they are updated."""
    def __init__(self, sourceObject=None):
        IStkGraphicsFilteringRasterStream.__init__(self, sourceObject)
        IStkGraphicsRasterStream.__init__(self, sourceObject)
        IStkGraphicsRaster.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsFilteringRasterStream._private_init(self, pUnk)
        IStkGraphicsRasterStream._private_init(self, pUnk)
        IStkGraphicsRaster._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsFilteringRasterStream._get_property(self, attrname) is not None: found_prop = IStkGraphicsFilteringRasterStream._get_property(self, attrname)
        if IStkGraphicsRasterStream._get_property(self, attrname) is not None: found_prop = IStkGraphicsRasterStream._get_property(self, attrname)
        if IStkGraphicsRaster._get_property(self, attrname) is not None: found_prop = IStkGraphicsRaster._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsFilteringRasterStream.")
        
agcls.AgClassCatalog.add_catalog_entry("{9D59ED29-9EF8-4D85-BE0F-9E244736C814}", StkGraphicsFilteringRasterStream)


class StkGraphicsFlipFilter(IStkGraphicsFlipFilter, IStkGraphicsRasterFilter):
    """Flips the source raster along the given flip axis."""
    def __init__(self, sourceObject=None):
        IStkGraphicsFlipFilter.__init__(self, sourceObject)
        IStkGraphicsRasterFilter.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsFlipFilter._private_init(self, pUnk)
        IStkGraphicsRasterFilter._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsFlipFilter._get_property(self, attrname) is not None: found_prop = IStkGraphicsFlipFilter._get_property(self, attrname)
        if IStkGraphicsRasterFilter._get_property(self, attrname) is not None: found_prop = IStkGraphicsRasterFilter._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsFlipFilter.")
        
agcls.AgClassCatalog.add_catalog_entry("{08E0C45D-A187-4B74-93AE-BF29B39D50C3}", StkGraphicsFlipFilter)


class StkGraphicsGammaCorrectionFilter(IStkGraphicsGammaCorrectionFilter, IStkGraphicsRasterFilter):
    """Applies gamma correction to the source raster. The gamma is a value between .2 and 5. The default gamma value is 2.2."""
    def __init__(self, sourceObject=None):
        IStkGraphicsGammaCorrectionFilter.__init__(self, sourceObject)
        IStkGraphicsRasterFilter.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsGammaCorrectionFilter._private_init(self, pUnk)
        IStkGraphicsRasterFilter._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsGammaCorrectionFilter._get_property(self, attrname) is not None: found_prop = IStkGraphicsGammaCorrectionFilter._get_property(self, attrname)
        if IStkGraphicsRasterFilter._get_property(self, attrname) is not None: found_prop = IStkGraphicsRasterFilter._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsGammaCorrectionFilter.")
        
agcls.AgClassCatalog.add_catalog_entry("{A560ACC2-4642-44FD-A5FC-BD3AB7A0FC2F}", StkGraphicsGammaCorrectionFilter)


class StkGraphicsGaussianBlurFilter(IStkGraphicsGaussianBlurFilter, IStkGraphicsConvolutionFilter, IStkGraphicsRasterFilter):
    """Applies a convolution filter to blur the source raster using the Gaussian function."""
    def __init__(self, sourceObject=None):
        IStkGraphicsGaussianBlurFilter.__init__(self, sourceObject)
        IStkGraphicsConvolutionFilter.__init__(self, sourceObject)
        IStkGraphicsRasterFilter.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsGaussianBlurFilter._private_init(self, pUnk)
        IStkGraphicsConvolutionFilter._private_init(self, pUnk)
        IStkGraphicsRasterFilter._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsGaussianBlurFilter._get_property(self, attrname) is not None: found_prop = IStkGraphicsGaussianBlurFilter._get_property(self, attrname)
        if IStkGraphicsConvolutionFilter._get_property(self, attrname) is not None: found_prop = IStkGraphicsConvolutionFilter._get_property(self, attrname)
        if IStkGraphicsRasterFilter._get_property(self, attrname) is not None: found_prop = IStkGraphicsRasterFilter._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsGaussianBlurFilter.")
        
agcls.AgClassCatalog.add_catalog_entry("{BCEE5F1C-66D8-48C6-8485-8435260855DE}", StkGraphicsGaussianBlurFilter)


class StkGraphicsGradientDetectFilter(IStkGraphicsGradientDetectFilter, IStkGraphicsConvolutionFilter, IStkGraphicsRasterFilter):
    """Applies a convolution filter to detect gradients in the source raster."""
    def __init__(self, sourceObject=None):
        IStkGraphicsGradientDetectFilter.__init__(self, sourceObject)
        IStkGraphicsConvolutionFilter.__init__(self, sourceObject)
        IStkGraphicsRasterFilter.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsGradientDetectFilter._private_init(self, pUnk)
        IStkGraphicsConvolutionFilter._private_init(self, pUnk)
        IStkGraphicsRasterFilter._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsGradientDetectFilter._get_property(self, attrname) is not None: found_prop = IStkGraphicsGradientDetectFilter._get_property(self, attrname)
        if IStkGraphicsConvolutionFilter._get_property(self, attrname) is not None: found_prop = IStkGraphicsConvolutionFilter._get_property(self, attrname)
        if IStkGraphicsRasterFilter._get_property(self, attrname) is not None: found_prop = IStkGraphicsRasterFilter._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsGradientDetectFilter.")
        
agcls.AgClassCatalog.add_catalog_entry("{7F410D2F-C209-4F22-A906-5F8BA0C8CA40}", StkGraphicsGradientDetectFilter)


class StkGraphicsLevelsFilter(IStkGraphicsLevelsFilter, IStkGraphicsRasterFilter):
    """Adjusts the band levels of the source raster linearly."""
    def __init__(self, sourceObject=None):
        IStkGraphicsLevelsFilter.__init__(self, sourceObject)
        IStkGraphicsRasterFilter.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsLevelsFilter._private_init(self, pUnk)
        IStkGraphicsRasterFilter._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsLevelsFilter._get_property(self, attrname) is not None: found_prop = IStkGraphicsLevelsFilter._get_property(self, attrname)
        if IStkGraphicsRasterFilter._get_property(self, attrname) is not None: found_prop = IStkGraphicsRasterFilter._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsLevelsFilter.")
        
agcls.AgClassCatalog.add_catalog_entry("{C21CE0FC-3E94-47C9-9E21-C8478A46E75C}", StkGraphicsLevelsFilter)


class StkGraphicsProjectionRasterStreamPluginActivator(IStkGraphicsProjectionRasterStreamPluginActivator):
    """The Activator class provides methods to load COM plugins that implement projection and raster streaming. For more information about the projection and raster plugins, see the STK Programming Interface."""
    def __init__(self, sourceObject=None):
        IStkGraphicsProjectionRasterStreamPluginActivator.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsProjectionRasterStreamPluginActivator._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsProjectionRasterStreamPluginActivator._get_property(self, attrname) is not None: found_prop = IStkGraphicsProjectionRasterStreamPluginActivator._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsProjectionRasterStreamPluginActivator.")
        
agcls.AgClassCatalog.add_catalog_entry("{5365D424-8630-4D9D-B209-F946D5116080}", StkGraphicsProjectionRasterStreamPluginActivator)


class StkGraphicsProjectionRasterStreamPluginProxy(IStkGraphicsProjectionRasterStreamPluginProxy):
    """A proxy class provides access to the raster and projection streams implemented by a plugin. Proxies are instantiated using projection raster stream plugin activator."""
    def __init__(self, sourceObject=None):
        IStkGraphicsProjectionRasterStreamPluginProxy.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsProjectionRasterStreamPluginProxy._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsProjectionRasterStreamPluginProxy._get_property(self, attrname) is not None: found_prop = IStkGraphicsProjectionRasterStreamPluginProxy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsProjectionRasterStreamPluginProxy.")
        
agcls.AgClassCatalog.add_catalog_entry("{82E6B1F4-DC2D-40C3-8251-8207F218B820}", StkGraphicsProjectionRasterStreamPluginProxy)


class StkGraphicsRaster(IStkGraphicsRaster):
    """A raster dataset. A raster consists of one or more bands, or sets of values, which are most commonly associated with colors when the raster represents an image..."""
    def __init__(self, sourceObject=None):
        IStkGraphicsRaster.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsRaster._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsRaster._get_property(self, attrname) is not None: found_prop = IStkGraphicsRaster._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsRaster.")
        
agcls.AgClassCatalog.add_catalog_entry("{50AB6A3A-54CA-4619-9B99-FB7BD497EA92}", StkGraphicsRaster)


class StkGraphicsRasterAttributes(IStkGraphicsRasterAttributes):
    """The attributes describing a raster dataset. raster attributes define the memory layout of a raster, and includes properties defining the order of each raster band that the raster contains, as specified by the raster format..."""
    def __init__(self, sourceObject=None):
        IStkGraphicsRasterAttributes.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsRasterAttributes._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsRasterAttributes._get_property(self, attrname) is not None: found_prop = IStkGraphicsRasterAttributes._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsRasterAttributes.")
        
agcls.AgClassCatalog.add_catalog_entry("{32DEB10A-1039-43AF-AA36-BA94F8CC8531}", StkGraphicsRasterAttributes)


class StkGraphicsRasterFilter(IStkGraphicsRasterFilter):
    """A filter for processing raster datasets. RasterFilter is the base class for all raster filters..."""
    def __init__(self, sourceObject=None):
        IStkGraphicsRasterFilter.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsRasterFilter._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsRasterFilter._get_property(self, attrname) is not None: found_prop = IStkGraphicsRasterFilter._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsRasterFilter.")
        
agcls.AgClassCatalog.add_catalog_entry("{0345FD5E-C6A6-42D3-AEA9-57A7444BFF42}", StkGraphicsRasterFilter)


class StkGraphicsRasterStream(IStkGraphicsRasterStream, IStkGraphicsRaster):
    """A raster, the data of which, is updated dynamically at the specified update delta. The class can be used to stream video and other dynamic raster data to textures and other raster clients..."""
    def __init__(self, sourceObject=None):
        IStkGraphicsRasterStream.__init__(self, sourceObject)
        IStkGraphicsRaster.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsRasterStream._private_init(self, pUnk)
        IStkGraphicsRaster._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsRasterStream._get_property(self, attrname) is not None: found_prop = IStkGraphicsRasterStream._get_property(self, attrname)
        if IStkGraphicsRaster._get_property(self, attrname) is not None: found_prop = IStkGraphicsRaster._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsRasterStream.")
        
agcls.AgClassCatalog.add_catalog_entry("{CAFADC5E-933C-46AC-BD09-18B089E86346}", StkGraphicsRasterStream)


class StkGraphicsRotateFilter(IStkGraphicsRotateFilter, IStkGraphicsRasterFilter):
    """Rotates the source raster clockwise by the specified angle."""
    def __init__(self, sourceObject=None):
        IStkGraphicsRotateFilter.__init__(self, sourceObject)
        IStkGraphicsRasterFilter.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsRotateFilter._private_init(self, pUnk)
        IStkGraphicsRasterFilter._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsRotateFilter._get_property(self, attrname) is not None: found_prop = IStkGraphicsRotateFilter._get_property(self, attrname)
        if IStkGraphicsRasterFilter._get_property(self, attrname) is not None: found_prop = IStkGraphicsRasterFilter._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsRotateFilter.")
        
agcls.AgClassCatalog.add_catalog_entry("{AEDFA944-E740-4D19-9819-CB179C43E060}", StkGraphicsRotateFilter)


class StkGraphicsSequenceFilter(IStkGraphicsSequenceFilter, IStkGraphicsRasterFilter):
    """Applies a sequence of filters to the source raster in the order in which they were added. When continue on failure is set to true, subsequent filters will still be applied to the source raster even if one or more filters in the sequence cannot be applied."""
    def __init__(self, sourceObject=None):
        IStkGraphicsSequenceFilter.__init__(self, sourceObject)
        IStkGraphicsRasterFilter.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsSequenceFilter._private_init(self, pUnk)
        IStkGraphicsRasterFilter._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsSequenceFilter._get_property(self, attrname) is not None: found_prop = IStkGraphicsSequenceFilter._get_property(self, attrname)
        if IStkGraphicsRasterFilter._get_property(self, attrname) is not None: found_prop = IStkGraphicsRasterFilter._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsSequenceFilter.")
        
agcls.AgClassCatalog.add_catalog_entry("{37330024-90FE-47DD-9548-C13089A085FC}", StkGraphicsSequenceFilter)


class StkGraphicsSharpenFilter(IStkGraphicsSharpenFilter, IStkGraphicsConvolutionFilter, IStkGraphicsRasterFilter):
    """Applies a convolution filter to increase the sharpness of the source raster."""
    def __init__(self, sourceObject=None):
        IStkGraphicsSharpenFilter.__init__(self, sourceObject)
        IStkGraphicsConvolutionFilter.__init__(self, sourceObject)
        IStkGraphicsRasterFilter.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsSharpenFilter._private_init(self, pUnk)
        IStkGraphicsConvolutionFilter._private_init(self, pUnk)
        IStkGraphicsRasterFilter._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsSharpenFilter._get_property(self, attrname) is not None: found_prop = IStkGraphicsSharpenFilter._get_property(self, attrname)
        if IStkGraphicsConvolutionFilter._get_property(self, attrname) is not None: found_prop = IStkGraphicsConvolutionFilter._get_property(self, attrname)
        if IStkGraphicsRasterFilter._get_property(self, attrname) is not None: found_prop = IStkGraphicsRasterFilter._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsSharpenFilter.")
        
agcls.AgClassCatalog.add_catalog_entry("{0F6FC309-D30E-41AD-A7B6-E70039313B6E}", StkGraphicsSharpenFilter)


class StkGraphicsVideoStream(IStkGraphicsVideoStream, IStkGraphicsRasterStream, IStkGraphicsRaster):
    """A raster stream that streams from a video. The video can be read from a file, or streamed from an HTTP, RTP, UDP, or TCP source. See the Video Streams Overview for a list of supported video formats and Uri usage."""
    def __init__(self, sourceObject=None):
        IStkGraphicsVideoStream.__init__(self, sourceObject)
        IStkGraphicsRasterStream.__init__(self, sourceObject)
        IStkGraphicsRaster.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsVideoStream._private_init(self, pUnk)
        IStkGraphicsRasterStream._private_init(self, pUnk)
        IStkGraphicsRaster._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsVideoStream._get_property(self, attrname) is not None: found_prop = IStkGraphicsVideoStream._get_property(self, attrname)
        if IStkGraphicsRasterStream._get_property(self, attrname) is not None: found_prop = IStkGraphicsRasterStream._get_property(self, attrname)
        if IStkGraphicsRaster._get_property(self, attrname) is not None: found_prop = IStkGraphicsRaster._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsVideoStream.")
        
agcls.AgClassCatalog.add_catalog_entry("{80D82D96-D87B-4910-B8BB-1FBE9E121A4F}", StkGraphicsVideoStream)


class StkGraphicsKmlContainer(IStkGraphicsKmlContainer, IStkGraphicsKmlFeature):
    """A KmlContainer contains a collection of children kml features."""
    def __init__(self, sourceObject=None):
        IStkGraphicsKmlContainer.__init__(self, sourceObject)
        IStkGraphicsKmlFeature.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsKmlContainer._private_init(self, pUnk)
        IStkGraphicsKmlFeature._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsKmlContainer._get_property(self, attrname) is not None: found_prop = IStkGraphicsKmlContainer._get_property(self, attrname)
        if IStkGraphicsKmlFeature._get_property(self, attrname) is not None: found_prop = IStkGraphicsKmlFeature._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsKmlContainer.")
        
agcls.AgClassCatalog.add_catalog_entry("{24AA1395-417E-4845-A9D2-61C4D59BCABF}", StkGraphicsKmlContainer)


class StkGraphicsKmlDocument(IStkGraphicsKmlDocument, IStkGraphicsKmlContainer, IStkGraphicsKmlFeature):
    """A KML document."""
    def __init__(self, sourceObject=None):
        IStkGraphicsKmlDocument.__init__(self, sourceObject)
        IStkGraphicsKmlContainer.__init__(self, sourceObject)
        IStkGraphicsKmlFeature.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsKmlDocument._private_init(self, pUnk)
        IStkGraphicsKmlContainer._private_init(self, pUnk)
        IStkGraphicsKmlFeature._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsKmlDocument._get_property(self, attrname) is not None: found_prop = IStkGraphicsKmlDocument._get_property(self, attrname)
        if IStkGraphicsKmlContainer._get_property(self, attrname) is not None: found_prop = IStkGraphicsKmlContainer._get_property(self, attrname)
        if IStkGraphicsKmlFeature._get_property(self, attrname) is not None: found_prop = IStkGraphicsKmlFeature._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsKmlDocument.")
        
agcls.AgClassCatalog.add_catalog_entry("{130689C0-43C6-4C34-9AC7-252E155E9F66}", StkGraphicsKmlDocument)


class StkGraphicsKmlFeature(IStkGraphicsKmlFeature):
    """A KML feature."""
    def __init__(self, sourceObject=None):
        IStkGraphicsKmlFeature.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsKmlFeature._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsKmlFeature._get_property(self, attrname) is not None: found_prop = IStkGraphicsKmlFeature._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsKmlFeature.")
        
agcls.AgClassCatalog.add_catalog_entry("{20C290F8-9102-4960-AD19-F5EFC321F796}", StkGraphicsKmlFeature)


class StkGraphicsKmlFolder(IStkGraphicsKmlFolder, IStkGraphicsKmlContainer, IStkGraphicsKmlFeature):
    """A KML folder."""
    def __init__(self, sourceObject=None):
        IStkGraphicsKmlFolder.__init__(self, sourceObject)
        IStkGraphicsKmlContainer.__init__(self, sourceObject)
        IStkGraphicsKmlFeature.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsKmlFolder._private_init(self, pUnk)
        IStkGraphicsKmlContainer._private_init(self, pUnk)
        IStkGraphicsKmlFeature._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsKmlFolder._get_property(self, attrname) is not None: found_prop = IStkGraphicsKmlFolder._get_property(self, attrname)
        if IStkGraphicsKmlContainer._get_property(self, attrname) is not None: found_prop = IStkGraphicsKmlContainer._get_property(self, attrname)
        if IStkGraphicsKmlFeature._get_property(self, attrname) is not None: found_prop = IStkGraphicsKmlFeature._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsKmlFolder.")
        
agcls.AgClassCatalog.add_catalog_entry("{C7BE1A8D-28BF-4298-AE7D-656B40FFB3D0}", StkGraphicsKmlFolder)


class StkGraphicsKmlGraphics(IStkGraphicsKmlGraphics):
    """Provides loading and unloading of kml documents for a particular central body."""
    def __init__(self, sourceObject=None):
        IStkGraphicsKmlGraphics.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsKmlGraphics._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsKmlGraphics._get_property(self, attrname) is not None: found_prop = IStkGraphicsKmlGraphics._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsKmlGraphics.")
        
agcls.AgClassCatalog.add_catalog_entry("{A094F5DE-8BF2-4079-8009-0450D2E4EF11}", StkGraphicsKmlGraphics)


class StkGraphicsKmlNetworkLink(IStkGraphicsKmlNetworkLink, IStkGraphicsKmlFeature):
    """A KML network link."""
    def __init__(self, sourceObject=None):
        IStkGraphicsKmlNetworkLink.__init__(self, sourceObject)
        IStkGraphicsKmlFeature.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsKmlNetworkLink._private_init(self, pUnk)
        IStkGraphicsKmlFeature._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsKmlNetworkLink._get_property(self, attrname) is not None: found_prop = IStkGraphicsKmlNetworkLink._get_property(self, attrname)
        if IStkGraphicsKmlFeature._get_property(self, attrname) is not None: found_prop = IStkGraphicsKmlFeature._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsKmlNetworkLink.")
        
agcls.AgClassCatalog.add_catalog_entry("{BD2ECA7D-919B-4C64-8AA1-E503A80EF3EA}", StkGraphicsKmlNetworkLink)


class StkGraphicsMarkerBatchPrimitive(IStkGraphicsMarkerBatchPrimitive, IStkGraphicsPrimitive):
    """ Renders one or more markers in the 3D scene. Markers are 2D images that always face the viewer which can be sized in pixels or meters. Markers are also referred to as sprites or billboards..."""
    def __init__(self, sourceObject=None):
        IStkGraphicsMarkerBatchPrimitive.__init__(self, sourceObject)
        IStkGraphicsPrimitive.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsMarkerBatchPrimitive._private_init(self, pUnk)
        IStkGraphicsPrimitive._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsMarkerBatchPrimitive._get_property(self, attrname) is not None: found_prop = IStkGraphicsMarkerBatchPrimitive._get_property(self, attrname)
        if IStkGraphicsPrimitive._get_property(self, attrname) is not None: found_prop = IStkGraphicsPrimitive._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsMarkerBatchPrimitive.")
        
agcls.AgClassCatalog.add_catalog_entry("{C7F4992D-BBE2-4C68-BB4E-51BB8CD2D124}", StkGraphicsMarkerBatchPrimitive)


class StkGraphicsMarkerBatchPrimitiveOptionalParameters(IStkGraphicsMarkerBatchPrimitiveOptionalParameters):
    """Optional per-marker parameters for marker batch primitive that overrides the marker batch's per-batch parameters..."""
    def __init__(self, sourceObject=None):
        IStkGraphicsMarkerBatchPrimitiveOptionalParameters.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsMarkerBatchPrimitiveOptionalParameters._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsMarkerBatchPrimitiveOptionalParameters._get_property(self, attrname) is not None: found_prop = IStkGraphicsMarkerBatchPrimitiveOptionalParameters._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsMarkerBatchPrimitiveOptionalParameters.")
        
agcls.AgClassCatalog.add_catalog_entry("{24750753-2036-4221-83F0-F9045DCA0A5D}", StkGraphicsMarkerBatchPrimitiveOptionalParameters)


class StkGraphicsMaximumCountPathPrimitiveUpdatePolicy(IStkGraphicsMaximumCountPathPrimitiveUpdatePolicy, IStkGraphicsPathPrimitiveUpdatePolicy):
    """path primitive update policy that removes points from remove location when the number of points in the path exceeds maximum count."""
    def __init__(self, sourceObject=None):
        IStkGraphicsMaximumCountPathPrimitiveUpdatePolicy.__init__(self, sourceObject)
        IStkGraphicsPathPrimitiveUpdatePolicy.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsMaximumCountPathPrimitiveUpdatePolicy._private_init(self, pUnk)
        IStkGraphicsPathPrimitiveUpdatePolicy._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsMaximumCountPathPrimitiveUpdatePolicy._get_property(self, attrname) is not None: found_prop = IStkGraphicsMaximumCountPathPrimitiveUpdatePolicy._get_property(self, attrname)
        if IStkGraphicsPathPrimitiveUpdatePolicy._get_property(self, attrname) is not None: found_prop = IStkGraphicsPathPrimitiveUpdatePolicy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsMaximumCountPathPrimitiveUpdatePolicy.")
        
agcls.AgClassCatalog.add_catalog_entry("{4D41C220-2CE4-4CA1-942A-9AF4F7F34C4A}", StkGraphicsMaximumCountPathPrimitiveUpdatePolicy)


class StkGraphicsModelArticulation(IStkGraphicsModelArticulation):
    """A model articulation identifies geometry on the model and is a collection of transformations that can be applied to that geometry."""
    def __init__(self, sourceObject=None):
        IStkGraphicsModelArticulation.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsModelArticulation._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsModelArticulation._get_property(self, attrname) is not None: found_prop = IStkGraphicsModelArticulation._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsModelArticulation.")
        
agcls.AgClassCatalog.add_catalog_entry("{A9E72E72-17D6-4D7C-A4EF-5A970232ED93}", StkGraphicsModelArticulation)


class StkGraphicsModelArticulationCollection(IStkGraphicsModelArticulationCollection):
    """A collection containing a model primitive's available articulations. A model articulation identifies geometry on the model and is a collection of transformations that can be applied to that geometry."""
    def __init__(self, sourceObject=None):
        IStkGraphicsModelArticulationCollection.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsModelArticulationCollection._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsModelArticulationCollection._get_property(self, attrname) is not None: found_prop = IStkGraphicsModelArticulationCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsModelArticulationCollection.")
        
agcls.AgClassCatalog.add_catalog_entry("{ACC4920A-6D6B-4374-937F-2469F439ABA8}", StkGraphicsModelArticulationCollection)


class StkGraphicsModelPrimitive(IStkGraphicsModelPrimitive, IStkGraphicsPrimitive):
    """The model primitive loads and renders <a href='http://www.collada.org/'>COLLADA</a> (DAE) and AGI <a href='https://support.agi.com/3d-models'>MDL</a> (MDL) models."""
    def __init__(self, sourceObject=None):
        IStkGraphicsModelPrimitive.__init__(self, sourceObject)
        IStkGraphicsPrimitive.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsModelPrimitive._private_init(self, pUnk)
        IStkGraphicsPrimitive._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsModelPrimitive._get_property(self, attrname) is not None: found_prop = IStkGraphicsModelPrimitive._get_property(self, attrname)
        if IStkGraphicsPrimitive._get_property(self, attrname) is not None: found_prop = IStkGraphicsPrimitive._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsModelPrimitive.")
        
agcls.AgClassCatalog.add_catalog_entry("{FD89B6D8-F106-4929-889A-3304A9CDBE97}", StkGraphicsModelPrimitive)


class StkGraphicsModelTransformation(IStkGraphicsModelTransformation):
    """A model transformation defines a transformation that is applied to geometry on a model primitive. That geometry is identified by the model articulation which contains the transformation..."""
    def __init__(self, sourceObject=None):
        IStkGraphicsModelTransformation.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsModelTransformation._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsModelTransformation._get_property(self, attrname) is not None: found_prop = IStkGraphicsModelTransformation._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsModelTransformation.")
        
agcls.AgClassCatalog.add_catalog_entry("{BC56F0E9-D0F3-4C3E-9AAA-AB5AB255927C}", StkGraphicsModelTransformation)


class StkGraphicsOverlay(IStkGraphicsOverlay, IStkGraphicsScreenOverlayContainer):
    """A visible element drawn in screen space. Overlays are useful for floating logos, heads up displays, and integrating user interfaces into the 3D window."""
    def __init__(self, sourceObject=None):
        IStkGraphicsOverlay.__init__(self, sourceObject)
        IStkGraphicsScreenOverlayContainer.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsOverlay._private_init(self, pUnk)
        IStkGraphicsScreenOverlayContainer._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsOverlay._get_property(self, attrname) is not None: found_prop = IStkGraphicsOverlay._get_property(self, attrname)
        if IStkGraphicsScreenOverlayContainer._get_property(self, attrname) is not None: found_prop = IStkGraphicsScreenOverlayContainer._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsOverlay.")
        
agcls.AgClassCatalog.add_catalog_entry("{6D9C8A3B-0EC8-428F-BC05-1F30315E92DC}", StkGraphicsOverlay)


class StkGraphicsPathPrimitive(IStkGraphicsPathPrimitive, IStkGraphicsPrimitive):
    """Renders a line to the 3D scene. Similar to the polyline primitive; however, the PathPrimitive was designed for the efficient addition/removal of points to/from the front or back of the line."""
    def __init__(self, sourceObject=None):
        IStkGraphicsPathPrimitive.__init__(self, sourceObject)
        IStkGraphicsPrimitive.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsPathPrimitive._private_init(self, pUnk)
        IStkGraphicsPrimitive._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsPathPrimitive._get_property(self, attrname) is not None: found_prop = IStkGraphicsPathPrimitive._get_property(self, attrname)
        if IStkGraphicsPrimitive._get_property(self, attrname) is not None: found_prop = IStkGraphicsPrimitive._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsPathPrimitive.")
        
agcls.AgClassCatalog.add_catalog_entry("{AFDCAA13-BE39-4E17-9AC5-06C08933A910}", StkGraphicsPathPrimitive)


class StkGraphicsPickResult(IStkGraphicsPickResult):
    """A single result from Pick."""
    def __init__(self, sourceObject=None):
        IStkGraphicsPickResult.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsPickResult._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsPickResult._get_property(self, attrname) is not None: found_prop = IStkGraphicsPickResult._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsPickResult.")
        
agcls.AgClassCatalog.add_catalog_entry("{E007C42E-13D7-4006-992A-B996CEA3BE49}", StkGraphicsPickResult)


class StkGraphicsPixelSizeDisplayCondition(IStkGraphicsPixelSizeDisplayCondition, IStkGraphicsDisplayCondition):
    """Defines an inclusive interval, in pixels, that determines when an object, such as a primitive, is rendered based on the number of pixels the object's bounding sphere (or in the case of screen overlays, bounding rectangle) covers on the screen..."""
    def __init__(self, sourceObject=None):
        IStkGraphicsPixelSizeDisplayCondition.__init__(self, sourceObject)
        IStkGraphicsDisplayCondition.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsPixelSizeDisplayCondition._private_init(self, pUnk)
        IStkGraphicsDisplayCondition._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsPixelSizeDisplayCondition._get_property(self, attrname) is not None: found_prop = IStkGraphicsPixelSizeDisplayCondition._get_property(self, attrname)
        if IStkGraphicsDisplayCondition._get_property(self, attrname) is not None: found_prop = IStkGraphicsDisplayCondition._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsPixelSizeDisplayCondition.")
        
agcls.AgClassCatalog.add_catalog_entry("{26B1DA4F-DA20-4E44-A98D-D54CC67821B8}", StkGraphicsPixelSizeDisplayCondition)


class StkGraphicsPointBatchPrimitive(IStkGraphicsPointBatchPrimitive, IStkGraphicsPrimitive):
    """ Renders one or more points in the 3D scene. Each point in the batch has a unique position and an optional color. All points in the batch share the same pixel size. For best performance, avoid creating lots of batches with only a few points each..."""
    def __init__(self, sourceObject=None):
        IStkGraphicsPointBatchPrimitive.__init__(self, sourceObject)
        IStkGraphicsPrimitive.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsPointBatchPrimitive._private_init(self, pUnk)
        IStkGraphicsPrimitive._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsPointBatchPrimitive._get_property(self, attrname) is not None: found_prop = IStkGraphicsPointBatchPrimitive._get_property(self, attrname)
        if IStkGraphicsPrimitive._get_property(self, attrname) is not None: found_prop = IStkGraphicsPrimitive._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsPointBatchPrimitive.")
        
agcls.AgClassCatalog.add_catalog_entry("{D8019323-F9C3-4238-BB4C-CD917C83E0F6}", StkGraphicsPointBatchPrimitive)


class StkGraphicsPointBatchPrimitiveOptionalParameters(IStkGraphicsPointBatchPrimitiveOptionalParameters):
    """Optional per-point parameters for point batch primitive that overrides the point batch primitive's global parameters..."""
    def __init__(self, sourceObject=None):
        IStkGraphicsPointBatchPrimitiveOptionalParameters.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsPointBatchPrimitiveOptionalParameters._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsPointBatchPrimitiveOptionalParameters._get_property(self, attrname) is not None: found_prop = IStkGraphicsPointBatchPrimitiveOptionalParameters._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsPointBatchPrimitiveOptionalParameters.")
        
agcls.AgClassCatalog.add_catalog_entry("{944f2ade-d0e5-4896-a1e2-28b1c9e74f08}", StkGraphicsPointBatchPrimitiveOptionalParameters)


class StkGraphicsPolylinePrimitive(IStkGraphicsPolylinePrimitive, IStkGraphicsPrimitive):
    """Renders a polyline in the 3D scene. Each line segment may have a different color. A polyline can be constructed with a position interpolator to render great arcs or rhumb lines."""
    def __init__(self, sourceObject=None):
        IStkGraphicsPolylinePrimitive.__init__(self, sourceObject)
        IStkGraphicsPrimitive.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsPolylinePrimitive._private_init(self, pUnk)
        IStkGraphicsPrimitive._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsPolylinePrimitive._get_property(self, attrname) is not None: found_prop = IStkGraphicsPolylinePrimitive._get_property(self, attrname)
        if IStkGraphicsPrimitive._get_property(self, attrname) is not None: found_prop = IStkGraphicsPrimitive._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsPolylinePrimitive.")
        
agcls.AgClassCatalog.add_catalog_entry("{F6E930C1-39F1-471B-A6F3-AFE651B00A95}", StkGraphicsPolylinePrimitive)


class StkGraphicsPolylinePrimitiveOptionalParameters(IStkGraphicsPolylinePrimitiveOptionalParameters):
    """Optional per-point or per-segment parameters for polyline primitive that overrides the polyline primitive's global parameters..."""
    def __init__(self, sourceObject=None):
        IStkGraphicsPolylinePrimitiveOptionalParameters.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsPolylinePrimitiveOptionalParameters._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsPolylinePrimitiveOptionalParameters._get_property(self, attrname) is not None: found_prop = IStkGraphicsPolylinePrimitiveOptionalParameters._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsPolylinePrimitiveOptionalParameters.")
        
agcls.AgClassCatalog.add_catalog_entry("{eee51ba6-73ae-4626-9fac-62a0f82cb3d1}", StkGraphicsPolylinePrimitiveOptionalParameters)


class StkGraphicsPositionInterpolator(IStkGraphicsPositionInterpolator):
    """Position interpolators compute positions based on a collection of input positions. Position interpolators are used in conjunction with the polyline primitive to render things such as great arcs and rhumb lines."""
    def __init__(self, sourceObject=None):
        IStkGraphicsPositionInterpolator.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsPositionInterpolator._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsPositionInterpolator._get_property(self, attrname) is not None: found_prop = IStkGraphicsPositionInterpolator._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsPositionInterpolator.")
        
agcls.AgClassCatalog.add_catalog_entry("{3D14E044-4128-4F60-9F08-797AA09205B5}", StkGraphicsPositionInterpolator)


class StkGraphicsPrimitive(IStkGraphicsPrimitive):
    """Primitives represent objects rendered in the 3D scene."""
    def __init__(self, sourceObject=None):
        IStkGraphicsPrimitive.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsPrimitive._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsPrimitive._get_property(self, attrname) is not None: found_prop = IStkGraphicsPrimitive._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsPrimitive.")
        
agcls.AgClassCatalog.add_catalog_entry("{0BE64D00-03FF-41C1-8F8E-DCDB5D260FCE}", StkGraphicsPrimitive)


class StkGraphicsPrimitiveManager(IStkGraphicsPrimitiveManager):
    """The primitive manager contains spatial data structures used to efficiently render primitives. Once a primitive is constructed, it must be added to the primitive manager before it will be rendered."""
    def __init__(self, sourceObject=None):
        IStkGraphicsPrimitiveManager.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsPrimitiveManager._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsPrimitiveManager._get_property(self, attrname) is not None: found_prop = IStkGraphicsPrimitiveManager._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsPrimitiveManager.")
        
agcls.AgClassCatalog.add_catalog_entry("{29884E1F-F498-4FED-9B83-AFC57A4BB09B}", StkGraphicsPrimitiveManager)


class StkGraphicsRasterImageGlobeOverlay(IStkGraphicsRasterImageGlobeOverlay, IStkGraphicsGlobeImageOverlay, IStkGraphicsGlobeOverlay):
    """A globe image overlay for handling rasters."""
    def __init__(self, sourceObject=None):
        IStkGraphicsRasterImageGlobeOverlay.__init__(self, sourceObject)
        IStkGraphicsGlobeImageOverlay.__init__(self, sourceObject)
        IStkGraphicsGlobeOverlay.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsRasterImageGlobeOverlay._private_init(self, pUnk)
        IStkGraphicsGlobeImageOverlay._private_init(self, pUnk)
        IStkGraphicsGlobeOverlay._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsRasterImageGlobeOverlay._get_property(self, attrname) is not None: found_prop = IStkGraphicsRasterImageGlobeOverlay._get_property(self, attrname)
        if IStkGraphicsGlobeImageOverlay._get_property(self, attrname) is not None: found_prop = IStkGraphicsGlobeImageOverlay._get_property(self, attrname)
        if IStkGraphicsGlobeOverlay._get_property(self, attrname) is not None: found_prop = IStkGraphicsGlobeOverlay._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsRasterImageGlobeOverlay.")
        
agcls.AgClassCatalog.add_catalog_entry("{49EC3E96-9494-4D95-A9C2-C722C46197FC}", StkGraphicsRasterImageGlobeOverlay)


class StkGraphicsRhumbLineInterpolator(IStkGraphicsRhumbLineInterpolator, IStkGraphicsPositionInterpolator):
    """The rhumb line interpolator computes interpolated positions along a rhumb line. Rhumb lines are lines of constant bearing. They appear as straight lines on a Mercator 2D map projection and are well suited to navigation."""
    def __init__(self, sourceObject=None):
        IStkGraphicsRhumbLineInterpolator.__init__(self, sourceObject)
        IStkGraphicsPositionInterpolator.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsRhumbLineInterpolator._private_init(self, pUnk)
        IStkGraphicsPositionInterpolator._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsRhumbLineInterpolator._get_property(self, attrname) is not None: found_prop = IStkGraphicsRhumbLineInterpolator._get_property(self, attrname)
        if IStkGraphicsPositionInterpolator._get_property(self, attrname) is not None: found_prop = IStkGraphicsPositionInterpolator._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsRhumbLineInterpolator.")
        
agcls.AgClassCatalog.add_catalog_entry("{E791A602-85BA-4413-9C8D-479D1692254C}", StkGraphicsRhumbLineInterpolator)


class StkGraphicsScene(IStkGraphicsScene):
    """A scene provides properties and functionality that are reflected in the rendering of the globe control that it is associated with. An globe control's scene is available from the scene property..."""
    def __init__(self, sourceObject=None):
        IStkGraphicsScene.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsScene._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsScene._get_property(self, attrname) is not None: found_prop = IStkGraphicsScene._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsScene.")
        
agcls.AgClassCatalog.add_catalog_entry("{E664A9F1-8A89-4B4C-9AA2-E5BEB603AF3C}", StkGraphicsScene)


class StkGraphicsSceneDisplayCondition(IStkGraphicsSceneDisplayCondition, IStkGraphicsDisplayCondition):
    """A display condition used to control what scene or scenes an object, such as a primitive, is rendered in. This is used to show an object in some scenes and hide it in others."""
    def __init__(self, sourceObject=None):
        IStkGraphicsSceneDisplayCondition.__init__(self, sourceObject)
        IStkGraphicsDisplayCondition.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsSceneDisplayCondition._private_init(self, pUnk)
        IStkGraphicsDisplayCondition._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsSceneDisplayCondition._get_property(self, attrname) is not None: found_prop = IStkGraphicsSceneDisplayCondition._get_property(self, attrname)
        if IStkGraphicsDisplayCondition._get_property(self, attrname) is not None: found_prop = IStkGraphicsDisplayCondition._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsSceneDisplayCondition.")
        
agcls.AgClassCatalog.add_catalog_entry("{8074B463-1740-4C65-870C-E231589EE5CE}", StkGraphicsSceneDisplayCondition)


class StkGraphicsSceneManager(IStkGraphicsSceneManager):
    """The static scene manager class provides global properties and functionality that apply to all scenes and thus affect the rendering of every globe control..."""
    def __init__(self, sourceObject=None):
        IStkGraphicsSceneManager.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsSceneManager._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsSceneManager._get_property(self, attrname) is not None: found_prop = IStkGraphicsSceneManager._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsSceneManager.")
        
agcls.AgClassCatalog.add_catalog_entry("{B671433F-CA75-4628-B84D-4878A247AFC3}", StkGraphicsSceneManager)


class StkGraphicsScreenOverlay(IStkGraphicsScreenOverlay, IStkGraphicsOverlay, IStkGraphicsScreenOverlayContainer):
    """A visible element drawn in screen space. Overlays are useful for floating logos, heads up displays, and integrating user interfaces into the 3D window."""
    def __init__(self, sourceObject=None):
        IStkGraphicsScreenOverlay.__init__(self, sourceObject)
        IStkGraphicsOverlay.__init__(self, sourceObject)
        IStkGraphicsScreenOverlayContainer.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsScreenOverlay._private_init(self, pUnk)
        IStkGraphicsOverlay._private_init(self, pUnk)
        IStkGraphicsScreenOverlayContainer._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsScreenOverlay._get_property(self, attrname) is not None: found_prop = IStkGraphicsScreenOverlay._get_property(self, attrname)
        if IStkGraphicsOverlay._get_property(self, attrname) is not None: found_prop = IStkGraphicsOverlay._get_property(self, attrname)
        if IStkGraphicsScreenOverlayContainer._get_property(self, attrname) is not None: found_prop = IStkGraphicsScreenOverlayContainer._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsScreenOverlay.")
        
agcls.AgClassCatalog.add_catalog_entry("{B50A73BA-5299-4746-B30B-EEB80699546E}", StkGraphicsScreenOverlay)


class StkGraphicsScreenOverlayCollection(IStkGraphicsScreenOverlayCollection, IStkGraphicsScreenOverlayCollectionBase):
    """A collection of screen overlays."""
    def __init__(self, sourceObject=None):
        IStkGraphicsScreenOverlayCollection.__init__(self, sourceObject)
        IStkGraphicsScreenOverlayCollectionBase.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsScreenOverlayCollection._private_init(self, pUnk)
        IStkGraphicsScreenOverlayCollectionBase._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsScreenOverlayCollection._get_property(self, attrname) is not None: found_prop = IStkGraphicsScreenOverlayCollection._get_property(self, attrname)
        if IStkGraphicsScreenOverlayCollectionBase._get_property(self, attrname) is not None: found_prop = IStkGraphicsScreenOverlayCollectionBase._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsScreenOverlayCollection.")
        
agcls.AgClassCatalog.add_catalog_entry("{F75B7693-A40E-4B54-AB6F-EE8F974D2E6C}", StkGraphicsScreenOverlayCollection)


class StkGraphicsScreenOverlayManager(IStkGraphicsScreenOverlayManager, IStkGraphicsScreenOverlayCollectionBase, IStkGraphicsScreenOverlayContainer):
    """The top-level container for screen overlays. All child screen overlays that are added to this container are specified relative to the overall globe control."""
    def __init__(self, sourceObject=None):
        IStkGraphicsScreenOverlayManager.__init__(self, sourceObject)
        IStkGraphicsScreenOverlayCollectionBase.__init__(self, sourceObject)
        IStkGraphicsScreenOverlayContainer.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsScreenOverlayManager._private_init(self, pUnk)
        IStkGraphicsScreenOverlayCollectionBase._private_init(self, pUnk)
        IStkGraphicsScreenOverlayContainer._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsScreenOverlayManager._get_property(self, attrname) is not None: found_prop = IStkGraphicsScreenOverlayManager._get_property(self, attrname)
        if IStkGraphicsScreenOverlayCollectionBase._get_property(self, attrname) is not None: found_prop = IStkGraphicsScreenOverlayCollectionBase._get_property(self, attrname)
        if IStkGraphicsScreenOverlayContainer._get_property(self, attrname) is not None: found_prop = IStkGraphicsScreenOverlayContainer._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsScreenOverlayManager.")
        
agcls.AgClassCatalog.add_catalog_entry("{9853EC1E-531C-4494-B308-BC6644CF672C}", StkGraphicsScreenOverlayManager)


class StkGraphicsScreenOverlayPickResult(IStkGraphicsScreenOverlayPickResult):
    """Describes a picked screen overlay as a result of a call to pick screen overlays."""
    def __init__(self, sourceObject=None):
        IStkGraphicsScreenOverlayPickResult.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsScreenOverlayPickResult._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsScreenOverlayPickResult._get_property(self, attrname) is not None: found_prop = IStkGraphicsScreenOverlayPickResult._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsScreenOverlayPickResult.")
        
agcls.AgClassCatalog.add_catalog_entry("{6E7F318E-F7E5-4B19-A532-50EC60EF09FA}", StkGraphicsScreenOverlayPickResult)


class StkGraphicsSolidPrimitive(IStkGraphicsSolidPrimitive, IStkGraphicsPrimitive):
    """Renders filled solid objects and their outlines. Example solids include boxes and ellipsoids. Various effects are supported, such as displaying the solid's silhouette, and hiding the outline of the backside of the solid..."""
    def __init__(self, sourceObject=None):
        IStkGraphicsSolidPrimitive.__init__(self, sourceObject)
        IStkGraphicsPrimitive.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsSolidPrimitive._private_init(self, pUnk)
        IStkGraphicsPrimitive._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsSolidPrimitive._get_property(self, attrname) is not None: found_prop = IStkGraphicsSolidPrimitive._get_property(self, attrname)
        if IStkGraphicsPrimitive._get_property(self, attrname) is not None: found_prop = IStkGraphicsPrimitive._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsSolidPrimitive.")
        
agcls.AgClassCatalog.add_catalog_entry("{12343DC0-99FF-48B6-9D93-9B7A2CE34DB9}", StkGraphicsSolidPrimitive)


class StkGraphicsStereoscopic(IStkGraphicsStereoscopic):
    """Gets the stereoscopic options for all Scenes. To use a particular stereoscopic display mode, ensure that your system supports the feature and that it is enabled."""
    def __init__(self, sourceObject=None):
        IStkGraphicsStereoscopic.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsStereoscopic._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsStereoscopic._get_property(self, attrname) is not None: found_prop = IStkGraphicsStereoscopic._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsStereoscopic.")
        
agcls.AgClassCatalog.add_catalog_entry("{5FDA997C-0450-4574-BFD9-D803A3AA6167}", StkGraphicsStereoscopic)


class StkGraphicsSurfaceMeshPrimitive(IStkGraphicsSurfaceMeshPrimitive, IStkGraphicsPrimitive):
    """A triangle mesh primitive for meshes on the surface that need to conform to terrain."""
    def __init__(self, sourceObject=None):
        IStkGraphicsSurfaceMeshPrimitive.__init__(self, sourceObject)
        IStkGraphicsPrimitive.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsSurfaceMeshPrimitive._private_init(self, pUnk)
        IStkGraphicsPrimitive._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsSurfaceMeshPrimitive._get_property(self, attrname) is not None: found_prop = IStkGraphicsSurfaceMeshPrimitive._get_property(self, attrname)
        if IStkGraphicsPrimitive._get_property(self, attrname) is not None: found_prop = IStkGraphicsPrimitive._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsSurfaceMeshPrimitive.")
        
agcls.AgClassCatalog.add_catalog_entry("{C4B2DB74-EBA8-4B18-8BE4-372FCA665F5D}", StkGraphicsSurfaceMeshPrimitive)


class StkGraphicsTerrainCollection(IStkGraphicsTerrainCollection):
    """A collection of terrain overlay objects."""
    def __init__(self, sourceObject=None):
        IStkGraphicsTerrainCollection.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsTerrainCollection._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsTerrainCollection._get_property(self, attrname) is not None: found_prop = IStkGraphicsTerrainCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsTerrainCollection.")
        
agcls.AgClassCatalog.add_catalog_entry("{168D1247-7208-45C3-AF31-7E4009DE2EA7}", StkGraphicsTerrainCollection)


class StkGraphicsTerrainOverlay(IStkGraphicsTerrainOverlay, IStkGraphicsGlobeOverlay):
    """A globe overlay which shows terrain."""
    def __init__(self, sourceObject=None):
        IStkGraphicsTerrainOverlay.__init__(self, sourceObject)
        IStkGraphicsGlobeOverlay.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsTerrainOverlay._private_init(self, pUnk)
        IStkGraphicsGlobeOverlay._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsTerrainOverlay._get_property(self, attrname) is not None: found_prop = IStkGraphicsTerrainOverlay._get_property(self, attrname)
        if IStkGraphicsGlobeOverlay._get_property(self, attrname) is not None: found_prop = IStkGraphicsGlobeOverlay._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsTerrainOverlay.")
        
agcls.AgClassCatalog.add_catalog_entry("{C1640FF1-07BB-4584-940C-50BDD48CFE14}", StkGraphicsTerrainOverlay)


class StkGraphicsTextBatchPrimitive(IStkGraphicsTextBatchPrimitive, IStkGraphicsPrimitive):
    """ Renders one or more strings in the 3D scene.  For best performance, avoid creating lots of batches with only a few strings each. See the Batching Performance Overview. """
    def __init__(self, sourceObject=None):
        IStkGraphicsTextBatchPrimitive.__init__(self, sourceObject)
        IStkGraphicsPrimitive.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsTextBatchPrimitive._private_init(self, pUnk)
        IStkGraphicsPrimitive._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsTextBatchPrimitive._get_property(self, attrname) is not None: found_prop = IStkGraphicsTextBatchPrimitive._get_property(self, attrname)
        if IStkGraphicsPrimitive._get_property(self, attrname) is not None: found_prop = IStkGraphicsPrimitive._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsTextBatchPrimitive.")
        
agcls.AgClassCatalog.add_catalog_entry("{EEE49615-F2F3-4810-B877-4C7729F56DD1}", StkGraphicsTextBatchPrimitive)


class StkGraphicsTextBatchPrimitiveOptionalParameters(IStkGraphicsTextBatchPrimitiveOptionalParameters):
    """Optional per-string and per-batch parameters for text batch primitive..."""
    def __init__(self, sourceObject=None):
        IStkGraphicsTextBatchPrimitiveOptionalParameters.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsTextBatchPrimitiveOptionalParameters._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsTextBatchPrimitiveOptionalParameters._get_property(self, attrname) is not None: found_prop = IStkGraphicsTextBatchPrimitiveOptionalParameters._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsTextBatchPrimitiveOptionalParameters.")
        
agcls.AgClassCatalog.add_catalog_entry("{D68422E0-31FC-4E61-9A7C-6E4BCB261A9D}", StkGraphicsTextBatchPrimitiveOptionalParameters)


class StkGraphicsTextOverlay(IStkGraphicsTextOverlay, IStkGraphicsScreenOverlay, IStkGraphicsOverlay, IStkGraphicsScreenOverlayContainer):
    """A rectangular overlay that contains text."""
    def __init__(self, sourceObject=None):
        IStkGraphicsTextOverlay.__init__(self, sourceObject)
        IStkGraphicsScreenOverlay.__init__(self, sourceObject)
        IStkGraphicsOverlay.__init__(self, sourceObject)
        IStkGraphicsScreenOverlayContainer.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsTextOverlay._private_init(self, pUnk)
        IStkGraphicsScreenOverlay._private_init(self, pUnk)
        IStkGraphicsOverlay._private_init(self, pUnk)
        IStkGraphicsScreenOverlayContainer._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsTextOverlay._get_property(self, attrname) is not None: found_prop = IStkGraphicsTextOverlay._get_property(self, attrname)
        if IStkGraphicsScreenOverlay._get_property(self, attrname) is not None: found_prop = IStkGraphicsScreenOverlay._get_property(self, attrname)
        if IStkGraphicsOverlay._get_property(self, attrname) is not None: found_prop = IStkGraphicsOverlay._get_property(self, attrname)
        if IStkGraphicsScreenOverlayContainer._get_property(self, attrname) is not None: found_prop = IStkGraphicsScreenOverlayContainer._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsTextOverlay.")
        
agcls.AgClassCatalog.add_catalog_entry("{46BE31F3-1A5B-4B51-AA77-27CCA844F5CD}", StkGraphicsTextOverlay)


class StkGraphicsTextureMatrix(IStkGraphicsTextureMatrix):
    """A 4 by 4 matrix applied to a texture coordinate."""
    def __init__(self, sourceObject=None):
        IStkGraphicsTextureMatrix.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsTextureMatrix._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsTextureMatrix._get_property(self, attrname) is not None: found_prop = IStkGraphicsTextureMatrix._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsTextureMatrix.")
        
agcls.AgClassCatalog.add_catalog_entry("{E05D3E06-18C5-49DE-B9AC-B2245C83E62B}", StkGraphicsTextureMatrix)


class StkGraphicsTextureScreenOverlay(IStkGraphicsTextureScreenOverlay, IStkGraphicsScreenOverlay, IStkGraphicsOverlay, IStkGraphicsScreenOverlayContainer):
    """A rectangular overlay that can be assigned a texture."""
    def __init__(self, sourceObject=None):
        IStkGraphicsTextureScreenOverlay.__init__(self, sourceObject)
        IStkGraphicsScreenOverlay.__init__(self, sourceObject)
        IStkGraphicsOverlay.__init__(self, sourceObject)
        IStkGraphicsScreenOverlayContainer.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsTextureScreenOverlay._private_init(self, pUnk)
        IStkGraphicsScreenOverlay._private_init(self, pUnk)
        IStkGraphicsOverlay._private_init(self, pUnk)
        IStkGraphicsScreenOverlayContainer._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsTextureScreenOverlay._get_property(self, attrname) is not None: found_prop = IStkGraphicsTextureScreenOverlay._get_property(self, attrname)
        if IStkGraphicsScreenOverlay._get_property(self, attrname) is not None: found_prop = IStkGraphicsScreenOverlay._get_property(self, attrname)
        if IStkGraphicsOverlay._get_property(self, attrname) is not None: found_prop = IStkGraphicsOverlay._get_property(self, attrname)
        if IStkGraphicsScreenOverlayContainer._get_property(self, attrname) is not None: found_prop = IStkGraphicsScreenOverlayContainer._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsTextureScreenOverlay.")
        
agcls.AgClassCatalog.add_catalog_entry("{51136098-508C-4DD3-B39C-D342235E58BD}", StkGraphicsTextureScreenOverlay)


class StkGraphicsTimeIntervalDisplayCondition(IStkGraphicsTimeIntervalDisplayCondition, IStkGraphicsDisplayCondition):
    """Defines an inclusive time interval that determines when an object, such as a primitive, is rendered based on the current animation time ."""
    def __init__(self, sourceObject=None):
        IStkGraphicsTimeIntervalDisplayCondition.__init__(self, sourceObject)
        IStkGraphicsDisplayCondition.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsTimeIntervalDisplayCondition._private_init(self, pUnk)
        IStkGraphicsDisplayCondition._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsTimeIntervalDisplayCondition._get_property(self, attrname) is not None: found_prop = IStkGraphicsTimeIntervalDisplayCondition._get_property(self, attrname)
        if IStkGraphicsDisplayCondition._get_property(self, attrname) is not None: found_prop = IStkGraphicsDisplayCondition._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsTimeIntervalDisplayCondition.")
        
agcls.AgClassCatalog.add_catalog_entry("{256AACC3-3E56-4BA6-80F9-15BD968C3863}", StkGraphicsTimeIntervalDisplayCondition)


class StkGraphicsTriangleMeshPrimitive(IStkGraphicsTriangleMeshPrimitive, IStkGraphicsPrimitive):
    """Renders a triangle mesh in the 3D scene. Examples of triangle meshes includes polygons on the globe (e.g. states or countries), terrain and imagery extents, ellipses, and extrusions."""
    def __init__(self, sourceObject=None):
        IStkGraphicsTriangleMeshPrimitive.__init__(self, sourceObject)
        IStkGraphicsPrimitive.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsTriangleMeshPrimitive._private_init(self, pUnk)
        IStkGraphicsPrimitive._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsTriangleMeshPrimitive._get_property(self, attrname) is not None: found_prop = IStkGraphicsTriangleMeshPrimitive._get_property(self, attrname)
        if IStkGraphicsPrimitive._get_property(self, attrname) is not None: found_prop = IStkGraphicsPrimitive._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsTriangleMeshPrimitive.")
        
agcls.AgClassCatalog.add_catalog_entry("{DA3D4743-D0D9-49B8-8037-3DDC3075170E}", StkGraphicsTriangleMeshPrimitive)


class StkGraphicsTriangleMeshPrimitiveOptionalParameters(IStkGraphicsTriangleMeshPrimitiveOptionalParameters):
    """Optional parameters for triangle mesh primitive..."""
    def __init__(self, sourceObject=None):
        IStkGraphicsTriangleMeshPrimitiveOptionalParameters.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsTriangleMeshPrimitiveOptionalParameters._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsTriangleMeshPrimitiveOptionalParameters._get_property(self, attrname) is not None: found_prop = IStkGraphicsTriangleMeshPrimitiveOptionalParameters._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsTriangleMeshPrimitiveOptionalParameters.")
        
agcls.AgClassCatalog.add_catalog_entry("{07985409-9BA1-406C-8A91-D4E99DDB406F}", StkGraphicsTriangleMeshPrimitiveOptionalParameters)


class StkGraphicsVectorPrimitive(IStkGraphicsVectorPrimitive, IStkGraphicsPrimitive):
    """Renders a vector in the 3D scene. A vector is defined by a source (given by an ISystem) and a direction (given by an IVector or IPoint). Length is auto-calculated or can be set separately."""
    def __init__(self, sourceObject=None):
        IStkGraphicsVectorPrimitive.__init__(self, sourceObject)
        IStkGraphicsPrimitive.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsVectorPrimitive._private_init(self, pUnk)
        IStkGraphicsPrimitive._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsVectorPrimitive._get_property(self, attrname) is not None: found_prop = IStkGraphicsVectorPrimitive._get_property(self, attrname)
        if IStkGraphicsPrimitive._get_property(self, attrname) is not None: found_prop = IStkGraphicsPrimitive._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsVectorPrimitive.")
        
agcls.AgClassCatalog.add_catalog_entry("{8DE433D5-0E13-44ED-B3CF-DF380B8BEA7D}", StkGraphicsVectorPrimitive)


class StkGraphicsBoxTriangulatorInitializer(IStkGraphicsBoxTriangulatorInitializer):
    """Triangulates a box. It is recommended to visualize the box using a solid primitive. Although, if only the fill is desired for visualization, a triangle mesh primitive with render back then front faces set to true can be used..."""
    def __init__(self, sourceObject=None):
        IStkGraphicsBoxTriangulatorInitializer.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsBoxTriangulatorInitializer._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsBoxTriangulatorInitializer._get_property(self, attrname) is not None: found_prop = IStkGraphicsBoxTriangulatorInitializer._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsBoxTriangulatorInitializer.")
        
agcls.AgClassCatalog.add_catalog_entry("{F5AA6E13-2989-46FD-8BA7-341870EE56CB}", StkGraphicsBoxTriangulatorInitializer)


class StkGraphicsCylinderTriangulatorInitializer(IStkGraphicsCylinderTriangulatorInitializer):
    """Triangulates a cylinder. It is recommended to visualize the cylinder using a solid primitive. Although, if only the fill is desired for visualization, a triangle mesh primitive with render back then front faces set to true can be used..."""
    def __init__(self, sourceObject=None):
        IStkGraphicsCylinderTriangulatorInitializer.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsCylinderTriangulatorInitializer._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsCylinderTriangulatorInitializer._get_property(self, attrname) is not None: found_prop = IStkGraphicsCylinderTriangulatorInitializer._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsCylinderTriangulatorInitializer.")
        
agcls.AgClassCatalog.add_catalog_entry("{351F63E3-5430-4B7C-8811-1353D7FDBA79}", StkGraphicsCylinderTriangulatorInitializer)


class StkGraphicsEllipsoidTriangulatorInitializer(IStkGraphicsEllipsoidTriangulatorInitializer):
    """Triangulates an ellipsoid. It is recommended to visualize the ellipsoid using a solid primitive. Although, if only the fill is desired for visualization, a triangle mesh primitive with render back then front faces set to true can be used..."""
    def __init__(self, sourceObject=None):
        IStkGraphicsEllipsoidTriangulatorInitializer.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsEllipsoidTriangulatorInitializer._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsEllipsoidTriangulatorInitializer._get_property(self, attrname) is not None: found_prop = IStkGraphicsEllipsoidTriangulatorInitializer._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsEllipsoidTriangulatorInitializer.")
        
agcls.AgClassCatalog.add_catalog_entry("{DEBC2954-C0E9-4562-8AD6-A93E7EDD3E82}", StkGraphicsEllipsoidTriangulatorInitializer)


class StkGraphicsExtrudedPolylineTriangulatorInitializer(IStkGraphicsExtrudedPolylineTriangulatorInitializer):
    """Triangulates a polyline into an extrusion with bottom and top boundaries."""
    def __init__(self, sourceObject=None):
        IStkGraphicsExtrudedPolylineTriangulatorInitializer.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsExtrudedPolylineTriangulatorInitializer._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsExtrudedPolylineTriangulatorInitializer._get_property(self, attrname) is not None: found_prop = IStkGraphicsExtrudedPolylineTriangulatorInitializer._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsExtrudedPolylineTriangulatorInitializer.")
        
agcls.AgClassCatalog.add_catalog_entry("{9DD61791-420A-401D-8C10-251999CA274B}", StkGraphicsExtrudedPolylineTriangulatorInitializer)


class StkGraphicsSurfaceExtentTriangulatorInitializer(IStkGraphicsSurfaceExtentTriangulatorInitializer):
    """Triangulates an extent on a central body into a triangle mesh and a surrounding boundary. The mesh is commonly visualized with the triangle mesh primitive or surface mesh primitive. The boundary is commonly visualized with the polyline primitive."""
    def __init__(self, sourceObject=None):
        IStkGraphicsSurfaceExtentTriangulatorInitializer.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsSurfaceExtentTriangulatorInitializer._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsSurfaceExtentTriangulatorInitializer._get_property(self, attrname) is not None: found_prop = IStkGraphicsSurfaceExtentTriangulatorInitializer._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsSurfaceExtentTriangulatorInitializer.")
        
agcls.AgClassCatalog.add_catalog_entry("{F86CAF5F-4B95-4CD0-9E8A-7C04AF8B7E9B}", StkGraphicsSurfaceExtentTriangulatorInitializer)


class StkGraphicsSurfacePolygonTriangulatorInitializer(IStkGraphicsSurfacePolygonTriangulatorInitializer):
    """Triangulates a polygon, with an optional hole, on a central body, into a triangle mesh and a surrounding boundary. The mesh is commonly visualized with the triangle mesh primitive or surface mesh primitive..."""
    def __init__(self, sourceObject=None):
        IStkGraphicsSurfacePolygonTriangulatorInitializer.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsSurfacePolygonTriangulatorInitializer._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsSurfacePolygonTriangulatorInitializer._get_property(self, attrname) is not None: found_prop = IStkGraphicsSurfacePolygonTriangulatorInitializer._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsSurfacePolygonTriangulatorInitializer.")
        
agcls.AgClassCatalog.add_catalog_entry("{FB4D2919-C9DB-4C93-A64B-35A9EB884E6B}", StkGraphicsSurfacePolygonTriangulatorInitializer)


class StkGraphicsSurfaceShapesInitializer(IStkGraphicsSurfaceShapesInitializer):
    """Computes boundary positions for shapes on the surface such as circles, ellipses, and sectors."""
    def __init__(self, sourceObject=None):
        IStkGraphicsSurfaceShapesInitializer.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsSurfaceShapesInitializer._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsSurfaceShapesInitializer._get_property(self, attrname) is not None: found_prop = IStkGraphicsSurfaceShapesInitializer._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsSurfaceShapesInitializer.")
        
agcls.AgClassCatalog.add_catalog_entry("{2B227F07-5BB0-43E5-9AE2-7288A73856BC}", StkGraphicsSurfaceShapesInitializer)


class StkGraphicsAGICustomTerrainOverlayFactory(IStkGraphicsAGICustomTerrainOverlayFactory):
    """A terrain overlay for handling AGI Cesium Terrain."""
    def __init__(self, sourceObject=None):
        IStkGraphicsAGICustomTerrainOverlayFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsAGICustomTerrainOverlayFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsAGICustomTerrainOverlayFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsAGICustomTerrainOverlayFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsAGICustomTerrainOverlayFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{3B6233AF-5A82-45AB-8371-0C1430585060}", StkGraphicsAGICustomTerrainOverlayFactory)


class StkGraphicsAGIProcessedImageGlobeOverlayFactory(IStkGraphicsAGIProcessedImageGlobeOverlayFactory):
    """A globe image overlay for handling AGI Processed Image (PDTTX) files."""
    def __init__(self, sourceObject=None):
        IStkGraphicsAGIProcessedImageGlobeOverlayFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsAGIProcessedImageGlobeOverlayFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsAGIProcessedImageGlobeOverlayFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsAGIProcessedImageGlobeOverlayFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsAGIProcessedImageGlobeOverlayFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{668251C7-6113-4243-B563-8F58F25A9281}", StkGraphicsAGIProcessedImageGlobeOverlayFactory)


class StkGraphicsAGIProcessedTerrainOverlayFactory(IStkGraphicsAGIProcessedTerrainOverlayFactory):
    """A terrain overlay for handling AGI Processed Terrain (PDTT) files."""
    def __init__(self, sourceObject=None):
        IStkGraphicsAGIProcessedTerrainOverlayFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsAGIProcessedTerrainOverlayFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsAGIProcessedTerrainOverlayFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsAGIProcessedTerrainOverlayFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsAGIProcessedTerrainOverlayFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{AD84EB3C-79EC-43F8-B042-0B9180B94D75}", StkGraphicsAGIProcessedTerrainOverlayFactory)


class StkGraphicsAGIRoamImageGlobeOverlayFactory(IStkGraphicsAGIRoamImageGlobeOverlayFactory):
    """A globe image overlay for handling ROAM (TXM/TXB) files."""
    def __init__(self, sourceObject=None):
        IStkGraphicsAGIRoamImageGlobeOverlayFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsAGIRoamImageGlobeOverlayFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsAGIRoamImageGlobeOverlayFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsAGIRoamImageGlobeOverlayFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsAGIRoamImageGlobeOverlayFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{BB6E5A38-778A-4E22-91FB-7B4E63F40D6E}", StkGraphicsAGIRoamImageGlobeOverlayFactory)


class StkGraphicsCustomImageGlobeOverlayPluginActivatorFactory(IStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory):
    """The Activator class provides methods to load COM plugins that implement custom image globe overlays. For more information about custom image globe overlays, see the STK Programming Interface."""
    def __init__(self, sourceObject=None):
        IStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsCustomImageGlobeOverlayPluginActivatorFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{2B0D7F25-8A54-40C5-BD10-75EB00788704}", StkGraphicsCustomImageGlobeOverlayPluginActivatorFactory)


class StkGraphicsGeospatialImageGlobeOverlayFactory(IStkGraphicsGeospatialImageGlobeOverlayFactory):
    """A globe image overlay for handling <a href='http://www.jpeg.org/jpeg2000/'>JPEG 2000</a> (.jp2), ECW (.ecw), ECWP, and MrSid (.sid) image formats in the WGS84 geographic projection."""
    def __init__(self, sourceObject=None):
        IStkGraphicsGeospatialImageGlobeOverlayFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsGeospatialImageGlobeOverlayFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsGeospatialImageGlobeOverlayFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsGeospatialImageGlobeOverlayFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsGeospatialImageGlobeOverlayFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{636E2A9D-49B9-4673-8BD5-4DF7E06A696E}", StkGraphicsGeospatialImageGlobeOverlayFactory)


class StkGraphicsProjectedRasterOverlayFactory(IStkGraphicsProjectedRasterOverlayFactory):
    """A globe image overlay which projects a raster onto the terrain or surface of the central body. You can also enable projection onto models by setting projected raster model projection to true for a Scene..."""
    def __init__(self, sourceObject=None):
        IStkGraphicsProjectedRasterOverlayFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsProjectedRasterOverlayFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsProjectedRasterOverlayFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsProjectedRasterOverlayFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsProjectedRasterOverlayFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{FDAAFAF9-B61B-4DB8-8157-96EF4D476457}", StkGraphicsProjectedRasterOverlayFactory)


class StkGraphicsProjectionFactory(IStkGraphicsProjectionFactory):
    """A projection represents a simplified camera with a position, orientation, and field of view horizontal and field of view vertical..."""
    def __init__(self, sourceObject=None):
        IStkGraphicsProjectionFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsProjectionFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsProjectionFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsProjectionFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsProjectionFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{C22AAF01-98CE-41E1-8A98-E164A61D40CC}", StkGraphicsProjectionFactory)


class StkGraphicsAltitudeDisplayConditionFactory(IStkGraphicsAltitudeDisplayConditionFactory):
    """Defines an inclusive altitude interval that determines when an object is rendered based on the camera's altitude relative to a central body."""
    def __init__(self, sourceObject=None):
        IStkGraphicsAltitudeDisplayConditionFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsAltitudeDisplayConditionFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsAltitudeDisplayConditionFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsAltitudeDisplayConditionFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsAltitudeDisplayConditionFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{75D5CF9A-FBCE-482C-9520-7811D9E71EC1}", StkGraphicsAltitudeDisplayConditionFactory)


class StkGraphicsAxesPrimitiveFactory(IStkGraphicsAxesPrimitiveFactory):
    """Renders an axes in the 3D scene."""
    def __init__(self, sourceObject=None):
        IStkGraphicsAxesPrimitiveFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsAxesPrimitiveFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsAxesPrimitiveFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsAxesPrimitiveFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsAxesPrimitiveFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{166D78CD-1000-4EDC-B031-AAB1B1B45E8D}", StkGraphicsAxesPrimitiveFactory)


class StkGraphicsCompositeDisplayConditionFactory(IStkGraphicsCompositeDisplayConditionFactory):
    """A composite of display conditions combined using a binary logic operation. For example, several time interval display condition objects can be added to a composite..."""
    def __init__(self, sourceObject=None):
        IStkGraphicsCompositeDisplayConditionFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsCompositeDisplayConditionFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsCompositeDisplayConditionFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsCompositeDisplayConditionFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsCompositeDisplayConditionFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{375A535B-557C-4E7B-A2AD-0905381BA46F}", StkGraphicsCompositeDisplayConditionFactory)


class StkGraphicsCompositePrimitiveFactory(IStkGraphicsCompositePrimitiveFactory):
    """ A primitive that is composed of multiple other primitives. Since composites can contain other composites, they are commonly used to build hierarchies of primitives to efficiently evaluate display conditions..."""
    def __init__(self, sourceObject=None):
        IStkGraphicsCompositePrimitiveFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsCompositePrimitiveFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsCompositePrimitiveFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsCompositePrimitiveFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsCompositePrimitiveFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{7F9D1191-7973-4B59-B2E6-9A4D4F19A222}", StkGraphicsCompositePrimitiveFactory)


class StkGraphicsConstantDisplayConditionFactory(IStkGraphicsConstantDisplayConditionFactory):
    """A display condition that evaluates to a user-defined value. This is commonly used to hide primitives by assigning to a primitive a display condition that always returns false."""
    def __init__(self, sourceObject=None):
        IStkGraphicsConstantDisplayConditionFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsConstantDisplayConditionFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsConstantDisplayConditionFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsConstantDisplayConditionFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsConstantDisplayConditionFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{84B6B505-833D-4A3B-BD6B-99266C8C5284}", StkGraphicsConstantDisplayConditionFactory)


class StkGraphicsDistanceDisplayConditionFactory(IStkGraphicsDistanceDisplayConditionFactory):
    """Defines an inclusive distance interval that determines when an object, such as a primitive, is rendered based on the distance from the camera to the object."""
    def __init__(self, sourceObject=None):
        IStkGraphicsDistanceDisplayConditionFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsDistanceDisplayConditionFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsDistanceDisplayConditionFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsDistanceDisplayConditionFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsDistanceDisplayConditionFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{F8A027DC-AE3B-464A-A5C4-39AA37368ED7}", StkGraphicsDistanceDisplayConditionFactory)


class StkGraphicsDistanceToGlobeOverlayDisplayConditionFactory(IStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory):
    """Defines an inclusive distance interval that determines when an object, such as a primitive, is rendered based on the distance from the camera to the globe overlay..."""
    def __init__(self, sourceObject=None):
        IStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsDistanceToGlobeOverlayDisplayConditionFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{0BF7DA00-8B06-41FA-A580-15D898A0837F}", StkGraphicsDistanceToGlobeOverlayDisplayConditionFactory)


class StkGraphicsDistanceToPositionDisplayConditionFactory(IStkGraphicsDistanceToPositionDisplayConditionFactory):
    """Defines an inclusive distance interval that determines when an object, such as a primitive, is rendered based on the distance from the camera to a position defined in the given reference frame."""
    def __init__(self, sourceObject=None):
        IStkGraphicsDistanceToPositionDisplayConditionFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsDistanceToPositionDisplayConditionFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsDistanceToPositionDisplayConditionFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsDistanceToPositionDisplayConditionFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsDistanceToPositionDisplayConditionFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{F19A2CB9-BF83-4F3F-9B76-82794467A872}", StkGraphicsDistanceToPositionDisplayConditionFactory)


class StkGraphicsDistanceToPrimitiveDisplayConditionFactory(IStkGraphicsDistanceToPrimitiveDisplayConditionFactory):
    """Defines an inclusive distance interval that determines when an object, such as a screen overlay, is rendered based on the distance from the camera to the primitive..."""
    def __init__(self, sourceObject=None):
        IStkGraphicsDistanceToPrimitiveDisplayConditionFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsDistanceToPrimitiveDisplayConditionFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsDistanceToPrimitiveDisplayConditionFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsDistanceToPrimitiveDisplayConditionFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsDistanceToPrimitiveDisplayConditionFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{8D977F6C-359B-4353-AD7A-B1317BE7136E}", StkGraphicsDistanceToPrimitiveDisplayConditionFactory)


class StkGraphicsDurationPathPrimitiveUpdatePolicyFactory(IStkGraphicsDurationPathPrimitiveUpdatePolicyFactory):
    """path primitive update policy that removes points from remove location after a given duration."""
    def __init__(self, sourceObject=None):
        IStkGraphicsDurationPathPrimitiveUpdatePolicyFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsDurationPathPrimitiveUpdatePolicyFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsDurationPathPrimitiveUpdatePolicyFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsDurationPathPrimitiveUpdatePolicyFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsDurationPathPrimitiveUpdatePolicyFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{D10A5794-C75B-43DA-8277-FAA18D9C988A}", StkGraphicsDurationPathPrimitiveUpdatePolicyFactory)


class StkGraphicsGlobeImageOverlayInitializer(IStkGraphicsGlobeImageOverlayInitializer):
    """A globe overlay that shows an image."""
    def __init__(self, sourceObject=None):
        IStkGraphicsGlobeImageOverlayInitializer.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsGlobeImageOverlayInitializer._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsGlobeImageOverlayInitializer._get_property(self, attrname) is not None: found_prop = IStkGraphicsGlobeImageOverlayInitializer._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsGlobeImageOverlayInitializer.")
        
agcls.AgClassCatalog.add_catalog_entry("{6CA56657-186B-4768-B747-AB0071E02C05}", StkGraphicsGlobeImageOverlayInitializer)


class StkGraphicsGraphicsFontFactory(IStkGraphicsGraphicsFontFactory):
    """A font that is suitable for use with the text batch primitive. For best performance, avoid creating duplicate font objects. Instead assign the same font object to several text batch primitives."""
    def __init__(self, sourceObject=None):
        IStkGraphicsGraphicsFontFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsGraphicsFontFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsGraphicsFontFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsGraphicsFontFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsGraphicsFontFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{4890C7DD-6EAC-4F44-94DB-A72E75BEDAF0}", StkGraphicsGraphicsFontFactory)


class StkGraphicsGreatArcInterpolatorFactory(IStkGraphicsGreatArcInterpolatorFactory):
    """The great arc interpolator computes interpolated positions along a great arc. A great arc is the shortest path between two positions on an ellipsoid."""
    def __init__(self, sourceObject=None):
        IStkGraphicsGreatArcInterpolatorFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsGreatArcInterpolatorFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsGreatArcInterpolatorFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsGreatArcInterpolatorFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsGreatArcInterpolatorFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{6882FDC8-B958-498D-A274-46AE40AE78D5}", StkGraphicsGreatArcInterpolatorFactory)


class StkGraphicsAlphaFromLuminanceFilterFactory(IStkGraphicsAlphaFromLuminanceFilterFactory):
    """Adds an alpha band to the source raster derived from the luminance of the raster's color bands."""
    def __init__(self, sourceObject=None):
        IStkGraphicsAlphaFromLuminanceFilterFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsAlphaFromLuminanceFilterFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsAlphaFromLuminanceFilterFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsAlphaFromLuminanceFilterFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsAlphaFromLuminanceFilterFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{1190FF7A-66F4-4B54-B35B-57BBBEDD35AA}", StkGraphicsAlphaFromLuminanceFilterFactory)


class StkGraphicsAlphaFromPixelFilterFactory(IStkGraphicsAlphaFromPixelFilterFactory):
    """Adds an alpha band to the source raster based on the value of its first pixel. All pixels in the source raster that are the same color as the first pixel will be made transparent."""
    def __init__(self, sourceObject=None):
        IStkGraphicsAlphaFromPixelFilterFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsAlphaFromPixelFilterFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsAlphaFromPixelFilterFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsAlphaFromPixelFilterFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsAlphaFromPixelFilterFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{72AEEA38-C86F-48DE-A8D7-F993011E6466}", StkGraphicsAlphaFromPixelFilterFactory)


class StkGraphicsAlphaFromRasterFilterFactory(IStkGraphicsAlphaFromRasterFilterFactory):
    """Adds an alpha band to the source raster derived from the color bands or alpha of another raster. This filter can be used to apply an alpha mask to the source raster."""
    def __init__(self, sourceObject=None):
        IStkGraphicsAlphaFromRasterFilterFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsAlphaFromRasterFilterFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsAlphaFromRasterFilterFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsAlphaFromRasterFilterFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsAlphaFromRasterFilterFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{F578725F-3B1F-4B45-AA36-FADF0AA5516F}", StkGraphicsAlphaFromRasterFilterFactory)


class StkGraphicsBandExtractFilterFactory(IStkGraphicsBandExtractFilterFactory):
    """Extracts a band or set of bands from the source raster. The extract format property specifies the bands and the order of the bands that will be extracted."""
    def __init__(self, sourceObject=None):
        IStkGraphicsBandExtractFilterFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsBandExtractFilterFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsBandExtractFilterFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsBandExtractFilterFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsBandExtractFilterFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{52C5D954-F113-46CA-BF7C-3BFCA6637B6D}", StkGraphicsBandExtractFilterFactory)


class StkGraphicsBandOrderFilterFactory(IStkGraphicsBandOrderFilterFactory):
    """Reorders or swizzles the bands of the source raster to match the band order of the raster format specified by the band order property. When maintain raster format is true, the source raster's format is maintained after swizzling."""
    def __init__(self, sourceObject=None):
        IStkGraphicsBandOrderFilterFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsBandOrderFilterFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsBandOrderFilterFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsBandOrderFilterFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsBandOrderFilterFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{F238EFB7-84AC-4648-AB58-42C01DADA9A9}", StkGraphicsBandOrderFilterFactory)


class StkGraphicsBlurFilterFactory(IStkGraphicsBlurFilterFactory):
    """Applies a convolution filter to blur or smooth the source raster. Can be used to reduce noise in the raster."""
    def __init__(self, sourceObject=None):
        IStkGraphicsBlurFilterFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsBlurFilterFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsBlurFilterFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsBlurFilterFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsBlurFilterFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{8FE6B4C1-2607-4213-A2C6-EBD012D3A51F}", StkGraphicsBlurFilterFactory)


class StkGraphicsBrightnessFilterFactory(IStkGraphicsBrightnessFilterFactory):
    """Adjusts the brightness of the source raster's color bands. The adjustment to brightness is a value between -1 and 1, corresponding to least bright to most bright."""
    def __init__(self, sourceObject=None):
        IStkGraphicsBrightnessFilterFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsBrightnessFilterFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsBrightnessFilterFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsBrightnessFilterFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsBrightnessFilterFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{C03BF579-ED2C-480E-835C-A2F17B7B1E02}", StkGraphicsBrightnessFilterFactory)


class StkGraphicsColorToLuminanceFilterFactory(IStkGraphicsColorToLuminanceFilterFactory):
    """Extracts a luminance band derived from the color bands of the source raster."""
    def __init__(self, sourceObject=None):
        IStkGraphicsColorToLuminanceFilterFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsColorToLuminanceFilterFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsColorToLuminanceFilterFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsColorToLuminanceFilterFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsColorToLuminanceFilterFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{7311B5AA-FC01-4B35-A1A3-76DE69555938}", StkGraphicsColorToLuminanceFilterFactory)


class StkGraphicsContrastFilterFactory(IStkGraphicsContrastFilterFactory):
    """Adjusts the contrast of the source raster. The adjustment to contrast is a value between -1 and 1, corresponding to least contrast to most contrast."""
    def __init__(self, sourceObject=None):
        IStkGraphicsContrastFilterFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsContrastFilterFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsContrastFilterFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsContrastFilterFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsContrastFilterFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{9B1023F6-67C4-4DC9-8EA1-9171564EFA42}", StkGraphicsContrastFilterFactory)


class StkGraphicsConvolutionFilterFactory(IStkGraphicsConvolutionFilterFactory):
    """Applies convolution to the source raster. Convolution is the modification of a pixel's value based on the values of its surrounding pixels. The kernel is the numerical matrix that is applied to each pixel in this process..."""
    def __init__(self, sourceObject=None):
        IStkGraphicsConvolutionFilterFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsConvolutionFilterFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsConvolutionFilterFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsConvolutionFilterFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsConvolutionFilterFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{64B119DD-A78C-4815-A9DD-4D77B310D28D}", StkGraphicsConvolutionFilterFactory)


class StkGraphicsEdgeDetectFilterFactory(IStkGraphicsEdgeDetectFilterFactory):
    """Applies a convolution filter to detect edges in the source raster."""
    def __init__(self, sourceObject=None):
        IStkGraphicsEdgeDetectFilterFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsEdgeDetectFilterFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsEdgeDetectFilterFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsEdgeDetectFilterFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsEdgeDetectFilterFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{E14D1269-91FA-4A83-92A7-F5117E1E9DE9}", StkGraphicsEdgeDetectFilterFactory)


class StkGraphicsFilteringRasterStreamFactory(IStkGraphicsFilteringRasterStreamFactory):
    """A class decorator for applying a raster filter to each update of a raster stream. Can be used to apply filters to videos and other raster streams as they are updated."""
    def __init__(self, sourceObject=None):
        IStkGraphicsFilteringRasterStreamFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsFilteringRasterStreamFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsFilteringRasterStreamFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsFilteringRasterStreamFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsFilteringRasterStreamFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{8B9D2671-491B-4D5B-8410-B8A8ED881970}", StkGraphicsFilteringRasterStreamFactory)


class StkGraphicsFlipFilterFactory(IStkGraphicsFlipFilterFactory):
    """Flips the source raster along the given flip axis."""
    def __init__(self, sourceObject=None):
        IStkGraphicsFlipFilterFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsFlipFilterFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsFlipFilterFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsFlipFilterFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsFlipFilterFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{0C012B18-9467-42CE-8EC5-E7B70012BA73}", StkGraphicsFlipFilterFactory)


class StkGraphicsGammaCorrectionFilterFactory(IStkGraphicsGammaCorrectionFilterFactory):
    """Applies gamma correction to the source raster. The gamma is a value between .2 and 5. The default gamma value is 2.2."""
    def __init__(self, sourceObject=None):
        IStkGraphicsGammaCorrectionFilterFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsGammaCorrectionFilterFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsGammaCorrectionFilterFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsGammaCorrectionFilterFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsGammaCorrectionFilterFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{E09D6B71-6E82-45A1-A208-B761D82266E9}", StkGraphicsGammaCorrectionFilterFactory)


class StkGraphicsGaussianBlurFilterFactory(IStkGraphicsGaussianBlurFilterFactory):
    """Applies a convolution filter to blur the source raster using the Gaussian function."""
    def __init__(self, sourceObject=None):
        IStkGraphicsGaussianBlurFilterFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsGaussianBlurFilterFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsGaussianBlurFilterFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsGaussianBlurFilterFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsGaussianBlurFilterFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{B98AC54E-10BB-4E81-9766-806A2F0EA8C4}", StkGraphicsGaussianBlurFilterFactory)


class StkGraphicsGradientDetectFilterFactory(IStkGraphicsGradientDetectFilterFactory):
    """Applies a convolution filter to detect gradients in the source raster."""
    def __init__(self, sourceObject=None):
        IStkGraphicsGradientDetectFilterFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsGradientDetectFilterFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsGradientDetectFilterFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsGradientDetectFilterFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsGradientDetectFilterFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{B88D6D7C-4807-4905-B52F-DF054A4AD186}", StkGraphicsGradientDetectFilterFactory)


class StkGraphicsJpeg2000WriterInitializer(IStkGraphicsJpeg2000WriterInitializer):
    """Converts an image, such as a BMP, to a GeoJP2 file that can be used as an image globe overlay."""
    def __init__(self, sourceObject=None):
        IStkGraphicsJpeg2000WriterInitializer.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsJpeg2000WriterInitializer._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsJpeg2000WriterInitializer._get_property(self, attrname) is not None: found_prop = IStkGraphicsJpeg2000WriterInitializer._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsJpeg2000WriterInitializer.")
        
agcls.AgClassCatalog.add_catalog_entry("{0F29EA41-17E7-4252-B419-B2573C015DC6}", StkGraphicsJpeg2000WriterInitializer)


class StkGraphicsLevelsFilterFactory(IStkGraphicsLevelsFilterFactory):
    """Adjusts the band levels of the source raster linearly."""
    def __init__(self, sourceObject=None):
        IStkGraphicsLevelsFilterFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsLevelsFilterFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsLevelsFilterFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsLevelsFilterFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsLevelsFilterFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{69CBD183-936F-480E-B0FF-4D140DDC9232}", StkGraphicsLevelsFilterFactory)


class StkGraphicsProjectionRasterStreamPluginActivatorFactory(IStkGraphicsProjectionRasterStreamPluginActivatorFactory):
    """The Activator class provides methods to load COM plugins that implement projection and raster streaming. For more information about the projection and raster plugins, see the STK Programming Interface."""
    def __init__(self, sourceObject=None):
        IStkGraphicsProjectionRasterStreamPluginActivatorFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsProjectionRasterStreamPluginActivatorFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsProjectionRasterStreamPluginActivatorFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsProjectionRasterStreamPluginActivatorFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsProjectionRasterStreamPluginActivatorFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{51F36FBA-E366-4A66-A452-FEE99786ED2E}", StkGraphicsProjectionRasterStreamPluginActivatorFactory)


class StkGraphicsRasterFactory(IStkGraphicsRasterFactory):
    """A raster dataset. A raster consists of one or more bands, or sets of values, which are most commonly associated with colors when the raster represents an image..."""
    def __init__(self, sourceObject=None):
        IStkGraphicsRasterFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsRasterFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsRasterFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsRasterFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsRasterFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{390E63D5-4C79-48B3-98CD-55B1983F859A}", StkGraphicsRasterFactory)


class StkGraphicsRasterAttributesFactory(IStkGraphicsRasterAttributesFactory):
    """The attributes describing a raster dataset. raster attributes define the memory layout of a raster, and includes properties defining the order of each raster band that the raster contains, as specified by the raster format..."""
    def __init__(self, sourceObject=None):
        IStkGraphicsRasterAttributesFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsRasterAttributesFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsRasterAttributesFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsRasterAttributesFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsRasterAttributesFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{94CA0CCD-4D74-47BD-8E5F-E2D96403DACF}", StkGraphicsRasterAttributesFactory)


class StkGraphicsRotateFilterFactory(IStkGraphicsRotateFilterFactory):
    """Rotates the source raster clockwise by the specified angle."""
    def __init__(self, sourceObject=None):
        IStkGraphicsRotateFilterFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsRotateFilterFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsRotateFilterFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsRotateFilterFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsRotateFilterFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{12C8E395-4E61-4484-A97D-33742C841A6D}", StkGraphicsRotateFilterFactory)


class StkGraphicsSequenceFilterFactory(IStkGraphicsSequenceFilterFactory):
    """Applies a sequence of filters to the source raster in the order in which they were added. When continue on failure is set to true, subsequent filters will still be applied to the source raster even if one or more filters in the sequence cannot be applied."""
    def __init__(self, sourceObject=None):
        IStkGraphicsSequenceFilterFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsSequenceFilterFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsSequenceFilterFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsSequenceFilterFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsSequenceFilterFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{4CC16FDF-B6CE-4C06-B47F-AD7812566215}", StkGraphicsSequenceFilterFactory)


class StkGraphicsSharpenFilterFactory(IStkGraphicsSharpenFilterFactory):
    """Applies a convolution filter to increase the sharpness of the source raster."""
    def __init__(self, sourceObject=None):
        IStkGraphicsSharpenFilterFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsSharpenFilterFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsSharpenFilterFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsSharpenFilterFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsSharpenFilterFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{98011831-2D99-4FED-AC53-DFB4090D132C}", StkGraphicsSharpenFilterFactory)


class StkGraphicsVideoStreamFactory(IStkGraphicsVideoStreamFactory):
    """A raster stream that streams from a video. The video can be read from a file, or streamed from an HTTP, RTP, UDP, or TCP source. See the Video Streams Overview for a list of supported video formats and Uri usage."""
    def __init__(self, sourceObject=None):
        IStkGraphicsVideoStreamFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsVideoStreamFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsVideoStreamFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsVideoStreamFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsVideoStreamFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{A977E2D9-785B-4AB0-B01F-927486E3170B}", StkGraphicsVideoStreamFactory)


class StkGraphicsMarkerBatchPrimitiveFactory(IStkGraphicsMarkerBatchPrimitiveFactory):
    """ Renders one or more markers in the 3D scene. Markers are 2D images that always face the viewer which can be sized in pixels or meters. Markers are also referred to as sprites or billboards..."""
    def __init__(self, sourceObject=None):
        IStkGraphicsMarkerBatchPrimitiveFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsMarkerBatchPrimitiveFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsMarkerBatchPrimitiveFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsMarkerBatchPrimitiveFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsMarkerBatchPrimitiveFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{E2AC5708-26C2-469F-AE1C-C48AED18565E}", StkGraphicsMarkerBatchPrimitiveFactory)


class StkGraphicsMarkerBatchPrimitiveOptionalParametersFactory(IStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory):
    """Optional per-marker parameters for marker batch primitive that overrides the marker batch's per-batch parameters..."""
    def __init__(self, sourceObject=None):
        IStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsMarkerBatchPrimitiveOptionalParametersFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{120D8907-DB34-481B-93B1-C61A4C5C61EF}", StkGraphicsMarkerBatchPrimitiveOptionalParametersFactory)


class StkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory(IStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory):
    """path primitive update policy that removes points from remove location when the number of points in the path exceeds maximum count."""
    def __init__(self, sourceObject=None):
        IStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{C3F59BCB-635A-4E50-B5AA-269CD0380069}", StkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory)


class StkGraphicsModelPrimitiveFactory(IStkGraphicsModelPrimitiveFactory):
    """The model primitive loads and renders <a href='http://www.collada.org/'>COLLADA</a> (DAE) and AGI <a href='https://support.agi.com/3d-models'>MDL</a> (MDL) models."""
    def __init__(self, sourceObject=None):
        IStkGraphicsModelPrimitiveFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsModelPrimitiveFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsModelPrimitiveFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsModelPrimitiveFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsModelPrimitiveFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{90BABAB0-7D1E-420F-B91F-46E2E5B31763}", StkGraphicsModelPrimitiveFactory)


class StkGraphicsPathPrimitiveFactory(IStkGraphicsPathPrimitiveFactory):
    """Renders a line to the 3D scene. Similar to the polyline primitive; however, the PathPrimitive was designed for the efficient addition/removal of points to/from the front or back of the line."""
    def __init__(self, sourceObject=None):
        IStkGraphicsPathPrimitiveFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsPathPrimitiveFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsPathPrimitiveFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsPathPrimitiveFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsPathPrimitiveFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{1847AEAB-C6B6-4561-BBDB-D979A443CCF0}", StkGraphicsPathPrimitiveFactory)


class StkGraphicsPixelSizeDisplayConditionFactory(IStkGraphicsPixelSizeDisplayConditionFactory):
    """Defines an inclusive interval, in pixels, that determines when an object, such as a primitive, is rendered based on the number of pixels the object's bounding sphere (or in the case of screen overlays, bounding rectangle) covers on the screen..."""
    def __init__(self, sourceObject=None):
        IStkGraphicsPixelSizeDisplayConditionFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsPixelSizeDisplayConditionFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsPixelSizeDisplayConditionFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsPixelSizeDisplayConditionFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsPixelSizeDisplayConditionFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{52EC4EAD-B9A0-4940-BAE8-BD115805BB46}", StkGraphicsPixelSizeDisplayConditionFactory)


class StkGraphicsPointBatchPrimitiveFactory(IStkGraphicsPointBatchPrimitiveFactory):
    """ Renders one or more points in the 3D scene. Each point in the batch has a unique position and an optional color. All points in the batch share the same pixel size. For best performance, avoid creating lots of batches with only a few points each..."""
    def __init__(self, sourceObject=None):
        IStkGraphicsPointBatchPrimitiveFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsPointBatchPrimitiveFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsPointBatchPrimitiveFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsPointBatchPrimitiveFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsPointBatchPrimitiveFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{B497A3DE-DF9F-4EFD-8CB8-2767415F4889}", StkGraphicsPointBatchPrimitiveFactory)


class StkGraphicsPointBatchPrimitiveOptionalParametersFactory(IStkGraphicsPointBatchPrimitiveOptionalParametersFactory):
    """Optional per-point parameters for point batch primitive that overrides the point batch primitive's global parameters..."""
    def __init__(self, sourceObject=None):
        IStkGraphicsPointBatchPrimitiveOptionalParametersFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsPointBatchPrimitiveOptionalParametersFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsPointBatchPrimitiveOptionalParametersFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsPointBatchPrimitiveOptionalParametersFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsPointBatchPrimitiveOptionalParametersFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{aa54a6e1-f927-48b6-8a29-7b718bb0cb7b}", StkGraphicsPointBatchPrimitiveOptionalParametersFactory)


class StkGraphicsPolylinePrimitiveFactory(IStkGraphicsPolylinePrimitiveFactory):
    """Renders a polyline in the 3D scene. Each line segment may have a different color. A polyline can be constructed with a position interpolator to render great arcs or rhumb lines."""
    def __init__(self, sourceObject=None):
        IStkGraphicsPolylinePrimitiveFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsPolylinePrimitiveFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsPolylinePrimitiveFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsPolylinePrimitiveFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsPolylinePrimitiveFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{825E24B9-F4B9-4EF4-8F98-A8BD8F7A6C4B}", StkGraphicsPolylinePrimitiveFactory)


class StkGraphicsPolylinePrimitiveOptionalParametersFactory(IStkGraphicsPolylinePrimitiveOptionalParametersFactory):
    """Optional per-point or per-segment parameters for polyline primitive that overrides the polyline primitive's global parameters..."""
    def __init__(self, sourceObject=None):
        IStkGraphicsPolylinePrimitiveOptionalParametersFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsPolylinePrimitiveOptionalParametersFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsPolylinePrimitiveOptionalParametersFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsPolylinePrimitiveOptionalParametersFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsPolylinePrimitiveOptionalParametersFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{2ff372bc-ad1c-4fa2-82e9-75c9b407f19c}", StkGraphicsPolylinePrimitiveOptionalParametersFactory)


class StkGraphicsRasterImageGlobeOverlayFactory(IStkGraphicsRasterImageGlobeOverlayFactory):
    """A globe image overlay for handling rasters."""
    def __init__(self, sourceObject=None):
        IStkGraphicsRasterImageGlobeOverlayFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsRasterImageGlobeOverlayFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsRasterImageGlobeOverlayFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsRasterImageGlobeOverlayFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsRasterImageGlobeOverlayFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{73782D85-0307-4B70-B793-2930A8880AEE}", StkGraphicsRasterImageGlobeOverlayFactory)


class StkGraphicsRhumbLineInterpolatorFactory(IStkGraphicsRhumbLineInterpolatorFactory):
    """The rhumb line interpolator computes interpolated positions along a rhumb line. Rhumb lines are lines of constant bearing. They appear as straight lines on a Mercator 2D map projection and are well suited to navigation."""
    def __init__(self, sourceObject=None):
        IStkGraphicsRhumbLineInterpolatorFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsRhumbLineInterpolatorFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsRhumbLineInterpolatorFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsRhumbLineInterpolatorFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsRhumbLineInterpolatorFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{0B6D54BD-A46B-4770-A936-23F247B6F038}", StkGraphicsRhumbLineInterpolatorFactory)


class StkGraphicsSceneDisplayConditionFactory(IStkGraphicsSceneDisplayConditionFactory):
    """A display condition used to control what scene or scenes an object, such as a primitive, is rendered in. This is used to show an object in some scenes and hide it in others."""
    def __init__(self, sourceObject=None):
        IStkGraphicsSceneDisplayConditionFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsSceneDisplayConditionFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsSceneDisplayConditionFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsSceneDisplayConditionFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsSceneDisplayConditionFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{19159366-8E64-467F-922B-739678DA01C2}", StkGraphicsSceneDisplayConditionFactory)


class StkGraphicsSceneManagerInitializer(IStkGraphicsSceneManagerInitializer):
    """The static scene manager class provides global properties and functionality that apply to all scenes and thus affect the rendering of every globe control..."""
    def __init__(self, sourceObject=None):
        IStkGraphicsSceneManagerInitializer.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsSceneManagerInitializer._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsSceneManagerInitializer._get_property(self, attrname) is not None: found_prop = IStkGraphicsSceneManagerInitializer._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsSceneManagerInitializer.")
        
agcls.AgClassCatalog.add_catalog_entry("{956AD97D-96ED-4898-89BE-08AF68BF1EA6}", StkGraphicsSceneManagerInitializer)


class StkGraphicsScreenOverlayFactory(IStkGraphicsScreenOverlayFactory):
    """A visible element drawn in screen space. Overlays are useful for floating logos, heads up displays, and integrating user interfaces into the 3D window."""
    def __init__(self, sourceObject=None):
        IStkGraphicsScreenOverlayFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsScreenOverlayFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsScreenOverlayFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsScreenOverlayFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsScreenOverlayFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{C2F5A068-E483-4CCF-819D-FBB25DC85A71}", StkGraphicsScreenOverlayFactory)


class StkGraphicsSolidPrimitiveFactory(IStkGraphicsSolidPrimitiveFactory):
    """Renders filled solid objects and their outlines. Example solids include boxes and ellipsoids. Various effects are supported, such as displaying the solid's silhouette, and hiding the outline of the backside of the solid..."""
    def __init__(self, sourceObject=None):
        IStkGraphicsSolidPrimitiveFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsSolidPrimitiveFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsSolidPrimitiveFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsSolidPrimitiveFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsSolidPrimitiveFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{9F23AC4E-DCB0-45B1-BE07-E4BEBA9B4AFF}", StkGraphicsSolidPrimitiveFactory)


class StkGraphicsSurfaceMeshPrimitiveFactory(IStkGraphicsSurfaceMeshPrimitiveFactory):
    """A triangle mesh primitive for meshes on the surface that need to conform to terrain."""
    def __init__(self, sourceObject=None):
        IStkGraphicsSurfaceMeshPrimitiveFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsSurfaceMeshPrimitiveFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsSurfaceMeshPrimitiveFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsSurfaceMeshPrimitiveFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsSurfaceMeshPrimitiveFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{A9B40191-F8D7-46D8-B217-30C1C41E2369}", StkGraphicsSurfaceMeshPrimitiveFactory)


class StkGraphicsTerrainOverlayInitializer(IStkGraphicsTerrainOverlayInitializer):
    """A globe overlay which shows terrain."""
    def __init__(self, sourceObject=None):
        IStkGraphicsTerrainOverlayInitializer.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsTerrainOverlayInitializer._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsTerrainOverlayInitializer._get_property(self, attrname) is not None: found_prop = IStkGraphicsTerrainOverlayInitializer._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsTerrainOverlayInitializer.")
        
agcls.AgClassCatalog.add_catalog_entry("{8D76F5E3-BACE-4CA4-9C4D-9F14464ACAFD}", StkGraphicsTerrainOverlayInitializer)


class StkGraphicsTextBatchPrimitiveFactory(IStkGraphicsTextBatchPrimitiveFactory):
    """ Renders one or more strings in the 3D scene.  For best performance, avoid creating lots of batches with only a few strings each. See the Batching Performance Overview. """
    def __init__(self, sourceObject=None):
        IStkGraphicsTextBatchPrimitiveFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsTextBatchPrimitiveFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsTextBatchPrimitiveFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsTextBatchPrimitiveFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsTextBatchPrimitiveFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{246D4DAA-4CD0-4E10-98C7-791A17E5A736}", StkGraphicsTextBatchPrimitiveFactory)


class StkGraphicsTextBatchPrimitiveOptionalParametersFactory(IStkGraphicsTextBatchPrimitiveOptionalParametersFactory):
    """Optional per-string and per-batch parameters for text batch primitive..."""
    def __init__(self, sourceObject=None):
        IStkGraphicsTextBatchPrimitiveOptionalParametersFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsTextBatchPrimitiveOptionalParametersFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsTextBatchPrimitiveOptionalParametersFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsTextBatchPrimitiveOptionalParametersFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsTextBatchPrimitiveOptionalParametersFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{A3C12306-7202-468F-B0A5-306D98A7E2BC}", StkGraphicsTextBatchPrimitiveOptionalParametersFactory)


class StkGraphicsTextOverlayFactory(IStkGraphicsTextOverlayFactory):
    """A rectangular overlay that contains text."""
    def __init__(self, sourceObject=None):
        IStkGraphicsTextOverlayFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsTextOverlayFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsTextOverlayFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsTextOverlayFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsTextOverlayFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{5DFA35A5-B53D-4B58-A32E-B2B2690D3104}", StkGraphicsTextOverlayFactory)


class StkGraphicsTextureMatrixFactory(IStkGraphicsTextureMatrixFactory):
    """A 4 by 4 matrix applied to a texture coordinate."""
    def __init__(self, sourceObject=None):
        IStkGraphicsTextureMatrixFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsTextureMatrixFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsTextureMatrixFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsTextureMatrixFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsTextureMatrixFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{0169DB20-811D-4DF6-8EDF-51C47B485D6B}", StkGraphicsTextureMatrixFactory)


class StkGraphicsTextureScreenOverlayFactory(IStkGraphicsTextureScreenOverlayFactory):
    """A rectangular overlay that can be assigned a texture."""
    def __init__(self, sourceObject=None):
        IStkGraphicsTextureScreenOverlayFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsTextureScreenOverlayFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsTextureScreenOverlayFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsTextureScreenOverlayFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsTextureScreenOverlayFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{C4060E65-DD40-40CE-B462-55E08E6D63AF}", StkGraphicsTextureScreenOverlayFactory)


class StkGraphicsTimeIntervalDisplayConditionFactory(IStkGraphicsTimeIntervalDisplayConditionFactory):
    """Defines an inclusive time interval that determines when an object, such as a primitive, is rendered based on the current animation time ."""
    def __init__(self, sourceObject=None):
        IStkGraphicsTimeIntervalDisplayConditionFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsTimeIntervalDisplayConditionFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsTimeIntervalDisplayConditionFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsTimeIntervalDisplayConditionFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsTimeIntervalDisplayConditionFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{526637D4-DD61-4B7D-BAE9-6FEF3673BF5D}", StkGraphicsTimeIntervalDisplayConditionFactory)


class StkGraphicsTriangleMeshPrimitiveFactory(IStkGraphicsTriangleMeshPrimitiveFactory):
    """Renders a triangle mesh in the 3D scene. Examples of triangle meshes includes polygons on the globe (e.g. states or countries), terrain and imagery extents, ellipses, and extrusions."""
    def __init__(self, sourceObject=None):
        IStkGraphicsTriangleMeshPrimitiveFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsTriangleMeshPrimitiveFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsTriangleMeshPrimitiveFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsTriangleMeshPrimitiveFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsTriangleMeshPrimitiveFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{D904C0D6-FEAE-4E13-9BBC-98F22CC2F0AF}", StkGraphicsTriangleMeshPrimitiveFactory)


class StkGraphicsTriangleMeshPrimitiveOptionalParametersFactory(IStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory):
    """Optional parameters for triangle mesh primitive..."""
    def __init__(self, sourceObject=None):
        IStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsTriangleMeshPrimitiveOptionalParametersFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{9D9FB947-B9EB-4964-8FD8-6FF54D734BD8}", StkGraphicsTriangleMeshPrimitiveOptionalParametersFactory)


class StkGraphicsVectorPrimitiveFactory(IStkGraphicsVectorPrimitiveFactory):
    """Renders a vector in the 3D scene. A vector is defined by a source (given by an ISystem) and a direction (given by an IVector or IPoint). Length is auto-calculated or can be set separately."""
    def __init__(self, sourceObject=None):
        IStkGraphicsVectorPrimitiveFactory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStkGraphicsVectorPrimitiveFactory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStkGraphicsVectorPrimitiveFactory._get_property(self, attrname) is not None: found_prop = IStkGraphicsVectorPrimitiveFactory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StkGraphicsVectorPrimitiveFactory.")
        
agcls.AgClassCatalog.add_catalog_entry("{380CA28E-1D09-4F5B-9341-6E96BA4CACCE}", StkGraphicsVectorPrimitiveFactory)



################################################################################
#          Copyright 2020-2020, Analytical Graphics, Inc.
################################################################################
