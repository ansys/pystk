name: night
on:
  workflow_dispatch:
    inputs:
    
      run-doc:
        description: 'Build and deploy documentation'
        required: true
        default: true
        type: boolean
    
      run-tests:
        description: 'Run tests'
        required: true
        default: true
        type: boolean
    
  schedule:
    # From Monday to Friday (both included) at 00:00 UTC. Used for running only
    # the 'MAIN_PYTHON_VERSION'.
    - cron: '0 0 * * 1-5'
    # From Saturday to Sunday (both included) at 00:00 UTC. Used for running the
    # complete list of Python versions.
    - cron: '0 0 * * 6-7'

env:
  MAIN_PYTHON_VERSION: '3.10'
  DOCUMENTATION_CNAME: 'stk.docs.pyansys.com'
  STK_DOCKER_IMAGE: 'ansys/stk:latest-centos7'
  PYSTK_DIR: '/home/stk/pystk'
  LICENSE_SERVER_PORT: '1055'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  doc-build:
    name: "Doc build"
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: inputs.run-doc || github.event_name == 'schedule'
    steps:
      - name: "Building project documentation"
        uses: ansys/actions/doc-build@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
    env:
      BUILD_API: true
      BUILD_EXAMPLES: true

  tests:
    name: "Tests Python ${{ matrix.python }}"
    runs-on: [self-hosted, pystk]
    if: inputs.run-tests || github.event_name == 'schedule'
    strategy:
      matrix:
        python: ["3.8", "3.9", "3.10"]
        is-weekly-run:
          - ${{ github.event_name == 'schedule' && github.event.schedule == '0 0 * * *' }}
        exclude:
          - is-weekly-run: true
            python: ["3.8", "3.9"]
      fail-fast: false
    steps:

      - name: "Checkout the project"
        uses: actions/checkout@v4

      - name: "Generate the name of the docker image and the container"
        run: |
          python_image_name=${{ env.STK_DOCKER_IMAGE }}-python${{ matrix.python }}
          container_name=stk-python${{ matrix.python }}
          echo "STK_PYTHON_IMAGE=$python_image_name" >> $GITHUB_ENV
          echo "STK_CONTAINER=$container_name" >> $GITHUB_ENV

      - name: "Start the container from the desired image"
        run: |
          docker run \
            --detach -it \
            --network="host" \
            --name ${{ env.STK_CONTAINER }} \
            --env ANSYSLMD_LICENSE_FILE=${{ env.LICENSE_SERVER_PORT }}@${{ secrets.LICENSE_SERVER }} \
            --volume ${PWD}:/home/stk/pystk \
            ${{ env.STK_PYTHON_IMAGE }}

      - name: "Install the project with the testing dependencies"
        run: |
          docker exec \
            --workdir ${{ env.PYSTK_DIR }} \
            ${{ env.STK_CONTAINER }} /bin/bash -c \
            "python -m pip install tox && rm -rf .tox"

      - name: "Run the aviator tests"
        run: |
          docker exec \
            --workdir ${{ env.PYSTK_DIR }} \
            ${{ env.STK_CONTAINER }} /bin/bash -c \
            "export COVERAGE_FILE=aviator && tox -e tests-aviator-graphics-cov-linux"

      - name: "Run the non graphics stk tests"
        run: |
          docker exec \
            --workdir ${{ env.PYSTK_DIR }} \
            ${{ env.STK_CONTAINER }} /bin/bash -c \
            "export COVERAGE_FILE=stknogfx && tox -e tests-stk-nographics-cov-linux"

      - name: "Run the graphics only stk tests"
        run: |
          docker exec \
            --workdir ${{ env.PYSTK_DIR }} \
            ${{ env.STK_CONTAINER }} /bin/bash -c \
            "export COVERAGE_FILE=stkgfx && tox -e tests-stk-graphicsonly-cov-linux"

      - name: "Run the vgt tests"
        run: |
          docker exec \
            --workdir ${{ env.PYSTK_DIR }} \
            ${{ env.STK_CONTAINER }} /bin/bash -c \
            "export COVERAGE_FILE=vgt && tox -e tests-vgt-graphics-cov-linux"

      - name: "Install coverage dependencies"
        if: ${{ matrix.python == env.MAIN_PYTHON_VERSION }}
        run: |
          docker exec \
            --workdir ${{ env.PYSTK_DIR }} \
            ${{ env.STK_CONTAINER }} /bin/bash -c \
            "python -m pip install .[tests]"

      - name: "Combine all coverage results"
        if: ${{ matrix.python == env.MAIN_PYTHON_VERSION }}
        run: |
          docker exec \
            --workdir ${{ env.PYSTK_DIR }} \
            ${{ env.STK_CONTAINER }} /bin/bash -c \
            "coverage combine aviator stknogfx stkgfx vgt"

      - name: "Generate total coverage report"
        if: ${{ matrix.python == env.MAIN_PYTHON_VERSION }}
        run: |
          docker exec \
            --workdir ${{ env.PYSTK_DIR }} \
            ${{ env.STK_CONTAINER }} /bin/bash -c \
            "coverage html -d .cov/total-html"

      - name: "Upload coverage results"
        if: ${{ matrix.python == env.MAIN_PYTHON_VERSION }}
        uses: actions/upload-artifact@v4
        with:
          path: .cov/total-html
          name: html-coverage

      - name: "Stop the container"
        if: always()
        run: |
          docker stop ${{ env.STK_CONTAINER }}
          docker logs ${{ env.STK_CONTAINER }}
          docker rm ${{ env.STK_CONTAINER }}

  doc-deploy-dev:
    name: "Deploy dev docs"
    runs-on: ubuntu-latest
    needs: doc-build
    steps:
      - uses: ansys/actions/doc-deploy-dev@v4
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}
