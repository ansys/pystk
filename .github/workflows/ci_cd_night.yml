name: night
on:
  workflow_dispatch:
    inputs:

      run-doc:
        description: 'Build and deploy documentation'
        required: true
        default: true
        type: boolean

      run-tests:
        description: 'Run tests'
        required: true
        default: true
        type: boolean

  schedule:
    # From Monday to Friday (both included) at 00:00 UTC. Used for running only
    # the 'MAIN_PYTHON_VERSION'.
    - cron: '0 0 * * 1-5'
    # From Saturday to Sunday (both included) at 00:00 UTC. Used for running the
    # complete list of Python versions.
    - cron: '0 0 * * 6,0'

env:
  MINIMUM_PYTHON_VERSION: '3.10'
  MAIN_PYTHON_VERSION: '3.12'
  ANSYS_STK: 'ansys-stk'
  DOCUMENTATION_CNAME: 'stk.docs.pyansys.com'
  STK_DOCKER_IMAGE: 'ansys/stk-12.10:dev-ubuntu22.04'
  PYSTK_DIR: '/home/stk/pystk'
  LICENSE_SERVER_PORT: '1055'
  QUARTO_VERSION: '1.5.55'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  build-wheelhouse:
    name: "Wheelhouse ansys-stk[${{ matrix.target }}] / ${{ matrix.os }} / ${{ matrix.python-version }}"
    runs-on: ${{ matrix.os }}
    if: (github.event_name == 'workflow_dispatch' && inputs.run-doc == true) || github.event_name == 'schedule'
    permissions:
      attestations: write
      contents: read
      id-token: write
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.10', '3.11', '3.12', '3.13']
        target: ['core', 'extensions', 'grpc', 'jupyter', 'migration', 'all']
    steps:
      - uses: ansys/actions/build-wheelhouse@v10
        with:
          library-name: ${{ env.ANSYS_STK }}
          operating-system: ${{ matrix.os }}
          python-version: ${{ matrix.python-version }}
          target: ${{ matrix.target }}
          attest-provenance: true

  doc-build:
    name: "Doc build"
    runs-on: [self-hosted, pystk]
    timeout-minutes: 90
    needs: build-wheelhouse
    steps:

      - name: "Checkout the project"
        uses: actions/checkout@v4

      - name: "Download wheelhouse into static path"
        uses: actions/download-artifact@v4
        with:
          path: "doc/source/_static/wheelhouse"
          pattern: "*-wheelhouse-*"

      - name: "Display the wheelhouse layout"
        run: |
          tree doc/source/_static/wheelhouse

      - name: "Generate the name of the Docker image and the container"
        run: |
          python_image_name=${{ env.STK_DOCKER_IMAGE }}-python${{ env.MAIN_PYTHON_VERSION }}
          container_name=stk-python${{ env.MAIN_PYTHON_VERSION }}
          echo "STK_PYTHON_IMAGE=$python_image_name" >> $GITHUB_ENV
          echo "STK_CONTAINER=$container_name" >> $GITHUB_ENV

      - name: "Start the container from the desired image"
        run: |
          docker run \
            --detach -it \
            --network="host" \
            --name ${{ env.STK_CONTAINER }} \
            --env ANSYSLMD_LICENSE_FILE=${{ env.LICENSE_SERVER_PORT }}@${{ secrets.LICENSE_SERVER }} \
            --volume ${PWD}:/home/stk/pystk \
            ${{ env.STK_PYTHON_IMAGE }}

      - name: "Install system dependencies required for building examples"
        run: |
          docker exec \
            --user root \
            --workdir ${{ env.PYSTK_DIR }} \
            ${{ env.STK_CONTAINER }} /bin/bash -c \
            "apt update && apt install -y wget pandoc"

          docker exec \
            --workdir ${{ env.PYSTK_DIR }} \
            ${{ env.STK_CONTAINER }} /bin/bash -c \
            "wget --no-check-certificate https://github.com/quarto-dev/quarto-cli/releases/download/v${{ env.QUARTO_VERSION }}/quarto-${{ env.QUARTO_VERSION }}-linux-amd64.deb"

          docker exec \
            --user root \
            --workdir ${{ env.PYSTK_DIR }} \
            ${{ env.STK_CONTAINER }} /bin/bash -c \
            "dpkg -i quarto-${{ env.QUARTO_VERSION }}-linux-amd64.deb"

          docker exec \
            --workdir ${{ env.PYSTK_DIR }} \
            ${{ env.STK_CONTAINER }} /bin/bash -c \
            "quarto install tinytex"

      - name: "Install Tox"
        run: |
          docker exec \
            --workdir ${{ env.PYSTK_DIR }} \
            ${{ env.STK_CONTAINER }} /bin/bash -c \
            "python -m pip install --upgrade pip tox && rm -rf .tox"

      - name: "Build the full documentation"
        run: |
          docker exec \
            --workdir ${{ env.PYSTK_DIR }} \
            ${{ env.STK_CONTAINER }} /bin/bash -c \
            "export BUILD_API=true BUILD_EXAMPLES=true && tox -e doc-links,doc-html"

      - name: "Upload combined artifacts"
        uses: actions/upload-artifact@v4
        with:
          path: doc/_build/html
          name: documentation-html

      - name: "Stop the container"
        if: always()
        run: |
          docker stop ${{ env.STK_CONTAINER }}
          docker logs ${{ env.STK_CONTAINER }}
          docker rm ${{ env.STK_CONTAINER }}

  tests:
    name: "Tests Python ${{ matrix.python }}"
    runs-on: [self-hosted, pystk]
    if: (github.event_name == 'workflow_dispatch' && inputs.run-tests == true) || github.event_name == 'schedule'
    strategy:
      matrix:
        python: ['3.10', '3.11', '3.12', '3.13']
        is-weekly-run:
          - ${{ github.event_name == 'schedule' && github.event.schedule == '0 0 * * 1-5' }}
        exclude:
          - is-weekly-run: true
            python: "3.10"
          - is-weekly-run: true
            python: "3.11"
          - is-weekly-run: true
            python: "3.12"
      fail-fast: false
    steps:

      - name: "Checkout the project"
        uses: actions/checkout@v4

      - name: "Generate the name of the docker image and the container"
        run: |
          python_image_name=${{ env.STK_DOCKER_IMAGE }}-python${{ matrix.python }}
          container_name=stk-python${{ matrix.python }}
          echo "STK_PYTHON_IMAGE=$python_image_name" >> $GITHUB_ENV
          echo "STK_CONTAINER=$container_name" >> $GITHUB_ENV

      - name: "Start the container from the desired image"
        run: |
          docker run \
            --detach -it \
            --network="host" \
            --name ${{ env.STK_CONTAINER }} \
            --env ANSYSLMD_LICENSE_FILE=${{ env.LICENSE_SERVER_PORT }}@${{ secrets.LICENSE_SERVER }} \
            --volume ${PWD}:/home/stk/pystk \
            ${{ env.STK_PYTHON_IMAGE }}

      - name: "Install the project with the testing dependencies"
        run: |
          docker exec \
            --workdir ${{ env.PYSTK_DIR }} \
            ${{ env.STK_CONTAINER }} /bin/bash -c \
            "python -m pip install --upgrade pip tox && rm -rf .tox"

      - name: "Install coverage dependencies"
        run: |
          docker exec \
            --workdir ${{ env.PYSTK_DIR }} \
            ${{ env.STK_CONTAINER }} /bin/bash -c \
            "python -m pip install --group tests ."

      # -- Tests

      - name: "Run the extensions tests"
        run: |
          docker exec \
            --workdir ${{ env.PYSTK_DIR }} \
            ${{ env.STK_CONTAINER }} /bin/bash -c \
            "export COVERAGE_FILE=.cov/extensions && tox -e tests-extensions-cov"

      - name: "Run the API migration assistant tests"
        run: |
          docker exec \
            --workdir ${{ env.PYSTK_DIR }} \
            ${{ env.STK_CONTAINER }} /bin/bash -c \
            "export COVERAGE_FILE=.cov/migration && tox -e tests-core-migration-cov"

      - name: "Run the aviator tests"
        run: |
          docker exec \
            --workdir ${{ env.PYSTK_DIR }} \
            ${{ env.STK_CONTAINER }} /bin/bash -c \
            "export COVERAGE_FILE=.cov/aviator && tox -e tests-core-aviator-graphics-cov-linux"

      - name: "Run the non graphics stk tests"
        run: |
          docker exec \
            --workdir ${{ env.PYSTK_DIR }} \
            ${{ env.STK_CONTAINER }} /bin/bash -c \
            "export COVERAGE_FILE=.cov/stknogfx && tox -e tests-core-stk-nographics-cov-linux"

      - name: "Run the graphics only stk tests"
        run: |
          docker exec \
            --workdir ${{ env.PYSTK_DIR }} \
            ${{ env.STK_CONTAINER }} /bin/bash -c \
            "export COVERAGE_FILE=.cov/stkgfx && tox -e tests-core-stk-graphicsonly-cov-linux"

      - name: "Run the vgt tests"
        run: |
          docker exec \
            --workdir ${{ env.PYSTK_DIR }} \
            ${{ env.STK_CONTAINER }} /bin/bash -c \
            "export COVERAGE_FILE=.cov/vgt && tox -e tests-core-vgt-graphics-cov-linux"

      - name: "Run the doc snippet tests"
        run: |
          docker exec \
            --workdir ${{ env.PYSTK_DIR }} \
            ${{ env.STK_CONTAINER }} /bin/bash -c \
            "export COVERAGE_FILE=.cov/snippets && tox -e tests-core-snippets-graphics-cov-linux"

      # -- Coverage

      - name: "Combine all coverage results"
        if: ${{ matrix.python == env.MINIMUM_PYTHON_VERSION }}
        run: |
          docker exec \
            --workdir ${{ env.PYSTK_DIR }}/.cov \
            ${{ env.STK_CONTAINER }} /bin/bash -c \
            "export COVERAGE_FILE=coverage && coverage combine aviator stknogfx stkgfx vgt snippets migration extensions"

      - name: "Generate coverage report in XML and HTML"
        if: ${{ matrix.python == env.MINIMUM_PYTHON_VERSION }}
        run: |
          docker exec \
            --workdir ${{ env.PYSTK_DIR }} \
            ${{ env.STK_CONTAINER }} /bin/bash -c \
            "coverage html --rcfile pyproject.toml --data-file=.cov/coverage --directory=.cov/${{ env.ANSYS_STK }}-coverage --fail-under=89"
          docker exec \
            --workdir ${{ env.PYSTK_DIR }} \
            ${{ env.STK_CONTAINER }} /bin/bash -c \
            "coverage xml --rcfile pyproject.toml --data-file=.cov/coverage -o .cov/coverage.xml"

      - name: "Upload ${{ env.ANSYS_STK }} coverage results"
        if: ${{ matrix.python == env.MINIMUM_PYTHON_VERSION }}
        uses: actions/upload-artifact@v4
        with:
          path: .cov/${{ env.ANSYS_STK }}-coverage
          name: ${{ env.ANSYS_STK }}-coverage

      - name: "Upload coverage reports to Codecov"
        if: ${{ matrix.python == env.MINIMUM_PYTHON_VERSION }}
        uses: codecov/codecov-action@v5
        with:
          files: .cov/coverage.xml
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: "Stop the container"
        if: always()
        run: |
          docker stop ${{ env.STK_CONTAINER }}
          docker logs ${{ env.STK_CONTAINER }}
          docker rm ${{ env.STK_CONTAINER }}

  doc-deploy-dev:
    name: "Deploy dev docs"
    runs-on: ubuntu-latest
    needs: doc-build
    steps:
      - uses: ansys/actions/doc-deploy-dev@v10
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}
          bot-user: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
          bot-email: ${{ secrets.PYANSYS_CI_BOT_EMAIL }}
