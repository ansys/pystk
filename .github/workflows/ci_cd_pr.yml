name: pull-request
on:
  pull_request:
    types: [opened, synchronize, reopened, labeled]

env:
  MAIN_PYTHON_VERSION: '3.10'
  MINIMUM_PYTHON_VERSION: '3.8'
  LIBRARY_NAME: 'ansys-stk-core'
  LIBRARY_NAMESPACE: 'ansys.stk.core'
  DOCUMENTATION_CNAME: 'stk.docs.pyansys.com'
  STK_DOCKER_IMAGE: 'ansys/stk:latest-centos7'
  PYSTK_DIR: '/home/stk/pystk'
  LICENSE_SERVER_PORT: '1055'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

#  labeler:
#    name: "Labels"
#    permissions:
#      contents: read
#      pull-requests: write
#    runs-on: ubuntu-latest
#    steps:
#     - uses: actions/checkout@v4
#
#     - name: "Update labels"
#       uses: micnncim/action-label-syncer@v1
#       env:
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#
#     - name: "Label pull-request"
#       uses: actions/labeler@v5.0.0
#       with:
#        repo-token: ${{ secrets.GITHUB_TOKEN }}
#
#  branch-name-style:
#    name: "Branch style checks"
#    runs-on: ubuntu-latest
#    needs: labeler
#    steps:
#      - uses: ansys/actions/branch-name-style@v5
#
#  code-style:
#    name: "Code style checks"
#    runs-on: ubuntu-latest
#    needs: branch-name-style
#    steps:
#      - uses: ansys/actions/code-style@v5
#        with: 
#          python-version: ${{ env.MAIN_PYTHON_VERSION }}
#
#  doc-style:
#    name: "Doc style checks"
#    runs-on: ubuntu-latest
#    needs: branch-name-style
#    steps:
#      - uses: ansys/actions/doc-style@v5
#        with: 
#          token: ${{ secrets.GITHUB_TOKEN }}

  doc-build:
    name: "Doc build"
    runs-on: ubuntu-latest
#   needs: doc-style
    timeout-minutes: 30
    steps:

      # Render the documentation including or excluding different sections
      # according to the labels of the pull-request.

      - name: "Build docs including the 'Examples' section"
        id: build-doc-with-examples
        uses: ansys/actions/doc-build@v5
        if: |
          contains(github.event.pull_request.labels.*.name, 'docs:examples') &&
          !contains(github.event.pull_request.labels.*.name, 'docs:api')
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
        env:
          BUILD_API: false
          BUILD_EXAMPLES: true

      - name: "Build docs including the 'API' section"
        id: build-doc-with-api
        uses: ansys/actions/doc-build@v5
        if: |
          contains(github.event.pull_request.labels.*.name, 'docs:api') &&
          !contains(github.event.pull_request.labels.*.name, 'docs:examples')
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
        env:
          BUILD_API: true
          BUILD_EXAMPLES: false

      - name: "Build docs excluding 'API' and 'Examples' sections"
        id: build-doc-minimum
        uses: ansys/actions/doc-build@v5
        if: |
          !contains(github.event.pull_request.labels.*.name, 'docs:examples') &&
          !contains(github.event.pull_request.labels.*.name, 'docs:api')
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
        env:
          BUILD_API: false
          BUILD_EXAMPLES: false

      - name: "Build docs including 'API' and 'Examples' sections"
        id: build-doc-full
        uses: ansys/actions/doc-build@v5
        if: |
          contains(github.event.pull_request.labels.*.name, 'docs:examples') &&
          contains(github.event.pull_request.labels.*.name, 'docs:api')
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
        env:
          BUILD_API: true
          BUILD_EXAMPLES: true

      # If required, combine partially rendered documentation with the nightly
      # build artifacts. Upload the generated documentation as an artifact in
      # the CI/CD session.

      - name: "Download latest API docs"
        uses: actions/checkout@v4
        if: steps.build-doc-full.outcome == 'skipped'
        with:
          ref: "gh-pages"
          path: "gh-pages"

      - name: "Include 'API' section from nightly build docs"
        if: |
          steps.build-doc-with-api.outcome == 'success' ||
          steps.build-doc-minimum.outcome == 'success'
        run: |
          cp -r gh-pages/version/dev/api doc/_build/html/api
          cp gh-pages/version/dev/index.html doc/_build/html/index.html

      - name: "Include 'Examples' section from nightly build docs"
        if: |
          steps.build-doc-with-examples.outcome == 'success' ||
          steps.build-doc-minimum.outcome == 'success'
        run: |
          cp gh-pages/version/dev/examples.html doc/_build/html/examples.html
          cp gh-pages/version/dev/index.html doc/_build/html/index.html

      - name: "Upload combined artifacts"
        if: steps.build-doc-full.outcome == 'skipped'
        uses: actions/upload-artifact@v4
        with:
          path: doc/_build/html
          name: full-documentation-html

#  tests:
#    name: "Tests Python ${{ matrix.python }}"
#    runs-on: [self-hosted, pystk]
#    needs: code-style
#    strategy:
#      matrix:
#        # Tests run against Python 3.8 to ensure backwards compatibility with
#        # the lowest supported Python version. Testing against a single version
#        # minimizes the time for CI/CD runs.
#        #
#        # Can not use ${{ env.MINIMUM_PYTHON_VERSION }} because GitHub actions
#        # does not support ENV variable substitution in matrix definition
#        python: ['3.8']
#      fail-fast: false
#    steps:
#
#      - name: "Checkout the project"
#        uses: actions/checkout@v4
#
#      - name: "Generate the name of the docker image and the container"
#        run: |
#          python_image_name=${{ env.STK_DOCKER_IMAGE }}-python${{ matrix.python }}
#          container_name=stk-python${{ matrix.python }}
#          echo "STK_PYTHON_IMAGE=$python_image_name" >> $GITHUB_ENV
#          echo "STK_CONTAINER=$container_name" >> $GITHUB_ENV
#
#      - name: "Start the container from the desired image"
#        run: |
#          docker run \
#            --detach -it \
#            --network="host" \
#            --name ${{ env.STK_CONTAINER }} \
#            --env ANSYSLMD_LICENSE_FILE=${{ env.LICENSE_SERVER_PORT }}@${{ secrets.LICENSE_SERVER }} \
#            --volume ${PWD}:/home/stk/pystk \
#            ${{ env.STK_PYTHON_IMAGE }}
#
#      - name: "Install the project with the testing dependencies"
#        run: |
#          docker exec \
#            --workdir ${{ env.PYSTK_DIR }} \
#            ${{ env.STK_CONTAINER }} /bin/bash -c \
#            "python -m pip install tox && rm -rf .tox"
#
#      - name: "Run the aviator tests"
#        run: |
#          docker exec \
#            --workdir ${{ env.PYSTK_DIR }} \
#            ${{ env.STK_CONTAINER }} /bin/bash -c \
#            "export COVERAGE_FILE=aviator && tox -e tests-aviator-graphics-cov-linux"
#
#      - name: "Run the non graphics stk tests"
#        run: |
#          docker exec \
#            --workdir ${{ env.PYSTK_DIR }} \
#            ${{ env.STK_CONTAINER }} /bin/bash -c \
#            "export COVERAGE_FILE=stknogfx && tox -e tests-stk-nographics-cov-linux"
#
#      - name: "Run the graphics only stk tests"
#        run: |
#          docker exec \
#            --workdir ${{ env.PYSTK_DIR }} \
#            ${{ env.STK_CONTAINER }} /bin/bash -c \
#            "export COVERAGE_FILE=stkgfx && tox -e tests-stk-graphicsonly-cov-linux"
#
#      - name: "Run the vgt tests"
#        run: |
#          docker exec \
#            --workdir ${{ env.PYSTK_DIR }} \
#            ${{ env.STK_CONTAINER }} /bin/bash -c \
#            "export COVERAGE_FILE=vgt && tox -e tests-vgt-graphics-cov-linux"
#
#      - name: "Install coverage dependencies"
#        if: ${{ matrix.python == env.MINIMUM_PYTHON_VERSION }}
#        run: |
#          docker exec \
#            --workdir ${{ env.PYSTK_DIR }} \
#            ${{ env.STK_CONTAINER }} /bin/bash -c \
#            "python -m pip install .[tests]"
#
#      - name: "Combine all coverage results"
#        if: ${{ matrix.python == env.MINIMUM_PYTHON_VERSION }}
#        run: |
#          docker exec \
#            --workdir ${{ env.PYSTK_DIR }} \
#            ${{ env.STK_CONTAINER }} /bin/bash -c \
#            "coverage combine aviator stknogfx stkgfx vgt"
#
#      - name: "Generate total coverage report"
#        if: ${{ matrix.python == env.MINIMUM_PYTHON_VERSION }}
#        run: |
#          docker exec \
#            --workdir ${{ env.PYSTK_DIR }} \
#            ${{ env.STK_CONTAINER }} /bin/bash -c \
#            "coverage html -d .cov/total-html"
#
#      - name: "Upload coverage results"
#        if: ${{ matrix.python == env.MINIMUM_PYTHON_VERSION }}
#        uses: actions/upload-artifact@v4
#        with:
#          path: .cov/total-html
#          name: html-coverage
#
#      - name: "Stop the container"
#        if: always()
#        run: |
#          docker stop ${{ env.STK_CONTAINER }}
#          docker logs ${{ env.STK_CONTAINER }}
#          docker rm ${{ env.STK_CONTAINER }}
#
#  build-library:
#    name: "Build library"
#    runs-on: ubuntu-latest
#    needs: [doc-build, tests]
#    steps:
#      - uses: ansys/actions/build-library@v5
#        with:
#          library-name: ${{ env.LIBRARY_NAME }}
