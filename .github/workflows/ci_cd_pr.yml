name: pull-request
on:
  pull_request:
    types: [opened, synchronize, reopened, labeled]

env:
  MAIN_PYTHON_VERSION: '3.12'
  MINIMUM_PYTHON_VERSION: '3.10'
  LIBRARY_NAME: 'ansys-stk-core'
  LIBRARY_NAMESPACE: 'ansys.stk.core'
  DOCUMENTATION_CNAME: 'stk.docs.pyansys.com'
  STK_DOCKER_IMAGE: 'ansys/stk:dev-ubuntu22.04'
  PYSTK_DIR: '/home/stk/pystk'
  LICENSE_SERVER_PORT: '1055'
  QUARTO_VERSION: '1.5.55'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  authorize-workflow-run:
    name: "Workflow run is approved"
    runs-on: ubuntu-latest
    environment: needs-pystk-approvers
    steps:
      - name: "Only PySTK Approvers team can authorize this workflow run"
        run: |
          echo "Workflow run is authorized"   

  labeler:
    name: "Labels"
    needs: authorize-workflow-run
    permissions:
      contents: read
      pull-requests: write
    runs-on: ubuntu-latest
    if: |
      !contains(github.event.pull_request.labels.*.name, 'ci:skip') &&
      github.event.type != 'labeled'
    steps:
     - uses: actions/checkout@v4

     - name: "Update labels"
       uses: micnncim/action-label-syncer@v1
       env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

     - name: "Label pull-request"
       uses: actions/labeler@v5.0.0
       with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}

  branch-name-style:
    name: "Branch style checks"
    runs-on: ubuntu-latest
    if: |
      !contains(github.event.pull_request.labels.*.name, 'ci:skip') &&
      !contains(github.event.pull_request.labels.*.name, 'style:skip')
    needs: labeler
    steps:
      - uses: ansys/actions/branch-name-style@v7

  code-style:
    name: "Code style checks"
    runs-on: ubuntu-latest
    if: |
      !contains(github.event.pull_request.labels.*.name, 'ci:skip') &&
      !contains(github.event.pull_request.labels.*.name, 'style:skip')
    needs: branch-name-style
    steps:
      - uses: ansys/actions/code-style@v7
        with: 
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

  doc-style:
    name: "Doc style checks"
    runs-on: ubuntu-latest
    if: |
      !contains(github.event.pull_request.labels.*.name, 'ci:skip') &&
      !contains(github.event.pull_request.labels.*.name, 'style:skip')
    needs: branch-name-style
    steps:
      - name: "Checkout project"
        uses: actions/checkout@v4

      - name: "Install jq"
        run: |
          # Used to format Vale input as a JSON-formatted list of files
          sudo apt install -y jq

      - name: "Collect desired files"
        run: |
          # Find all .rst files excluding those in doc/source/api/
          RST_FILES=$(find doc/source -type f -name "*.rst" ! -path "doc/source/api/*")

          # Find all .py files inside the examples/ directory, excluding those with an underscore
          PY_FILES=$(find examples -type f -name "*.py" ! -name "*_*")

          # Combine both file lists and convert them to a JSON array
          # TODO: include Python files too. See Vale issue
          # https://github.com/errata-ai/vale/issues/858
          # VALE_FILES=$(echo -e "$RST_FILES\n$PY_FILES" | jq -R . | jq -s .)
          VALE_FILES=$(echo -e "$RST_FILES" | jq -R . | jq -s .)
          echo "VALE_FILES=$(echo $VALE_FILES)" >> $GITHUB_ENV

      - uses: ansys/actions/doc-style@v7
        with:
          checkout: false
          files: "${{ env.VALE_FILES }}"
          vale-config: doc/.vale.ini
          token: ${{ secrets.GITHUB_TOKEN }}

  build-wheelhouse:
    name: "Build wheelhouse for latest Python versions"
    runs-on: ${{ matrix.os }}
    needs: doc-style
    strategy:
       matrix:
           os: [ubuntu-latest, windows-latest]
           python-version: ['3.10', '3.11', '3.12']
           target: ['all', 'grpc', 'visualization']
    steps:
      - name: "Build a wheelhouse of the Python library"
        uses: ansys/actions/build-wheelhouse@v7.0
        with:
          library-name: ${{ env.LIBRARY_NAME }}
          operating-system: ${{ matrix.os }}
          python-version: ${{ matrix.python-version }}
          target: ${{ matrix.target }}

  doc-build:
    name: "Doc build"
    runs-on: ${{ matrix.runner }}
    # Limitations with one line GitHub actions conditionals forces us to use a
    # matrix strategy. If examples execution is required, a self-hosted runner
    # is selected. Otherwise, a GitHub runner is used.
    strategy:
      matrix:
        runner: [ubuntu-latest, [self-hosted, pystk]]
        needs-self-hosted-runner:
          - ${{ contains(github.event.pull_request.labels.*.name, 'docs:examples') }}
        exclude:
          - needs-self-hosted-runner: false
            runner: [self-hosted, pystk]
          - needs-self-hosted-runner: true
            runner: ubuntu-latest
    if: |
      !contains(github.event.pull_request.labels.*.name, 'ci:skip') &&
      !contains(github.event.pull_request.labels.*.name, 'doc:skip')
    needs: build-wheelhouse
    timeout-minutes: 90
    steps:

      - name: "Checkout the project"
        uses: actions/checkout@v4

      - name: "Download wheelhouse into static path"
        uses: actions/download-artifact@v4
        with:
          path: "doc/source/_static/wheelhouse"
          pattern: "*-wheelhouse-*"

      - name: "Display the wheelhouse layout"
        run: |
          tree doc/source/_static/wheelhouse

      - name: "Generate the name of the Docker image and the container"
        if: |
          contains(github.event.pull_request.labels.*.name, 'docs:examples')
        run: |
          python_image_name=${{ env.STK_DOCKER_IMAGE }}-python${{ env.MAIN_PYTHON_VERSION }}
          container_name=stk-python${{ env.MAIN_PYTHON_VERSION }}
          echo "STK_PYTHON_IMAGE=$python_image_name" >> $GITHUB_ENV
          echo "STK_CONTAINER=$container_name" >> $GITHUB_ENV

      - name: "Start the container from the desired image"
        if: |
          contains(github.event.pull_request.labels.*.name, 'docs:examples')
        run: |
          docker run \
            --detach -it \
            --network="host" \
            --name ${{ env.STK_CONTAINER }} \
            --env ANSYSLMD_LICENSE_FILE=${{ env.LICENSE_SERVER_PORT }}@${{ secrets.LICENSE_SERVER }} \
            --volume ${PWD}:/home/stk/pystk \
            ${{ env.STK_PYTHON_IMAGE }}

      - name: "Install system dependencies required for building examples"
        if: |
          contains(github.event.pull_request.labels.*.name, 'docs:examples')
        run: |
          docker exec \
            --user root \
            --workdir ${{ env.PYSTK_DIR }} \
            ${{ env.STK_CONTAINER }} /bin/bash -c \
            "apt update && apt install -y wget pandoc"

          docker exec \
            --workdir ${{ env.PYSTK_DIR }} \
            ${{ env.STK_CONTAINER }} /bin/bash -c \
            "wget --no-check-certificate https://github.com/quarto-dev/quarto-cli/releases/download/v${{ env.QUARTO_VERSION }}/quarto-${{ env.QUARTO_VERSION }}-linux-amd64.deb"

          docker exec \
            --user root \
            --workdir ${{ env.PYSTK_DIR }} \
            ${{ env.STK_CONTAINER }} /bin/bash -c \
            "dpkg -i quarto-${{ env.QUARTO_VERSION }}-linux-amd64.deb"

          docker exec \
            --workdir ${{ env.PYSTK_DIR }} \
            ${{ env.STK_CONTAINER }} /bin/bash -c \
            "quarto install tinytex"

      - name: "Install Tox in the GitHub runner or the self-hosted runner"
        run: |
          if [[ ${{ contains(github.event.pull_request.labels.*.name, 'docs:examples') }} == "true" ]]; then
            docker exec \
              --workdir ${{ env.PYSTK_DIR }} \
              ${{ env.STK_CONTAINER }} /bin/bash -c \
              "python -m pip install tox && rm -rf .tox"
          else
            python -m pip install tox && rm -rf .tox
          fi

      # Render the documentation including or excluding different sections
      # according to the labels of the pull-request.

      - name: "Build docs including the 'Examples' section"
        id: build-doc-with-examples
        if: |
          contains(github.event.pull_request.labels.*.name, 'docs:examples') &&
          !contains(github.event.pull_request.labels.*.name, 'docs:api')
        run: |
          docker exec \
            --workdir ${{ env.PYSTK_DIR }} \
            ${{ env.STK_CONTAINER }} /bin/bash -c \
            "export BUILD_API=false BUILD_EXAMPLES=true && tox -e doc-links,doc-html"

      - name: "Build docs including the 'API' section"
        id: build-doc-with-api
        if: |
          contains(github.event.pull_request.labels.*.name, 'docs:api') &&
          !contains(github.event.pull_request.labels.*.name, 'docs:examples')
        run: |
            python -m tox -e doc-links,doc-html
        env:
          BUILD_API: true
          BUILD_EXAMPLES: false
      - name: "Build docs excluding 'API' and 'Examples' sections"
        id: build-doc-minimum
        if: |
          !contains(github.event.pull_request.labels.*.name, 'docs:examples') &&
          !contains(github.event.pull_request.labels.*.name, 'docs:api')
        run: |
          python -m tox -e doc-links,doc-html
        env:
          BUILD_API: false
          BUILD_EXAMPLES: false

      - name: "Build docs including 'API' and 'Examples' sections"
        id: build-doc-full
        if: |
          contains(github.event.pull_request.labels.*.name, 'docs:examples') &&
          contains(github.event.pull_request.labels.*.name, 'docs:api')
        run: |
          docker exec \
            --workdir ${{ env.PYSTK_DIR }} \
            ${{ env.STK_CONTAINER }} /bin/bash -c \
            "export BUILD_API=true BUILD_EXAMPLES=true && tox -e doc-links,doc-html"

      # If required, combine partially rendered documentation with the nightly
      # build artifacts. Upload the generated documentation as an artifact in
      # the CI/CD session.

      - name: "Download latest API docs"
        uses: actions/checkout@v4
        if: steps.build-doc-full.outcome == 'skipped'
        with:
          ref: "gh-pages"
          path: "gh-pages"

      - name: "Include 'API' section from nightly build docs"
        if: |
          steps.build-doc-with-examples.outcome == 'success' ||
          steps.build-doc-minimum.outcome == 'success'
        run: |
          cp gh-pages/version/dev/api.html doc/_build/html/api.html
          cp -r gh-pages/version/dev/api doc/_build/html/api
          cp gh-pages/version/dev/index.html doc/_build/html/index.html

      - name: "Include 'Examples' section from nightly build docs"
        if: |
          steps.build-doc-with-api.outcome == 'success' ||
          steps.build-doc-minimum.outcome == 'success'
        run: |
          cp -r gh-pages/version/dev/_images/* doc/_build/html/_images
          cp gh-pages/version/dev/examples.html doc/_build/html/examples.html
          cp -r gh-pages/version/dev/examples doc/_build/html/examples
          cp gh-pages/version/dev/index.html doc/_build/html/index.html

      - name: "Upload HTML documentation artifacts"
        uses: actions/upload-artifact@v4
        with:
          path: doc/_build/html
          name: documentation-html

      - name: "Stop the container"
        if: always()
        run: |
          if [[ ${{ contains(github.event.pull_request.labels.*.name, 'docs:examples') }} == "true" ]]; then
            docker stop ${{ env.STK_CONTAINER }}
            docker logs ${{ env.STK_CONTAINER }}
            docker rm ${{ env.STK_CONTAINER }}
          fi

  tests:
    name: "Tests Python ${{ matrix.python }}"
    runs-on: [self-hosted, pystk]
    if: |
      !contains(github.event.pull_request.labels.*.name, 'ci:skip') &&
      !contains(github.event.pull_request.labels.*.name, 'tests:skip')
    needs: code-style
    strategy:
      matrix:
        # Tests run against Python 3.10 to ensure backwards compatibility with
        # the lowest supported Python version. Testing against a single version
        # minimizes the time for CI/CD runs.
        #
        # Can not use ${{ env.MINIMUM_PYTHON_VERSION }} because GitHub actions
        # does not support ENV variable substitution in matrix definition
        python: ['3.10']
      fail-fast: false
    steps:

      - name: "Checkout the project"
        uses: actions/checkout@v4

      - name: "Generate the name of the docker image and the container"
        run: |
          python_image_name=${{ env.STK_DOCKER_IMAGE }}-python${{ matrix.python }}
          container_name=stk-python${{ matrix.python }}
          echo "STK_PYTHON_IMAGE=$python_image_name" >> $GITHUB_ENV
          echo "STK_CONTAINER=$container_name" >> $GITHUB_ENV

      - name: "Start the container from the desired image"
        run: |
          docker run \
            --detach -it \
            --network="host" \
            --name ${{ env.STK_CONTAINER }} \
            --env ANSYSLMD_LICENSE_FILE=${{ env.LICENSE_SERVER_PORT }}@${{ secrets.LICENSE_SERVER }} \
            --volume ${PWD}:/home/stk/pystk \
            ${{ env.STK_PYTHON_IMAGE }}

      - name: "Install the project with the testing dependencies"
        run: |
          docker exec \
            --workdir ${{ env.PYSTK_DIR }} \
            ${{ env.STK_CONTAINER }} /bin/bash -c \
            "python -m pip install tox && rm -rf .tox"

      - name: "Run the aviator tests"
        run: |
          docker exec \
            --workdir ${{ env.PYSTK_DIR }} \
            ${{ env.STK_CONTAINER }} /bin/bash -c \
            "export COVERAGE_FILE=aviator && tox -e tests-aviator-graphics-cov-linux"

      - name: "Run the non graphics stk tests"
        run: |
          docker exec \
            --workdir ${{ env.PYSTK_DIR }} \
            ${{ env.STK_CONTAINER }} /bin/bash -c \
            "export COVERAGE_FILE=stknogfx && tox -e tests-stk-nographics-cov-linux"

      - name: "Run the graphics only stk tests"
        run: |
          docker exec \
            --workdir ${{ env.PYSTK_DIR }} \
            ${{ env.STK_CONTAINER }} /bin/bash -c \
            "export COVERAGE_FILE=stkgfx && tox -e tests-stk-graphicsonly-cov-linux"

      - name: "Run the vgt tests"
        run: |
          docker exec \
            --workdir ${{ env.PYSTK_DIR }} \
            ${{ env.STK_CONTAINER }} /bin/bash -c \
            "export COVERAGE_FILE=vgt && tox -e tests-vgt-graphics-cov-linux"

      - name: "Install coverage dependencies"
        if: ${{ matrix.python == env.MINIMUM_PYTHON_VERSION }}
        run: |
          docker exec \
            --workdir ${{ env.PYSTK_DIR }} \
            ${{ env.STK_CONTAINER }} /bin/bash -c \
            "python -m pip install .[tests]"

      - name: "Combine all coverage results"
        if: ${{ matrix.python == env.MINIMUM_PYTHON_VERSION }}
        run: |
          docker exec \
            --workdir ${{ env.PYSTK_DIR }} \
            ${{ env.STK_CONTAINER }} /bin/bash -c \
            "coverage combine aviator stknogfx stkgfx vgt"

      - name: "Generate total coverage report"
        if: ${{ matrix.python == env.MINIMUM_PYTHON_VERSION }}
        run: |
          docker exec \
            --workdir ${{ env.PYSTK_DIR }} \
            ${{ env.STK_CONTAINER }} /bin/bash -c \
            "coverage html -d .cov/total-html"

      - name: "Upload coverage results"
        if: ${{ matrix.python == env.MINIMUM_PYTHON_VERSION }}
        uses: actions/upload-artifact@v4
        with:
          path: .cov/total-html
          name: html-coverage

      - name: "Stop the container"
        if: always()
        run: |
          docker stop ${{ env.STK_CONTAINER }}
          docker logs ${{ env.STK_CONTAINER }}
          docker rm ${{ env.STK_CONTAINER }}

  build-library:
    name: "Build library"
    runs-on: ubuntu-latest
    if: |
      !contains(github.event.pull_request.labels.*.name, 'ci:skip')
    needs: [doc-build, tests]
    steps:
      - uses: ansys/actions/build-library@v7
        with:
          library-name: ${{ env.LIBRARY_NAME }}

  merge:
    name: "Merge is approved"
    runs-on: ubuntu-latest
    needs: build-library
    environment: needs-pystk-approvers
    steps:
      - name: "Only PySTK Approvers team can authorize this job"
        run: |
          echo "Merge is authorized"
