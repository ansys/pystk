name: CI
on:
  pull_request:
  push:
    tags:
      - "*"
    branches:
      - main

env:
  MAIN_PYTHON_VERSION: '3.10'
  LIBRARY_NAME: 'ansys-stk-core'
  LIBRARY_NAMESPACE: 'ansys.stk.core'
  DOCUMENTATION_CNAME: 'stk.docs.pyansys.com'


concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  code-style:
    name: "Code style checks"
    runs-on: ubuntu-latest
    steps:
      - name: "Run code style checks"
        uses: pyansys/actions/code-style@v3
        with: 
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

  doc-style:
    name: "Documentation style checks"
    runs-on: ubuntu-latest
    steps:
      - name: "Run code style checks"
        uses: pyansys/actions/doc-style@v3
        with: 
          token: ${{ secrets.GITHUB_TOKEN }}

  doc-build:
    name: "Build project documentation"
    runs-on: ubuntu-latest
    needs: doc-style
    steps:
      - name: "Building project documentation"
        uses: pyansys/actions/doc-build@v3
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

  doc-deploy-dev:
    name: "Deploy developers documentation"
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && contains(github.ref, 'refs/heads/main')
    needs: doc-build
    steps:
      - name: "Deploy development documentation"
        uses: pyansys/actions/doc-deploy-dev@v3
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}

  doc-deploy-stable:
    name: "Deploy stable documentation"
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    needs: doc-deploy-dev
    steps:
      - name: "Deploy stable documentation"
        uses: pyansys/actions/doc-deploy-stable@v3
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}

  tests:
    name: "Test Python ${{ matrix.cfg.python-version }} in ${{ matrix.os }} "
    runs-on: ${{ matrix.os }}
    needs: code-style
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
        cfg:
          - {python-version: '3.7', extra-args: ''}
          - {python-version: '3.8', extra-args: ''}
          - {python-version: '3.9', extra-args: ''}
          - {python-version: '3.10', extra-args: '--cov=ansys.stk --cov-report=term --cov-report=html:.cov/html'}

      fail-fast: false
    steps:

      - name: "Run test suite with pytest"
        uses: pyansys/actions/tests-pytest@v3
        with:
          python-version: ${{ matrix.cfg.python-version }}
          pytest-extra-args: ${{ matrix.cfg.extra-args }}

      - name: "Upload coverage results"
        uses: actions/upload-artifact@v3
        if: matrix.cfg.python-version == env.MAIN_PYTHON_VERSION && matrix.os == 'ubuntu-latest'
        with:
          name: coverage-html
          path: .cov/html
          retention-days: 7

  build-library:
    name: "Build library artifacts"
    runs-on: ubuntu-latest
    needs: [doc-deploy-stable, tests]
    steps:
      - name: "Build library source and wheel artifacts"
        uses: pyansys/actions/build-library@v3
        with:
          library-name: ${{ env.LIBRARY_NAME }}

  # release:
  #   name: "Release to private and public PyPI and to GitHub"
  #   if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
  #   runs-on: ubuntu-latest
  #   needs: [build-library]
  #   steps:

  #     - name: "Release to the private PyPI repository"
  #       uses: pyansys/actions/release-pypi-private@v1
  #       with:
  #         library-name: ${{ env.LIBRARY_NAME }}
  #         twine-username: "__token__"
  #         twine-token: ${{ secrets.PYANSYS_PYPI_PRIVATE_PAT }}

  #     - name: "Release to the public PyPI repository"
  #       uses: pyansys/actions/release-pypi-public@main
  #       with:
  #         library-name: ${{ env.LIBRARY_NAME }}
  #         twine-username: "__token__"
  #         twine-token: ${{ secrets.PYPI_TOKEN }}

  #     - name: "Release to GitHub"
  #       uses: pyansys/actions/release-github@main
  #       with:
  #         library-name: ${{ env.LIBRARY_NAME }}
