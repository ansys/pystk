name: release
on:
  push:
    tags:
      - "v*.*.*"

env:
  MINIMUM_PYTHON_VERSION: '3.11'
  MAIN_PYTHON_VERSION: '3.13'
  ANSYS_STK_CORE: 'ansys-stk-core'
  ANSYS_STK_EXTENSIONS: 'ansys-stk-extensions'
  DOCUMENTATION_CNAME: 'stk.docs.pyansys.com'
  STK_DOCKER_IMAGE: 'ansys/stk-12.10:dev-ubuntu22.04'
  PYSTK_DIR: '/home/stk/pystk'
  LICENSE_SERVER_PORT: '1055'
  QUARTO_VERSION: '1.5.55'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  update-changelog:
    name: "Update changelog"
    if: contains(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: ansys/actions/doc-deploy-changelog@v9
        with:
          token: ${{ secrets.PYANSYS_CI_BOT_TOKEN }}
          bot-user: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
          bot-email: ${{ secrets.PYANSYS_CI_BOT_EMAIL }}

  code-style:
    name: "Code style checks"
    runs-on: ubuntu-latest
    steps:
      - name: "Run code style checks"
        uses: ansys/actions/code-style@v9
        with: 
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

  doc-style:
    name: "Doc style checks"
    runs-on: ubuntu-latest
    if: |
      !contains(github.event.pull_request.labels.*.name, 'ci:skip') &&
      !contains(github.event.pull_request.labels.*.name, 'style:skip')
    steps:
      - name: "Checkout project"
        uses: actions/checkout@v4

      - name: "Install jq"
        run: |
          # Used to format Vale input as a JSON-formatted list of files
          sudo apt install -y jq

      - name: "Collect desired files"
        run: |
          # Find all .rst files excluding those in doc/source/api/
          RST_FILES=$(find doc/source -type f -name "*.rst" ! -path "doc/source/api/*")
          
          # Find all .py files inside the examples/ directory, excluding those with an underscore
          PY_FILES=$(find examples -type f -name "*.py" ! -name "*_*")
          
          # Combine both file lists and convert them to a JSON array
          # TODO: include Python files too. See Vale issue
          # https://github.com/errata-ai/vale/issues/858
          # VALE_FILES=$(echo -e "$RST_FILES\n$PY_FILES" | jq -R . | jq -s .)
          VALE_FILES=$(echo -e "$RST_FILES" | jq -R . | jq -s .)
          echo "VALE_FILES=$(echo $VALE_FILES)" >> $GITHUB_ENV

      - uses: ansys/actions/doc-style@v9
        with: 
          checkout: false
          files: "${{ env.VALE_FILES }}"
          vale-config: doc/.vale.ini
          token: ${{ secrets.GITHUB_TOKEN }}
          fail-level: "warning"

  build-wheelhouse-core:
    name: "Wheelhouse ansys-stk-core / ${{ matrix.os }} / ${{ matrix.python-version }} / ${{ matrix.target }}"
    runs-on: ${{ matrix.os }}
    needs: [code-style, doc-style]
    permissions:
      attestations: write
      contents: read
      id-token: write
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.11', '3.12', '3.13']
        target: ['all', 'grpc', 'jupyter']
    steps:
      - uses: ansys/actions/build-wheelhouse@v9
        with:
          library-name: ${{ env.ANSYS_STK_CORE }}
          operating-system: ${{ matrix.os }}
          python-version: ${{ matrix.python-version }}
          target: ${{ matrix.target }}
          attest-provenance: true

  build-wheelhouse-extensions:
    name: "Wheelhouse ansys-stk-extensions / ${{ matrix.os }} / ${{ matrix.python-version }}"
    runs-on: ${{ matrix.os }}
    needs: [code-style, doc-style]
    permissions:
      attestations: write
      contents: read
      id-token: write
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.11', '3.12', '3.13']
    steps:
      - uses: ansys/actions/build-wheelhouse@v9
        with:
          library-name: ${{ env.ANSYS_STK_EXTENSIONS }}
          operating-system: ${{ matrix.os }}
          python-version: ${{ matrix.python-version }}
          attest-provenance: true
          working-directory: ./extensions

  doc-build:
    name: "Doc build"
    runs-on: [self-hosted, pystk]
    needs: [build-wheelhouse-core, build-wheelhouse-extensions]
    timeout-minutes: 90
    steps:

      - name: "Checkout the project"
        uses: actions/checkout@v4

      - name: "Generate the name of the Docker image and the container"
        run: |
          python_image_name=${{ env.STK_DOCKER_IMAGE }}-python${{ env.MAIN_PYTHON_VERSION }}
          container_name=stk-python${{ env.MAIN_PYTHON_VERSION }}
          echo "STK_PYTHON_IMAGE=$python_image_name" >> $GITHUB_ENV
          echo "STK_CONTAINER=$container_name" >> $GITHUB_ENV

      - name: "Start the container from the desired image"
        run: |
          docker run \
            --detach -it \
            --network="host" \
            --name ${{ env.STK_CONTAINER }} \
            --env ANSYSLMD_LICENSE_FILE=${{ env.LICENSE_SERVER_PORT }}@${{ secrets.LICENSE_SERVER }} \
            --volume ${PWD}:/home/stk/pystk \
            ${{ env.STK_PYTHON_IMAGE }}

      - name: "Install system dependencies required for building examples"
        run: |
          docker exec \
            --user root \
            --workdir ${{ env.PYSTK_DIR }} \
            ${{ env.STK_CONTAINER }} /bin/bash -c \
            "apt update && apt install -y wget pandoc"

          docker exec \
            --workdir ${{ env.PYSTK_DIR }} \
            ${{ env.STK_CONTAINER }} /bin/bash -c \
            "wget --no-check-certificate https://github.com/quarto-dev/quarto-cli/releases/download/v${{ env.QUARTO_VERSION }}/quarto-${{ env.QUARTO_VERSION }}-linux-amd64.deb"

          docker exec \
            --user root \
            --workdir ${{ env.PYSTK_DIR }} \
            ${{ env.STK_CONTAINER }} /bin/bash -c \
            "dpkg -i quarto-${{ env.QUARTO_VERSION }}-linux-amd64.deb"

          docker exec \
            --workdir ${{ env.PYSTK_DIR }} \
            ${{ env.STK_CONTAINER }} /bin/bash -c \
            "quarto install tinytex"

      - name: "Install Tox"
        run: |
          docker exec \
            --workdir ${{ env.PYSTK_DIR }} \
            ${{ env.STK_CONTAINER }} /bin/bash -c \
            "python -m pip install tox && rm -rf .tox"

      - name: "Build the full documentation"
        run: |
          docker exec \
            --workdir ${{ env.PYSTK_DIR }} \
            ${{ env.STK_CONTAINER }} /bin/bash -c \
            "export BUILD_API=true BUILD_EXAMPLES=true && tox -e doc-links,doc-html"

      - name: "Upload HTML documentation artifacts"
        uses: actions/upload-artifact@v4
        with:
          path: doc/_build/html
          name: documentation-html

      - name: "Stop the container"
        if: always()
        run: |
          docker stop ${{ env.STK_CONTAINER }}
          docker logs ${{ env.STK_CONTAINER }}
          docker rm ${{ env.STK_CONTAINER }}

  tests:
    name: "Tests Python ${{ matrix.python }}"
    runs-on: [self-hosted, pystk]
    needs: code-style
    strategy:
      matrix:
        # TODO: restore support for Python 3.13
        # https://github.com/ansys-internal/pystk/issues/557
        python: ["3.11", "3.12"]
      fail-fast: false
    steps:

      - name: "Checkout the project"
        uses: actions/checkout@v4

      - name: "Generate the name of the docker image and the container"
        run: |
          python_image_name=${{ env.STK_DOCKER_IMAGE }}-python${{ matrix.python }}
          container_name=stk-python${{ matrix.python }}
          echo "STK_PYTHON_IMAGE=$python_image_name" >> $GITHUB_ENV
          echo "STK_CONTAINER=$container_name" >> $GITHUB_ENV

      - name: "Start the container from the desired image"
        run: |
          docker run \
            --detach -it \
            --network="host" \
            --name ${{ env.STK_CONTAINER }} \
            --env ANSYSLMD_LICENSE_FILE=${{ env.LICENSE_SERVER_PORT }}@${{ secrets.LICENSE_SERVER }} \
            --volume ${PWD}:/home/stk/pystk \
            ${{ env.STK_PYTHON_IMAGE }}

      - name: "Install the project with the testing dependencies"
        run: |
          docker exec \
            --workdir ${{ env.PYSTK_DIR }} \
            ${{ env.STK_CONTAINER }} /bin/bash -c \
            "python -m pip install tox && rm -rf .tox"

      - name: "Install coverage dependencies"
        run: |
          docker exec \
            --workdir ${{ env.PYSTK_DIR }} \
            ${{ env.STK_CONTAINER }} /bin/bash -c \
            "python -m pip install .[tests]"

      # PySTK Extensions

      - name: "Run the extension tests"
        run: |
          docker exec \
            --workdir ${{ env.PYSTK_DIR }} \
            ${{ env.STK_CONTAINER }} /bin/bash -c \
            "export COVERAGE_FILE=.cov/extensions && tox -e tests-extensions-cov"

      - name: "Generate coverage report for ${{ env.ANSYS_STK_EXTENSIONS }}"
        run: |
          docker exec \
            --workdir ${{ env.PYSTK_DIR }} \
            ${{ env.STK_CONTAINER }} /bin/bash -c \
            "coverage html --rcfile ./extensions/pyproject.toml --data-file=.cov/extensions --directory=.cov/${{ env.ANSYS_STK_EXTENSIONS }}-coverage --fail-under=90"

      - name: "Upload ${{ env.ANSYS_STK_EXTENSIONS }} coverage results"
        if: ${{ matrix.python == env.MINIMUM_PYTHON_VERSION }}
        uses: actions/upload-artifact@v4
        with:
          path: .cov/${{ env.ANSYS_STK_EXTENSIONS }}-coverage
          name: ${{ env.ANSYS_STK_EXTENSIONS }}-coverage

      - name: "Clean coverage results"
        run: |
          rm -rf .cov && mkdir .cov

      # -- PySTK Core

      - name: "Run the API migration assistant tests"
        run: |
          docker exec \
            --workdir ${{ env.PYSTK_DIR }} \
            ${{ env.STK_CONTAINER }} /bin/bash -c \
            "export COVERAGE_FILE=.cov/migration && tox -e tests-core-migration-graphics-cov-linux"

      - name: "Run the aviator tests"
        run: |
          docker exec \
            --workdir ${{ env.PYSTK_DIR }} \
            ${{ env.STK_CONTAINER }} /bin/bash -c \
            "export COVERAGE_FILE=.cov/aviator && tox -e tests-core-aviator-graphics-cov-linux"

      - name: "Run the non graphics stk tests"
        run: |
          docker exec \
            --workdir ${{ env.PYSTK_DIR }} \
            ${{ env.STK_CONTAINER }} /bin/bash -c \
            "export COVERAGE_FILE=.cov/stknogfx && tox -e tests-core-stk-nographics-cov-linux"

      - name: "Run the graphics only stk tests"
        run: |
          docker exec \
            --workdir ${{ env.PYSTK_DIR }} \
            ${{ env.STK_CONTAINER }} /bin/bash -c \
            "export COVERAGE_FILE=.cov/stkgfx && tox -e tests-core-stk-graphicsonly-cov-linux"

      - name: "Run the vgt tests"
        run: |
          docker exec \
            --workdir ${{ env.PYSTK_DIR }} \
            ${{ env.STK_CONTAINER }} /bin/bash -c \
            "export COVERAGE_FILE=.cov/vgt && tox -e tests-core-vgt-graphics-cov-linux"

      - name: "Run the doc snippet tests"
        run: |
          docker exec \
            --workdir ${{ env.PYSTK_DIR }} \
            ${{ env.STK_CONTAINER }} /bin/bash -c \
            "export COVERAGE_FILE=.cov/snippets && tox -e tests-core-snippets-graphics-cov-linux"

      - name: "Combine all coverage results"
        if: ${{ matrix.python == env.MINIMUM_PYTHON_VERSION }}
        run: |
          docker exec \
            --workdir ${{ env.PYSTK_DIR }}/.cov \
            ${{ env.STK_CONTAINER }} /bin/bash -c \
            "export COVERAGE_FILE=core && coverage combine aviator stknogfx stkgfx vgt snippets migration"

      - name: "Generate coverage report for ${{ env.ANSYS_STK_CORE }}"
        if: ${{ matrix.python == env.MINIMUM_PYTHON_VERSION }}
        run: |
          docker exec \
            --workdir ${{ env.PYSTK_DIR }} \
            ${{ env.STK_CONTAINER }} /bin/bash -c \
            "coverage html --rcfile pyproject.toml --data-file=.cov/core --directory=.cov/${{ env.ANSYS_STK_CORE }}-coverage --fail-under=89"

      - name: "Upload ${{ env.ANSYS_STK_CORE }} coverage results"
        if: ${{ matrix.python == env.MINIMUM_PYTHON_VERSION }}
        uses: actions/upload-artifact@v4
        with:
          path: .cov/${{ env.ANSYS_STK_CORE }}-coverage
          name: ${{ env.ANSYS_STK_CORE }}-coverage

      - name: "Stop the container"
        if: always()
        run: |
          docker stop ${{ env.STK_CONTAINER }}
          docker logs ${{ env.STK_CONTAINER }}
          docker rm ${{ env.STK_CONTAINER }}

  build-libraries:
    name: "Build ${{ matrix.library.name }} library"
    runs-on: ubuntu-latest
    needs: [doc-build, tests]
    strategy:
      matrix:
        library:
          - {"name": "ansys-stk-core", "directory": "."}
          - {"name": "ansys-stk-extensions", "directory": "extensions"}
      fail-fast: false
    permissions:
      attestations: write
      contents: read
      id-token: write
    steps:
      - uses: ansys/actions/build-library@v9
        with:
          library-name: ${{ matrix.library.name }}
          working-directory: ${{ matrix.library.directory }}
          attest-provenance: true

  release-private-pypi:
    name: "Release ${{ matrix.library }} to private PyPI"
    needs: build-libraries
    runs-on: ubuntu-latest
    environment: release
    permissions:
      id-token: write
      contents: write
    strategy:
      fail-fast: false
      matrix:
        # HACK: can reference environment variables in matrix strategy
        library: ['ansys-stk-core', 'ansys-stk-extensions']
    steps:
      - name: "Release ${{ matrix.library }} to private PyPI index"
        uses: ansys/actions/release-pypi-private@v9
        with:
          library-name: ${{ matrix.library-name }}
          twine-token: ${{ secrets.PYANSYS_PYPI_PRIVATE_PAT }}

  release-github:
    name: "Release to GitHub"
    needs: release-private-pypi
    runs-on: ubuntu-latest
    environment: release
    permissions:
      attestations: write
      contents: write
      id-token: write
    steps:
      - uses: ansys/actions/release-github@v9
        with:
          additional-artifacts: "${{ env.ANSYS_STK_EXTENSIONS }}-artifacts"
          add-artifact-attestation-notes: true
          changelog-release-notes: true
          generate-release-notes: false
          token: ${{ secrets.GITHUB_TOKEN }}
          only-code: true

  doc-deploy-stable:
    name: Deploy stable documentation
    runs-on: ubuntu-latest
    needs: [release-github]
    steps:
      - uses: ansys/actions/doc-deploy-stable@v9
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}
          bot-user: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
          bot-email: ${{ secrets.PYANSYS_CI_BOT_EMAIL }}
